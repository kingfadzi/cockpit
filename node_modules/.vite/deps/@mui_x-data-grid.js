import {
  Autocomplete_default,
  Badge_default,
  Button_default,
  Checkbox_default,
  Chip_default,
  CircularProgress_default,
  ClickAwayListener,
  Divider_default,
  FocusTrap_default,
  FormControlLabel_default,
  FormControl_default,
  Grow_default,
  IconButton_default,
  InputAdornment_default,
  InputBase_default,
  InputLabel_default,
  LinearProgress_default,
  ListItemIcon_default,
  ListItemText_default,
  MenuItem_default,
  MenuList_default,
  Paper_default,
  Popper_default,
  Select_default,
  Skeleton_default,
  Switch_default,
  Tab_default,
  TablePagination_default,
  Tabs_default,
  TextField_default,
  ToggleButton_default,
  Tooltip_default,
  formControlLabelClasses_default,
  iconButtonClasses_default,
  inputAdornmentClasses_default,
  inputBaseClasses_default,
  listItemTextClasses_default,
  tablePaginationClasses_default
} from "./chunk-ETMG3Q4O.js";
import {
  require_react_dom
} from "./chunk-276SZO74.js";
import {
  createSvgIcon,
  init_utils
} from "./chunk-OWFZNTKD.js";
import {
  alpha,
  darken,
  lighten,
  toPropertyKey,
  useTheme
} from "./chunk-Z7DDTLGL.js";
import {
  CacheProvider,
  Global,
  StyleSheet,
  ThemeContext,
  _extends,
  _objectWithoutPropertiesLoose,
  clsx_default,
  createCache,
  init_clsx,
  init_emotion_cache_browser_development_esm,
  init_emotion_react_browser_development_esm,
  init_emotion_serialize_development_esm,
  init_emotion_sheet_development_esm,
  init_emotion_styled_browser_development_esm,
  init_extends,
  init_objectWithoutPropertiesLoose,
  keyframes,
  require_prop_types,
  require_react_is,
  serializeStyles,
  styled,
  styled_default
} from "./chunk-QHSBQ7JG.js";
import {
  require_jsx_runtime
} from "./chunk-CRNJR6QK.js";
import {
  require_react
} from "./chunk-ZMLY2J2T.js";
import {
  __commonJS,
  __publicField,
  __toESM
} from "./chunk-4B2QHNJT.js";

// node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js
var require_use_sync_external_store_shim_development = __commonJS({
  "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js"(exports) {
    "use strict";
    (function() {
      function is2(x, y) {
        return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
      }
      function useSyncExternalStore$2(subscribe, getSnapshot) {
        didWarnOld18Alpha || void 0 === React215.startTransition || (didWarnOld18Alpha = true, console.error(
          "You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release."
        ));
        var value = getSnapshot();
        if (!didWarnUncachedGetSnapshot) {
          var cachedValue = getSnapshot();
          objectIs(value, cachedValue) || (console.error(
            "The result of getSnapshot should be cached to avoid an infinite loop"
          ), didWarnUncachedGetSnapshot = true);
        }
        cachedValue = useState32({
          inst: { value, getSnapshot }
        });
        var inst = cachedValue[0].inst, forceUpdate = cachedValue[1];
        useLayoutEffect10(
          function() {
            inst.value = value;
            inst.getSnapshot = getSnapshot;
            checkIfSnapshotChanged(inst) && forceUpdate({ inst });
          },
          [subscribe, value, getSnapshot]
        );
        useEffect59(
          function() {
            checkIfSnapshotChanged(inst) && forceUpdate({ inst });
            return subscribe(function() {
              checkIfSnapshotChanged(inst) && forceUpdate({ inst });
            });
          },
          [subscribe]
        );
        useDebugValue3(value);
        return value;
      }
      function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        inst = inst.value;
        try {
          var nextValue = latestGetSnapshot();
          return !objectIs(inst, nextValue);
        } catch (error) {
          return true;
        }
      }
      function useSyncExternalStore$1(subscribe, getSnapshot) {
        return getSnapshot();
      }
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
      var React215 = require_react(), objectIs = "function" === typeof Object.is ? Object.is : is2, useState32 = React215.useState, useEffect59 = React215.useEffect, useLayoutEffect10 = React215.useLayoutEffect, useDebugValue3 = React215.useDebugValue, didWarnOld18Alpha = false, didWarnUncachedGetSnapshot = false, shim = "undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement ? useSyncExternalStore$1 : useSyncExternalStore$2;
      exports.useSyncExternalStore = void 0 !== React215.useSyncExternalStore ? React215.useSyncExternalStore : shim;
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
    })();
  }
});

// node_modules/use-sync-external-store/shim/index.js
var require_shim = __commonJS({
  "node_modules/use-sync-external-store/shim/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_use_sync_external_store_shim_development();
    }
  }
});

// node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js
var require_with_selector_development = __commonJS({
  "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js"(exports) {
    "use strict";
    (function() {
      function is2(x, y) {
        return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
      }
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
      var React215 = require_react(), shim = require_shim(), objectIs = "function" === typeof Object.is ? Object.is : is2, useSyncExternalStore3 = shim.useSyncExternalStore, useRef69 = React215.useRef, useEffect59 = React215.useEffect, useMemo41 = React215.useMemo, useDebugValue3 = React215.useDebugValue;
      exports.useSyncExternalStoreWithSelector = function(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {
        var instRef = useRef69(null);
        if (null === instRef.current) {
          var inst = { hasValue: false, value: null };
          instRef.current = inst;
        } else inst = instRef.current;
        instRef = useMemo41(
          function() {
            function memoizedSelector(nextSnapshot) {
              if (!hasMemo) {
                hasMemo = true;
                memoizedSnapshot = nextSnapshot;
                nextSnapshot = selector(nextSnapshot);
                if (void 0 !== isEqual && inst.hasValue) {
                  var currentSelection = inst.value;
                  if (isEqual(currentSelection, nextSnapshot))
                    return memoizedSelection = currentSelection;
                }
                return memoizedSelection = nextSnapshot;
              }
              currentSelection = memoizedSelection;
              if (objectIs(memoizedSnapshot, nextSnapshot))
                return currentSelection;
              var nextSelection = selector(nextSnapshot);
              if (void 0 !== isEqual && isEqual(currentSelection, nextSelection))
                return memoizedSnapshot = nextSnapshot, currentSelection;
              memoizedSnapshot = nextSnapshot;
              return memoizedSelection = nextSelection;
            }
            var hasMemo = false, memoizedSnapshot, memoizedSelection, maybeGetServerSnapshot = void 0 === getServerSnapshot ? null : getServerSnapshot;
            return [
              function() {
                return memoizedSelector(getSnapshot());
              },
              null === maybeGetServerSnapshot ? void 0 : function() {
                return memoizedSelector(maybeGetServerSnapshot());
              }
            ];
          },
          [getSnapshot, getServerSnapshot, selector, isEqual]
        );
        var value = useSyncExternalStore3(subscribe, instRef[0], instRef[1]);
        useEffect59(
          function() {
            inst.hasValue = true;
            inst.value = value;
          },
          [value]
        );
        useDebugValue3(value);
        return value;
      };
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
    })();
  }
});

// node_modules/use-sync-external-store/shim/with-selector.js
var require_with_selector = __commonJS({
  "node_modules/use-sync-external-store/shim/with-selector.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_with_selector_development();
    }
  }
});

// node_modules/@mui/x-data-grid/esm/material/index.js
init_extends();
init_objectWithoutPropertiesLoose();
var React14 = __toESM(require_react(), 1);
init_clsx();

// node_modules/@mui/x-data-grid/node_modules/@mui/utils/esm/useForkRef/useForkRef.js
var React = __toESM(require_react(), 1);
function useForkRef(...refs) {
  const cleanupRef = React.useRef(void 0);
  const refEffect = React.useCallback((instance) => {
    const cleanups = refs.map((ref) => {
      if (ref == null) {
        return null;
      }
      if (typeof ref === "function") {
        const refCallback = ref;
        const refCleanup = refCallback(instance);
        return typeof refCleanup === "function" ? refCleanup : () => {
          refCallback(null);
        };
      }
      ref.current = instance;
      return () => {
        ref.current = null;
      };
    });
    return () => {
      cleanups.forEach((refCleanup) => refCleanup == null ? void 0 : refCleanup());
    };
  }, refs);
  return React.useMemo(() => {
    if (refs.every((ref) => ref == null)) {
      return null;
    }
    return (value) => {
      if (cleanupRef.current) {
        cleanupRef.current();
        cleanupRef.current = void 0;
      }
      if (value != null) {
        cleanupRef.current = refEffect(value);
      }
    };
  }, refs);
}

// node_modules/@mui/x-data-grid/node_modules/@mui/utils/esm/useEventCallback/useEventCallback.js
var React3 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/node_modules/@mui/utils/esm/useEnhancedEffect/useEnhancedEffect.js
var React2 = __toESM(require_react(), 1);
var useEnhancedEffect = typeof window !== "undefined" ? React2.useLayoutEffect : React2.useEffect;
var useEnhancedEffect_default = useEnhancedEffect;

// node_modules/@mui/x-data-grid/node_modules/@mui/utils/esm/useEventCallback/useEventCallback.js
function useEventCallback(fn) {
  const ref = React3.useRef(fn);
  useEnhancedEffect_default(() => {
    ref.current = fn;
  });
  return React3.useRef((...args) => (
    // @ts-expect-error hide `this`
    (0, ref.current)(...args)
  )).current;
}
var useEventCallback_default = useEventCallback;

// node_modules/@mui/x-data-grid/node_modules/@mui/x-internals/esm/forwardRef/forwardRef.js
var React5 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/node_modules/@mui/x-internals/esm/reactMajor/index.js
var React4 = __toESM(require_react(), 1);
var reactMajor_default = parseInt(React4.version, 10);

// node_modules/@mui/x-data-grid/node_modules/@mui/x-internals/esm/forwardRef/forwardRef.js
var forwardRef2 = (render) => {
  if (reactMajor_default >= 19) {
    const Component = (props) => render(props, props.ref ?? null);
    Component.displayName = render.displayName ?? render.name;
    return Component;
  }
  return React5.forwardRef(render);
};
if (true) forwardRef2.displayName = "forwardRef";

// node_modules/@mui/x-data-grid/node_modules/@mui/utils/esm/useId/useId.js
var React6 = __toESM(require_react(), 1);
var globalId = 0;
function useGlobalId(idOverride) {
  const [defaultId, setDefaultId] = React6.useState(idOverride);
  const id = idOverride || defaultId;
  React6.useEffect(() => {
    if (defaultId == null) {
      globalId += 1;
      setDefaultId(`mui-${globalId}`);
    }
  }, [defaultId]);
  return id;
}
var safeReact = {
  ...React6
};
var maybeReactUseId = safeReact.useId;
function useId(idOverride) {
  if (maybeReactUseId !== void 0) {
    const reactId = maybeReactUseId();
    return idOverride ?? reactId;
  }
  return useGlobalId(idOverride);
}

// node_modules/@mui/x-data-grid/esm/material/icons/index.js
var React7 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/esm/material/icons/createSvgIcon.js
init_utils();
var createSvgIcon2 = createSvgIcon;

// node_modules/@mui/x-data-grid/esm/material/icons/index.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var GridArrowUpwardIcon = createSvgIcon2((0, import_jsx_runtime.jsx)("path", {
  d: "M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z"
}), "ArrowUpward");
var GridArrowDownwardIcon = createSvgIcon2((0, import_jsx_runtime.jsx)("path", {
  d: "M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"
}), "ArrowDownward");
var GridKeyboardArrowRight = createSvgIcon2((0, import_jsx_runtime.jsx)("path", {
  d: "M8.59 16.59 13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"
}), "KeyboardArrowRight");
var GridExpandMoreIcon = createSvgIcon2((0, import_jsx_runtime.jsx)("path", {
  d: "M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z"
}), "ExpandMore");
var GridFilterListIcon = createSvgIcon2((0, import_jsx_runtime.jsx)("path", {
  d: "M10 18h4v-2h-4v2zM3 6v2h18V6H3zm3 7h12v-2H6v2z"
}), "FilterList");
var GridFilterAltIcon = createSvgIcon2((0, import_jsx_runtime.jsx)("path", {
  d: "M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61z"
}), "FilterAlt");
var GridSearchIcon = createSvgIcon2((0, import_jsx_runtime.jsx)("path", {
  d: "M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"
}), "Search");
var GridMenuIcon = createSvgIcon2((0, import_jsx_runtime.jsx)("path", {
  d: "M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"
}), "Menu");
var GridCheckCircleIcon = createSvgIcon2((0, import_jsx_runtime.jsx)("path", {
  d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
}), "CheckCircle");
var GridColumnIcon = createSvgIcon2((0, import_jsx_runtime.jsx)("path", {
  d: "M14.67 5v14H9.33V5zm1 14H21V5h-5.33zm-7.34 0V5H3v14z"
}), "ColumnIcon");
var GridSeparatorIcon = createSvgIcon2((0, import_jsx_runtime.jsx)("rect", {
  width: "1",
  height: "24",
  x: "11.5",
  rx: "0.5"
}), "Separator");
var GridViewHeadlineIcon = createSvgIcon2((0, import_jsx_runtime.jsx)("path", {
  d: "M4 15h16v-2H4v2zm0 4h16v-2H4v2zm0-8h16V9H4v2zm0-6v2h16V5H4z"
}), "ViewHeadline");
var GridTableRowsIcon = createSvgIcon2((0, import_jsx_runtime.jsx)("path", {
  d: "M21,8H3V4h18V8z M21,10H3v4h18V10z M21,16H3v4h18V16z"
}), "TableRows");
var GridViewStreamIcon = createSvgIcon2((0, import_jsx_runtime.jsx)("path", {
  d: "M4 18h17v-6H4v6zM4 5v6h17V5H4z"
}), "ViewStream");
var GridTripleDotsVerticalIcon = createSvgIcon2((0, import_jsx_runtime.jsx)("path", {
  d: "M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
}), "TripleDotsVertical");
var GridCloseIcon = createSvgIcon2((0, import_jsx_runtime.jsx)("path", {
  d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
}), "Close");
var GridAddIcon = createSvgIcon2((0, import_jsx_runtime.jsx)("path", {
  d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
}), "Add");
var GridRemoveIcon = createSvgIcon2((0, import_jsx_runtime.jsx)("path", {
  d: "M19 13H5v-2h14v2z"
}), "Remove");
var GridLoadIcon = createSvgIcon2((0, import_jsx_runtime.jsx)("path", {
  d: "M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z"
}), "Load");
var GridDragIcon = createSvgIcon2((0, import_jsx_runtime.jsx)("path", {
  d: "M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
}), "Drag");
var GridCheckIcon = createSvgIcon2((0, import_jsx_runtime.jsx)("path", {
  d: "M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"
}), "Check");
var GridMoreVertIcon = createSvgIcon2((0, import_jsx_runtime.jsx)("path", {
  d: "M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
}), "MoreVert");
var GridVisibilityOffIcon = createSvgIcon2((0, import_jsx_runtime.jsx)("path", {
  d: "M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z"
}), "VisibilityOff");
var GridViewColumnIcon = createSvgIcon2((0, import_jsx_runtime.jsx)("g", {
  children: (0, import_jsx_runtime.jsx)("path", {
    d: "M14.67,5v14H9.33V5H14.67z M15.67,19H21V5h-5.33V19z M8.33,19V5H3v14H8.33z"
  })
}), "ViewColumn");
var GridClearIcon = createSvgIcon2((0, import_jsx_runtime.jsx)("path", {
  d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2m5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12z"
}), "Clear");
var GridDeleteIcon = createSvgIcon2((0, import_jsx_runtime.jsx)("path", {
  d: "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"
}), "Delete");
var GridDeleteForeverIcon = createSvgIcon2((0, import_jsx_runtime.jsx)("path", {
  d: "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z"
}), "Delete");
var GridDownloadIcon = createSvgIcon2((0, import_jsx_runtime.jsx)("path", {
  d: "M5 20h14v-2H5zM19 9h-4V3H9v6H5l7 7z"
}), "Download");

// node_modules/@mui/x-data-grid/esm/components/GridColumnUnsortedIcon.js
init_extends();
init_objectWithoutPropertiesLoose();
var React10 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/esm/hooks/utils/useGridRootProps.js
var React9 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/esm/context/GridRootPropsContext.js
var React8 = __toESM(require_react(), 1);
var GridRootPropsContext = React8.createContext(void 0);
if (true) GridRootPropsContext.displayName = "GridRootPropsContext";

// node_modules/@mui/x-data-grid/esm/hooks/utils/useGridRootProps.js
var useGridRootProps = () => {
  const contextValue = React9.useContext(GridRootPropsContext);
  if (!contextValue) {
    throw new Error("MUI X: useGridRootProps should only be used inside the DataGrid, DataGridPro or DataGridPremium component.");
  }
  return contextValue;
};

// node_modules/@mui/x-data-grid/esm/components/GridColumnUnsortedIcon.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var _excluded = ["sortingOrder"];
var GridColumnUnsortedIcon = React10.memo(function GridColumnHeaderSortIcon(props) {
  const {
    sortingOrder
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const rootProps = useGridRootProps();
  const [nextSortDirection] = sortingOrder;
  const Icon = nextSortDirection === "asc" ? rootProps.slots.columnSortedAscendingIcon : rootProps.slots.columnSortedDescendingIcon;
  return Icon ? (0, import_jsx_runtime2.jsx)(Icon, _extends({}, other)) : null;
});
if (true) GridColumnUnsortedIcon.displayName = "GridColumnUnsortedIcon";

// node_modules/@mui/x-data-grid/esm/hooks/utils/useGridApiContext.js
var React12 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/esm/components/GridApiContext.js
var React11 = __toESM(require_react(), 1);
var GridApiContext = React11.createContext(void 0);
if (true) GridApiContext.displayName = "GridApiContext";

// node_modules/@mui/x-data-grid/esm/hooks/utils/useGridApiContext.js
function useGridApiContext() {
  const apiRef = React12.useContext(GridApiContext);
  if (apiRef === void 0) {
    throw new Error(["MUI X: Could not find the Data Grid context.", "It looks like you rendered your component outside of a DataGrid, DataGridPro or DataGridPremium parent component.", "This can also happen if you are bundling multiple versions of the Data Grid."].join("\n"));
  }
  return apiRef;
}

// node_modules/@mui/x-data-grid/esm/material/index.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);

// node_modules/@mui/x-data-grid/esm/material/variables.js
var React13 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/node_modules/@mui/x-internals/esm/hash/hash.js
var encoder = new TextEncoder();
var bufferLength = 2 * 1024;
var buffer = new ArrayBuffer(bufferLength);
var uint8View = new Uint8Array(buffer);
var int32View = new Int32Array(buffer);
var hash = xxh;
function xxh(input) {
  const requiredLength = input.length * 2;
  if (requiredLength > bufferLength) {
    bufferLength = requiredLength + (4 - requiredLength % 4);
    buffer = new ArrayBuffer(bufferLength);
    uint8View = new Uint8Array(buffer);
    int32View = new Int32Array(buffer);
  }
  const length8 = encoder.encodeInto(input, uint8View).written;
  const seed = 0;
  const len = length8 | 0;
  let i = 0;
  let h = (seed + len | 0) + 374761393 | 0;
  if (len < 16) {
    for (; (i + 3 | 0) < len; i = i + 4 | 0) {
      h = Math.imul(rotl32(h + Math.imul(int32View[i] | 0, 3266489917) | 0, 17) | 0, 668265263);
    }
  } else {
    let v0 = seed + 606290984 | 0;
    let v1 = seed + 2246822519 | 0;
    let v2 = seed;
    let v3 = seed - 2654435761 | 0;
    for (; (i + 15 | 0) < len; i = i + 16 | 0) {
      v0 = Math.imul(rotl32(v0 + Math.imul(int32View[i + 0 | 0] | 0, 2246822519) | 0, 13) | 0, 2654435761);
      v1 = Math.imul(rotl32(v1 + Math.imul(int32View[i + 4 | 0] | 0, 2246822519) | 0, 13) | 0, 2654435761);
      v2 = Math.imul(rotl32(v2 + Math.imul(int32View[i + 8 | 0] | 0, 2246822519) | 0, 13) | 0, 2654435761);
      v3 = Math.imul(rotl32(v3 + Math.imul(int32View[i + 12 | 0] | 0, 2246822519) | 0, 13) | 0, 2654435761);
    }
    h = (((rotl32(v0, 1) | 0 + rotl32(v1, 7) | 0) + rotl32(v2, 12) | 0) + rotl32(v3, 18) | 0) + len | 0;
    for (; (i + 3 | 0) < len; i = i + 4 | 0) {
      h = Math.imul(rotl32(h + Math.imul(int32View[i] | 0, 3266489917) | 0, 17) | 0, 668265263);
    }
  }
  for (; i < len; i = i + 1 | 0) {
    h = Math.imul(rotl32(h + Math.imul(uint8View[i] | 0, 374761393) | 0, 11) | 0, 2654435761);
  }
  h = Math.imul(h ^ h >>> 15, 2246822519);
  h = Math.imul(h ^ h >>> 13, 3266489917);
  return ((h ^ h >>> 16) >>> 0).toString();
}
function rotl32(x, r) {
  return x << r | x >>> 32 - r;
}

// node_modules/@mui/x-data-grid/esm/constants/cssVariables.js
init_extends();
var breakpoints = {
  values: {
    xs: 0,
    // phone
    sm: 600,
    // tablet
    md: 900,
    // small laptop
    lg: 1200,
    // desktop
    xl: 1536
    // large screen
  },
  up: (key) => {
    const values3 = breakpoints.values;
    const value = typeof values3[key] === "number" ? values3[key] : key;
    return `@media (min-width:${value}px)`;
  }
};
var keys = {
  spacingUnit: "--DataGrid-t-spacing-unit",
  /* Variables */
  colors: {
    border: {
      base: "--DataGrid-t-color-border-base"
    },
    foreground: {
      base: "--DataGrid-t-color-foreground-base",
      muted: "--DataGrid-t-color-foreground-muted",
      accent: "--DataGrid-t-color-foreground-accent",
      disabled: "--DataGrid-t-color-foreground-disabled",
      error: "--DataGrid-t-color-foreground-error"
    },
    background: {
      base: "--DataGrid-t-color-background-base",
      overlay: "--DataGrid-t-color-background-overlay",
      backdrop: "--DataGrid-t-color-background-backdrop"
    },
    interactive: {
      hover: "--DataGrid-t-color-interactive-hover",
      hoverOpacity: "--DataGrid-t-color-interactive-hover-opacity",
      focus: "--DataGrid-t-color-interactive-focus",
      focusOpacity: "--DataGrid-t-color-interactive-focus-opacity",
      disabled: "--DataGrid-t-color-interactive-disabled",
      disabledOpacity: "--DataGrid-t-color-interactive-disabled-opacity",
      selected: "--DataGrid-t-color-interactive-selected",
      selectedOpacity: "--DataGrid-t-color-interactive-selected-opacity"
    }
  },
  header: {
    background: {
      base: "--DataGrid-t-header-background-base"
    }
  },
  cell: {
    background: {
      pinned: "--DataGrid-t-cell-background-pinned"
    }
  },
  radius: {
    base: "--DataGrid-t-radius-base"
  },
  typography: {
    font: {
      body: "--DataGrid-t-typography-font-body",
      small: "--DataGrid-t-typography-font-small",
      large: "--DataGrid-t-typography-font-large"
    },
    fontFamily: {
      base: "--DataGrid-t-typography-font-family-base"
    },
    fontWeight: {
      light: "--DataGrid-t-typography-font-weight-light",
      regular: "--DataGrid-t-typography-font-weight-regular",
      medium: "--DataGrid-t-typography-font-weight-medium",
      bold: "--DataGrid-t-typography-font-weight-bold"
    }
  },
  transitions: {
    easing: {
      easeIn: "--DataGrid-t-transition-easing-ease-in",
      easeOut: "--DataGrid-t-transition-easing-ease-out",
      easeInOut: "--DataGrid-t-transition-easing-ease-in-out"
    },
    duration: {
      short: "--DataGrid-t-transition-duration-short",
      base: "--DataGrid-t-transition-duration-base",
      long: "--DataGrid-t-transition-duration-long"
    }
  },
  shadows: {
    base: "--DataGrid-t-shadow-base",
    overlay: "--DataGrid-t-shadow-overlay"
  },
  zIndex: {
    panel: "--DataGrid-t-z-index-panel",
    menu: "--DataGrid-t-z-index-menu"
  }
};
var values = wrap(keys);
var vars = _extends({
  breakpoints,
  spacing,
  transition,
  keys
}, values);
function spacing(a, b, c, d) {
  if (a === void 0) {
    return spacingString(1);
  }
  if (b === void 0) {
    return spacingString(a);
  }
  if (c === void 0) {
    return spacingString(a) + " " + spacingString(b);
  }
  if (d === void 0) {
    return spacingString(a) + " " + spacingString(b) + " " + spacingString(c);
  }
  return spacingString(a) + " " + spacingString(b) + " " + spacingString(c) + " " + spacingString(d);
}
function spacingString(value) {
  if (value === 0) {
    return "0";
  }
  return `calc(var(--DataGrid-t-spacing-unit) * ${value})`;
}
function transition(props, options) {
  const {
    duration = vars.transitions.duration.base,
    easing = vars.transitions.easing.easeInOut,
    delay = 0
  } = options ?? {};
  return props.map((prop) => `${prop} ${duration} ${easing} ${delay}ms`).join(", ");
}
function wrap(input) {
  if (typeof input === "string") {
    return `var(${input})`;
  }
  const result = {};
  for (const key in input) {
    if (Object.hasOwn(input, key)) {
      result[key] = wrap(input[key]);
    }
  }
  return result;
}

// node_modules/@mui/x-data-grid/esm/material/variables.js
function useMaterialCSSVariables() {
  const theme = useTheme();
  return React13.useMemo(() => {
    const id = hash(stringifyTheme(theme));
    const variables = transformTheme(theme);
    return {
      id,
      variables
    };
  }, [theme]);
}
function transformTheme(t) {
  var _a, _b, _c, _d, _e, _f;
  const borderColor2 = getBorderColor(t);
  const dataGridPalette = (t.vars || t).palette.DataGrid;
  const backgroundBase = (dataGridPalette == null ? void 0 : dataGridPalette.bg) ?? (t.vars || t).palette.background.default;
  const backgroundHeader = (dataGridPalette == null ? void 0 : dataGridPalette.headerBg) ?? backgroundBase;
  const backgroundPinned = (dataGridPalette == null ? void 0 : dataGridPalette.pinnedBg) ?? backgroundBase;
  const backgroundBackdrop = t.vars ? `rgba(${t.vars.palette.background.defaultChannel} / ${t.vars.palette.action.disabledOpacity})` : alpha(t.palette.background.default, t.palette.action.disabledOpacity);
  const backgroundOverlay = t.palette.mode === "dark" ? `color-mix(in srgb, ${(t.vars || t).palette.background.paper} 95%, #fff)` : (t.vars || t).palette.background.paper;
  const selectedColor = t.vars ? `rgb(${t.vars.palette.primary.mainChannel})` : t.palette.primary.main;
  const radius = getRadius(t);
  const fontBody = ((_b = (_a = t.vars) == null ? void 0 : _a.font) == null ? void 0 : _b.body2) ?? formatFont(t.typography.body2);
  const fontSmall = ((_d = (_c = t.vars) == null ? void 0 : _c.font) == null ? void 0 : _d.caption) ?? formatFont(t.typography.caption);
  const fontLarge = ((_f = (_e = t.vars) == null ? void 0 : _e.font) == null ? void 0 : _f.body1) ?? formatFont(t.typography.body1);
  const k = vars.keys;
  return {
    [k.spacingUnit]: t.vars ? t.vars.spacing ?? t.spacing(1) : t.spacing(1),
    [k.colors.border.base]: borderColor2,
    [k.colors.background.base]: backgroundBase,
    [k.colors.background.overlay]: backgroundOverlay,
    [k.colors.background.backdrop]: backgroundBackdrop,
    [k.colors.foreground.base]: (t.vars || t).palette.text.primary,
    [k.colors.foreground.muted]: (t.vars || t).palette.text.secondary,
    [k.colors.foreground.accent]: (t.vars || t).palette.primary.dark,
    [k.colors.foreground.disabled]: (t.vars || t).palette.text.disabled,
    [k.colors.foreground.error]: (t.vars || t).palette.error.dark,
    [k.colors.interactive.hover]: (t.vars || t).palette.action.hover,
    [k.colors.interactive.hoverOpacity]: (t.vars || t).palette.action.hoverOpacity,
    [k.colors.interactive.focus]: removeOpacity((t.vars || t).palette.primary.main),
    [k.colors.interactive.focusOpacity]: (t.vars || t).palette.action.focusOpacity,
    [k.colors.interactive.disabled]: removeOpacity((t.vars || t).palette.action.disabled),
    [k.colors.interactive.disabledOpacity]: (t.vars || t).palette.action.disabledOpacity,
    [k.colors.interactive.selected]: selectedColor,
    [k.colors.interactive.selectedOpacity]: (t.vars || t).palette.action.selectedOpacity,
    [k.header.background.base]: backgroundHeader,
    [k.cell.background.pinned]: backgroundPinned,
    [k.radius.base]: radius,
    [k.typography.fontFamily.base]: t.typography.fontFamily,
    [k.typography.fontWeight.light]: t.typography.fontWeightLight,
    [k.typography.fontWeight.regular]: t.typography.fontWeightRegular,
    [k.typography.fontWeight.medium]: t.typography.fontWeightMedium,
    [k.typography.fontWeight.bold]: t.typography.fontWeightBold,
    [k.typography.font.body]: fontBody,
    [k.typography.font.small]: fontSmall,
    [k.typography.font.large]: fontLarge,
    [k.transitions.easing.easeIn]: t.transitions.easing.easeIn,
    [k.transitions.easing.easeOut]: t.transitions.easing.easeOut,
    [k.transitions.easing.easeInOut]: t.transitions.easing.easeInOut,
    [k.transitions.duration.short]: `${t.transitions.duration.shorter}ms`,
    [k.transitions.duration.base]: `${t.transitions.duration.short}ms`,
    [k.transitions.duration.long]: `${t.transitions.duration.standard}ms`,
    [k.shadows.base]: (t.vars || t).shadows[2],
    [k.shadows.overlay]: (t.vars || t).shadows[8],
    [k.zIndex.panel]: (t.vars || t).zIndex.modal,
    [k.zIndex.menu]: (t.vars || t).zIndex.modal
  };
}
function getRadius(theme) {
  if (theme.vars) {
    return theme.vars.shape.borderRadius;
  }
  return typeof theme.shape.borderRadius === "number" ? `${theme.shape.borderRadius}px` : theme.shape.borderRadius;
}
function getBorderColor(theme) {
  if (theme.vars) {
    return theme.vars.palette.TableCell.border;
  }
  if (theme.palette.mode === "light") {
    return lighten(alpha(theme.palette.divider, 1), 0.88);
  }
  return darken(alpha(theme.palette.divider, 1), 0.68);
}
function setOpacity(color2, opacity) {
  return `rgba(from ${color2} r g b / ${opacity})`;
}
function removeOpacity(color2) {
  return setOpacity(color2, 1);
}
function formatFont(font) {
  if (!font) {
    return void 0;
  }
  const fontSize2 = typeof font.fontSize === "number" ? `${font.fontSize}px` : font.fontSize;
  return `${font.fontWeight} ${fontSize2} / ${font.lineHeight} ${font.fontFamily}`;
}
function stringifyTheme(input) {
  const seen = /* @__PURE__ */ new WeakSet();
  return JSON.stringify(input, (_, v) => {
    if (typeof window !== "undefined" && v === window || typeof document !== "undefined" && v === document) {
      return v.toString();
    }
    if (v !== null && typeof v === "object") {
      if (React13.isValidElement(v)) {
        return null;
      }
      if (seen.has(v)) {
        return null;
      }
      seen.add(v);
    }
    return v;
  });
}

// node_modules/@mui/x-data-grid/esm/material/index.js
var _excluded2 = ["id", "label", "labelId", "material", "disabled", "slotProps", "onChange", "onKeyDown", "onOpen", "onClose", "size", "style", "fullWidth"];
var _excluded22 = ["onRowsPerPageChange", "material", "disabled"];
var _excluded3 = ["material"];
var _excluded4 = ["autoFocus", "label", "fullWidth", "slotProps", "className", "material"];
var _excluded5 = ["material"];
var _excluded6 = ["material"];
var _excluded7 = ["material"];
var _excluded8 = ["material"];
var _excluded9 = ["material"];
var _excluded0 = ["material"];
var _excluded1 = ["material"];
var _excluded10 = ["material"];
var _excluded11 = ["material"];
var _excluded12 = ["material", "label", "className"];
var _excluded13 = ["material"];
var _excluded14 = ["inert", "iconStart", "iconEnd", "children", "material"];
var _excluded15 = ["slotProps", "material"];
var _excluded16 = ["id", "multiple", "freeSolo", "options", "getOptionLabel", "isOptionEqualToValue", "value", "onChange", "label", "placeholder", "slotProps", "material"];
var _excluded17 = ["key"];
var _excluded18 = ["inputProps", "InputProps", "InputLabelProps"];
var _excluded19 = ["slotProps", "material"];
var _excluded20 = ["ref", "open", "children", "className", "clickAwayTouchEvent", "clickAwayMouseEvent", "flip", "focusTrap", "onExited", "onClickAway", "onDidShow", "onDidHide", "id", "target", "transition", "placement", "material"];
var _excluded21 = ["native"];
var _excluded222 = ["children", "value", "active"];
var _excluded23 = ["items", "value", "material"];
var InputAdornment = styled_default(InputAdornment_default)(({
  theme
}) => ({
  [`&.${inputAdornmentClasses_default.positionEnd} .${iconButtonClasses_default.sizeSmall}`]: {
    marginRight: theme.spacing(-0.75)
  }
}));
var FormControlLabel = styled_default(FormControlLabel_default, {
  shouldForwardProp: (prop) => prop !== "fullWidth"
})(({
  theme
}) => ({
  gap: theme.spacing(0.5),
  margin: 0,
  overflow: "hidden",
  [`& .${formControlLabelClasses_default.label}`]: {
    fontSize: theme.typography.pxToRem(14),
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap"
  },
  variants: [{
    props: {
      fullWidth: true
    },
    style: {
      width: "100%"
    }
  }]
}));
var Checkbox = styled_default(Checkbox_default, {
  shouldForwardProp: (prop) => prop !== "density"
})(({
  theme
}) => ({
  variants: [{
    props: {
      density: "compact"
    },
    style: {
      padding: theme.spacing(0.5)
    }
  }]
}));
var ListItemText = styled_default(ListItemText_default)({
  [`& .${listItemTextClasses_default.primary}`]: {
    overflowX: "clip",
    textOverflow: "ellipsis",
    maxWidth: "300px"
  }
});
var BaseSelect = forwardRef2(function BaseSelect2(props, ref) {
  const {
    id,
    label,
    labelId,
    material,
    disabled,
    slotProps,
    onChange,
    onKeyDown,
    onOpen,
    onClose,
    size,
    style: style4,
    fullWidth
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded2);
  const menuProps = {
    PaperProps: {
      onKeyDown
    }
  };
  if (onClose) {
    menuProps.onClose = onClose;
  }
  return (0, import_jsx_runtime3.jsxs)(FormControl_default, {
    size,
    fullWidth,
    style: style4,
    disabled,
    ref,
    children: [(0, import_jsx_runtime3.jsx)(InputLabel_default, {
      id: labelId,
      htmlFor: id,
      shrink: true,
      variant: "outlined",
      children: label
    }), (0, import_jsx_runtime3.jsx)(Select_default, _extends({
      id,
      labelId,
      label,
      displayEmpty: true,
      onChange,
      variant: "outlined"
    }, other, {
      notched: true,
      inputProps: slotProps == null ? void 0 : slotProps.htmlInput,
      onOpen,
      MenuProps: menuProps,
      size
    }, material))]
  });
});
if (true) BaseSelect.displayName = "BaseSelect";
var StyledPagination = styled_default(TablePagination_default)(({
  theme
}) => ({
  [`& .${tablePaginationClasses_default.selectLabel}`]: {
    display: "none",
    [theme.breakpoints.up("sm")]: {
      display: "block"
    }
  },
  [`& .${tablePaginationClasses_default.input}`]: {
    display: "none",
    [theme.breakpoints.up("sm")]: {
      display: "inline-flex"
    }
  }
}));
var BasePagination = forwardRef2(function BasePagination2(props, ref) {
  const {
    onRowsPerPageChange,
    material,
    disabled
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded22);
  const computedProps = React14.useMemo(() => {
    if (!disabled) {
      return void 0;
    }
    return {
      backIconButtonProps: {
        disabled: true
      },
      nextIconButtonProps: {
        disabled: true
      }
    };
  }, [disabled]);
  const apiRef = useGridApiContext();
  const rootProps = useGridRootProps();
  const {
    estimatedRowCount
  } = rootProps;
  return (0, import_jsx_runtime3.jsx)(StyledPagination, _extends({
    component: "div",
    onRowsPerPageChange: useEventCallback_default((event) => {
      onRowsPerPageChange == null ? void 0 : onRowsPerPageChange(Number(event.target.value));
    }),
    labelRowsPerPage: apiRef.current.getLocaleText("paginationRowsPerPage"),
    labelDisplayedRows: (params) => apiRef.current.getLocaleText("paginationDisplayedRows")(_extends({}, params, {
      estimated: estimatedRowCount
    })),
    getItemAriaLabel: apiRef.current.getLocaleText("paginationItemAriaLabel")
  }, computedProps, other, material, {
    ref
  }));
});
if (true) BasePagination.displayName = "BasePagination";
var BaseBadge = forwardRef2(function BaseBadge2(props, ref) {
  const {
    material
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded3);
  return (0, import_jsx_runtime3.jsx)(Badge_default, _extends({}, other, material, {
    ref
  }));
});
if (true) BaseBadge.displayName = "BaseBadge";
var BaseCheckbox = forwardRef2(function BaseCheckbox2(props, ref) {
  const {
    autoFocus,
    label,
    fullWidth,
    slotProps,
    className,
    material
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded4);
  const elementRef = React14.useRef(null);
  const handleRef = useForkRef(elementRef, ref);
  const rippleRef = React14.useRef(null);
  React14.useEffect(() => {
    var _a;
    if (autoFocus) {
      const input = (_a = elementRef.current) == null ? void 0 : _a.querySelector("input");
      input == null ? void 0 : input.focus({
        preventScroll: true
      });
    } else if (autoFocus === false && rippleRef.current) {
      rippleRef.current.stop({});
    }
  }, [autoFocus]);
  if (!label) {
    return (0, import_jsx_runtime3.jsx)(Checkbox, _extends({}, other, material, {
      className: clsx_default(className, material == null ? void 0 : material.className),
      inputProps: slotProps == null ? void 0 : slotProps.htmlInput,
      ref: handleRef,
      touchRippleRef: rippleRef
    }));
  }
  return (0, import_jsx_runtime3.jsx)(FormControlLabel, {
    className,
    control: (0, import_jsx_runtime3.jsx)(Checkbox, _extends({}, other, material, {
      inputProps: slotProps == null ? void 0 : slotProps.htmlInput,
      ref: handleRef,
      touchRippleRef: rippleRef
    })),
    label,
    fullWidth
  });
});
if (true) BaseCheckbox.displayName = "BaseCheckbox";
var BaseCircularProgress = forwardRef2(function BaseCircularProgress2(props, ref) {
  const {
    material
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded5);
  return (0, import_jsx_runtime3.jsx)(CircularProgress_default, _extends({}, other, material, {
    ref
  }));
});
if (true) BaseCircularProgress.displayName = "BaseCircularProgress";
var BaseDivider = forwardRef2(function BaseDivider2(props, ref) {
  const {
    material
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded6);
  return (0, import_jsx_runtime3.jsx)(Divider_default, _extends({}, other, material, {
    ref
  }));
});
if (true) BaseDivider.displayName = "BaseDivider";
var BaseLinearProgress = forwardRef2(function BaseLinearProgress2(props, ref) {
  const {
    material
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded7);
  return (0, import_jsx_runtime3.jsx)(LinearProgress_default, _extends({}, other, material, {
    ref
  }));
});
if (true) BaseLinearProgress.displayName = "BaseLinearProgress";
var BaseButton = forwardRef2(function BaseButton2(props, ref) {
  const {
    material
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded8);
  return (0, import_jsx_runtime3.jsx)(Button_default, _extends({}, other, material, {
    ref
  }));
});
if (true) BaseButton.displayName = "BaseButton";
var StyledToggleButton = styled_default(ToggleButton_default)(({
  theme
}) => ({
  gap: theme.spacing(1),
  border: 0
}));
var BaseToggleButton = forwardRef2(function BaseToggleButton2(props, ref) {
  const {
    material
  } = props, rest = _objectWithoutPropertiesLoose(props, _excluded9);
  return (0, import_jsx_runtime3.jsx)(StyledToggleButton, _extends({
    size: "small",
    color: "primary"
  }, rest, material, {
    ref
  }));
});
if (true) BaseToggleButton.displayName = "BaseToggleButton";
var BaseChip = forwardRef2(function BaseChip2(props, ref) {
  const {
    material
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded0);
  return (0, import_jsx_runtime3.jsx)(Chip_default, _extends({}, other, material, {
    ref
  }));
});
if (true) BaseChip.displayName = "BaseChip";
var BaseIconButton = forwardRef2(function BaseIconButton2(props, ref) {
  const {
    material
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded1);
  return (0, import_jsx_runtime3.jsx)(IconButton_default, _extends({}, other, material, {
    ref
  }));
});
if (true) BaseIconButton.displayName = "BaseIconButton";
var BaseTooltip = forwardRef2(function BaseTooltip2(props, ref) {
  const {
    material
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded10);
  return (0, import_jsx_runtime3.jsx)(Tooltip_default, _extends({}, other, material, {
    ref
  }));
});
if (true) BaseTooltip.displayName = "BaseTooltip";
var BaseSkeleton = forwardRef2(function BaseSkeleton2(props, ref) {
  const {
    material
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded11);
  return (0, import_jsx_runtime3.jsx)(Skeleton_default, _extends({}, other, material, {
    ref
  }));
});
if (true) BaseSkeleton.displayName = "BaseSkeleton";
var BaseSwitch = forwardRef2(function BaseSwitch2(props, ref) {
  const {
    material,
    label,
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded12);
  if (!label) {
    return (0, import_jsx_runtime3.jsx)(Switch_default, _extends({}, other, material, {
      className,
      ref
    }));
  }
  return (0, import_jsx_runtime3.jsx)(FormControlLabel, {
    className,
    control: (0, import_jsx_runtime3.jsx)(Switch_default, _extends({}, other, material, {
      ref
    })),
    label
  });
});
if (true) BaseSwitch.displayName = "BaseSwitch";
var BaseMenuList = forwardRef2(function BaseMenuList2(props, ref) {
  const {
    material
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded13);
  return (0, import_jsx_runtime3.jsx)(MenuList_default, _extends({}, other, material, {
    ref
  }));
});
if (true) BaseMenuList.displayName = "BaseMenuList";
function BaseMenuItem(props) {
  const {
    inert,
    iconStart,
    iconEnd,
    children,
    material
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded14);
  if (inert) {
    other.disableRipple = true;
  }
  return React14.createElement(MenuItem_default, _extends({}, other, material), [iconStart && (0, import_jsx_runtime3.jsx)(ListItemIcon_default, {
    children: iconStart
  }, "1"), (0, import_jsx_runtime3.jsx)(ListItemText, {
    children
  }, "2"), iconEnd && (0, import_jsx_runtime3.jsx)(ListItemIcon_default, {
    children: iconEnd
  }, "3")]);
}
function BaseTextField(props) {
  const {
    slotProps,
    material
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded15);
  return (0, import_jsx_runtime3.jsx)(TextField_default, _extends({
    variant: "outlined"
  }, other, material, {
    inputProps: slotProps == null ? void 0 : slotProps.htmlInput,
    InputProps: transformInputProps(slotProps == null ? void 0 : slotProps.input),
    InputLabelProps: _extends({
      shrink: true
    }, slotProps == null ? void 0 : slotProps.inputLabel)
  }));
}
function BaseAutocomplete(props) {
  const rootProps = useGridRootProps();
  const {
    id,
    multiple,
    freeSolo,
    options,
    getOptionLabel,
    isOptionEqualToValue,
    value,
    onChange,
    label,
    placeholder,
    slotProps,
    material
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded16);
  return (0, import_jsx_runtime3.jsx)(Autocomplete_default, _extends({
    id,
    multiple,
    freeSolo,
    options,
    getOptionLabel,
    isOptionEqualToValue,
    value,
    onChange,
    renderTags: (currentValue, getTagProps) => currentValue.map((option, index) => {
      const _getTagProps = getTagProps({
        index
      }), {
        key
      } = _getTagProps, tagProps = _objectWithoutPropertiesLoose(_getTagProps, _excluded17);
      return (0, import_jsx_runtime3.jsx)(Chip_default, _extends({
        variant: "outlined",
        size: "small",
        label: typeof option === "string" ? option : getOptionLabel == null ? void 0 : getOptionLabel(option)
      }, tagProps), key);
    }),
    renderInput: (params) => {
      var _a;
      const {
        inputProps,
        InputProps,
        InputLabelProps
      } = params, inputRest = _objectWithoutPropertiesLoose(params, _excluded18);
      return (0, import_jsx_runtime3.jsx)(TextField_default, _extends({}, inputRest, {
        label,
        placeholder,
        inputProps,
        InputProps: transformInputProps(InputProps, false),
        InputLabelProps: _extends({
          shrink: true
        }, InputLabelProps)
      }, slotProps == null ? void 0 : slotProps.textField, (_a = rootProps.slotProps) == null ? void 0 : _a.baseTextField));
    }
  }, other, material));
}
function BaseInput(props) {
  return (0, import_jsx_runtime3.jsx)(InputBase_default, _extends({}, transformInputProps(props)));
}
function transformInputProps(props, wrapAdornments = true) {
  if (!props) {
    return void 0;
  }
  const {
    slotProps,
    material
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded19);
  const result = other;
  if (wrapAdornments) {
    if (result.startAdornment) {
      result.startAdornment = (0, import_jsx_runtime3.jsx)(InputAdornment, {
        position: "start",
        children: result.startAdornment
      });
    }
    if (result.endAdornment) {
      result.endAdornment = (0, import_jsx_runtime3.jsx)(InputAdornment, {
        position: "end",
        children: result.endAdornment
      });
    }
  }
  for (const k in material) {
    if (Object.hasOwn(material, k)) {
      result[k] = material[k];
    }
  }
  if (slotProps == null ? void 0 : slotProps.htmlInput) {
    if (result.inputProps) {
      result.inputProps = _extends({}, result.inputProps, slotProps == null ? void 0 : slotProps.htmlInput);
    } else {
      result.inputProps = slotProps == null ? void 0 : slotProps.htmlInput;
    }
  }
  return result;
}
var transformOrigin = {
  "bottom-start": "top left",
  "bottom-end": "top right"
};
function BasePopper(props) {
  const {
    open,
    children,
    className,
    flip,
    onExited,
    onDidShow,
    onDidHide,
    id,
    target,
    transition: transition2,
    placement,
    material
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded20);
  const modifiers = React14.useMemo(() => {
    const result = [{
      name: "preventOverflow",
      options: {
        padding: 8
      }
    }];
    if (flip) {
      result.push({
        name: "flip",
        enabled: true,
        options: {
          rootBoundary: "document"
        }
      });
    }
    if (onDidShow || onDidHide) {
      result.push({
        name: "isPlaced",
        enabled: true,
        phase: "main",
        fn: () => {
          onDidShow == null ? void 0 : onDidShow();
        },
        effect: () => () => {
          onDidHide == null ? void 0 : onDidHide();
        }
      });
    }
    return result;
  }, [flip, onDidShow, onDidHide]);
  let content;
  if (!transition2) {
    content = wrappers(props, children);
  } else {
    const handleExited = (popperOnExited) => (node) => {
      if (popperOnExited) {
        popperOnExited();
      }
      if (onExited) {
        onExited(node);
      }
    };
    content = (p) => {
      var _a;
      return wrappers(props, (0, import_jsx_runtime3.jsx)(Grow_default, _extends({}, p.TransitionProps, {
        style: {
          transformOrigin: transformOrigin[p.placement]
        },
        onExited: handleExited((_a = p.TransitionProps) == null ? void 0 : _a.onExited),
        children: (0, import_jsx_runtime3.jsx)(Paper_default, {
          children
        })
      })));
    };
  }
  return (0, import_jsx_runtime3.jsx)(Popper_default, _extends({
    id,
    className,
    open,
    anchorEl: target,
    transition: transition2,
    placement,
    modifiers
  }, other, material, {
    children: content
  }));
}
function wrappers(props, content) {
  return focusTrapWrapper(props, clickAwayWrapper(props, content));
}
function clickAwayWrapper(props, content) {
  if (props.onClickAway === void 0) {
    return content;
  }
  return (0, import_jsx_runtime3.jsx)(ClickAwayListener, {
    onClickAway: props.onClickAway,
    touchEvent: props.clickAwayTouchEvent,
    mouseEvent: props.clickAwayMouseEvent,
    children: content
  });
}
function focusTrapWrapper(props, content) {
  if (props.focusTrap === void 0) {
    return content;
  }
  return (0, import_jsx_runtime3.jsx)(FocusTrap_default, {
    open: true,
    disableEnforceFocus: true,
    disableAutoFocus: true,
    children: (0, import_jsx_runtime3.jsx)("div", {
      tabIndex: -1,
      children: content
    })
  });
}
function BaseSelectOption(_ref) {
  let {
    native
  } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded21);
  if (native) {
    return (0, import_jsx_runtime3.jsx)("option", _extends({}, props));
  }
  return (0, import_jsx_runtime3.jsx)(MenuItem_default, _extends({}, props));
}
var StyledTabs = styled_default(Tabs_default, {
  name: "MuiDataGrid",
  slot: "Tabs"
})(({
  theme
}) => ({
  borderBottom: `1px solid ${theme.palette.divider}`
}));
var StyledTab = styled_default(Tab_default, {
  name: "MuiDataGrid",
  slot: "Tab"
})({
  flex: 1,
  minWidth: "fit-content"
});
var StyledTabPanel = styled_default("div", {
  name: "MuiDataGrid",
  slot: "TabPanel"
})({
  flex: 1,
  display: "flex",
  flexDirection: "column",
  overflow: "hidden"
});
function TabPanel(props) {
  const {
    children,
    active
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded222);
  return (0, import_jsx_runtime3.jsx)(StyledTabPanel, _extends({
    role: "tabpanel",
    style: {
      display: active ? "flex" : "none"
    }
  }, other, {
    children
  }));
}
function BaseTabs(_ref2) {
  let {
    items,
    value,
    material
  } = _ref2, props = _objectWithoutPropertiesLoose(_ref2, _excluded23);
  const id = useId();
  const labelId = `${id}-tab-${value}`;
  const panelId = `${id}-tabpanel-${value}`;
  return (0, import_jsx_runtime3.jsxs)(React14.Fragment, {
    children: [(0, import_jsx_runtime3.jsx)(StyledTabs, _extends({}, props, {
      value,
      variant: "scrollable",
      scrollButtons: "auto"
    }, material, {
      children: items.map((item) => (0, import_jsx_runtime3.jsx)(StyledTab, {
        value: item.value,
        label: item.label,
        id: labelId,
        "aria-controls": panelId
      }, item.value))
    })), items.map((item) => (0, import_jsx_runtime3.jsx)(TabPanel, {
      value: item.value,
      active: value === item.value,
      id: panelId,
      "aria-labelledby": labelId,
      children: item.children
    }, item.value))]
  });
}
var iconSlots = {
  booleanCellTrueIcon: GridCheckIcon,
  booleanCellFalseIcon: GridCloseIcon,
  columnMenuIcon: GridTripleDotsVerticalIcon,
  openFilterButtonIcon: GridFilterListIcon,
  filterPanelDeleteIcon: GridCloseIcon,
  columnFilteredIcon: GridFilterAltIcon,
  columnSelectorIcon: GridColumnIcon,
  columnUnsortedIcon: GridColumnUnsortedIcon,
  columnSortedAscendingIcon: GridArrowUpwardIcon,
  columnSortedDescendingIcon: GridArrowDownwardIcon,
  columnResizeIcon: GridSeparatorIcon,
  densityCompactIcon: GridViewHeadlineIcon,
  densityStandardIcon: GridTableRowsIcon,
  densityComfortableIcon: GridViewStreamIcon,
  exportIcon: GridDownloadIcon,
  moreActionsIcon: GridMoreVertIcon,
  treeDataCollapseIcon: GridExpandMoreIcon,
  treeDataExpandIcon: GridKeyboardArrowRight,
  groupingCriteriaCollapseIcon: GridExpandMoreIcon,
  groupingCriteriaExpandIcon: GridKeyboardArrowRight,
  detailPanelExpandIcon: GridAddIcon,
  detailPanelCollapseIcon: GridRemoveIcon,
  rowReorderIcon: GridDragIcon,
  quickFilterIcon: GridSearchIcon,
  quickFilterClearIcon: GridClearIcon,
  columnMenuHideIcon: GridVisibilityOffIcon,
  columnMenuSortAscendingIcon: GridArrowUpwardIcon,
  columnMenuSortDescendingIcon: GridArrowDownwardIcon,
  columnMenuUnsortIcon: null,
  columnMenuFilterIcon: GridFilterAltIcon,
  columnMenuManageColumnsIcon: GridViewColumnIcon,
  columnMenuClearIcon: GridClearIcon,
  loadIcon: GridLoadIcon,
  filterPanelAddIcon: GridAddIcon,
  filterPanelRemoveAllIcon: GridDeleteForeverIcon,
  columnReorderIcon: GridDragIcon,
  menuItemCheckIcon: GridCheckIcon
};
var baseSlots = {
  baseAutocomplete: BaseAutocomplete,
  baseBadge: BaseBadge,
  baseCheckbox: BaseCheckbox,
  baseChip: BaseChip,
  baseCircularProgress: BaseCircularProgress,
  baseDivider: BaseDivider,
  baseInput: BaseInput,
  baseLinearProgress: BaseLinearProgress,
  baseMenuList: BaseMenuList,
  baseMenuItem: BaseMenuItem,
  baseTextField: BaseTextField,
  baseButton: BaseButton,
  baseIconButton: BaseIconButton,
  baseToggleButton: BaseToggleButton,
  baseTooltip: BaseTooltip,
  baseTabs: BaseTabs,
  basePagination: BasePagination,
  basePopper: BasePopper,
  baseSelect: BaseSelect,
  baseSelectOption: BaseSelectOption,
  baseSkeleton: BaseSkeleton,
  baseSwitch: BaseSwitch
};
var materialSlots = _extends({}, baseSlots, iconSlots);
var material_default = materialSlots;

// node_modules/@mui/x-data-grid/esm/hooks/utils/useGridApiRef.js
var React15 = __toESM(require_react(), 1);
var useGridApiRef = () => React15.useRef(null);

// node_modules/@mui/x-data-grid/esm/DataGrid/index.js
import "/home/fadzi/tools/cockpit/node_modules/@mui/x-data-grid/esm/index.css";

// node_modules/@mui/x-data-grid/esm/DataGrid/DataGrid.js
init_extends();
var React214 = __toESM(require_react(), 1);
var import_prop_types91 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-data-grid/esm/components/virtualization/GridVirtualScroller.js
init_extends();
var React88 = __toESM(require_react(), 1);

// node_modules/@mui/styled-engine/esm/index.js
init_emotion_styled_browser_development_esm();
init_emotion_serialize_development_esm();
init_emotion_react_browser_development_esm();

// node_modules/@mui/styled-engine/esm/StyledEngineProvider/StyledEngineProvider.js
var React16 = __toESM(require_react(), 1);
var import_prop_types = __toESM(require_prop_types(), 1);
init_emotion_react_browser_development_esm();
init_emotion_cache_browser_development_esm();
init_emotion_sheet_development_esm();
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var cacheMap = /* @__PURE__ */ new Map();
var TEST_INTERNALS_DO_NOT_USE = {
  /**
   * to intercept the generated CSS before inserting to the style tag, so that we can check the generated CSS.
   *
   * let rule;
   * TEST_INTERNALS_DO_NOT_USE.insert = (...args) => {
   *    rule = args[0];
   * };
   *
   * expect(rule).to.equal(...);
   */
  insert: void 0
};
var createEmotionCache = (options, CustomSheet) => {
  const cache = createCache(options);
  cache.sheet = new CustomSheet({
    key: cache.key,
    nonce: cache.sheet.nonce,
    container: cache.sheet.container,
    speedy: cache.sheet.isSpeedy,
    prepend: cache.sheet.prepend,
    insertionPoint: cache.sheet.insertionPoint
  });
  return cache;
};
var insertionPoint;
if (typeof document === "object") {
  insertionPoint = document.querySelector('[name="emotion-insertion-point"]');
  if (!insertionPoint) {
    insertionPoint = document.createElement("meta");
    insertionPoint.setAttribute("name", "emotion-insertion-point");
    insertionPoint.setAttribute("content", "");
    const head = document.querySelector("head");
    if (head) {
      head.prepend(insertionPoint);
    }
  }
}
function getCache(injectFirst, enableCssLayer) {
  if (injectFirst || enableCssLayer) {
    class MyStyleSheet extends StyleSheet {
      insert(rule, options) {
        if (TEST_INTERNALS_DO_NOT_USE.insert) {
          return TEST_INTERNALS_DO_NOT_USE.insert(rule, options);
        }
        if (this.key && this.key.endsWith("global")) {
          this.before = insertionPoint;
        }
        return super.insert(rule, options);
      }
    }
    const emotionCache = createEmotionCache({
      key: "css",
      insertionPoint: injectFirst ? insertionPoint : void 0
    }, MyStyleSheet);
    if (enableCssLayer) {
      const prevInsert = emotionCache.insert;
      emotionCache.insert = (...args) => {
        if (!args[1].styles.match(/^@layer\s+[^{]*$/)) {
          args[1].styles = `@layer mui {${args[1].styles}}`;
        }
        return prevInsert(...args);
      };
    }
    return emotionCache;
  }
  return void 0;
}
function StyledEngineProvider(props) {
  const {
    injectFirst,
    enableCssLayer,
    children
  } = props;
  const cache = React16.useMemo(() => {
    const cacheKey = `${injectFirst}-${enableCssLayer}`;
    if (typeof document === "object" && cacheMap.has(cacheKey)) {
      return cacheMap.get(cacheKey);
    }
    const fresh = getCache(injectFirst, enableCssLayer);
    cacheMap.set(cacheKey, fresh);
    return fresh;
  }, [injectFirst, enableCssLayer]);
  return cache ? (0, import_jsx_runtime4.jsx)(CacheProvider, {
    value: cache,
    children
  }) : children;
}
true ? StyledEngineProvider.propTypes = {
  /**
   * Your component tree.
   */
  children: import_prop_types.default.node,
  /**
   * If `true`, the styles are wrapped in `@layer mui`.
   * Learn more about [Cascade layers](https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics/Cascade_layers).
   */
  enableCssLayer: import_prop_types.default.bool,
  /**
   * By default, the styles are injected last in the <head> element of the page.
   * As a result, they gain more specificity than any other style sheet.
   * If you want to override MUI's styles, set this prop.
   */
  injectFirst: import_prop_types.default.bool
} : void 0;

// node_modules/@mui/styled-engine/esm/GlobalStyles/GlobalStyles.js
var React17 = __toESM(require_react(), 1);
var import_prop_types2 = __toESM(require_prop_types(), 1);
init_emotion_react_browser_development_esm();
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
function isEmpty(obj) {
  return obj === void 0 || obj === null || Object.keys(obj).length === 0;
}
function GlobalStyles(props) {
  const {
    styles,
    defaultTheme: defaultTheme4 = {}
  } = props;
  const globalStyles = typeof styles === "function" ? (themeInput) => styles(isEmpty(themeInput) ? defaultTheme4 : themeInput) : styles;
  return (0, import_jsx_runtime5.jsx)(Global, {
    styles: globalStyles
  });
}
true ? GlobalStyles.propTypes = {
  defaultTheme: import_prop_types2.default.object,
  styles: import_prop_types2.default.oneOfType([import_prop_types2.default.array, import_prop_types2.default.string, import_prop_types2.default.object, import_prop_types2.default.func])
} : void 0;

// node_modules/@mui/styled-engine/esm/index.js
function styled2(tag, options) {
  const stylesFactory = styled(tag, options);
  if (true) {
    return (...styles) => {
      const component = typeof tag === "string" ? `"${tag}"` : "component";
      if (styles.length === 0) {
        console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join("\n"));
      } else if (styles.some((style4) => style4 === void 0)) {
        console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
      }
      return stylesFactory(...styles);
    };
  }
  return stylesFactory;
}
function internal_mutateStyles(tag, processor) {
  if (Array.isArray(tag.__emotion_styles)) {
    tag.__emotion_styles = processor(tag.__emotion_styles);
  }
}
var wrapper = [];
function internal_serializeStyles(styles) {
  wrapper[0] = styles;
  return serializeStyles(wrapper);
}

// node_modules/@mui/system/esm/GlobalStyles/GlobalStyles.js
var React20 = __toESM(require_react(), 1);
var import_prop_types5 = __toESM(require_prop_types(), 1);

// node_modules/@mui/system/node_modules/@mui/utils/esm/deepmerge/deepmerge.js
var React18 = __toESM(require_react(), 1);
var import_react_is = __toESM(require_react_is(), 1);
function isPlainObject(item) {
  if (typeof item !== "object" || item === null) {
    return false;
  }
  const prototype = Object.getPrototypeOf(item);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in item) && !(Symbol.iterator in item);
}
function deepClone(source) {
  if (React18.isValidElement(source) || (0, import_react_is.isValidElementType)(source) || !isPlainObject(source)) {
    return source;
  }
  const output = {};
  Object.keys(source).forEach((key) => {
    output[key] = deepClone(source[key]);
  });
  return output;
}
function deepmerge(target, source, options = {
  clone: true
}) {
  const output = options.clone ? {
    ...target
  } : target;
  if (isPlainObject(target) && isPlainObject(source)) {
    Object.keys(source).forEach((key) => {
      if (React18.isValidElement(source[key]) || (0, import_react_is.isValidElementType)(source[key])) {
        output[key] = source[key];
      } else if (isPlainObject(source[key]) && // Avoid prototype pollution
      Object.prototype.hasOwnProperty.call(target, key) && isPlainObject(target[key])) {
        output[key] = deepmerge(target[key], source[key], options);
      } else if (options.clone) {
        output[key] = isPlainObject(source[key]) ? deepClone(source[key]) : source[key];
      } else {
        output[key] = source[key];
      }
    });
  }
  return output;
}

// node_modules/@mui/system/esm/createBreakpoints/createBreakpoints.js
var sortBreakpointsValues = (values3) => {
  const breakpointsAsArray = Object.keys(values3).map((key) => ({
    key,
    val: values3[key]
  })) || [];
  breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
  return breakpointsAsArray.reduce((acc, obj) => {
    return {
      ...acc,
      [obj.key]: obj.val
    };
  }, {});
};
function createBreakpoints(breakpoints2) {
  const {
    // The breakpoint **start** at this value.
    // For instance with the first breakpoint xs: [xs, sm).
    values: values3 = {
      xs: 0,
      // phone
      sm: 600,
      // tablet
      md: 900,
      // small laptop
      lg: 1200,
      // desktop
      xl: 1536
      // large screen
    },
    unit = "px",
    step = 5,
    ...other
  } = breakpoints2;
  const sortedValues = sortBreakpointsValues(values3);
  const keys2 = Object.keys(sortedValues);
  function up(key) {
    const value = typeof values3[key] === "number" ? values3[key] : key;
    return `@media (min-width:${value}${unit})`;
  }
  function down(key) {
    const value = typeof values3[key] === "number" ? values3[key] : key;
    return `@media (max-width:${value - step / 100}${unit})`;
  }
  function between(start, end) {
    const endIndex = keys2.indexOf(end);
    return `@media (min-width:${typeof values3[start] === "number" ? values3[start] : start}${unit}) and (max-width:${(endIndex !== -1 && typeof values3[keys2[endIndex]] === "number" ? values3[keys2[endIndex]] : end) - step / 100}${unit})`;
  }
  function only(key) {
    if (keys2.indexOf(key) + 1 < keys2.length) {
      return between(key, keys2[keys2.indexOf(key) + 1]);
    }
    return up(key);
  }
  function not(key) {
    const keyIndex = keys2.indexOf(key);
    if (keyIndex === 0) {
      return up(keys2[1]);
    }
    if (keyIndex === keys2.length - 1) {
      return down(keys2[keyIndex]);
    }
    return between(key, keys2[keys2.indexOf(key) + 1]).replace("@media", "@media not all and");
  }
  return {
    keys: keys2,
    values: sortedValues,
    up,
    down,
    between,
    only,
    not,
    unit,
    ...other
  };
}

// node_modules/@mui/system/esm/cssContainerQueries/cssContainerQueries.js
function sortContainerQueries(theme, css2) {
  if (!theme.containerQueries) {
    return css2;
  }
  const sorted = Object.keys(css2).filter((key) => key.startsWith("@container")).sort((a, b) => {
    var _a, _b;
    const regex = /min-width:\s*([0-9.]+)/;
    return +(((_a = a.match(regex)) == null ? void 0 : _a[1]) || 0) - +(((_b = b.match(regex)) == null ? void 0 : _b[1]) || 0);
  });
  if (!sorted.length) {
    return css2;
  }
  return sorted.reduce((acc, key) => {
    const value = css2[key];
    delete acc[key];
    acc[key] = value;
    return acc;
  }, {
    ...css2
  });
}
function isCqShorthand(breakpointKeys, value) {
  return value === "@" || value.startsWith("@") && (breakpointKeys.some((key) => value.startsWith(`@${key}`)) || !!value.match(/^@\d/));
}
function getContainerQuery(theme, shorthand) {
  const matches = shorthand.match(/^@([^/]+)?\/?(.+)?$/);
  if (!matches) {
    if (true) {
      throw new Error(true ? `MUI: The provided shorthand ${`(${shorthand})`} is invalid. The format should be \`@<breakpoint | number>\` or \`@<breakpoint | number>/<container>\`.
For example, \`@sm\` or \`@600\` or \`@40rem/sidebar\`.` : formatMuiErrorMessage(18, `(${shorthand})`));
    }
    return null;
  }
  const [, containerQuery, containerName] = matches;
  const value = Number.isNaN(+containerQuery) ? containerQuery || 0 : +containerQuery;
  return theme.containerQueries(containerName).up(value);
}
function cssContainerQueries(themeInput) {
  const toContainerQuery = (mediaQuery, name) => mediaQuery.replace("@media", name ? `@container ${name}` : "@container");
  function attachCq(node2, name) {
    node2.up = (...args) => toContainerQuery(themeInput.breakpoints.up(...args), name);
    node2.down = (...args) => toContainerQuery(themeInput.breakpoints.down(...args), name);
    node2.between = (...args) => toContainerQuery(themeInput.breakpoints.between(...args), name);
    node2.only = (...args) => toContainerQuery(themeInput.breakpoints.only(...args), name);
    node2.not = (...args) => {
      const result = toContainerQuery(themeInput.breakpoints.not(...args), name);
      if (result.includes("not all and")) {
        return result.replace("not all and ", "").replace("min-width:", "width<").replace("max-width:", "width>").replace("and", "or");
      }
      return result;
    };
  }
  const node = {};
  const containerQueries = (name) => {
    attachCq(node, name);
    return node;
  };
  attachCq(containerQueries);
  return {
    ...themeInput,
    containerQueries
  };
}

// node_modules/@mui/system/esm/createTheme/shape.js
var shape = {
  borderRadius: 4
};
var shape_default = shape;

// node_modules/@mui/system/esm/responsivePropType/responsivePropType.js
var import_prop_types3 = __toESM(require_prop_types(), 1);
var responsivePropType = true ? import_prop_types3.default.oneOfType([import_prop_types3.default.number, import_prop_types3.default.string, import_prop_types3.default.object, import_prop_types3.default.array]) : {};
var responsivePropType_default = responsivePropType;

// node_modules/@mui/system/esm/breakpoints/breakpoints.js
var import_prop_types4 = __toESM(require_prop_types(), 1);

// node_modules/@mui/system/esm/merge/merge.js
function merge(acc, item) {
  if (!item) {
    return acc;
  }
  return deepmerge(acc, item, {
    clone: false
    // No need to clone deep, it's way faster.
  });
}
var merge_default = merge;

// node_modules/@mui/system/esm/breakpoints/breakpoints.js
var values2 = {
  xs: 0,
  // phone
  sm: 600,
  // tablet
  md: 900,
  // small laptop
  lg: 1200,
  // desktop
  xl: 1536
  // large screen
};
var defaultBreakpoints = {
  // Sorted ASC by size. That's important.
  // It can't be configured as it's used statically for propTypes.
  keys: ["xs", "sm", "md", "lg", "xl"],
  up: (key) => `@media (min-width:${values2[key]}px)`
};
var defaultContainerQueries = {
  containerQueries: (containerName) => ({
    up: (key) => {
      let result = typeof key === "number" ? key : values2[key] || key;
      if (typeof result === "number") {
        result = `${result}px`;
      }
      return containerName ? `@container ${containerName} (min-width:${result})` : `@container (min-width:${result})`;
    }
  })
};
function handleBreakpoints(props, propValue, styleFromPropValue) {
  const theme = props.theme || {};
  if (Array.isArray(propValue)) {
    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
    return propValue.reduce((acc, item, index) => {
      acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
      return acc;
    }, {});
  }
  if (typeof propValue === "object") {
    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
    return Object.keys(propValue).reduce((acc, breakpoint) => {
      if (isCqShorthand(themeBreakpoints.keys, breakpoint)) {
        const containerKey = getContainerQuery(theme.containerQueries ? theme : defaultContainerQueries, breakpoint);
        if (containerKey) {
          acc[containerKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
        }
      } else if (Object.keys(themeBreakpoints.values || values2).includes(breakpoint)) {
        const mediaKey = themeBreakpoints.up(breakpoint);
        acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
      } else {
        const cssKey = breakpoint;
        acc[cssKey] = propValue[cssKey];
      }
      return acc;
    }, {});
  }
  const output = styleFromPropValue(propValue);
  return output;
}
function createEmptyBreakpointObject(breakpointsInput = {}) {
  var _a;
  const breakpointsInOrder = (_a = breakpointsInput.keys) == null ? void 0 : _a.reduce((acc, key) => {
    const breakpointStyleKey = breakpointsInput.up(key);
    acc[breakpointStyleKey] = {};
    return acc;
  }, {});
  return breakpointsInOrder || {};
}
function removeUnusedBreakpoints(breakpointKeys, style4) {
  return breakpointKeys.reduce((acc, key) => {
    const breakpointOutput = acc[key];
    const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
    if (isBreakpointUnused) {
      delete acc[key];
    }
    return acc;
  }, style4);
}
function mergeBreakpointsInOrder(breakpointsInput, ...styles) {
  const emptyBreakpoints = createEmptyBreakpointObject(breakpointsInput);
  const mergedOutput = [emptyBreakpoints, ...styles].reduce((prev, next) => deepmerge(prev, next), {});
  return removeUnusedBreakpoints(Object.keys(emptyBreakpoints), mergedOutput);
}
function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
  if (typeof breakpointValues !== "object") {
    return {};
  }
  const base = {};
  const breakpointsKeys = Object.keys(themeBreakpoints);
  if (Array.isArray(breakpointValues)) {
    breakpointsKeys.forEach((breakpoint, i) => {
      if (i < breakpointValues.length) {
        base[breakpoint] = true;
      }
    });
  } else {
    breakpointsKeys.forEach((breakpoint) => {
      if (breakpointValues[breakpoint] != null) {
        base[breakpoint] = true;
      }
    });
  }
  return base;
}
function resolveBreakpointValues({
  values: breakpointValues,
  breakpoints: themeBreakpoints,
  base: customBase
}) {
  const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
  const keys2 = Object.keys(base);
  if (keys2.length === 0) {
    return breakpointValues;
  }
  let previous;
  return keys2.reduce((acc, breakpoint, i) => {
    if (Array.isArray(breakpointValues)) {
      acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];
      previous = i;
    } else if (typeof breakpointValues === "object") {
      acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
      previous = breakpoint;
    } else {
      acc[breakpoint] = breakpointValues;
    }
    return acc;
  }, {});
}

// node_modules/@mui/system/node_modules/@mui/utils/esm/capitalize/capitalize.js
function capitalize(string) {
  if (typeof string !== "string") {
    throw new Error(true ? "MUI: `capitalize(string)` expects a string argument." : formatMuiErrorMessage(7));
  }
  return string.charAt(0).toUpperCase() + string.slice(1);
}

// node_modules/@mui/system/esm/style/style.js
function getPath(obj, path, checkVars = true) {
  if (!path || typeof path !== "string") {
    return null;
  }
  if (obj && obj.vars && checkVars) {
    const val = `vars.${path}`.split(".").reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
    if (val != null) {
      return val;
    }
  }
  return path.split(".").reduce((acc, item) => {
    if (acc && acc[item] != null) {
      return acc[item];
    }
    return null;
  }, obj);
}
function getStyleValue(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
  let value;
  if (typeof themeMapping === "function") {
    value = themeMapping(propValueFinal);
  } else if (Array.isArray(themeMapping)) {
    value = themeMapping[propValueFinal] || userValue;
  } else {
    value = getPath(themeMapping, propValueFinal) || userValue;
  }
  if (transform) {
    value = transform(value, userValue, themeMapping);
  }
  return value;
}
function style(options) {
  const {
    prop,
    cssProperty = options.prop,
    themeKey,
    transform
  } = options;
  const fn = (props) => {
    if (props[prop] == null) {
      return null;
    }
    const propValue = props[prop];
    const theme = props.theme;
    const themeMapping = getPath(theme, themeKey) || {};
    const styleFromPropValue = (propValueFinal) => {
      let value = getStyleValue(themeMapping, transform, propValueFinal);
      if (propValueFinal === value && typeof propValueFinal === "string") {
        value = getStyleValue(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : capitalize(propValueFinal)}`, propValueFinal);
      }
      if (cssProperty === false) {
        return value;
      }
      return {
        [cssProperty]: value
      };
    };
    return handleBreakpoints(props, propValue, styleFromPropValue);
  };
  fn.propTypes = true ? {
    [prop]: responsivePropType_default
  } : {};
  fn.filterProps = [prop];
  return fn;
}
var style_default = style;

// node_modules/@mui/system/esm/memoize/memoize.js
function memoize(fn) {
  const cache = {};
  return (arg) => {
    if (cache[arg] === void 0) {
      cache[arg] = fn(arg);
    }
    return cache[arg];
  };
}

// node_modules/@mui/system/esm/spacing/spacing.js
var properties = {
  m: "margin",
  p: "padding"
};
var directions = {
  t: "Top",
  r: "Right",
  b: "Bottom",
  l: "Left",
  x: ["Left", "Right"],
  y: ["Top", "Bottom"]
};
var aliases = {
  marginX: "mx",
  marginY: "my",
  paddingX: "px",
  paddingY: "py"
};
var getCssProperties = memoize((prop) => {
  if (prop.length > 2) {
    if (aliases[prop]) {
      prop = aliases[prop];
    } else {
      return [prop];
    }
  }
  const [a, b] = prop.split("");
  const property = properties[a];
  const direction = directions[b] || "";
  return Array.isArray(direction) ? direction.map((dir) => property + dir) : [property + direction];
});
var marginKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"];
var paddingKeys = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"];
var spacingKeys = [...marginKeys, ...paddingKeys];
function createUnaryUnit(theme, themeKey, defaultValue, propName) {
  const themeSpacing = getPath(theme, themeKey, true) ?? defaultValue;
  if (typeof themeSpacing === "number" || typeof themeSpacing === "string") {
    return (val) => {
      if (typeof val === "string") {
        return val;
      }
      if (true) {
        if (typeof val !== "number") {
          console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${val}.`);
        }
      }
      if (typeof themeSpacing === "string") {
        if (themeSpacing.startsWith("var(") && val === 0) {
          return 0;
        }
        if (themeSpacing.startsWith("var(") && val === 1) {
          return themeSpacing;
        }
        return `calc(${val} * ${themeSpacing})`;
      }
      return themeSpacing * val;
    };
  }
  if (Array.isArray(themeSpacing)) {
    return (val) => {
      if (typeof val === "string") {
        return val;
      }
      const abs = Math.abs(val);
      if (true) {
        if (!Number.isInteger(abs)) {
          console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join("\n"));
        } else if (abs > themeSpacing.length - 1) {
          console.error([`MUI: The value provided (${abs}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs} > ${themeSpacing.length - 1}, you need to add the missing values.`].join("\n"));
        }
      }
      const transformed = themeSpacing[abs];
      if (val >= 0) {
        return transformed;
      }
      if (typeof transformed === "number") {
        return -transformed;
      }
      if (typeof transformed === "string" && transformed.startsWith("var(")) {
        return `calc(-1 * ${transformed})`;
      }
      return `-${transformed}`;
    };
  }
  if (typeof themeSpacing === "function") {
    return themeSpacing;
  }
  if (true) {
    console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, "It should be a number, an array or a function."].join("\n"));
  }
  return () => void 0;
}
function createUnarySpacing(theme) {
  return createUnaryUnit(theme, "spacing", 8, "spacing");
}
function getValue(transformer, propValue) {
  if (typeof propValue === "string" || propValue == null) {
    return propValue;
  }
  return transformer(propValue);
}
function getStyleFromPropValue(cssProperties, transformer) {
  return (propValue) => cssProperties.reduce((acc, cssProperty) => {
    acc[cssProperty] = getValue(transformer, propValue);
    return acc;
  }, {});
}
function resolveCssProperty(props, keys2, prop, transformer) {
  if (!keys2.includes(prop)) {
    return null;
  }
  const cssProperties = getCssProperties(prop);
  const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
  const propValue = props[prop];
  return handleBreakpoints(props, propValue, styleFromPropValue);
}
function style2(props, keys2) {
  const transformer = createUnarySpacing(props.theme);
  return Object.keys(props).map((prop) => resolveCssProperty(props, keys2, prop, transformer)).reduce(merge_default, {});
}
function margin(props) {
  return style2(props, marginKeys);
}
margin.propTypes = true ? marginKeys.reduce((obj, key) => {
  obj[key] = responsivePropType_default;
  return obj;
}, {}) : {};
margin.filterProps = marginKeys;
function padding(props) {
  return style2(props, paddingKeys);
}
padding.propTypes = true ? paddingKeys.reduce((obj, key) => {
  obj[key] = responsivePropType_default;
  return obj;
}, {}) : {};
padding.filterProps = paddingKeys;
function spacing2(props) {
  return style2(props, spacingKeys);
}
spacing2.propTypes = true ? spacingKeys.reduce((obj, key) => {
  obj[key] = responsivePropType_default;
  return obj;
}, {}) : {};
spacing2.filterProps = spacingKeys;
var spacing_default = spacing2;

// node_modules/@mui/system/esm/createTheme/createSpacing.js
function createSpacing(spacingInput = 8, transform = createUnarySpacing({
  spacing: spacingInput
})) {
  if (spacingInput.mui) {
    return spacingInput;
  }
  const spacing3 = (...argsInput) => {
    if (true) {
      if (!(argsInput.length <= 4)) {
        console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
      }
    }
    const args = argsInput.length === 0 ? [1] : argsInput;
    return args.map((argument) => {
      const output = transform(argument);
      return typeof output === "number" ? `${output}px` : output;
    }).join(" ");
  };
  spacing3.mui = true;
  return spacing3;
}

// node_modules/@mui/system/esm/compose/compose.js
function compose(...styles) {
  const handlers = styles.reduce((acc, style4) => {
    style4.filterProps.forEach((prop) => {
      acc[prop] = style4;
    });
    return acc;
  }, {});
  const fn = (props) => {
    return Object.keys(props).reduce((acc, prop) => {
      if (handlers[prop]) {
        return merge_default(acc, handlers[prop](props));
      }
      return acc;
    }, {});
  };
  fn.propTypes = true ? styles.reduce((acc, style4) => Object.assign(acc, style4.propTypes), {}) : {};
  fn.filterProps = styles.reduce((acc, style4) => acc.concat(style4.filterProps), []);
  return fn;
}
var compose_default = compose;

// node_modules/@mui/system/esm/borders/borders.js
function borderTransform(value) {
  if (typeof value !== "number") {
    return value;
  }
  return `${value}px solid`;
}
function createBorderStyle(prop, transform) {
  return style_default({
    prop,
    themeKey: "borders",
    transform
  });
}
var border = createBorderStyle("border", borderTransform);
var borderTop = createBorderStyle("borderTop", borderTransform);
var borderRight = createBorderStyle("borderRight", borderTransform);
var borderBottom = createBorderStyle("borderBottom", borderTransform);
var borderLeft = createBorderStyle("borderLeft", borderTransform);
var borderColor = createBorderStyle("borderColor");
var borderTopColor = createBorderStyle("borderTopColor");
var borderRightColor = createBorderStyle("borderRightColor");
var borderBottomColor = createBorderStyle("borderBottomColor");
var borderLeftColor = createBorderStyle("borderLeftColor");
var outline = createBorderStyle("outline", borderTransform);
var outlineColor = createBorderStyle("outlineColor");
var borderRadius = (props) => {
  if (props.borderRadius !== void 0 && props.borderRadius !== null) {
    const transformer = createUnaryUnit(props.theme, "shape.borderRadius", 4, "borderRadius");
    const styleFromPropValue = (propValue) => ({
      borderRadius: getValue(transformer, propValue)
    });
    return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
  }
  return null;
};
borderRadius.propTypes = true ? {
  borderRadius: responsivePropType_default
} : {};
borderRadius.filterProps = ["borderRadius"];
var borders = compose_default(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius, outline, outlineColor);
var borders_default = borders;

// node_modules/@mui/system/esm/cssGrid/cssGrid.js
var gap = (props) => {
  if (props.gap !== void 0 && props.gap !== null) {
    const transformer = createUnaryUnit(props.theme, "spacing", 8, "gap");
    const styleFromPropValue = (propValue) => ({
      gap: getValue(transformer, propValue)
    });
    return handleBreakpoints(props, props.gap, styleFromPropValue);
  }
  return null;
};
gap.propTypes = true ? {
  gap: responsivePropType_default
} : {};
gap.filterProps = ["gap"];
var columnGap = (props) => {
  if (props.columnGap !== void 0 && props.columnGap !== null) {
    const transformer = createUnaryUnit(props.theme, "spacing", 8, "columnGap");
    const styleFromPropValue = (propValue) => ({
      columnGap: getValue(transformer, propValue)
    });
    return handleBreakpoints(props, props.columnGap, styleFromPropValue);
  }
  return null;
};
columnGap.propTypes = true ? {
  columnGap: responsivePropType_default
} : {};
columnGap.filterProps = ["columnGap"];
var rowGap = (props) => {
  if (props.rowGap !== void 0 && props.rowGap !== null) {
    const transformer = createUnaryUnit(props.theme, "spacing", 8, "rowGap");
    const styleFromPropValue = (propValue) => ({
      rowGap: getValue(transformer, propValue)
    });
    return handleBreakpoints(props, props.rowGap, styleFromPropValue);
  }
  return null;
};
rowGap.propTypes = true ? {
  rowGap: responsivePropType_default
} : {};
rowGap.filterProps = ["rowGap"];
var gridColumn = style_default({
  prop: "gridColumn"
});
var gridRow = style_default({
  prop: "gridRow"
});
var gridAutoFlow = style_default({
  prop: "gridAutoFlow"
});
var gridAutoColumns = style_default({
  prop: "gridAutoColumns"
});
var gridAutoRows = style_default({
  prop: "gridAutoRows"
});
var gridTemplateColumns = style_default({
  prop: "gridTemplateColumns"
});
var gridTemplateRows = style_default({
  prop: "gridTemplateRows"
});
var gridTemplateAreas = style_default({
  prop: "gridTemplateAreas"
});
var gridArea = style_default({
  prop: "gridArea"
});
var grid = compose_default(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
var cssGrid_default = grid;

// node_modules/@mui/system/esm/palette/palette.js
function paletteTransform(value, userValue) {
  if (userValue === "grey") {
    return userValue;
  }
  return value;
}
var color = style_default({
  prop: "color",
  themeKey: "palette",
  transform: paletteTransform
});
var bgcolor = style_default({
  prop: "bgcolor",
  cssProperty: "backgroundColor",
  themeKey: "palette",
  transform: paletteTransform
});
var backgroundColor = style_default({
  prop: "backgroundColor",
  themeKey: "palette",
  transform: paletteTransform
});
var palette = compose_default(color, bgcolor, backgroundColor);
var palette_default = palette;

// node_modules/@mui/system/esm/sizing/sizing.js
function sizingTransform(value) {
  return value <= 1 && value !== 0 ? `${value * 100}%` : value;
}
var width = style_default({
  prop: "width",
  transform: sizingTransform
});
var maxWidth = (props) => {
  if (props.maxWidth !== void 0 && props.maxWidth !== null) {
    const styleFromPropValue = (propValue) => {
      var _a, _b, _c, _d, _e;
      const breakpoint = ((_c = (_b = (_a = props.theme) == null ? void 0 : _a.breakpoints) == null ? void 0 : _b.values) == null ? void 0 : _c[propValue]) || values2[propValue];
      if (!breakpoint) {
        return {
          maxWidth: sizingTransform(propValue)
        };
      }
      if (((_e = (_d = props.theme) == null ? void 0 : _d.breakpoints) == null ? void 0 : _e.unit) !== "px") {
        return {
          maxWidth: `${breakpoint}${props.theme.breakpoints.unit}`
        };
      }
      return {
        maxWidth: breakpoint
      };
    };
    return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
  }
  return null;
};
maxWidth.filterProps = ["maxWidth"];
var minWidth = style_default({
  prop: "minWidth",
  transform: sizingTransform
});
var height = style_default({
  prop: "height",
  transform: sizingTransform
});
var maxHeight = style_default({
  prop: "maxHeight",
  transform: sizingTransform
});
var minHeight = style_default({
  prop: "minHeight",
  transform: sizingTransform
});
var sizeWidth = style_default({
  prop: "size",
  cssProperty: "width",
  transform: sizingTransform
});
var sizeHeight = style_default({
  prop: "size",
  cssProperty: "height",
  transform: sizingTransform
});
var boxSizing = style_default({
  prop: "boxSizing"
});
var sizing = compose_default(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
var sizing_default = sizing;

// node_modules/@mui/system/esm/styleFunctionSx/defaultSxConfig.js
var defaultSxConfig = {
  // borders
  border: {
    themeKey: "borders",
    transform: borderTransform
  },
  borderTop: {
    themeKey: "borders",
    transform: borderTransform
  },
  borderRight: {
    themeKey: "borders",
    transform: borderTransform
  },
  borderBottom: {
    themeKey: "borders",
    transform: borderTransform
  },
  borderLeft: {
    themeKey: "borders",
    transform: borderTransform
  },
  borderColor: {
    themeKey: "palette"
  },
  borderTopColor: {
    themeKey: "palette"
  },
  borderRightColor: {
    themeKey: "palette"
  },
  borderBottomColor: {
    themeKey: "palette"
  },
  borderLeftColor: {
    themeKey: "palette"
  },
  outline: {
    themeKey: "borders",
    transform: borderTransform
  },
  outlineColor: {
    themeKey: "palette"
  },
  borderRadius: {
    themeKey: "shape.borderRadius",
    style: borderRadius
  },
  // palette
  color: {
    themeKey: "palette",
    transform: paletteTransform
  },
  bgcolor: {
    themeKey: "palette",
    cssProperty: "backgroundColor",
    transform: paletteTransform
  },
  backgroundColor: {
    themeKey: "palette",
    transform: paletteTransform
  },
  // spacing
  p: {
    style: padding
  },
  pt: {
    style: padding
  },
  pr: {
    style: padding
  },
  pb: {
    style: padding
  },
  pl: {
    style: padding
  },
  px: {
    style: padding
  },
  py: {
    style: padding
  },
  padding: {
    style: padding
  },
  paddingTop: {
    style: padding
  },
  paddingRight: {
    style: padding
  },
  paddingBottom: {
    style: padding
  },
  paddingLeft: {
    style: padding
  },
  paddingX: {
    style: padding
  },
  paddingY: {
    style: padding
  },
  paddingInline: {
    style: padding
  },
  paddingInlineStart: {
    style: padding
  },
  paddingInlineEnd: {
    style: padding
  },
  paddingBlock: {
    style: padding
  },
  paddingBlockStart: {
    style: padding
  },
  paddingBlockEnd: {
    style: padding
  },
  m: {
    style: margin
  },
  mt: {
    style: margin
  },
  mr: {
    style: margin
  },
  mb: {
    style: margin
  },
  ml: {
    style: margin
  },
  mx: {
    style: margin
  },
  my: {
    style: margin
  },
  margin: {
    style: margin
  },
  marginTop: {
    style: margin
  },
  marginRight: {
    style: margin
  },
  marginBottom: {
    style: margin
  },
  marginLeft: {
    style: margin
  },
  marginX: {
    style: margin
  },
  marginY: {
    style: margin
  },
  marginInline: {
    style: margin
  },
  marginInlineStart: {
    style: margin
  },
  marginInlineEnd: {
    style: margin
  },
  marginBlock: {
    style: margin
  },
  marginBlockStart: {
    style: margin
  },
  marginBlockEnd: {
    style: margin
  },
  // display
  displayPrint: {
    cssProperty: false,
    transform: (value) => ({
      "@media print": {
        display: value
      }
    })
  },
  display: {},
  overflow: {},
  textOverflow: {},
  visibility: {},
  whiteSpace: {},
  // flexbox
  flexBasis: {},
  flexDirection: {},
  flexWrap: {},
  justifyContent: {},
  alignItems: {},
  alignContent: {},
  order: {},
  flex: {},
  flexGrow: {},
  flexShrink: {},
  alignSelf: {},
  justifyItems: {},
  justifySelf: {},
  // grid
  gap: {
    style: gap
  },
  rowGap: {
    style: rowGap
  },
  columnGap: {
    style: columnGap
  },
  gridColumn: {},
  gridRow: {},
  gridAutoFlow: {},
  gridAutoColumns: {},
  gridAutoRows: {},
  gridTemplateColumns: {},
  gridTemplateRows: {},
  gridTemplateAreas: {},
  gridArea: {},
  // positions
  position: {},
  zIndex: {
    themeKey: "zIndex"
  },
  top: {},
  right: {},
  bottom: {},
  left: {},
  // shadows
  boxShadow: {
    themeKey: "shadows"
  },
  // sizing
  width: {
    transform: sizingTransform
  },
  maxWidth: {
    style: maxWidth
  },
  minWidth: {
    transform: sizingTransform
  },
  height: {
    transform: sizingTransform
  },
  maxHeight: {
    transform: sizingTransform
  },
  minHeight: {
    transform: sizingTransform
  },
  boxSizing: {},
  // typography
  font: {
    themeKey: "font"
  },
  fontFamily: {
    themeKey: "typography"
  },
  fontSize: {
    themeKey: "typography"
  },
  fontStyle: {
    themeKey: "typography"
  },
  fontWeight: {
    themeKey: "typography"
  },
  letterSpacing: {},
  textTransform: {},
  lineHeight: {},
  textAlign: {},
  typography: {
    cssProperty: false,
    themeKey: "typography"
  }
};
var defaultSxConfig_default = defaultSxConfig;

// node_modules/@mui/system/esm/styleFunctionSx/styleFunctionSx.js
function objectsHaveSameKeys(...objects) {
  const allKeys = objects.reduce((keys2, object) => keys2.concat(Object.keys(object)), []);
  const union = new Set(allKeys);
  return objects.every((object) => union.size === Object.keys(object).length);
}
function callIfFn(maybeFn, arg) {
  return typeof maybeFn === "function" ? maybeFn(arg) : maybeFn;
}
function unstable_createStyleFunctionSx() {
  function getThemeValue(prop, val, theme, config) {
    const props = {
      [prop]: val,
      theme
    };
    const options = config[prop];
    if (!options) {
      return {
        [prop]: val
      };
    }
    const {
      cssProperty = prop,
      themeKey,
      transform,
      style: style4
    } = options;
    if (val == null) {
      return null;
    }
    if (themeKey === "typography" && val === "inherit") {
      return {
        [prop]: val
      };
    }
    const themeMapping = getPath(theme, themeKey) || {};
    if (style4) {
      return style4(props);
    }
    const styleFromPropValue = (propValueFinal) => {
      let value = getStyleValue(themeMapping, transform, propValueFinal);
      if (propValueFinal === value && typeof propValueFinal === "string") {
        value = getStyleValue(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : capitalize(propValueFinal)}`, propValueFinal);
      }
      if (cssProperty === false) {
        return value;
      }
      return {
        [cssProperty]: value
      };
    };
    return handleBreakpoints(props, val, styleFromPropValue);
  }
  function styleFunctionSx2(props) {
    const {
      sx,
      theme = {},
      nested
    } = props || {};
    if (!sx) {
      return null;
    }
    const config = theme.unstable_sxConfig ?? defaultSxConfig_default;
    function traverse(sxInput) {
      let sxObject = sxInput;
      if (typeof sxInput === "function") {
        sxObject = sxInput(theme);
      } else if (typeof sxInput !== "object") {
        return sxInput;
      }
      if (!sxObject) {
        return null;
      }
      const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);
      const breakpointsKeys = Object.keys(emptyBreakpoints);
      let css2 = emptyBreakpoints;
      Object.keys(sxObject).forEach((styleKey) => {
        const value = callIfFn(sxObject[styleKey], theme);
        if (value !== null && value !== void 0) {
          if (typeof value === "object") {
            if (config[styleKey]) {
              css2 = merge_default(css2, getThemeValue(styleKey, value, theme, config));
            } else {
              const breakpointsValues = handleBreakpoints({
                theme
              }, value, (x) => ({
                [styleKey]: x
              }));
              if (objectsHaveSameKeys(breakpointsValues, value)) {
                css2[styleKey] = styleFunctionSx2({
                  sx: value,
                  theme,
                  nested: true
                });
              } else {
                css2 = merge_default(css2, breakpointsValues);
              }
            }
          } else {
            css2 = merge_default(css2, getThemeValue(styleKey, value, theme, config));
          }
        }
      });
      if (!nested && theme.modularCssLayers) {
        return {
          "@layer sx": sortContainerQueries(theme, removeUnusedBreakpoints(breakpointsKeys, css2))
        };
      }
      return sortContainerQueries(theme, removeUnusedBreakpoints(breakpointsKeys, css2));
    }
    return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
  }
  return styleFunctionSx2;
}
var styleFunctionSx = unstable_createStyleFunctionSx();
styleFunctionSx.filterProps = ["sx"];
var styleFunctionSx_default = styleFunctionSx;

// node_modules/@mui/system/esm/createTheme/applyStyles.js
function applyStyles(key, styles) {
  var _a;
  const theme = this;
  if (theme.vars) {
    if (!((_a = theme.colorSchemes) == null ? void 0 : _a[key]) || typeof theme.getColorSchemeSelector !== "function") {
      return {};
    }
    let selector = theme.getColorSchemeSelector(key);
    if (selector === "&") {
      return styles;
    }
    if (selector.includes("data-") || selector.includes(".")) {
      selector = `*:where(${selector.replace(/\s*&$/, "")}) &`;
    }
    return {
      [selector]: styles
    };
  }
  if (theme.palette.mode === key) {
    return styles;
  }
  return {};
}

// node_modules/@mui/system/esm/createTheme/createTheme.js
function createTheme(options = {}, ...args) {
  const {
    breakpoints: breakpointsInput = {},
    palette: paletteInput = {},
    spacing: spacingInput,
    shape: shapeInput = {},
    ...other
  } = options;
  const breakpoints2 = createBreakpoints(breakpointsInput);
  const spacing3 = createSpacing(spacingInput);
  let muiTheme = deepmerge({
    breakpoints: breakpoints2,
    direction: "ltr",
    components: {},
    // Inject component definitions.
    palette: {
      mode: "light",
      ...paletteInput
    },
    spacing: spacing3,
    shape: {
      ...shape_default,
      ...shapeInput
    }
  }, other);
  muiTheme = cssContainerQueries(muiTheme);
  muiTheme.applyStyles = applyStyles;
  muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
  muiTheme.unstable_sxConfig = {
    ...defaultSxConfig_default,
    ...other == null ? void 0 : other.unstable_sxConfig
  };
  muiTheme.unstable_sx = function sx(props) {
    return styleFunctionSx_default({
      sx: props,
      theme: this
    });
  };
  return muiTheme;
}
var createTheme_default = createTheme;

// node_modules/@mui/system/esm/useThemeWithoutDefault/useThemeWithoutDefault.js
var React19 = __toESM(require_react(), 1);
function isObjectEmpty(obj) {
  return Object.keys(obj).length === 0;
}
function useTheme2(defaultTheme4 = null) {
  const contextTheme = React19.useContext(ThemeContext);
  return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme4 : contextTheme;
}
var useThemeWithoutDefault_default = useTheme2;

// node_modules/@mui/system/esm/useTheme/useTheme.js
var systemDefaultTheme = createTheme_default();
function useTheme3(defaultTheme4 = systemDefaultTheme) {
  return useThemeWithoutDefault_default(defaultTheme4);
}
var useTheme_default = useTheme3;

// node_modules/@mui/system/esm/GlobalStyles/GlobalStyles.js
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
function wrapGlobalLayer(styles) {
  const serialized = internal_serializeStyles(styles);
  if (styles !== serialized && serialized.styles) {
    if (!serialized.styles.match(/^@layer\s+[^{]*$/)) {
      serialized.styles = `@layer global{${serialized.styles}}`;
    }
    return serialized;
  }
  return styles;
}
function GlobalStyles2({
  styles,
  themeId,
  defaultTheme: defaultTheme4 = {}
}) {
  const upperTheme = useTheme_default(defaultTheme4);
  const resolvedTheme = themeId ? upperTheme[themeId] || upperTheme : upperTheme;
  let globalStyles = typeof styles === "function" ? styles(resolvedTheme) : styles;
  if (resolvedTheme.modularCssLayers) {
    if (Array.isArray(globalStyles)) {
      globalStyles = globalStyles.map((styleArg) => {
        if (typeof styleArg === "function") {
          return wrapGlobalLayer(styleArg(resolvedTheme));
        }
        return wrapGlobalLayer(styleArg);
      });
    } else {
      globalStyles = wrapGlobalLayer(globalStyles);
    }
  }
  return (0, import_jsx_runtime6.jsx)(GlobalStyles, {
    styles: globalStyles
  });
}
true ? GlobalStyles2.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  defaultTheme: import_prop_types5.default.object,
  /**
   * @ignore
   */
  styles: import_prop_types5.default.oneOfType([import_prop_types5.default.array, import_prop_types5.default.func, import_prop_types5.default.number, import_prop_types5.default.object, import_prop_types5.default.string, import_prop_types5.default.bool]),
  /**
   * @ignore
   */
  themeId: import_prop_types5.default.string
} : void 0;
var GlobalStyles_default = GlobalStyles2;

// node_modules/@mui/system/esm/display/display.js
var displayPrint = style_default({
  prop: "displayPrint",
  cssProperty: false,
  transform: (value) => ({
    "@media print": {
      display: value
    }
  })
});
var displayRaw = style_default({
  prop: "display"
});
var overflow = style_default({
  prop: "overflow"
});
var textOverflow = style_default({
  prop: "textOverflow"
});
var visibility = style_default({
  prop: "visibility"
});
var whiteSpace = style_default({
  prop: "whiteSpace"
});
var display_default = compose_default(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);

// node_modules/@mui/system/esm/flexbox/flexbox.js
var flexBasis = style_default({
  prop: "flexBasis"
});
var flexDirection = style_default({
  prop: "flexDirection"
});
var flexWrap = style_default({
  prop: "flexWrap"
});
var justifyContent = style_default({
  prop: "justifyContent"
});
var alignItems = style_default({
  prop: "alignItems"
});
var alignContent = style_default({
  prop: "alignContent"
});
var order = style_default({
  prop: "order"
});
var flex = style_default({
  prop: "flex"
});
var flexGrow = style_default({
  prop: "flexGrow"
});
var flexShrink = style_default({
  prop: "flexShrink"
});
var alignSelf = style_default({
  prop: "alignSelf"
});
var justifyItems = style_default({
  prop: "justifyItems"
});
var justifySelf = style_default({
  prop: "justifySelf"
});
var flexbox = compose_default(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);
var flexbox_default = flexbox;

// node_modules/@mui/system/esm/positions/positions.js
var position = style_default({
  prop: "position"
});
var zIndex = style_default({
  prop: "zIndex",
  themeKey: "zIndex"
});
var top = style_default({
  prop: "top"
});
var right = style_default({
  prop: "right"
});
var bottom = style_default({
  prop: "bottom"
});
var left = style_default({
  prop: "left"
});
var positions_default = compose_default(position, zIndex, top, right, bottom, left);

// node_modules/@mui/system/esm/shadows/shadows.js
var boxShadow = style_default({
  prop: "boxShadow",
  themeKey: "shadows"
});
var shadows_default = boxShadow;

// node_modules/@mui/system/esm/typography/typography.js
var fontFamily = style_default({
  prop: "fontFamily",
  themeKey: "typography"
});
var fontSize = style_default({
  prop: "fontSize",
  themeKey: "typography"
});
var fontStyle = style_default({
  prop: "fontStyle",
  themeKey: "typography"
});
var fontWeight = style_default({
  prop: "fontWeight",
  themeKey: "typography"
});
var letterSpacing = style_default({
  prop: "letterSpacing"
});
var textTransform = style_default({
  prop: "textTransform"
});
var lineHeight = style_default({
  prop: "lineHeight"
});
var textAlign = style_default({
  prop: "textAlign"
});
var typographyVariant = style_default({
  prop: "typography",
  cssProperty: false,
  themeKey: "typography"
});
var typography = compose_default(typographyVariant, fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign, textTransform);
var typography_default = typography;

// node_modules/@mui/system/esm/styleFunctionSx/extendSxProp.js
var splitProps = (props) => {
  var _a;
  const result = {
    systemProps: {},
    otherProps: {}
  };
  const config = ((_a = props == null ? void 0 : props.theme) == null ? void 0 : _a.unstable_sxConfig) ?? defaultSxConfig_default;
  Object.keys(props).forEach((prop) => {
    if (config[prop]) {
      result.systemProps[prop] = props[prop];
    } else {
      result.otherProps[prop] = props[prop];
    }
  });
  return result;
};
function extendSxProp(props) {
  const {
    sx: inSx,
    ...other
  } = props;
  const {
    systemProps,
    otherProps
  } = splitProps(other);
  let finalSx;
  if (Array.isArray(inSx)) {
    finalSx = [systemProps, ...inSx];
  } else if (typeof inSx === "function") {
    finalSx = (...args) => {
      const result = inSx(...args);
      if (!isPlainObject(result)) {
        return systemProps;
      }
      return {
        ...systemProps,
        ...result
      };
    };
  } else {
    finalSx = {
      ...systemProps,
      ...inSx
    };
  }
  return {
    ...otherProps,
    sx: finalSx
  };
}

// node_modules/@mui/system/esm/getThemeValue/getThemeValue.js
var filterPropsMapping = {
  borders: borders_default.filterProps,
  display: display_default.filterProps,
  flexbox: flexbox_default.filterProps,
  grid: cssGrid_default.filterProps,
  positions: positions_default.filterProps,
  palette: palette_default.filterProps,
  shadows: shadows_default.filterProps,
  sizing: sizing_default.filterProps,
  spacing: spacing_default.filterProps,
  typography: typography_default.filterProps
};
var styleFunctionMapping = {
  borders: borders_default,
  display: display_default,
  flexbox: flexbox_default,
  grid: cssGrid_default,
  positions: positions_default,
  palette: palette_default,
  shadows: shadows_default,
  sizing: sizing_default,
  spacing: spacing_default,
  typography: typography_default
};
var propToStyleFunction = Object.keys(filterPropsMapping).reduce((acc, styleFnName) => {
  filterPropsMapping[styleFnName].forEach((propName) => {
    acc[propName] = styleFunctionMapping[styleFnName];
  });
  return acc;
}, {});

// node_modules/@mui/system/esm/Box/Box.js
var import_prop_types6 = __toESM(require_prop_types(), 1);

// node_modules/@mui/system/node_modules/@mui/utils/esm/ClassNameGenerator/ClassNameGenerator.js
var defaultGenerator = (componentName) => componentName;
var createClassNameGenerator = () => {
  let generate = defaultGenerator;
  return {
    configure(generator) {
      generate = generator;
    },
    generate(componentName) {
      return generate(componentName);
    },
    reset() {
      generate = defaultGenerator;
    }
  };
};
var ClassNameGenerator = createClassNameGenerator();
var ClassNameGenerator_default = ClassNameGenerator;

// node_modules/@mui/system/esm/createBox/createBox.js
var React21 = __toESM(require_react(), 1);
init_clsx();
var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
function createBox(options = {}) {
  const {
    themeId,
    defaultTheme: defaultTheme4,
    defaultClassName = "MuiBox-root",
    generateClassName
  } = options;
  const BoxRoot = styled2("div", {
    shouldForwardProp: (prop) => prop !== "theme" && prop !== "sx" && prop !== "as"
  })(styleFunctionSx_default);
  const Box2 = React21.forwardRef(function Box3(inProps, ref) {
    const theme = useTheme_default(defaultTheme4);
    const {
      className,
      component = "div",
      ...other
    } = extendSxProp(inProps);
    return (0, import_jsx_runtime7.jsx)(BoxRoot, {
      as: component,
      ref,
      className: clsx_default(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),
      theme: themeId ? theme[themeId] || theme : theme,
      ...other
    });
  });
  return Box2;
}

// node_modules/@mui/system/node_modules/@mui/utils/esm/generateUtilityClass/generateUtilityClass.js
var globalStateClasses = {
  active: "active",
  checked: "checked",
  completed: "completed",
  disabled: "disabled",
  error: "error",
  expanded: "expanded",
  focused: "focused",
  focusVisible: "focusVisible",
  open: "open",
  readOnly: "readOnly",
  required: "required",
  selected: "selected"
};
function generateUtilityClass(componentName, slot, globalStatePrefix = "Mui") {
  const globalStateClass = globalStateClasses[slot];
  return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${ClassNameGenerator_default.generate(componentName)}-${slot}`;
}

// node_modules/@mui/system/node_modules/@mui/utils/esm/generateUtilityClasses/generateUtilityClasses.js
function generateUtilityClasses(componentName, slots, globalStatePrefix = "Mui") {
  const result = {};
  slots.forEach((slot) => {
    result[slot] = generateUtilityClass(componentName, slot, globalStatePrefix);
  });
  return result;
}

// node_modules/@mui/system/esm/Box/boxClasses.js
var boxClasses = generateUtilityClasses("MuiBox", ["root"]);
var boxClasses_default = boxClasses;

// node_modules/@mui/system/esm/Box/Box.js
var Box = createBox({
  defaultClassName: boxClasses_default.root,
  generateClassName: ClassNameGenerator_default.generate
});
true ? Box.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types6.default.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types6.default.elementType,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types6.default.oneOfType([import_prop_types6.default.arrayOf(import_prop_types6.default.oneOfType([import_prop_types6.default.func, import_prop_types6.default.object, import_prop_types6.default.bool])), import_prop_types6.default.func, import_prop_types6.default.object])
} : void 0;

// node_modules/@mui/system/node_modules/@mui/utils/esm/getDisplayName/getDisplayName.js
var import_react_is2 = __toESM(require_react_is(), 1);
function getFunctionComponentName(Component, fallback = "") {
  return Component.displayName || Component.name || fallback;
}
function getWrappedName(outerType, innerType, wrapperName) {
  const functionName = getFunctionComponentName(innerType);
  return outerType.displayName || (functionName !== "" ? `${wrapperName}(${functionName})` : wrapperName);
}
function getDisplayName(Component) {
  if (Component == null) {
    return void 0;
  }
  if (typeof Component === "string") {
    return Component;
  }
  if (typeof Component === "function") {
    return getFunctionComponentName(Component, "Component");
  }
  if (typeof Component === "object") {
    switch (Component.$$typeof) {
      case import_react_is2.ForwardRef:
        return getWrappedName(Component, Component.render, "ForwardRef");
      case import_react_is2.Memo:
        return getWrappedName(Component, Component.type, "memo");
      default:
        return void 0;
    }
  }
  return void 0;
}

// node_modules/@mui/system/esm/preprocessStyles.js
function preprocessStyles(input) {
  const {
    variants,
    ...style4
  } = input;
  const result = {
    variants,
    style: internal_serializeStyles(style4),
    isProcessed: true
  };
  if (result.style === style4) {
    return result;
  }
  if (variants) {
    variants.forEach((variant) => {
      if (typeof variant.style !== "function") {
        variant.style = internal_serializeStyles(variant.style);
      }
    });
  }
  return result;
}

// node_modules/@mui/system/esm/createStyled/createStyled.js
var systemDefaultTheme2 = createTheme_default();
function shouldForwardProp(prop) {
  return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
}
function shallowLayer(serialized, layerName) {
  if (layerName && serialized && typeof serialized === "object" && serialized.styles && !serialized.styles.startsWith("@layer")) {
    serialized.styles = `@layer ${layerName}{${String(serialized.styles)}}`;
  }
  return serialized;
}
function defaultOverridesResolver(slot) {
  if (!slot) {
    return null;
  }
  return (_props, styles) => styles[slot];
}
function attachTheme(props, themeId, defaultTheme4) {
  props.theme = isObjectEmpty2(props.theme) ? defaultTheme4 : props.theme[themeId] || props.theme;
}
function processStyle(props, style4, layerName) {
  const resolvedStyle = typeof style4 === "function" ? style4(props) : style4;
  if (Array.isArray(resolvedStyle)) {
    return resolvedStyle.flatMap((subStyle) => processStyle(props, subStyle, layerName));
  }
  if (Array.isArray(resolvedStyle == null ? void 0 : resolvedStyle.variants)) {
    let rootStyle;
    if (resolvedStyle.isProcessed) {
      rootStyle = layerName ? shallowLayer(resolvedStyle.style, layerName) : resolvedStyle.style;
    } else {
      const {
        variants,
        ...otherStyles
      } = resolvedStyle;
      rootStyle = layerName ? shallowLayer(internal_serializeStyles(otherStyles), layerName) : otherStyles;
    }
    return processStyleVariants(props, resolvedStyle.variants, [rootStyle], layerName);
  }
  if (resolvedStyle == null ? void 0 : resolvedStyle.isProcessed) {
    return layerName ? shallowLayer(internal_serializeStyles(resolvedStyle.style), layerName) : resolvedStyle.style;
  }
  return layerName ? shallowLayer(internal_serializeStyles(resolvedStyle), layerName) : resolvedStyle;
}
function processStyleVariants(props, variants, results = [], layerName = void 0) {
  var _a;
  let mergedState;
  variantLoop: for (let i = 0; i < variants.length; i += 1) {
    const variant = variants[i];
    if (typeof variant.props === "function") {
      mergedState ?? (mergedState = {
        ...props,
        ...props.ownerState,
        ownerState: props.ownerState
      });
      if (!variant.props(mergedState)) {
        continue;
      }
    } else {
      for (const key in variant.props) {
        if (props[key] !== variant.props[key] && ((_a = props.ownerState) == null ? void 0 : _a[key]) !== variant.props[key]) {
          continue variantLoop;
        }
      }
    }
    if (typeof variant.style === "function") {
      mergedState ?? (mergedState = {
        ...props,
        ...props.ownerState,
        ownerState: props.ownerState
      });
      results.push(layerName ? shallowLayer(internal_serializeStyles(variant.style(mergedState)), layerName) : variant.style(mergedState));
    } else {
      results.push(layerName ? shallowLayer(internal_serializeStyles(variant.style), layerName) : variant.style);
    }
  }
  return results;
}
function createStyled(input = {}) {
  const {
    themeId,
    defaultTheme: defaultTheme4 = systemDefaultTheme2,
    rootShouldForwardProp = shouldForwardProp,
    slotShouldForwardProp = shouldForwardProp
  } = input;
  function styleAttachTheme(props) {
    attachTheme(props, themeId, defaultTheme4);
  }
  const styled4 = (tag, inputOptions = {}) => {
    internal_mutateStyles(tag, (styles) => styles.filter((style4) => style4 !== styleFunctionSx_default));
    const {
      name: componentName,
      slot: componentSlot,
      skipVariantsResolver: inputSkipVariantsResolver,
      skipSx: inputSkipSx,
      // TODO v6: remove `lowercaseFirstLetter()` in the next major release
      // For more details: https://github.com/mui/material-ui/pull/37908
      overridesResolver = defaultOverridesResolver(lowercaseFirstLetter(componentSlot)),
      ...options
    } = inputOptions;
    const layerName = componentName && componentName.startsWith("Mui") || !!componentSlot ? "components" : "custom";
    const skipVariantsResolver = inputSkipVariantsResolver !== void 0 ? inputSkipVariantsResolver : (
      // TODO v6: remove `Root` in the next major release
      // For more details: https://github.com/mui/material-ui/pull/37908
      componentSlot && componentSlot !== "Root" && componentSlot !== "root" || false
    );
    const skipSx = inputSkipSx || false;
    let shouldForwardPropOption = shouldForwardProp;
    if (componentSlot === "Root" || componentSlot === "root") {
      shouldForwardPropOption = rootShouldForwardProp;
    } else if (componentSlot) {
      shouldForwardPropOption = slotShouldForwardProp;
    } else if (isStringTag(tag)) {
      shouldForwardPropOption = void 0;
    }
    const defaultStyledResolver = styled2(tag, {
      shouldForwardProp: shouldForwardPropOption,
      label: generateStyledLabel(componentName, componentSlot),
      ...options
    });
    const transformStyle = (style4) => {
      if (style4.__emotion_real === style4) {
        return style4;
      }
      if (typeof style4 === "function") {
        return function styleFunctionProcessor(props) {
          return processStyle(props, style4, props.theme.modularCssLayers ? layerName : void 0);
        };
      }
      if (isPlainObject(style4)) {
        const serialized = preprocessStyles(style4);
        return function styleObjectProcessor(props) {
          if (!serialized.variants) {
            return props.theme.modularCssLayers ? shallowLayer(serialized.style, layerName) : serialized.style;
          }
          return processStyle(props, serialized, props.theme.modularCssLayers ? layerName : void 0);
        };
      }
      return style4;
    };
    const muiStyledResolver = (...expressionsInput) => {
      const expressionsHead = [];
      const expressionsBody = expressionsInput.map(transformStyle);
      const expressionsTail = [];
      expressionsHead.push(styleAttachTheme);
      if (componentName && overridesResolver) {
        expressionsTail.push(function styleThemeOverrides(props) {
          var _a, _b;
          const theme = props.theme;
          const styleOverrides = (_b = (_a = theme.components) == null ? void 0 : _a[componentName]) == null ? void 0 : _b.styleOverrides;
          if (!styleOverrides) {
            return null;
          }
          const resolvedStyleOverrides = {};
          for (const slotKey in styleOverrides) {
            resolvedStyleOverrides[slotKey] = processStyle(props, styleOverrides[slotKey], props.theme.modularCssLayers ? "theme" : void 0);
          }
          return overridesResolver(props, resolvedStyleOverrides);
        });
      }
      if (componentName && !skipVariantsResolver) {
        expressionsTail.push(function styleThemeVariants(props) {
          var _a, _b;
          const theme = props.theme;
          const themeVariants = (_b = (_a = theme == null ? void 0 : theme.components) == null ? void 0 : _a[componentName]) == null ? void 0 : _b.variants;
          if (!themeVariants) {
            return null;
          }
          return processStyleVariants(props, themeVariants, [], props.theme.modularCssLayers ? "theme" : void 0);
        });
      }
      if (!skipSx) {
        expressionsTail.push(styleFunctionSx_default);
      }
      if (Array.isArray(expressionsBody[0])) {
        const inputStrings = expressionsBody.shift();
        const placeholdersHead = new Array(expressionsHead.length).fill("");
        const placeholdersTail = new Array(expressionsTail.length).fill("");
        let outputStrings;
        {
          outputStrings = [...placeholdersHead, ...inputStrings, ...placeholdersTail];
          outputStrings.raw = [...placeholdersHead, ...inputStrings.raw, ...placeholdersTail];
        }
        expressionsHead.unshift(outputStrings);
      }
      const expressions = [...expressionsHead, ...expressionsBody, ...expressionsTail];
      const Component = defaultStyledResolver(...expressions);
      if (tag.muiName) {
        Component.muiName = tag.muiName;
      }
      if (true) {
        Component.displayName = generateDisplayName(componentName, componentSlot, tag);
      }
      return Component;
    };
    if (defaultStyledResolver.withConfig) {
      muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
    }
    return muiStyledResolver;
  };
  return styled4;
}
function generateDisplayName(componentName, componentSlot, tag) {
  if (componentName) {
    return `${componentName}${capitalize(componentSlot || "")}`;
  }
  return `Styled(${getDisplayName(tag)})`;
}
function generateStyledLabel(componentName, componentSlot) {
  let label;
  if (true) {
    if (componentName) {
      label = `${componentName}-${lowercaseFirstLetter(componentSlot || "Root")}`;
    }
  }
  return label;
}
function isObjectEmpty2(object) {
  for (const _ in object) {
    return false;
  }
  return true;
}
function isStringTag(tag) {
  return typeof tag === "string" && // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  tag.charCodeAt(0) > 96;
}
function lowercaseFirstLetter(string) {
  if (!string) {
    return string;
  }
  return string.charAt(0).toLowerCase() + string.slice(1);
}

// node_modules/@mui/system/esm/styled/styled.js
var styled3 = createStyled();
var styled_default2 = styled3;

// node_modules/@mui/system/node_modules/@mui/utils/esm/resolveProps/resolveProps.js
init_clsx();
function resolveProps(defaultProps, props, mergeClassNameAndStyle = false) {
  const output = {
    ...props
  };
  for (const key in defaultProps) {
    if (Object.prototype.hasOwnProperty.call(defaultProps, key)) {
      const propName = key;
      if (propName === "components" || propName === "slots") {
        output[propName] = {
          ...defaultProps[propName],
          ...output[propName]
        };
      } else if (propName === "componentsProps" || propName === "slotProps") {
        const defaultSlotProps = defaultProps[propName];
        const slotProps = props[propName];
        if (!slotProps) {
          output[propName] = defaultSlotProps || {};
        } else if (!defaultSlotProps) {
          output[propName] = slotProps;
        } else {
          output[propName] = {
            ...slotProps
          };
          for (const slotKey in defaultSlotProps) {
            if (Object.prototype.hasOwnProperty.call(defaultSlotProps, slotKey)) {
              const slotPropName = slotKey;
              output[propName][slotPropName] = resolveProps(defaultSlotProps[slotPropName], slotProps[slotPropName], mergeClassNameAndStyle);
            }
          }
        }
      } else if (propName === "className" && mergeClassNameAndStyle && props.className) {
        output.className = clsx_default(defaultProps == null ? void 0 : defaultProps.className, props == null ? void 0 : props.className);
      } else if (propName === "style" && mergeClassNameAndStyle && props.style) {
        output.style = {
          ...defaultProps == null ? void 0 : defaultProps.style,
          ...props == null ? void 0 : props.style
        };
      } else if (output[propName] === void 0) {
        output[propName] = defaultProps[propName];
      }
    }
  }
  return output;
}

// node_modules/@mui/system/esm/useThemeProps/getThemeProps.js
function getThemeProps(params) {
  const {
    theme,
    name,
    props
  } = params;
  if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
    return props;
  }
  return resolveProps(theme.components[name].defaultProps, props);
}

// node_modules/@mui/system/esm/useThemeProps/useThemeProps.js
function useThemeProps({
  props,
  name,
  defaultTheme: defaultTheme4,
  themeId
}) {
  let theme = useTheme_default(defaultTheme4);
  if (themeId) {
    theme = theme[themeId] || theme;
  }
  return getThemeProps({
    theme,
    name,
    props
  });
}

// node_modules/@mui/system/esm/useMediaQuery/useMediaQuery.js
var React23 = __toESM(require_react(), 1);

// node_modules/@mui/system/node_modules/@mui/utils/esm/useEnhancedEffect/useEnhancedEffect.js
var React22 = __toESM(require_react(), 1);
var useEnhancedEffect2 = typeof window !== "undefined" ? React22.useLayoutEffect : React22.useEffect;
var useEnhancedEffect_default2 = useEnhancedEffect2;

// node_modules/@mui/system/esm/useMediaQuery/useMediaQuery.js
function useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {
  const [match, setMatch] = React23.useState(() => {
    if (noSsr && matchMedia) {
      return matchMedia(query).matches;
    }
    if (ssrMatchMedia) {
      return ssrMatchMedia(query).matches;
    }
    return defaultMatches;
  });
  useEnhancedEffect_default2(() => {
    if (!matchMedia) {
      return void 0;
    }
    const queryList = matchMedia(query);
    const updateMatch = () => {
      setMatch(queryList.matches);
    };
    updateMatch();
    queryList.addEventListener("change", updateMatch);
    return () => {
      queryList.removeEventListener("change", updateMatch);
    };
  }, [query, matchMedia]);
  return match;
}
var safeReact2 = {
  ...React23
};
var maybeReactUseSyncExternalStore = safeReact2.useSyncExternalStore;
function useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {
  const getDefaultSnapshot = React23.useCallback(() => defaultMatches, [defaultMatches]);
  const getServerSnapshot = React23.useMemo(() => {
    if (noSsr && matchMedia) {
      return () => matchMedia(query).matches;
    }
    if (ssrMatchMedia !== null) {
      const {
        matches
      } = ssrMatchMedia(query);
      return () => matches;
    }
    return getDefaultSnapshot;
  }, [getDefaultSnapshot, query, ssrMatchMedia, noSsr, matchMedia]);
  const [getSnapshot, subscribe] = React23.useMemo(() => {
    if (matchMedia === null) {
      return [getDefaultSnapshot, () => () => {
      }];
    }
    const mediaQueryList = matchMedia(query);
    return [() => mediaQueryList.matches, (notify) => {
      mediaQueryList.addEventListener("change", notify);
      return () => {
        mediaQueryList.removeEventListener("change", notify);
      };
    }];
  }, [getDefaultSnapshot, matchMedia, query]);
  const match = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
  return match;
}
function unstable_createUseMediaQuery(params = {}) {
  const {
    themeId
  } = params;
  return function useMediaQuery2(queryInput, options = {}) {
    let theme = useThemeWithoutDefault_default();
    if (theme && themeId) {
      theme = theme[themeId] || theme;
    }
    const supportMatchMedia = typeof window !== "undefined" && typeof window.matchMedia !== "undefined";
    const {
      defaultMatches = false,
      matchMedia = supportMatchMedia ? window.matchMedia : null,
      ssrMatchMedia = null,
      noSsr = false
    } = getThemeProps({
      name: "MuiUseMediaQuery",
      props: options,
      theme
    });
    if (true) {
      if (typeof queryInput === "function" && theme === null) {
        console.error(["MUI: The `query` argument provided is invalid.", "You are providing a function without a theme in the context.", "One of the parent elements needs to use a ThemeProvider."].join("\n"));
      }
    }
    let query = typeof queryInput === "function" ? queryInput(theme) : queryInput;
    query = query.replace(/^@media( ?)/m, "");
    if (query.includes("print")) {
      console.warn([`MUI: You have provided a \`print\` query to the \`useMediaQuery\` hook.`, "Using the print media query to modify print styles can lead to unexpected results.", "Consider using the `displayPrint` field in the `sx` prop instead.", "More information about `displayPrint` on our docs: https://mui.com/system/display/#display-in-print."].join("\n"));
    }
    const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== void 0 ? useMediaQueryNew : useMediaQueryOld;
    const match = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);
    if (true) {
      React23.useDebugValue({
        query,
        match
      });
    }
    return match;
  };
}
var useMediaQuery = unstable_createUseMediaQuery();

// node_modules/@mui/system/esm/ThemeProvider/ThemeProvider.js
var React31 = __toESM(require_react(), 1);
var import_prop_types10 = __toESM(require_prop_types(), 1);

// node_modules/@mui/private-theming/esm/ThemeProvider/ThemeProvider.js
var React26 = __toESM(require_react(), 1);
var import_prop_types7 = __toESM(require_prop_types(), 1);

// node_modules/@mui/private-theming/node_modules/@mui/utils/esm/exactProp/exactProp.js
var specialProperty = "exact-prop: ​";
function exactProp(propTypes) {
  if (false) {
    return propTypes;
  }
  return {
    ...propTypes,
    [specialProperty]: (props) => {
      const unsupportedProps = Object.keys(props).filter((prop) => !propTypes.hasOwnProperty(prop));
      if (unsupportedProps.length > 0) {
        return new Error(`The following props are not supported: ${unsupportedProps.map((prop) => `\`${prop}\``).join(", ")}. Please remove them.`);
      }
      return null;
    }
  };
}

// node_modules/@mui/private-theming/esm/useTheme/ThemeContext.js
var React24 = __toESM(require_react(), 1);
var ThemeContext2 = React24.createContext(null);
if (true) {
  ThemeContext2.displayName = "ThemeContext";
}
var ThemeContext_default = ThemeContext2;

// node_modules/@mui/private-theming/esm/useTheme/useTheme.js
var React25 = __toESM(require_react(), 1);
function useTheme4() {
  const theme = React25.useContext(ThemeContext_default);
  if (true) {
    React25.useDebugValue(theme);
  }
  return theme;
}

// node_modules/@mui/private-theming/esm/ThemeProvider/nested.js
var hasSymbol = typeof Symbol === "function" && Symbol.for;
var nested_default = hasSymbol ? Symbol.for("mui.nested") : "__THEME_NESTED__";

// node_modules/@mui/private-theming/esm/ThemeProvider/ThemeProvider.js
var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
function mergeOuterLocalTheme(outerTheme, localTheme) {
  if (typeof localTheme === "function") {
    const mergedTheme = localTheme(outerTheme);
    if (true) {
      if (!mergedTheme) {
        console.error(["MUI: You should return an object from your theme function, i.e.", "<ThemeProvider theme={() => ({})} />"].join("\n"));
      }
    }
    return mergedTheme;
  }
  return {
    ...outerTheme,
    ...localTheme
  };
}
function ThemeProvider(props) {
  const {
    children,
    theme: localTheme
  } = props;
  const outerTheme = useTheme4();
  if (true) {
    if (outerTheme === null && typeof localTheme === "function") {
      console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
    }
  }
  const theme = React26.useMemo(() => {
    const output = outerTheme === null ? {
      ...localTheme
    } : mergeOuterLocalTheme(outerTheme, localTheme);
    if (output != null) {
      output[nested_default] = outerTheme !== null;
    }
    return output;
  }, [localTheme, outerTheme]);
  return (0, import_jsx_runtime8.jsx)(ThemeContext_default.Provider, {
    value: theme,
    children
  });
}
true ? ThemeProvider.propTypes = {
  /**
   * Your component tree.
   */
  children: import_prop_types7.default.node,
  /**
   * A theme object. You can provide a function to extend the outer theme.
   */
  theme: import_prop_types7.default.oneOfType([import_prop_types7.default.object, import_prop_types7.default.func]).isRequired
} : void 0;
if (true) {
  true ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;
}
var ThemeProvider_default = ThemeProvider;

// node_modules/@mui/system/node_modules/@mui/utils/esm/exactProp/exactProp.js
var specialProperty2 = "exact-prop: ​";
function exactProp2(propTypes) {
  if (false) {
    return propTypes;
  }
  return {
    ...propTypes,
    [specialProperty2]: (props) => {
      const unsupportedProps = Object.keys(props).filter((prop) => !propTypes.hasOwnProperty(prop));
      if (unsupportedProps.length > 0) {
        return new Error(`The following props are not supported: ${unsupportedProps.map((prop) => `\`${prop}\``).join(", ")}. Please remove them.`);
      }
      return null;
    }
  };
}

// node_modules/@mui/system/esm/RtlProvider/index.js
var React27 = __toESM(require_react());
var import_prop_types8 = __toESM(require_prop_types());
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var RtlContext = React27.createContext();
function RtlProvider({
  value,
  ...props
}) {
  return (0, import_jsx_runtime9.jsx)(RtlContext.Provider, {
    value: value ?? true,
    ...props
  });
}
true ? RtlProvider.propTypes = {
  children: import_prop_types8.default.node,
  value: import_prop_types8.default.bool
} : void 0;
var useRtl = () => {
  const value = React27.useContext(RtlContext);
  return value ?? false;
};
var RtlProvider_default = RtlProvider;

// node_modules/@mui/system/esm/DefaultPropsProvider/DefaultPropsProvider.js
var React28 = __toESM(require_react(), 1);
var import_prop_types9 = __toESM(require_prop_types(), 1);
var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
var PropsContext = React28.createContext(void 0);
function DefaultPropsProvider({
  value,
  children
}) {
  return (0, import_jsx_runtime10.jsx)(PropsContext.Provider, {
    value,
    children
  });
}
true ? DefaultPropsProvider.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types9.default.node,
  /**
   * @ignore
   */
  value: import_prop_types9.default.object
} : void 0;
var DefaultPropsProvider_default = DefaultPropsProvider;

// node_modules/@mui/system/esm/ThemeProvider/useLayerOrder.js
var React30 = __toESM(require_react(), 1);

// node_modules/@mui/system/node_modules/@mui/utils/esm/useId/useId.js
var React29 = __toESM(require_react(), 1);
var globalId2 = 0;
function useGlobalId2(idOverride) {
  const [defaultId, setDefaultId] = React29.useState(idOverride);
  const id = idOverride || defaultId;
  React29.useEffect(() => {
    if (defaultId == null) {
      globalId2 += 1;
      setDefaultId(`mui-${globalId2}`);
    }
  }, [defaultId]);
  return id;
}
var safeReact3 = {
  ...React29
};
var maybeReactUseId2 = safeReact3.useId;
function useId2(idOverride) {
  if (maybeReactUseId2 !== void 0) {
    const reactId = maybeReactUseId2();
    return idOverride ?? reactId;
  }
  return useGlobalId2(idOverride);
}

// node_modules/@mui/system/esm/ThemeProvider/useLayerOrder.js
var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
function useLayerOrder(theme) {
  const upperTheme = useThemeWithoutDefault_default();
  const id = useId2() || "";
  const {
    modularCssLayers
  } = theme;
  let layerOrder = "mui.global, mui.components, mui.theme, mui.custom, mui.sx";
  if (!modularCssLayers || upperTheme !== null) {
    layerOrder = "";
  } else if (typeof modularCssLayers === "string") {
    layerOrder = modularCssLayers.replace(/mui(?!\.)/g, layerOrder);
  } else {
    layerOrder = `@layer ${layerOrder};`;
  }
  useEnhancedEffect_default2(() => {
    var _a, _b;
    const head = document.querySelector("head");
    if (!head) {
      return;
    }
    const firstChild = head.firstChild;
    if (layerOrder) {
      if (firstChild && ((_a = firstChild.hasAttribute) == null ? void 0 : _a.call(firstChild, "data-mui-layer-order")) && firstChild.getAttribute("data-mui-layer-order") === id) {
        return;
      }
      const styleElement = document.createElement("style");
      styleElement.setAttribute("data-mui-layer-order", id);
      styleElement.textContent = layerOrder;
      head.prepend(styleElement);
    } else {
      (_b = head.querySelector(`style[data-mui-layer-order="${id}"]`)) == null ? void 0 : _b.remove();
    }
  }, [layerOrder, id]);
  if (!layerOrder) {
    return null;
  }
  return (0, import_jsx_runtime11.jsx)(GlobalStyles_default, {
    styles: layerOrder
  });
}

// node_modules/@mui/system/esm/ThemeProvider/ThemeProvider.js
var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
var EMPTY_THEME = {};
function useThemeScoping(themeId, upperTheme, localTheme, isPrivate = false) {
  return React31.useMemo(() => {
    const resolvedTheme = themeId ? upperTheme[themeId] || upperTheme : upperTheme;
    if (typeof localTheme === "function") {
      const mergedTheme = localTheme(resolvedTheme);
      const result = themeId ? {
        ...upperTheme,
        [themeId]: mergedTheme
      } : mergedTheme;
      if (isPrivate) {
        return () => result;
      }
      return result;
    }
    return themeId ? {
      ...upperTheme,
      [themeId]: localTheme
    } : {
      ...upperTheme,
      ...localTheme
    };
  }, [themeId, upperTheme, localTheme, isPrivate]);
}
function ThemeProvider2(props) {
  const {
    children,
    theme: localTheme,
    themeId
  } = props;
  const upperTheme = useThemeWithoutDefault_default(EMPTY_THEME);
  const upperPrivateTheme = useTheme4() || EMPTY_THEME;
  if (true) {
    if (upperTheme === null && typeof localTheme === "function" || themeId && upperTheme && !upperTheme[themeId] && typeof localTheme === "function") {
      console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
    }
  }
  const engineTheme = useThemeScoping(themeId, upperTheme, localTheme);
  const privateTheme = useThemeScoping(themeId, upperPrivateTheme, localTheme, true);
  const rtlValue = (themeId ? engineTheme[themeId] : engineTheme).direction === "rtl";
  const layerOrder = useLayerOrder(engineTheme);
  return (0, import_jsx_runtime12.jsx)(ThemeProvider_default, {
    theme: privateTheme,
    children: (0, import_jsx_runtime12.jsx)(ThemeContext.Provider, {
      value: engineTheme,
      children: (0, import_jsx_runtime12.jsx)(RtlProvider_default, {
        value: rtlValue,
        children: (0, import_jsx_runtime12.jsxs)(DefaultPropsProvider_default, {
          value: themeId ? engineTheme[themeId].components : engineTheme.components,
          children: [layerOrder, children]
        })
      })
    })
  });
}
true ? ThemeProvider2.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Your component tree.
   */
  children: import_prop_types10.default.node,
  /**
   * A theme object. You can provide a function to extend the outer theme.
   */
  theme: import_prop_types10.default.oneOfType([import_prop_types10.default.func, import_prop_types10.default.object]).isRequired,
  /**
   * The design system's unique id for getting the corresponded theme when there are multiple design systems.
   */
  themeId: import_prop_types10.default.string
} : void 0;
if (true) {
  true ? ThemeProvider2.propTypes = exactProp2(ThemeProvider2.propTypes) : void 0;
}

// node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js
var React34 = __toESM(require_react(), 1);
var import_prop_types11 = __toESM(require_prop_types(), 1);

// node_modules/@mui/system/esm/InitColorSchemeScript/InitColorSchemeScript.js
var React32 = __toESM(require_react(), 1);
var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);

// node_modules/@mui/system/esm/cssVars/useCurrentColorScheme.js
var React33 = __toESM(require_react(), 1);

// node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js
var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);

// node_modules/@mui/system/esm/version/index.js
var major = Number("7");
var minor = Number("3");
var patch = Number("1");

// node_modules/@mui/system/esm/Container/createContainer.js
var React35 = __toESM(require_react(), 1);
var import_prop_types12 = __toESM(require_prop_types(), 1);
init_clsx();

// node_modules/@mui/system/node_modules/@mui/utils/esm/composeClasses/composeClasses.js
function composeClasses(slots, getUtilityClass, classes2 = void 0) {
  const output = {};
  for (const slotName in slots) {
    const slot = slots[slotName];
    let buffer2 = "";
    let start = true;
    for (let i = 0; i < slot.length; i += 1) {
      const value = slot[i];
      if (value) {
        buffer2 += (start === true ? "" : " ") + getUtilityClass(value);
        start = false;
        if (classes2 && classes2[value]) {
          buffer2 += " " + classes2[value];
        }
      }
    }
    output[slotName] = buffer2;
  }
  return output;
}

// node_modules/@mui/system/esm/Container/createContainer.js
var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
var defaultTheme = createTheme_default();
var defaultCreateStyledComponent = styled_default2("div", {
  name: "MuiContainer",
  slot: "Root",
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, styles[`maxWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fixed && styles.fixed, ownerState.disableGutters && styles.disableGutters];
  }
});
var useThemePropsDefault = (inProps) => useThemeProps({
  props: inProps,
  name: "MuiContainer",
  defaultTheme
});
var useUtilityClasses = (ownerState, componentName) => {
  const getContainerUtilityClass = (slot) => {
    return generateUtilityClass(componentName, slot);
  };
  const {
    classes: classes2,
    fixed,
    disableGutters,
    maxWidth: maxWidth2
  } = ownerState;
  const slots = {
    root: ["root", maxWidth2 && `maxWidth${capitalize(String(maxWidth2))}`, fixed && "fixed", disableGutters && "disableGutters"]
  };
  return composeClasses(slots, getContainerUtilityClass, classes2);
};
function createContainer(options = {}) {
  const {
    // This will allow adding custom styled fn (for example for custom sx style function)
    createStyledComponent = defaultCreateStyledComponent,
    useThemeProps: useThemeProps2 = useThemePropsDefault,
    componentName = "MuiContainer"
  } = options;
  const ContainerRoot = createStyledComponent(({
    theme,
    ownerState
  }) => ({
    width: "100%",
    marginLeft: "auto",
    boxSizing: "border-box",
    marginRight: "auto",
    ...!ownerState.disableGutters && {
      paddingLeft: theme.spacing(2),
      paddingRight: theme.spacing(2),
      // @ts-ignore module augmentation fails if custom breakpoints are used
      [theme.breakpoints.up("sm")]: {
        paddingLeft: theme.spacing(3),
        paddingRight: theme.spacing(3)
      }
    }
  }), ({
    theme,
    ownerState
  }) => ownerState.fixed && Object.keys(theme.breakpoints.values).reduce((acc, breakpointValueKey) => {
    const breakpoint = breakpointValueKey;
    const value = theme.breakpoints.values[breakpoint];
    if (value !== 0) {
      acc[theme.breakpoints.up(breakpoint)] = {
        maxWidth: `${value}${theme.breakpoints.unit}`
      };
    }
    return acc;
  }, {}), ({
    theme,
    ownerState
  }) => ({
    // @ts-ignore module augmentation fails if custom breakpoints are used
    ...ownerState.maxWidth === "xs" && {
      // @ts-ignore module augmentation fails if custom breakpoints are used
      [theme.breakpoints.up("xs")]: {
        // @ts-ignore module augmentation fails if custom breakpoints are used
        maxWidth: Math.max(theme.breakpoints.values.xs, 444)
      }
    },
    ...ownerState.maxWidth && // @ts-ignore module augmentation fails if custom breakpoints are used
    ownerState.maxWidth !== "xs" && {
      // @ts-ignore module augmentation fails if custom breakpoints are used
      [theme.breakpoints.up(ownerState.maxWidth)]: {
        // @ts-ignore module augmentation fails if custom breakpoints are used
        maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`
      }
    }
  }));
  const Container2 = React35.forwardRef(function Container3(inProps, ref) {
    const props = useThemeProps2(inProps);
    const {
      className,
      component = "div",
      disableGutters = false,
      fixed = false,
      maxWidth: maxWidth2 = "lg",
      classes: classesProp,
      ...other
    } = props;
    const ownerState = {
      ...props,
      component,
      disableGutters,
      fixed,
      maxWidth: maxWidth2
    };
    const classes2 = useUtilityClasses(ownerState, componentName);
    return (
      // @ts-ignore theme is injected by the styled util
      (0, import_jsx_runtime15.jsx)(ContainerRoot, {
        as: component,
        ownerState,
        className: clsx_default(classes2.root, className),
        ref,
        ...other
      })
    );
  });
  true ? Container2.propTypes = {
    children: import_prop_types12.default.node,
    classes: import_prop_types12.default.object,
    className: import_prop_types12.default.string,
    component: import_prop_types12.default.elementType,
    disableGutters: import_prop_types12.default.bool,
    fixed: import_prop_types12.default.bool,
    maxWidth: import_prop_types12.default.oneOfType([import_prop_types12.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), import_prop_types12.default.string]),
    sx: import_prop_types12.default.oneOfType([import_prop_types12.default.arrayOf(import_prop_types12.default.oneOfType([import_prop_types12.default.func, import_prop_types12.default.object, import_prop_types12.default.bool])), import_prop_types12.default.func, import_prop_types12.default.object])
  } : void 0;
  return Container2;
}

// node_modules/@mui/system/esm/Container/Container.js
var import_prop_types13 = __toESM(require_prop_types(), 1);
var Container = createContainer();
true ? Container.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types13.default.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types13.default.object,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types13.default.elementType,
  /**
   * If `true`, the left and right padding is removed.
   * @default false
   */
  disableGutters: import_prop_types13.default.bool,
  /**
   * Set the max-width to match the min-width of the current breakpoint.
   * This is useful if you'd prefer to design for a fixed set of sizes
   * instead of trying to accommodate a fully fluid viewport.
   * It's fluid by default.
   * @default false
   */
  fixed: import_prop_types13.default.bool,
  /**
   * Determine the max-width of the container.
   * The container width grows with the size of the screen.
   * Set to `false` to disable `maxWidth`.
   * @default 'lg'
   */
  maxWidth: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), import_prop_types13.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types13.default.oneOfType([import_prop_types13.default.arrayOf(import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object, import_prop_types13.default.bool])), import_prop_types13.default.func, import_prop_types13.default.object])
} : void 0;

// node_modules/@mui/system/esm/Container/containerClasses.js
var containerClasses = generateUtilityClasses("MuiContainer", ["root", "disableGutters", "fixed", "maxWidthXs", "maxWidthSm", "maxWidthMd", "maxWidthLg", "maxWidthXl"]);

// node_modules/@mui/system/esm/Grid/Grid.js
var import_prop_types15 = __toESM(require_prop_types(), 1);

// node_modules/@mui/system/esm/Grid/createGrid.js
var React37 = __toESM(require_react(), 1);
var import_prop_types14 = __toESM(require_prop_types(), 1);
init_clsx();

// node_modules/@mui/system/node_modules/@mui/utils/esm/isMuiElement/isMuiElement.js
var React36 = __toESM(require_react(), 1);
function isMuiElement(element, muiNames) {
  var _a, _b, _c;
  return React36.isValidElement(element) && muiNames.indexOf(
    // For server components `muiName` is avaialble in element.type._payload.value.muiName
    // relevant info - https://github.com/facebook/react/blob/2807d781a08db8e9873687fccc25c0f12b4fb3d4/packages/react/src/ReactLazy.js#L45
    // eslint-disable-next-line no-underscore-dangle
    element.type.muiName ?? ((_c = (_b = (_a = element.type) == null ? void 0 : _a._payload) == null ? void 0 : _b.value) == null ? void 0 : _c.muiName)
  ) !== -1;
}

// node_modules/@mui/system/esm/Grid/traverseBreakpoints.js
var filterBreakpointKeys = (breakpointsKeys, responsiveKeys) => breakpointsKeys.filter((key) => responsiveKeys.includes(key));
var traverseBreakpoints = (breakpoints2, responsive, iterator) => {
  const smallestBreakpoint = breakpoints2.keys[0];
  if (Array.isArray(responsive)) {
    responsive.forEach((breakpointValue, index) => {
      iterator((responsiveStyles, style4) => {
        if (index <= breakpoints2.keys.length - 1) {
          if (index === 0) {
            Object.assign(responsiveStyles, style4);
          } else {
            responsiveStyles[breakpoints2.up(breakpoints2.keys[index])] = style4;
          }
        }
      }, breakpointValue);
    });
  } else if (responsive && typeof responsive === "object") {
    const keys2 = Object.keys(responsive).length > breakpoints2.keys.length ? breakpoints2.keys : filterBreakpointKeys(breakpoints2.keys, Object.keys(responsive));
    keys2.forEach((key) => {
      if (breakpoints2.keys.includes(key)) {
        const breakpointValue = responsive[key];
        if (breakpointValue !== void 0) {
          iterator((responsiveStyles, style4) => {
            if (smallestBreakpoint === key) {
              Object.assign(responsiveStyles, style4);
            } else {
              responsiveStyles[breakpoints2.up(key)] = style4;
            }
          }, breakpointValue);
        }
      }
    });
  } else if (typeof responsive === "number" || typeof responsive === "string") {
    iterator((responsiveStyles, style4) => {
      Object.assign(responsiveStyles, style4);
    }, responsive);
  }
};

// node_modules/@mui/system/esm/Grid/gridGenerator.js
function getSelfSpacingVar(axis) {
  return `--Grid-${axis}Spacing`;
}
function getParentSpacingVar(axis) {
  return `--Grid-parent-${axis}Spacing`;
}
var selfColumnsVar = "--Grid-columns";
var parentColumnsVar = "--Grid-parent-columns";
var generateGridSizeStyles = ({
  theme,
  ownerState
}) => {
  const styles = {};
  traverseBreakpoints(theme.breakpoints, ownerState.size, (appendStyle, value) => {
    let style4 = {};
    if (value === "grow") {
      style4 = {
        flexBasis: 0,
        flexGrow: 1,
        maxWidth: "100%"
      };
    }
    if (value === "auto") {
      style4 = {
        flexBasis: "auto",
        flexGrow: 0,
        flexShrink: 0,
        maxWidth: "none",
        width: "auto"
      };
    }
    if (typeof value === "number") {
      style4 = {
        flexGrow: 0,
        flexBasis: "auto",
        width: `calc(100% * ${value} / var(${parentColumnsVar}) - (var(${parentColumnsVar}) - ${value}) * (var(${getParentSpacingVar("column")}) / var(${parentColumnsVar})))`
      };
    }
    appendStyle(styles, style4);
  });
  return styles;
};
var generateGridOffsetStyles = ({
  theme,
  ownerState
}) => {
  const styles = {};
  traverseBreakpoints(theme.breakpoints, ownerState.offset, (appendStyle, value) => {
    let style4 = {};
    if (value === "auto") {
      style4 = {
        marginLeft: "auto"
      };
    }
    if (typeof value === "number") {
      style4 = {
        marginLeft: value === 0 ? "0px" : `calc(100% * ${value} / var(${parentColumnsVar}) + var(${getParentSpacingVar("column")}) * ${value} / var(${parentColumnsVar}))`
      };
    }
    appendStyle(styles, style4);
  });
  return styles;
};
var generateGridColumnsStyles = ({
  theme,
  ownerState
}) => {
  if (!ownerState.container) {
    return {};
  }
  const styles = {
    [selfColumnsVar]: 12
  };
  traverseBreakpoints(theme.breakpoints, ownerState.columns, (appendStyle, value) => {
    const columns = value ?? 12;
    appendStyle(styles, {
      [selfColumnsVar]: columns,
      "> *": {
        [parentColumnsVar]: columns
      }
    });
  });
  return styles;
};
var generateGridRowSpacingStyles = ({
  theme,
  ownerState
}) => {
  if (!ownerState.container) {
    return {};
  }
  const styles = {};
  traverseBreakpoints(theme.breakpoints, ownerState.rowSpacing, (appendStyle, value) => {
    var _a;
    const spacing3 = typeof value === "string" ? value : (_a = theme.spacing) == null ? void 0 : _a.call(theme, value);
    appendStyle(styles, {
      [getSelfSpacingVar("row")]: spacing3,
      "> *": {
        [getParentSpacingVar("row")]: spacing3
      }
    });
  });
  return styles;
};
var generateGridColumnSpacingStyles = ({
  theme,
  ownerState
}) => {
  if (!ownerState.container) {
    return {};
  }
  const styles = {};
  traverseBreakpoints(theme.breakpoints, ownerState.columnSpacing, (appendStyle, value) => {
    var _a;
    const spacing3 = typeof value === "string" ? value : (_a = theme.spacing) == null ? void 0 : _a.call(theme, value);
    appendStyle(styles, {
      [getSelfSpacingVar("column")]: spacing3,
      "> *": {
        [getParentSpacingVar("column")]: spacing3
      }
    });
  });
  return styles;
};
var generateGridDirectionStyles = ({
  theme,
  ownerState
}) => {
  if (!ownerState.container) {
    return {};
  }
  const styles = {};
  traverseBreakpoints(theme.breakpoints, ownerState.direction, (appendStyle, value) => {
    appendStyle(styles, {
      flexDirection: value
    });
  });
  return styles;
};
var generateGridStyles = ({
  ownerState
}) => {
  return {
    minWidth: 0,
    boxSizing: "border-box",
    ...ownerState.container && {
      display: "flex",
      flexWrap: "wrap",
      ...ownerState.wrap && ownerState.wrap !== "wrap" && {
        flexWrap: ownerState.wrap
      },
      gap: `var(${getSelfSpacingVar("row")}) var(${getSelfSpacingVar("column")})`
    }
  };
};
var generateSizeClassNames = (size) => {
  const classNames = [];
  Object.entries(size).forEach(([key, value]) => {
    if (value !== false && value !== void 0) {
      classNames.push(`grid-${key}-${String(value)}`);
    }
  });
  return classNames;
};
var generateSpacingClassNames = (spacing3, smallestBreakpoint = "xs") => {
  function isValidSpacing(val) {
    if (val === void 0) {
      return false;
    }
    return typeof val === "string" && !Number.isNaN(Number(val)) || typeof val === "number" && val > 0;
  }
  if (isValidSpacing(spacing3)) {
    return [`spacing-${smallestBreakpoint}-${String(spacing3)}`];
  }
  if (typeof spacing3 === "object" && !Array.isArray(spacing3)) {
    const classNames = [];
    Object.entries(spacing3).forEach(([key, value]) => {
      if (isValidSpacing(value)) {
        classNames.push(`spacing-${key}-${String(value)}`);
      }
    });
    return classNames;
  }
  return [];
};
var generateDirectionClasses = (direction) => {
  if (direction === void 0) {
    return [];
  }
  if (typeof direction === "object") {
    return Object.entries(direction).map(([key, value]) => `direction-${key}-${value}`);
  }
  return [`direction-xs-${String(direction)}`];
};

// node_modules/@mui/system/esm/Grid/deleteLegacyGridProps.js
var getLegacyGridWarning = (propName) => {
  if (["item", "zeroMinWidth"].includes(propName)) {
    return `The \`${propName}\` prop has been removed and is no longer necessary. You can safely remove it.`;
  }
  return `The \`${propName}\` prop has been removed. See https://mui.com/material-ui/migration/upgrade-to-grid-v2/ for migration instructions.`;
};
var warnedAboutProps = [];
function deleteLegacyGridProps(props, breakpoints2) {
  const propsToWarn = [];
  if (props.item !== void 0) {
    delete props.item;
    propsToWarn.push("item");
  }
  if (props.zeroMinWidth !== void 0) {
    delete props.zeroMinWidth;
    propsToWarn.push("zeroMinWidth");
  }
  breakpoints2.keys.forEach((breakpoint) => {
    if (props[breakpoint] !== void 0) {
      propsToWarn.push(breakpoint);
      delete props[breakpoint];
    }
  });
  if (true) {
    propsToWarn.forEach((prop) => {
      if (!warnedAboutProps.includes(prop)) {
        warnedAboutProps.push(prop);
        console.warn(`MUI Grid: ${getLegacyGridWarning(prop)}
`);
      }
    });
  }
}

// node_modules/@mui/system/esm/Grid/createGrid.js
var import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
var defaultTheme2 = createTheme_default();
var defaultCreateStyledComponent2 = styled_default2("div", {
  name: "MuiGrid",
  slot: "Root"
});
function useThemePropsDefault2(props) {
  return useThemeProps({
    props,
    name: "MuiGrid",
    defaultTheme: defaultTheme2
  });
}
function createGrid(options = {}) {
  const {
    // This will allow adding custom styled fn (for example for custom sx style function)
    createStyledComponent = defaultCreateStyledComponent2,
    useThemeProps: useThemeProps2 = useThemePropsDefault2,
    useTheme: useTheme5 = useTheme_default,
    componentName = "MuiGrid"
  } = options;
  const useUtilityClasses46 = (ownerState, theme) => {
    const {
      container,
      direction,
      spacing: spacing3,
      wrap: wrap2,
      size
    } = ownerState;
    const slots = {
      root: ["root", container && "container", wrap2 !== "wrap" && `wrap-xs-${String(wrap2)}`, ...generateDirectionClasses(direction), ...generateSizeClassNames(size), ...container ? generateSpacingClassNames(spacing3, theme.breakpoints.keys[0]) : []]
    };
    return composeClasses(slots, (slot) => generateUtilityClass(componentName, slot), {});
  };
  function parseResponsiveProp(propValue, breakpoints2, shouldUseValue = () => true) {
    const parsedProp = {};
    if (propValue === null) {
      return parsedProp;
    }
    if (Array.isArray(propValue)) {
      propValue.forEach((value, index) => {
        if (value !== null && shouldUseValue(value) && breakpoints2.keys[index]) {
          parsedProp[breakpoints2.keys[index]] = value;
        }
      });
    } else if (typeof propValue === "object") {
      Object.keys(propValue).forEach((key) => {
        const value = propValue[key];
        if (value !== null && value !== void 0 && shouldUseValue(value)) {
          parsedProp[key] = value;
        }
      });
    } else {
      parsedProp[breakpoints2.keys[0]] = propValue;
    }
    return parsedProp;
  }
  const GridRoot3 = createStyledComponent(generateGridColumnsStyles, generateGridColumnSpacingStyles, generateGridRowSpacingStyles, generateGridSizeStyles, generateGridDirectionStyles, generateGridStyles, generateGridOffsetStyles);
  const Grid2 = React37.forwardRef(function Grid3(inProps, ref) {
    const theme = useTheme5();
    const themeProps = useThemeProps2(inProps);
    const props = extendSxProp(themeProps);
    deleteLegacyGridProps(props, theme.breakpoints);
    const {
      className,
      children,
      columns: columnsProp = 12,
      container = false,
      component = "div",
      direction = "row",
      wrap: wrap2 = "wrap",
      size: sizeProp = {},
      offset: offsetProp = {},
      spacing: spacingProp = 0,
      rowSpacing: rowSpacingProp = spacingProp,
      columnSpacing: columnSpacingProp = spacingProp,
      unstable_level: level = 0,
      ...other
    } = props;
    const size = parseResponsiveProp(sizeProp, theme.breakpoints, (val) => val !== false);
    const offset = parseResponsiveProp(offsetProp, theme.breakpoints);
    const columns = inProps.columns ?? (level ? void 0 : columnsProp);
    const spacing3 = inProps.spacing ?? (level ? void 0 : spacingProp);
    const rowSpacing = inProps.rowSpacing ?? inProps.spacing ?? (level ? void 0 : rowSpacingProp);
    const columnSpacing = inProps.columnSpacing ?? inProps.spacing ?? (level ? void 0 : columnSpacingProp);
    const ownerState = {
      ...props,
      level,
      columns,
      container,
      direction,
      wrap: wrap2,
      spacing: spacing3,
      rowSpacing,
      columnSpacing,
      size,
      offset
    };
    const classes2 = useUtilityClasses46(ownerState, theme);
    return (0, import_jsx_runtime16.jsx)(GridRoot3, {
      ref,
      as: component,
      ownerState,
      className: clsx_default(classes2.root, className),
      ...other,
      children: React37.Children.map(children, (child) => {
        var _a;
        if (React37.isValidElement(child) && isMuiElement(child, ["Grid"]) && container && child.props.container) {
          return React37.cloneElement(child, {
            unstable_level: ((_a = child.props) == null ? void 0 : _a.unstable_level) ?? level + 1
          });
        }
        return child;
      })
    });
  });
  true ? Grid2.propTypes = {
    children: import_prop_types14.default.node,
    className: import_prop_types14.default.string,
    columns: import_prop_types14.default.oneOfType([import_prop_types14.default.arrayOf(import_prop_types14.default.number), import_prop_types14.default.number, import_prop_types14.default.object]),
    columnSpacing: import_prop_types14.default.oneOfType([import_prop_types14.default.arrayOf(import_prop_types14.default.oneOfType([import_prop_types14.default.number, import_prop_types14.default.string])), import_prop_types14.default.number, import_prop_types14.default.object, import_prop_types14.default.string]),
    component: import_prop_types14.default.elementType,
    container: import_prop_types14.default.bool,
    direction: import_prop_types14.default.oneOfType([import_prop_types14.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), import_prop_types14.default.arrayOf(import_prop_types14.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), import_prop_types14.default.object]),
    offset: import_prop_types14.default.oneOfType([import_prop_types14.default.string, import_prop_types14.default.number, import_prop_types14.default.arrayOf(import_prop_types14.default.oneOfType([import_prop_types14.default.string, import_prop_types14.default.number])), import_prop_types14.default.object]),
    rowSpacing: import_prop_types14.default.oneOfType([import_prop_types14.default.arrayOf(import_prop_types14.default.oneOfType([import_prop_types14.default.number, import_prop_types14.default.string])), import_prop_types14.default.number, import_prop_types14.default.object, import_prop_types14.default.string]),
    size: import_prop_types14.default.oneOfType([import_prop_types14.default.string, import_prop_types14.default.bool, import_prop_types14.default.number, import_prop_types14.default.arrayOf(import_prop_types14.default.oneOfType([import_prop_types14.default.string, import_prop_types14.default.bool, import_prop_types14.default.number])), import_prop_types14.default.object]),
    spacing: import_prop_types14.default.oneOfType([import_prop_types14.default.arrayOf(import_prop_types14.default.oneOfType([import_prop_types14.default.number, import_prop_types14.default.string])), import_prop_types14.default.number, import_prop_types14.default.object, import_prop_types14.default.string]),
    sx: import_prop_types14.default.oneOfType([import_prop_types14.default.arrayOf(import_prop_types14.default.oneOfType([import_prop_types14.default.func, import_prop_types14.default.object, import_prop_types14.default.bool])), import_prop_types14.default.func, import_prop_types14.default.object]),
    wrap: import_prop_types14.default.oneOf(["nowrap", "wrap-reverse", "wrap"])
  } : void 0;
  Grid2.muiName = "Grid";
  return Grid2;
}

// node_modules/@mui/system/esm/Grid/Grid.js
var Grid = createGrid();
true ? Grid.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types15.default.node,
  /**
   * The number of columns.
   * @default 12
   */
  columns: import_prop_types15.default.oneOfType([import_prop_types15.default.arrayOf(import_prop_types15.default.number), import_prop_types15.default.number, import_prop_types15.default.object]),
  /**
   * Defines the horizontal space between the type `item` components.
   * It overrides the value of the `spacing` prop.
   */
  columnSpacing: import_prop_types15.default.oneOfType([import_prop_types15.default.arrayOf(import_prop_types15.default.oneOfType([import_prop_types15.default.number, import_prop_types15.default.string])), import_prop_types15.default.number, import_prop_types15.default.object, import_prop_types15.default.string]),
  /**
   * If `true`, the component will have the flex *container* behavior.
   * You should be wrapping *items* with a *container*.
   * @default false
   */
  container: import_prop_types15.default.bool,
  /**
   * Defines the `flex-direction` style property.
   * It is applied for all screen sizes.
   * @default 'row'
   */
  direction: import_prop_types15.default.oneOfType([import_prop_types15.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), import_prop_types15.default.arrayOf(import_prop_types15.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), import_prop_types15.default.object]),
  /**
   * Defines the offset value for the type `item` components.
   */
  offset: import_prop_types15.default.oneOfType([import_prop_types15.default.string, import_prop_types15.default.number, import_prop_types15.default.arrayOf(import_prop_types15.default.oneOfType([import_prop_types15.default.string, import_prop_types15.default.number])), import_prop_types15.default.object]),
  /**
   * Defines the vertical space between the type `item` components.
   * It overrides the value of the `spacing` prop.
   */
  rowSpacing: import_prop_types15.default.oneOfType([import_prop_types15.default.arrayOf(import_prop_types15.default.oneOfType([import_prop_types15.default.number, import_prop_types15.default.string])), import_prop_types15.default.number, import_prop_types15.default.object, import_prop_types15.default.string]),
  /**
   * Defines the size of the the type `item` components.
   */
  size: import_prop_types15.default.oneOfType([import_prop_types15.default.string, import_prop_types15.default.bool, import_prop_types15.default.number, import_prop_types15.default.arrayOf(import_prop_types15.default.oneOfType([import_prop_types15.default.string, import_prop_types15.default.bool, import_prop_types15.default.number])), import_prop_types15.default.object]),
  /**
   * Defines the space between the type `item` components.
   * It can only be used on a type `container` component.
   * @default 0
   */
  spacing: import_prop_types15.default.oneOfType([import_prop_types15.default.arrayOf(import_prop_types15.default.oneOfType([import_prop_types15.default.number, import_prop_types15.default.string])), import_prop_types15.default.number, import_prop_types15.default.object, import_prop_types15.default.string]),
  /**
   * @ignore
   */
  sx: import_prop_types15.default.oneOfType([import_prop_types15.default.arrayOf(import_prop_types15.default.oneOfType([import_prop_types15.default.func, import_prop_types15.default.object, import_prop_types15.default.bool])), import_prop_types15.default.func, import_prop_types15.default.object]),
  /**
   * @internal
   * The level of the grid starts from `0` and increases when the grid nests
   * inside another grid. Nesting is defined as a container Grid being a direct
   * child of a container Grid.
   *
   * ```js
   * <Grid container> // level 0
   *   <Grid container> // level 1
   *     <Grid container> // level 2
   * ```
   *
   * Only consecutive grid is considered nesting. A grid container will start at
   * `0` if there are non-Grid container element above it.
   *
   * ```js
   * <Grid container> // level 0
   *   <div>
   *     <Grid container> // level 0
   * ```
   *
   * ```js
   * <Grid container> // level 0
   *   <Grid>
   *     <Grid container> // level 0
   * ```
   */
  unstable_level: import_prop_types15.default.number,
  /**
   * Defines the `flex-wrap` style property.
   * It's applied for all screen sizes.
   * @default 'wrap'
   */
  wrap: import_prop_types15.default.oneOf(["nowrap", "wrap-reverse", "wrap"])
} : void 0;

// node_modules/@mui/system/esm/Grid/gridClasses.js
var SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
var DIRECTIONS = ["column-reverse", "column", "row-reverse", "row"];
var WRAPS = ["nowrap", "wrap-reverse", "wrap"];
var GRID_SIZES = ["auto", "grow", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
var gridClasses = generateUtilityClasses("MuiGrid", [
  "root",
  "container",
  "item",
  // spacings
  ...SPACINGS.map((spacing3) => `spacing-xs-${spacing3}`),
  // direction values
  ...DIRECTIONS.map((direction) => `direction-xs-${direction}`),
  // wrap values
  ...WRAPS.map((wrap2) => `wrap-xs-${wrap2}`),
  // grid sizes for all breakpoints
  ...GRID_SIZES.map((size) => `grid-xs-${size}`),
  ...GRID_SIZES.map((size) => `grid-sm-${size}`),
  ...GRID_SIZES.map((size) => `grid-md-${size}`),
  ...GRID_SIZES.map((size) => `grid-lg-${size}`),
  ...GRID_SIZES.map((size) => `grid-xl-${size}`)
]);

// node_modules/@mui/system/esm/Stack/Stack.js
var import_prop_types17 = __toESM(require_prop_types(), 1);

// node_modules/@mui/system/esm/Stack/createStack.js
var React38 = __toESM(require_react(), 1);
var import_prop_types16 = __toESM(require_prop_types(), 1);
init_clsx();
var import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
var defaultTheme3 = createTheme_default();
var defaultCreateStyledComponent3 = styled_default2("div", {
  name: "MuiStack",
  slot: "Root"
});
function useThemePropsDefault3(props) {
  return useThemeProps({
    props,
    name: "MuiStack",
    defaultTheme: defaultTheme3
  });
}
function joinChildren(children, separator) {
  const childrenArray = React38.Children.toArray(children).filter(Boolean);
  return childrenArray.reduce((output, child, index) => {
    output.push(child);
    if (index < childrenArray.length - 1) {
      output.push(React38.cloneElement(separator, {
        key: `separator-${index}`
      }));
    }
    return output;
  }, []);
}
var getSideFromDirection = (direction) => {
  return {
    row: "Left",
    "row-reverse": "Right",
    column: "Top",
    "column-reverse": "Bottom"
  }[direction];
};
var style3 = ({
  ownerState,
  theme
}) => {
  let styles = {
    display: "flex",
    flexDirection: "column",
    ...handleBreakpoints({
      theme
    }, resolveBreakpointValues({
      values: ownerState.direction,
      breakpoints: theme.breakpoints.values
    }), (propValue) => ({
      flexDirection: propValue
    }))
  };
  if (ownerState.spacing) {
    const transformer = createUnarySpacing(theme);
    const base = Object.keys(theme.breakpoints.values).reduce((acc, breakpoint) => {
      if (typeof ownerState.spacing === "object" && ownerState.spacing[breakpoint] != null || typeof ownerState.direction === "object" && ownerState.direction[breakpoint] != null) {
        acc[breakpoint] = true;
      }
      return acc;
    }, {});
    const directionValues = resolveBreakpointValues({
      values: ownerState.direction,
      base
    });
    const spacingValues = resolveBreakpointValues({
      values: ownerState.spacing,
      base
    });
    if (typeof directionValues === "object") {
      Object.keys(directionValues).forEach((breakpoint, index, breakpoints2) => {
        const directionValue = directionValues[breakpoint];
        if (!directionValue) {
          const previousDirectionValue = index > 0 ? directionValues[breakpoints2[index - 1]] : "column";
          directionValues[breakpoint] = previousDirectionValue;
        }
      });
    }
    const styleFromPropValue = (propValue, breakpoint) => {
      if (ownerState.useFlexGap) {
        return {
          gap: getValue(transformer, propValue)
        };
      }
      return {
        // The useFlexGap={false} implement relies on each child to give up control of the margin.
        // We need to reset the margin to avoid double spacing.
        "& > :not(style):not(style)": {
          margin: 0
        },
        "& > :not(style) ~ :not(style)": {
          [`margin${getSideFromDirection(breakpoint ? directionValues[breakpoint] : ownerState.direction)}`]: getValue(transformer, propValue)
        }
      };
    };
    styles = deepmerge(styles, handleBreakpoints({
      theme
    }, spacingValues, styleFromPropValue));
  }
  styles = mergeBreakpointsInOrder(theme.breakpoints, styles);
  return styles;
};
function createStack(options = {}) {
  const {
    // This will allow adding custom styled fn (for example for custom sx style function)
    createStyledComponent = defaultCreateStyledComponent3,
    useThemeProps: useThemeProps2 = useThemePropsDefault3,
    componentName = "MuiStack"
  } = options;
  const useUtilityClasses46 = () => {
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, (slot) => generateUtilityClass(componentName, slot), {});
  };
  const StackRoot = createStyledComponent(style3);
  const Stack2 = React38.forwardRef(function Grid2(inProps, ref) {
    const themeProps = useThemeProps2(inProps);
    const props = extendSxProp(themeProps);
    const {
      component = "div",
      direction = "column",
      spacing: spacing3 = 0,
      divider,
      children,
      className,
      useFlexGap = false,
      ...other
    } = props;
    const ownerState = {
      direction,
      spacing: spacing3,
      useFlexGap
    };
    const classes2 = useUtilityClasses46();
    return (0, import_jsx_runtime17.jsx)(StackRoot, {
      as: component,
      ownerState,
      ref,
      className: clsx_default(classes2.root, className),
      ...other,
      children: divider ? joinChildren(children, divider) : children
    });
  });
  true ? Stack2.propTypes = {
    children: import_prop_types16.default.node,
    direction: import_prop_types16.default.oneOfType([import_prop_types16.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), import_prop_types16.default.arrayOf(import_prop_types16.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), import_prop_types16.default.object]),
    divider: import_prop_types16.default.node,
    spacing: import_prop_types16.default.oneOfType([import_prop_types16.default.arrayOf(import_prop_types16.default.oneOfType([import_prop_types16.default.number, import_prop_types16.default.string])), import_prop_types16.default.number, import_prop_types16.default.object, import_prop_types16.default.string]),
    sx: import_prop_types16.default.oneOfType([import_prop_types16.default.arrayOf(import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object, import_prop_types16.default.bool])), import_prop_types16.default.func, import_prop_types16.default.object])
  } : void 0;
  return Stack2;
}

// node_modules/@mui/system/esm/Stack/Stack.js
var Stack = createStack();
true ? Stack.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types17.default.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types17.default.elementType,
  /**
   * Defines the `flex-direction` style property.
   * It is applied for all screen sizes.
   * @default 'column'
   */
  direction: import_prop_types17.default.oneOfType([import_prop_types17.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), import_prop_types17.default.arrayOf(import_prop_types17.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), import_prop_types17.default.object]),
  /**
   * Add an element between each child.
   */
  divider: import_prop_types17.default.node,
  /**
   * Defines the space between immediate children.
   * @default 0
   */
  spacing: import_prop_types17.default.oneOfType([import_prop_types17.default.arrayOf(import_prop_types17.default.oneOfType([import_prop_types17.default.number, import_prop_types17.default.string])), import_prop_types17.default.number, import_prop_types17.default.object, import_prop_types17.default.string]),
  /**
   * The system prop, which allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types17.default.oneOfType([import_prop_types17.default.arrayOf(import_prop_types17.default.oneOfType([import_prop_types17.default.func, import_prop_types17.default.object, import_prop_types17.default.bool])), import_prop_types17.default.func, import_prop_types17.default.object]),
  /**
   * If `true`, the CSS flexbox `gap` is used instead of applying `margin` to children.
   *
   * While CSS `gap` removes the [known limitations](https://mui.com/joy-ui/react-stack/#limitations),
   * it is not fully supported in some browsers. We recommend checking https://caniuse.com/?search=flex%20gap before using this flag.
   *
   * To enable this flag globally, follow the theme's default props configuration.
   * @default false
   */
  useFlexGap: import_prop_types17.default.bool
} : void 0;

// node_modules/@mui/system/esm/Stack/stackClasses.js
var stackClasses = generateUtilityClasses("MuiStack", ["root"]);

// node_modules/@mui/x-data-grid/node_modules/@mui/utils/esm/composeClasses/composeClasses.js
function composeClasses2(slots, getUtilityClass, classes2 = void 0) {
  const output = {};
  for (const slotName in slots) {
    const slot = slots[slotName];
    let buffer2 = "";
    let start = true;
    for (let i = 0; i < slot.length; i += 1) {
      const value = slot[i];
      if (value) {
        buffer2 += (start === true ? "" : " ") + getUtilityClass(value);
        start = false;
        if (classes2 && classes2[value]) {
          buffer2 += " " + classes2[value];
        }
      }
    }
    output[slotName] = buffer2;
  }
  return output;
}

// node_modules/reselect/dist/reselect.mjs
var runIdentityFunctionCheck = (resultFunc, inputSelectorsResults, outputSelectorResult) => {
  if (inputSelectorsResults.length === 1 && inputSelectorsResults[0] === outputSelectorResult) {
    let isInputSameAsOutput = false;
    try {
      const emptyObject = {};
      if (resultFunc(emptyObject) === emptyObject)
        isInputSameAsOutput = true;
    } catch {
    }
    if (isInputSameAsOutput) {
      let stack = void 0;
      try {
        throw new Error();
      } catch (e) {
        ;
        ({ stack } = e);
      }
      console.warn(
        "The result function returned its own inputs without modification. e.g\n`createSelector([state => state.todos], todos => todos)`\nThis could lead to inefficient memoization and unnecessary re-renders.\nEnsure transformation logic is in the result function, and extraction logic is in the input selectors.",
        { stack }
      );
    }
  }
};
var runInputStabilityCheck = (inputSelectorResultsObject, options, inputSelectorArgs) => {
  const { memoize: memoize2, memoizeOptions } = options;
  const { inputSelectorResults, inputSelectorResultsCopy } = inputSelectorResultsObject;
  const createAnEmptyObject = memoize2(() => ({}), ...memoizeOptions);
  const areInputSelectorResultsEqual = createAnEmptyObject.apply(null, inputSelectorResults) === createAnEmptyObject.apply(null, inputSelectorResultsCopy);
  if (!areInputSelectorResultsEqual) {
    let stack = void 0;
    try {
      throw new Error();
    } catch (e) {
      ;
      ({ stack } = e);
    }
    console.warn(
      "An input selector returned a different result when passed same arguments.\nThis means your output selector will likely run more frequently than intended.\nAvoid returning a new reference inside your input selector, e.g.\n`createSelector([state => state.todos.map(todo => todo.id)], todoIds => todoIds.length)`",
      {
        arguments: inputSelectorArgs,
        firstInputs: inputSelectorResults,
        secondInputs: inputSelectorResultsCopy,
        stack
      }
    );
  }
};
var globalDevModeChecks = {
  inputStabilityCheck: "once",
  identityFunctionCheck: "once"
};
var NOT_FOUND = Symbol("NOT_FOUND");
function assertIsFunction(func, errorMessage = `expected a function, instead received ${typeof func}`) {
  if (typeof func !== "function") {
    throw new TypeError(errorMessage);
  }
}
function assertIsObject(object, errorMessage = `expected an object, instead received ${typeof object}`) {
  if (typeof object !== "object") {
    throw new TypeError(errorMessage);
  }
}
function assertIsArrayOfFunctions(array, errorMessage = `expected all items to be functions, instead received the following types: `) {
  if (!array.every((item) => typeof item === "function")) {
    const itemTypes = array.map(
      (item) => typeof item === "function" ? `function ${item.name || "unnamed"}()` : typeof item
    ).join(", ");
    throw new TypeError(`${errorMessage}[${itemTypes}]`);
  }
}
var ensureIsArray = (item) => {
  return Array.isArray(item) ? item : [item];
};
function getDependencies(createSelectorArgs) {
  const dependencies = Array.isArray(createSelectorArgs[0]) ? createSelectorArgs[0] : createSelectorArgs;
  assertIsArrayOfFunctions(
    dependencies,
    `createSelector expects all input-selectors to be functions, but received the following types: `
  );
  return dependencies;
}
function collectInputSelectorResults(dependencies, inputSelectorArgs) {
  const inputSelectorResults = [];
  const { length } = dependencies;
  for (let i = 0; i < length; i++) {
    inputSelectorResults.push(dependencies[i].apply(null, inputSelectorArgs));
  }
  return inputSelectorResults;
}
var getDevModeChecksExecutionInfo = (firstRun, devModeChecks) => {
  const { identityFunctionCheck, inputStabilityCheck } = {
    ...globalDevModeChecks,
    ...devModeChecks
  };
  return {
    identityFunctionCheck: {
      shouldRun: identityFunctionCheck === "always" || identityFunctionCheck === "once" && firstRun,
      run: runIdentityFunctionCheck
    },
    inputStabilityCheck: {
      shouldRun: inputStabilityCheck === "always" || inputStabilityCheck === "once" && firstRun,
      run: runInputStabilityCheck
    }
  };
};
var REDUX_PROXY_LABEL = Symbol();
var proto = Object.getPrototypeOf({});
function createSingletonCache(equals) {
  let entry;
  return {
    get(key) {
      if (entry && equals(entry.key, key)) {
        return entry.value;
      }
      return NOT_FOUND;
    },
    put(key, value) {
      entry = { key, value };
    },
    getEntries() {
      return entry ? [entry] : [];
    },
    clear() {
      entry = void 0;
    }
  };
}
function createLruCache(maxSize, equals) {
  let entries = [];
  function get(key) {
    const cacheIndex = entries.findIndex((entry) => equals(key, entry.key));
    if (cacheIndex > -1) {
      const entry = entries[cacheIndex];
      if (cacheIndex > 0) {
        entries.splice(cacheIndex, 1);
        entries.unshift(entry);
      }
      return entry.value;
    }
    return NOT_FOUND;
  }
  function put(key, value) {
    if (get(key) === NOT_FOUND) {
      entries.unshift({ key, value });
      if (entries.length > maxSize) {
        entries.pop();
      }
    }
  }
  function getEntries() {
    return entries;
  }
  function clear() {
    entries = [];
  }
  return { get, put, getEntries, clear };
}
var referenceEqualityCheck = (a, b) => a === b;
function createCacheKeyComparator(equalityCheck) {
  return function areArgumentsShallowlyEqual(prev, next) {
    if (prev === null || next === null || prev.length !== next.length) {
      return false;
    }
    const { length } = prev;
    for (let i = 0; i < length; i++) {
      if (!equalityCheck(prev[i], next[i])) {
        return false;
      }
    }
    return true;
  };
}
function lruMemoize(func, equalityCheckOrOptions) {
  const providedOptions = typeof equalityCheckOrOptions === "object" ? equalityCheckOrOptions : { equalityCheck: equalityCheckOrOptions };
  const {
    equalityCheck = referenceEqualityCheck,
    maxSize = 1,
    resultEqualityCheck
  } = providedOptions;
  const comparator = createCacheKeyComparator(equalityCheck);
  let resultsCount = 0;
  const cache = maxSize <= 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator);
  function memoized() {
    let value = cache.get(arguments);
    if (value === NOT_FOUND) {
      value = func.apply(null, arguments);
      resultsCount++;
      if (resultEqualityCheck) {
        const entries = cache.getEntries();
        const matchingEntry = entries.find(
          (entry) => resultEqualityCheck(entry.value, value)
        );
        if (matchingEntry) {
          value = matchingEntry.value;
          resultsCount !== 0 && resultsCount--;
        }
      }
      cache.put(arguments, value);
    }
    return value;
  }
  memoized.clearCache = () => {
    cache.clear();
    memoized.resetResultsCount();
  };
  memoized.resultsCount = () => resultsCount;
  memoized.resetResultsCount = () => {
    resultsCount = 0;
  };
  return memoized;
}
var StrongRef = class {
  constructor(value) {
    this.value = value;
  }
  deref() {
    return this.value;
  }
};
var Ref = typeof WeakRef !== "undefined" ? WeakRef : StrongRef;
var UNTERMINATED = 0;
var TERMINATED = 1;
function createCacheNode() {
  return {
    s: UNTERMINATED,
    v: void 0,
    o: null,
    p: null
  };
}
function weakMapMemoize(func, options = {}) {
  let fnNode = createCacheNode();
  const { resultEqualityCheck } = options;
  let lastResult;
  let resultsCount = 0;
  function memoized() {
    var _a;
    let cacheNode = fnNode;
    const { length } = arguments;
    for (let i = 0, l = length; i < l; i++) {
      const arg = arguments[i];
      if (typeof arg === "function" || typeof arg === "object" && arg !== null) {
        let objectCache = cacheNode.o;
        if (objectCache === null) {
          cacheNode.o = objectCache = /* @__PURE__ */ new WeakMap();
        }
        const objectNode = objectCache.get(arg);
        if (objectNode === void 0) {
          cacheNode = createCacheNode();
          objectCache.set(arg, cacheNode);
        } else {
          cacheNode = objectNode;
        }
      } else {
        let primitiveCache = cacheNode.p;
        if (primitiveCache === null) {
          cacheNode.p = primitiveCache = /* @__PURE__ */ new Map();
        }
        const primitiveNode = primitiveCache.get(arg);
        if (primitiveNode === void 0) {
          cacheNode = createCacheNode();
          primitiveCache.set(arg, cacheNode);
        } else {
          cacheNode = primitiveNode;
        }
      }
    }
    const terminatedNode = cacheNode;
    let result;
    if (cacheNode.s === TERMINATED) {
      result = cacheNode.v;
    } else {
      result = func.apply(null, arguments);
      resultsCount++;
      if (resultEqualityCheck) {
        const lastResultValue = ((_a = lastResult == null ? void 0 : lastResult.deref) == null ? void 0 : _a.call(lastResult)) ?? lastResult;
        if (lastResultValue != null && resultEqualityCheck(lastResultValue, result)) {
          result = lastResultValue;
          resultsCount !== 0 && resultsCount--;
        }
        const needsWeakRef = typeof result === "object" && result !== null || typeof result === "function";
        lastResult = needsWeakRef ? new Ref(result) : result;
      }
    }
    terminatedNode.s = TERMINATED;
    terminatedNode.v = result;
    return result;
  }
  memoized.clearCache = () => {
    fnNode = createCacheNode();
    memoized.resetResultsCount();
  };
  memoized.resultsCount = () => resultsCount;
  memoized.resetResultsCount = () => {
    resultsCount = 0;
  };
  return memoized;
}
function createSelectorCreator(memoizeOrOptions, ...memoizeOptionsFromArgs) {
  const createSelectorCreatorOptions = typeof memoizeOrOptions === "function" ? {
    memoize: memoizeOrOptions,
    memoizeOptions: memoizeOptionsFromArgs
  } : memoizeOrOptions;
  const createSelector22 = (...createSelectorArgs) => {
    let recomputations = 0;
    let dependencyRecomputations = 0;
    let lastResult;
    let directlyPassedOptions = {};
    let resultFunc = createSelectorArgs.pop();
    if (typeof resultFunc === "object") {
      directlyPassedOptions = resultFunc;
      resultFunc = createSelectorArgs.pop();
    }
    assertIsFunction(
      resultFunc,
      `createSelector expects an output function after the inputs, but received: [${typeof resultFunc}]`
    );
    const combinedOptions = {
      ...createSelectorCreatorOptions,
      ...directlyPassedOptions
    };
    const {
      memoize: memoize2,
      memoizeOptions = [],
      argsMemoize = weakMapMemoize,
      argsMemoizeOptions = [],
      devModeChecks = {}
    } = combinedOptions;
    const finalMemoizeOptions = ensureIsArray(memoizeOptions);
    const finalArgsMemoizeOptions = ensureIsArray(argsMemoizeOptions);
    const dependencies = getDependencies(createSelectorArgs);
    const memoizedResultFunc = memoize2(function recomputationWrapper() {
      recomputations++;
      return resultFunc.apply(
        null,
        arguments
      );
    }, ...finalMemoizeOptions);
    let firstRun = true;
    const selector = argsMemoize(function dependenciesChecker() {
      dependencyRecomputations++;
      const inputSelectorResults = collectInputSelectorResults(
        dependencies,
        arguments
      );
      lastResult = memoizedResultFunc.apply(null, inputSelectorResults);
      if (true) {
        const { identityFunctionCheck, inputStabilityCheck } = getDevModeChecksExecutionInfo(firstRun, devModeChecks);
        if (identityFunctionCheck.shouldRun) {
          identityFunctionCheck.run(
            resultFunc,
            inputSelectorResults,
            lastResult
          );
        }
        if (inputStabilityCheck.shouldRun) {
          const inputSelectorResultsCopy = collectInputSelectorResults(
            dependencies,
            arguments
          );
          inputStabilityCheck.run(
            { inputSelectorResults, inputSelectorResultsCopy },
            { memoize: memoize2, memoizeOptions: finalMemoizeOptions },
            arguments
          );
        }
        if (firstRun)
          firstRun = false;
      }
      return lastResult;
    }, ...finalArgsMemoizeOptions);
    return Object.assign(selector, {
      resultFunc,
      memoizedResultFunc,
      dependencies,
      dependencyRecomputations: () => dependencyRecomputations,
      resetDependencyRecomputations: () => {
        dependencyRecomputations = 0;
      },
      lastResult: () => lastResult,
      recomputations: () => recomputations,
      resetRecomputations: () => {
        recomputations = 0;
      },
      memoize: memoize2,
      argsMemoize
    });
  };
  Object.assign(createSelector22, {
    withTypes: () => createSelector22
  });
  return createSelector22;
}
var createSelector = createSelectorCreator(weakMapMemoize);
var createStructuredSelector = Object.assign(
  (inputSelectorsObject, selectorCreator = createSelector) => {
    assertIsObject(
      inputSelectorsObject,
      `createStructuredSelector expects first argument to be an object where each property is a selector, instead received a ${typeof inputSelectorsObject}`
    );
    const inputSelectorKeys = Object.keys(inputSelectorsObject);
    const dependencies = inputSelectorKeys.map(
      (key) => inputSelectorsObject[key]
    );
    const structuredSelector = selectorCreator(
      dependencies,
      (...inputSelectorResults) => {
        return inputSelectorResults.reduce((composition, value, index) => {
          composition[inputSelectorKeys[index]] = value;
          return composition;
        }, {});
      }
    );
    return structuredSelector;
  },
  { withTypes: () => createStructuredSelector }
);

// node_modules/@mui/x-data-grid/node_modules/@mui/x-internals/esm/store/createSelector.js
var reselectCreateSelector = createSelectorCreator({
  memoize: lruMemoize,
  memoizeOptions: {
    maxSize: 1,
    equalityCheck: Object.is
  }
});
var createSelector2 = (a, b, c, d, e, f, ...other) => {
  if (other.length > 0) {
    throw new Error("Unsupported number of selectors");
  }
  let selector;
  if (a && b && c && d && e && f) {
    selector = (state, a1, a2, a3) => {
      const va = a(state, a1, a2, a3);
      const vb = b(state, a1, a2, a3);
      const vc = c(state, a1, a2, a3);
      const vd = d(state, a1, a2, a3);
      const ve = e(state, a1, a2, a3);
      return f(va, vb, vc, vd, ve, a1, a2, a3);
    };
  } else if (a && b && c && d && e) {
    selector = (state, a1, a2, a3) => {
      const va = a(state, a1, a2, a3);
      const vb = b(state, a1, a2, a3);
      const vc = c(state, a1, a2, a3);
      const vd = d(state, a1, a2, a3);
      return e(va, vb, vc, vd, a1, a2, a3);
    };
  } else if (a && b && c && d) {
    selector = (state, a1, a2, a3) => {
      const va = a(state, a1, a2, a3);
      const vb = b(state, a1, a2, a3);
      const vc = c(state, a1, a2, a3);
      return d(va, vb, vc, a1, a2, a3);
    };
  } else if (a && b && c) {
    selector = (state, a1, a2, a3) => {
      const va = a(state, a1, a2, a3);
      const vb = b(state, a1, a2, a3);
      return c(va, vb, a1, a2, a3);
    };
  } else if (a && b) {
    selector = (state, a1, a2, a3) => {
      const va = a(state, a1, a2, a3);
      return b(va, a1, a2, a3);
    };
  } else if (a) {
    selector = a;
  } else {
    throw new Error("Missing arguments");
  }
  return selector;
};
var createSelectorMemoized = (...inputs) => {
  const cache = /* @__PURE__ */ new WeakMap();
  let nextCacheId = 1;
  const combiner = inputs[inputs.length - 1];
  const nSelectors = inputs.length - 1 || 1;
  const argsLength = Math.max(combiner.length - nSelectors, 0);
  if (argsLength > 3) {
    throw new Error("Unsupported number of arguments");
  }
  const selector = (state, a1, a2, a3) => {
    let cacheKey = state.__cacheKey__;
    if (!cacheKey) {
      cacheKey = {
        id: nextCacheId
      };
      state.__cacheKey__ = cacheKey;
      nextCacheId += 1;
    }
    let fn = cache.get(cacheKey);
    if (!fn) {
      const selectors6 = inputs.length === 1 ? [(x) => x, combiner] : inputs;
      let reselectArgs = inputs;
      const selectorArgs = [void 0, void 0, void 0];
      switch (argsLength) {
        case 0:
          break;
        case 1: {
          reselectArgs = [...selectors6.slice(0, -1), () => selectorArgs[0], combiner];
          break;
        }
        case 2: {
          reselectArgs = [...selectors6.slice(0, -1), () => selectorArgs[0], () => selectorArgs[1], combiner];
          break;
        }
        case 3: {
          reselectArgs = [...selectors6.slice(0, -1), () => selectorArgs[0], () => selectorArgs[1], () => selectorArgs[2], combiner];
          break;
        }
        default:
          throw new Error("Unsupported number of arguments");
      }
      fn = reselectCreateSelector(...reselectArgs);
      fn.selectorArgs = selectorArgs;
      cache.set(cacheKey, fn);
    }
    switch (argsLength) {
      case 3:
        fn.selectorArgs[2] = a3;
      case 2:
        fn.selectorArgs[1] = a2;
      case 1:
        fn.selectorArgs[0] = a1;
      case 0:
      default:
    }
    switch (argsLength) {
      case 0:
        return fn(state);
      case 1:
        return fn(state, a1);
      case 2:
        return fn(state, a1, a2);
      case 3:
        return fn(state, a1, a2, a3);
      default:
        throw new Error("unreachable");
    }
  };
  return selector;
};

// node_modules/@mui/x-data-grid/node_modules/@mui/x-internals/esm/store/useStore.js
var import_with_selector = __toESM(require_with_selector(), 1);
function useStore(store, selector, a1, a2, a3) {
  const selectorWithArgs = (state) => selector(state, a1, a2, a3);
  return (0, import_with_selector.useSyncExternalStoreWithSelector)(store.subscribe, store.getSnapshot, store.getSnapshot, selectorWithArgs);
}

// node_modules/@mui/x-data-grid/node_modules/@mui/utils/esm/useLazyRef/useLazyRef.js
var React39 = __toESM(require_react(), 1);
var UNINITIALIZED = {};
function useLazyRef(init, initArg) {
  const ref = React39.useRef(UNINITIALIZED);
  if (ref.current === UNINITIALIZED) {
    ref.current = init(initArg);
  }
  return ref;
}

// node_modules/@mui/x-data-grid/node_modules/@mui/utils/esm/useOnMount/useOnMount.js
var React40 = __toESM(require_react(), 1);
var EMPTY = [];
function useOnMount(fn) {
  React40.useEffect(fn, EMPTY);
}

// node_modules/@mui/x-data-grid/node_modules/@mui/x-internals/esm/store/useStoreEffect.js
var noop = () => {
};
function useStoreEffect(store, selector, effect) {
  const instance = useLazyRef(initialize, {
    store,
    selector
  }).current;
  instance.effect = effect;
  useOnMount(instance.onMount);
}
function initialize(params) {
  const {
    store,
    selector
  } = params;
  let previousState = selector(store.state);
  const instance = {
    effect: noop,
    dispose: null,
    // We want a single subscription done right away and cleared on unmount only,
    // but React triggers `useOnMount` multiple times in dev, so we need to manage
    // the subscription anyway.
    subscribe: () => {
      instance.dispose ?? (instance.dispose = store.subscribe((state) => {
        const nextState = selector(state);
        instance.effect(previousState, nextState);
        previousState = nextState;
      }));
    },
    onMount: () => {
      instance.subscribe();
      return () => {
        var _a;
        (_a = instance.dispose) == null ? void 0 : _a.call(instance);
        instance.dispose = null;
      };
    }
  };
  instance.subscribe();
  return instance;
}

// node_modules/@mui/x-data-grid/node_modules/@mui/x-internals/esm/store/Store.js
init_extends();
var Store = class _Store {
  constructor(state) {
    __publicField(this, "subscribe", (fn) => {
      this.listeners.add(fn);
      return () => {
        this.listeners.delete(fn);
      };
    });
    __publicField(this, "getSnapshot", () => {
      return this.state;
    });
    this.state = state;
    this.listeners = /* @__PURE__ */ new Set();
    this.updateTick = 0;
  }
  // HACK: `any` fixes adding listeners that accept partial state.
  // Internal state to handle recursive `setState()` calls
  static create(state) {
    return new _Store(state);
  }
  setState(newState) {
    this.state = newState;
    this.updateTick += 1;
    const currentTick = this.updateTick;
    const it = this.listeners.values();
    let result;
    while (result = it.next(), !result.done) {
      if (currentTick !== this.updateTick) {
        return;
      }
      const listener = result.value;
      listener(newState);
    }
  }
  update(changes) {
    for (const key in changes) {
      if (!Object.is(this.state[key], changes[key])) {
        this.setState(_extends({}, this.state, changes));
        return;
      }
    }
  }
  set(key, value) {
    if (!Object.is(this.state[key], value)) {
      this.setState(_extends({}, this.state, {
        [key]: value
      }));
    }
  }
};

// node_modules/@mui/x-data-grid/esm/utils/createSelector.js
var createSelector3 = (...args) => {
  const baseSelector = createSelector2(...args);
  const selector = (apiRef, a1, a2, a3) => baseSelector(unwrapIfNeeded(apiRef), a1, a2, a3);
  return selector;
};
var createSelectorMemoized2 = (...args) => {
  const baseSelector = createSelectorMemoized(...args);
  const selector = (apiRef, a1, a2, a3) => baseSelector(unwrapIfNeeded(apiRef), a1, a2, a3);
  return selector;
};
var createRootSelector = (fn) => (apiRef, args) => fn(unwrapIfNeeded(apiRef), args);
function unwrapIfNeeded(refOrState) {
  if ("current" in refOrState) {
    return refOrState.current.state;
  }
  return refOrState;
}

// node_modules/@mui/x-data-grid/esm/hooks/features/dimensions/gridDimensionsSelectors.js
var gridDimensionsSelector = createRootSelector((state) => state.dimensions);
var gridColumnsTotalWidthSelector = createSelector3(gridDimensionsSelector, (dimensions) => dimensions.columnsTotalWidth);
var gridRowHeightSelector = createSelector3(gridDimensionsSelector, (dimensions) => dimensions.rowHeight);
var gridContentHeightSelector = createSelector3(gridDimensionsSelector, (dimensions) => dimensions.contentSize.height);
var gridHasScrollXSelector = createSelector3(gridDimensionsSelector, (dimensions) => dimensions.hasScrollX);
var gridHasScrollYSelector = createSelector3(gridDimensionsSelector, (dimensions) => dimensions.hasScrollY);
var gridHasFillerSelector = createSelector3(gridDimensionsSelector, (dimensions) => dimensions.columnsTotalWidth < dimensions.viewportOuterSize.width);
var gridHeaderHeightSelector = createSelector3(gridDimensionsSelector, (dimensions) => dimensions.headerHeight);
var gridGroupHeaderHeightSelector = createSelector3(gridDimensionsSelector, (dimensions) => dimensions.groupHeaderHeight);
var gridHeaderFilterHeightSelector = createSelector3(gridDimensionsSelector, (dimensions) => dimensions.headerFilterHeight);
var gridHorizontalScrollbarHeightSelector = createSelector3(gridDimensionsSelector, (dimensions) => dimensions.hasScrollX ? dimensions.scrollbarSize : 0);
var gridVerticalScrollbarWidthSelector = createSelector3(gridDimensionsSelector, (dimensions) => dimensions.hasScrollY ? dimensions.scrollbarSize : 0);
var gridHasBottomFillerSelector = createSelector3(gridDimensionsSelector, gridHorizontalScrollbarHeightSelector, (dimensions, height2) => {
  const needsLastRowBorder = dimensions.viewportOuterSize.height - dimensions.minimumSize.height > 0;
  if (height2 === 0 && !needsLastRowBorder) {
    return false;
  }
  return true;
});

// node_modules/@mui/x-data-grid/esm/hooks/features/rows/gridRowsMetaSelector.js
var gridRowsMetaSelector = createRootSelector((state) => state.rowsMeta);

// node_modules/@mui/x-data-grid/esm/hooks/features/rows/gridRowsSelector.js
var gridRowsStateSelector = createRootSelector((state) => state.rows);
var gridRowCountSelector = createSelector3(gridRowsStateSelector, (rows) => rows.totalRowCount);
var gridRowsLoadingSelector = createSelector3(gridRowsStateSelector, (rows) => rows.loading);
var gridTopLevelRowCountSelector = createSelector3(gridRowsStateSelector, (rows) => rows.totalTopLevelRowCount);
var gridRowsLookupSelector = createSelector3(gridRowsStateSelector, (rows) => rows.dataRowIdToModelLookup);
var gridRowSelector = createSelector3(gridRowsLookupSelector, (rows, id) => rows[id]);
var gridRowTreeSelector = createSelector3(gridRowsStateSelector, (rows) => rows.tree);
var gridRowNodeSelector = createSelector3(gridRowTreeSelector, (rowTree, rowId) => rowTree[rowId]);
var gridRowGroupsToFetchSelector = createSelector3(gridRowsStateSelector, (rows) => rows.groupsToFetch);
var gridRowGroupingNameSelector = createSelector3(gridRowsStateSelector, (rows) => rows.groupingName);
var gridRowTreeDepthsSelector = createSelector3(gridRowsStateSelector, (rows) => rows.treeDepths);
var gridRowMaximumTreeDepthSelector = createSelectorMemoized2(gridRowsStateSelector, (rows) => {
  const entries = Object.entries(rows.treeDepths);
  if (entries.length === 0) {
    return 1;
  }
  return (entries.filter(([, nodeCount]) => nodeCount > 0).map(([depth]) => Number(depth)).sort((a, b) => b - a)[0] ?? 0) + 1;
});
var gridDataRowIdsSelector = createSelector3(gridRowsStateSelector, (rows) => rows.dataRowIds);
var gridDataRowsSelector = createSelectorMemoized2(gridDataRowIdsSelector, gridRowsLookupSelector, (dataRowIds, rowsLookup) => dataRowIds.reduce((acc, id) => {
  if (!rowsLookup[id]) {
    return acc;
  }
  acc.push(rowsLookup[id]);
  return acc;
}, []));
var gridAdditionalRowGroupsSelector = createSelector3(gridRowsStateSelector, (rows) => rows == null ? void 0 : rows.additionalRowGroups);
var gridPinnedRowsSelector = createSelectorMemoized2(gridAdditionalRowGroupsSelector, (additionalRowGroups) => {
  var _a, _b;
  const rawPinnedRows = additionalRowGroups == null ? void 0 : additionalRowGroups.pinnedRows;
  return {
    bottom: ((_a = rawPinnedRows == null ? void 0 : rawPinnedRows.bottom) == null ? void 0 : _a.map((rowEntry) => ({
      id: rowEntry.id,
      model: rowEntry.model ?? {}
    }))) ?? [],
    top: ((_b = rawPinnedRows == null ? void 0 : rawPinnedRows.top) == null ? void 0 : _b.map((rowEntry) => ({
      id: rowEntry.id,
      model: rowEntry.model ?? {}
    }))) ?? []
  };
});
var gridPinnedRowsCountSelector = createSelector3(gridPinnedRowsSelector, (pinnedRows) => {
  var _a, _b;
  return (((_a = pinnedRows == null ? void 0 : pinnedRows.top) == null ? void 0 : _a.length) || 0) + (((_b = pinnedRows == null ? void 0 : pinnedRows.bottom) == null ? void 0 : _b.length) || 0);
});

// node_modules/@mui/x-data-grid/esm/hooks/features/rows/gridRowsUtils.js
init_extends();
var GRID_ROOT_GROUP_ID = `auto-generated-group-node-root`;
var GRID_ID_AUTOGENERATED = Symbol("mui.id_autogenerated");
var buildRootGroup = () => ({
  type: "group",
  id: GRID_ROOT_GROUP_ID,
  depth: -1,
  groupingField: null,
  groupingKey: null,
  isAutoGenerated: true,
  children: [],
  childrenFromPath: {},
  childrenExpanded: true,
  parent: null
});
function checkGridRowIdIsValid(id, row, detailErrorMessage = "A row was provided without id in the rows prop:") {
  if (id == null) {
    throw new Error(["MUI X: The Data Grid component requires all rows to have a unique `id` property.", "Alternatively, you can use the `getRowId` prop to specify a custom id for each row.", detailErrorMessage, JSON.stringify(row)].join("\n"));
  }
}
var getRowIdFromRowModel = (rowModel, getRowId, detailErrorMessage) => {
  const id = getRowId ? getRowId(rowModel) : rowModel.id;
  checkGridRowIdIsValid(id, rowModel, detailErrorMessage);
  return id;
};
var getRowValue = (row, colDef, apiRef) => {
  const field = colDef.field;
  if (!colDef || !colDef.valueGetter) {
    return row[field];
  }
  const value = row[colDef.field];
  return colDef.valueGetter(value, row, colDef, apiRef);
};
var createRowsInternalCache = ({
  rows,
  getRowId,
  loading,
  rowCount
}) => {
  const updates = {
    type: "full",
    rows: []
  };
  const dataRowIdToModelLookup = {};
  for (let i = 0; i < rows.length; i += 1) {
    const model = rows[i];
    const id = getRowIdFromRowModel(model, getRowId);
    dataRowIdToModelLookup[id] = model;
    updates.rows.push(id);
  }
  return {
    rowsBeforePartialUpdates: rows,
    loadingPropBeforePartialUpdates: loading,
    rowCountPropBeforePartialUpdates: rowCount,
    updates,
    dataRowIdToModelLookup
  };
};
var getTopLevelRowCount = ({
  tree,
  rowCountProp = 0
}) => {
  const rootGroupNode = tree[GRID_ROOT_GROUP_ID];
  return Math.max(rowCountProp, rootGroupNode.children.length + (rootGroupNode.footerId == null ? 0 : 1));
};
var getRowsStateFromCache = ({
  apiRef,
  rowCountProp = 0,
  loadingProp,
  previousTree,
  previousTreeDepths,
  previousGroupsToFetch
}) => {
  const cache = apiRef.current.caches.rows;
  const {
    tree: unProcessedTree,
    treeDepths: unProcessedTreeDepths,
    dataRowIds: unProcessedDataRowIds,
    groupingName,
    groupsToFetch = []
  } = apiRef.current.applyStrategyProcessor("rowTreeCreation", {
    previousTree,
    previousTreeDepths,
    updates: cache.updates,
    dataRowIdToModelLookup: cache.dataRowIdToModelLookup,
    previousGroupsToFetch
  });
  const groupingParamsWithHydrateRows = apiRef.current.unstable_applyPipeProcessors("hydrateRows", {
    tree: unProcessedTree,
    treeDepths: unProcessedTreeDepths,
    dataRowIds: unProcessedDataRowIds,
    dataRowIdToModelLookup: cache.dataRowIdToModelLookup
  });
  apiRef.current.caches.rows.updates = {
    type: "partial",
    actions: {
      insert: [],
      modify: [],
      remove: []
    },
    idToActionLookup: {}
  };
  return _extends({}, groupingParamsWithHydrateRows, {
    totalRowCount: Math.max(rowCountProp, groupingParamsWithHydrateRows.dataRowIds.length),
    totalTopLevelRowCount: getTopLevelRowCount({
      tree: groupingParamsWithHydrateRows.tree,
      rowCountProp
    }),
    groupingName,
    loading: loadingProp,
    groupsToFetch
  });
};
var isAutogeneratedRow = (row) => GRID_ID_AUTOGENERATED in row;
var isAutogeneratedRowNode = (rowNode) => rowNode.type === "skeletonRow" || rowNode.type === "footer" || rowNode.type === "group" && rowNode.isAutoGenerated || rowNode.type === "pinnedRow" && rowNode.isAutoGenerated;
var getTreeNodeDescendants = (tree, parentId, skipAutoGeneratedRows, directChildrenOnly) => {
  const node = tree[parentId];
  if (node.type !== "group") {
    return [];
  }
  const validDescendants = [];
  for (let i = 0; i < node.children.length; i += 1) {
    const child = node.children[i];
    if (!skipAutoGeneratedRows || !isAutogeneratedRowNode(tree[child])) {
      validDescendants.push(child);
    }
    if (directChildrenOnly) {
      continue;
    }
    const childDescendants = getTreeNodeDescendants(tree, child, skipAutoGeneratedRows, directChildrenOnly);
    for (let j = 0; j < childDescendants.length; j += 1) {
      validDescendants.push(childDescendants[j]);
    }
  }
  if (!skipAutoGeneratedRows && node.footerId != null) {
    validDescendants.push(node.footerId);
  }
  return validDescendants;
};
var updateCacheWithNewRows = ({
  previousCache,
  getRowId,
  updates,
  groupKeys
}) => {
  if (previousCache.updates.type === "full") {
    throw new Error("MUI X: Unable to prepare a partial update if a full update is not applied yet.");
  }
  const uniqueUpdates = /* @__PURE__ */ new Map();
  updates.forEach((update) => {
    const id = getRowIdFromRowModel(update, getRowId, "A row was provided without id when calling updateRows():");
    if (uniqueUpdates.has(id)) {
      uniqueUpdates.set(id, _extends({}, uniqueUpdates.get(id), update));
    } else {
      uniqueUpdates.set(id, update);
    }
  });
  const partialUpdates = {
    type: "partial",
    actions: {
      insert: [...previousCache.updates.actions.insert ?? []],
      modify: [...previousCache.updates.actions.modify ?? []],
      remove: [...previousCache.updates.actions.remove ?? []]
    },
    idToActionLookup: _extends({}, previousCache.updates.idToActionLookup),
    groupKeys
  };
  const dataRowIdToModelLookup = _extends({}, previousCache.dataRowIdToModelLookup);
  const alreadyAppliedActionsToRemove = {
    insert: {},
    modify: {},
    remove: {}
  };
  uniqueUpdates.forEach((partialRow, id) => {
    const actionAlreadyAppliedToRow = partialUpdates.idToActionLookup[id];
    if (partialRow._action === "delete") {
      if (actionAlreadyAppliedToRow === "remove" || !dataRowIdToModelLookup[id]) {
        return;
      }
      if (actionAlreadyAppliedToRow != null) {
        alreadyAppliedActionsToRemove[actionAlreadyAppliedToRow][id] = true;
      }
      partialUpdates.actions.remove.push(id);
      delete dataRowIdToModelLookup[id];
      return;
    }
    const oldRow = dataRowIdToModelLookup[id];
    if (oldRow) {
      if (actionAlreadyAppliedToRow === "remove") {
        alreadyAppliedActionsToRemove.remove[id] = true;
        partialUpdates.actions.modify.push(id);
      } else if (actionAlreadyAppliedToRow == null) {
        partialUpdates.actions.modify.push(id);
      }
      dataRowIdToModelLookup[id] = _extends({}, oldRow, partialRow);
      return;
    }
    if (actionAlreadyAppliedToRow === "remove") {
      alreadyAppliedActionsToRemove.remove[id] = true;
      partialUpdates.actions.insert.push(id);
    } else if (actionAlreadyAppliedToRow == null) {
      partialUpdates.actions.insert.push(id);
    }
    dataRowIdToModelLookup[id] = partialRow;
  });
  const actionTypeWithActionsToRemove = Object.keys(alreadyAppliedActionsToRemove);
  for (let i = 0; i < actionTypeWithActionsToRemove.length; i += 1) {
    const actionType = actionTypeWithActionsToRemove[i];
    const idsToRemove = alreadyAppliedActionsToRemove[actionType];
    if (Object.keys(idsToRemove).length > 0) {
      partialUpdates.actions[actionType] = partialUpdates.actions[actionType].filter((id) => !idsToRemove[id]);
    }
  }
  return {
    dataRowIdToModelLookup,
    updates: partialUpdates,
    rowsBeforePartialUpdates: previousCache.rowsBeforePartialUpdates,
    loadingPropBeforePartialUpdates: previousCache.loadingPropBeforePartialUpdates,
    rowCountPropBeforePartialUpdates: previousCache.rowCountPropBeforePartialUpdates
  };
};
var minimalContentHeight = "var(--DataGrid-overlayHeight, calc(var(--height) * 2))";
function computeRowsUpdates(apiRef, updates, getRowId) {
  const nonPinnedRowsUpdates = [];
  updates.forEach((update) => {
    const id = getRowIdFromRowModel(update, getRowId, "A row was provided without id when calling updateRows():");
    const rowNode = gridRowNodeSelector(apiRef, id);
    if ((rowNode == null ? void 0 : rowNode.type) === "pinnedRow") {
      const pinnedRowsCache = apiRef.current.caches.pinnedRows;
      const prevModel = pinnedRowsCache.idLookup[id];
      if (prevModel) {
        pinnedRowsCache.idLookup[id] = _extends({}, prevModel, update);
      }
    } else {
      nonPinnedRowsUpdates.push(update);
    }
  });
  return nonPinnedRowsUpdates;
}
var warnedOnceInvalidRowHeight = false;
var getValidRowHeight = (rowHeightProp, defaultRowHeight, warningMessage) => {
  if (typeof rowHeightProp === "number" && rowHeightProp > 0) {
    return rowHeightProp;
  }
  if (!warnedOnceInvalidRowHeight && typeof rowHeightProp !== "undefined" && rowHeightProp !== null) {
    console.warn(warningMessage);
    warnedOnceInvalidRowHeight = true;
  }
  return defaultRowHeight;
};
var rowHeightWarning = [`MUI X: The \`rowHeight\` prop should be a number greater than 0.`, `The default value will be used instead.`].join("\n");
var getRowHeightWarning = [`MUI X: The \`getRowHeight\` prop should return a number greater than 0 or 'auto'.`, `The default value will be used instead.`].join("\n");

// node_modules/@mui/x-data-grid/esm/components/GridScrollArea.js
init_extends();
var React63 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/node_modules/@mui/x-internals/esm/fastMemo/fastMemo.js
var React41 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/node_modules/@mui/x-internals/esm/fastObjectShallowCompare/fastObjectShallowCompare.js
var is = Object.is;
function fastObjectShallowCompare(a, b) {
  if (a === b) {
    return true;
  }
  if (!(a instanceof Object) || !(b instanceof Object)) {
    return false;
  }
  let aLength = 0;
  let bLength = 0;
  for (const key in a) {
    aLength += 1;
    if (!is(a[key], b[key])) {
      return false;
    }
    if (!(key in b)) {
      return false;
    }
  }
  for (const _ in b) {
    bLength += 1;
  }
  return aLength === bLength;
}

// node_modules/@mui/x-data-grid/node_modules/@mui/x-internals/esm/fastMemo/fastMemo.js
function fastMemo(component) {
  return React41.memo(component, fastObjectShallowCompare);
}

// node_modules/@mui/x-data-grid/esm/constants/envConstants.js
var GRID_EXPERIMENTAL_ENABLED = false;

// node_modules/@mui/x-data-grid/esm/constants/localeTextConstants.js
var GRID_DEFAULT_LOCALE_TEXT = {
  // Root
  noRowsLabel: "No rows",
  noResultsOverlayLabel: "No results found.",
  noColumnsOverlayLabel: "No columns",
  noColumnsOverlayManageColumns: "Manage columns",
  emptyPivotOverlayLabel: "Add fields to rows, columns, and values to create a pivot table",
  // Density selector toolbar button text
  toolbarDensity: "Density",
  toolbarDensityLabel: "Density",
  toolbarDensityCompact: "Compact",
  toolbarDensityStandard: "Standard",
  toolbarDensityComfortable: "Comfortable",
  // Columns selector toolbar button text
  toolbarColumns: "Columns",
  toolbarColumnsLabel: "Select columns",
  // Filters toolbar button text
  toolbarFilters: "Filters",
  toolbarFiltersLabel: "Show filters",
  toolbarFiltersTooltipHide: "Hide filters",
  toolbarFiltersTooltipShow: "Show filters",
  toolbarFiltersTooltipActive: (count) => count !== 1 ? `${count} active filters` : `${count} active filter`,
  // Quick filter toolbar field
  toolbarQuickFilterPlaceholder: "Search…",
  toolbarQuickFilterLabel: "Search",
  toolbarQuickFilterDeleteIconLabel: "Clear",
  // Export selector toolbar button text
  toolbarExport: "Export",
  toolbarExportLabel: "Export",
  toolbarExportCSV: "Download as CSV",
  toolbarExportPrint: "Print",
  toolbarExportExcel: "Download as Excel",
  // Toolbar pivot button
  toolbarPivot: "Pivot",
  // Toolbar charts button
  toolbarCharts: "Charts",
  // Toolbar AI Assistant button
  toolbarAssistant: "AI Assistant",
  // Columns management text
  columnsManagementSearchTitle: "Search",
  columnsManagementNoColumns: "No columns",
  columnsManagementShowHideAllText: "Show/Hide All",
  columnsManagementReset: "Reset",
  columnsManagementDeleteIconLabel: "Clear",
  // Filter panel text
  filterPanelAddFilter: "Add filter",
  filterPanelRemoveAll: "Remove all",
  filterPanelDeleteIconLabel: "Delete",
  filterPanelLogicOperator: "Logic operator",
  filterPanelOperator: "Operator",
  filterPanelOperatorAnd: "And",
  filterPanelOperatorOr: "Or",
  filterPanelColumns: "Columns",
  filterPanelInputLabel: "Value",
  filterPanelInputPlaceholder: "Filter value",
  // Filter operators text
  filterOperatorContains: "contains",
  filterOperatorDoesNotContain: "does not contain",
  filterOperatorEquals: "equals",
  filterOperatorDoesNotEqual: "does not equal",
  filterOperatorStartsWith: "starts with",
  filterOperatorEndsWith: "ends with",
  filterOperatorIs: "is",
  filterOperatorNot: "is not",
  filterOperatorAfter: "is after",
  filterOperatorOnOrAfter: "is on or after",
  filterOperatorBefore: "is before",
  filterOperatorOnOrBefore: "is on or before",
  filterOperatorIsEmpty: "is empty",
  filterOperatorIsNotEmpty: "is not empty",
  filterOperatorIsAnyOf: "is any of",
  "filterOperator=": "=",
  "filterOperator!=": "!=",
  "filterOperator>": ">",
  "filterOperator>=": ">=",
  "filterOperator<": "<",
  "filterOperator<=": "<=",
  // Header filter operators text
  headerFilterOperatorContains: "Contains",
  headerFilterOperatorDoesNotContain: "Does not contain",
  headerFilterOperatorEquals: "Equals",
  headerFilterOperatorDoesNotEqual: "Does not equal",
  headerFilterOperatorStartsWith: "Starts with",
  headerFilterOperatorEndsWith: "Ends with",
  headerFilterOperatorIs: "Is",
  headerFilterOperatorNot: "Is not",
  headerFilterOperatorAfter: "Is after",
  headerFilterOperatorOnOrAfter: "Is on or after",
  headerFilterOperatorBefore: "Is before",
  headerFilterOperatorOnOrBefore: "Is on or before",
  headerFilterOperatorIsEmpty: "Is empty",
  headerFilterOperatorIsNotEmpty: "Is not empty",
  headerFilterOperatorIsAnyOf: "Is any of",
  "headerFilterOperator=": "Equals",
  "headerFilterOperator!=": "Not equals",
  "headerFilterOperator>": "Greater than",
  "headerFilterOperator>=": "Greater than or equal to",
  "headerFilterOperator<": "Less than",
  "headerFilterOperator<=": "Less than or equal to",
  headerFilterClear: "Clear filter",
  // Filter values text
  filterValueAny: "any",
  filterValueTrue: "true",
  filterValueFalse: "false",
  // Column menu text
  columnMenuLabel: "Menu",
  columnMenuAriaLabel: (columnName) => `${columnName} column menu`,
  columnMenuShowColumns: "Show columns",
  columnMenuManageColumns: "Manage columns",
  columnMenuFilter: "Filter",
  columnMenuHideColumn: "Hide column",
  columnMenuUnsort: "Unsort",
  columnMenuSortAsc: "Sort by ASC",
  columnMenuSortDesc: "Sort by DESC",
  columnMenuManagePivot: "Manage pivot",
  columnMenuManageCharts: "Manage charts",
  // Column header text
  columnHeaderFiltersTooltipActive: (count) => count !== 1 ? `${count} active filters` : `${count} active filter`,
  columnHeaderFiltersLabel: "Show filters",
  columnHeaderSortIconLabel: "Sort",
  // Rows selected footer text
  footerRowSelected: (count) => count !== 1 ? `${count.toLocaleString()} rows selected` : `${count.toLocaleString()} row selected`,
  // Total row amount footer text
  footerTotalRows: "Total Rows:",
  // Total visible row amount footer text
  footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} of ${totalCount.toLocaleString()}`,
  // Checkbox selection text
  checkboxSelectionHeaderName: "Checkbox selection",
  checkboxSelectionSelectAllRows: "Select all rows",
  checkboxSelectionUnselectAllRows: "Unselect all rows",
  checkboxSelectionSelectRow: "Select row",
  checkboxSelectionUnselectRow: "Unselect row",
  // Boolean cell text
  booleanCellTrueLabel: "yes",
  booleanCellFalseLabel: "no",
  // Actions cell more text
  actionsCellMore: "more",
  // Column pinning text
  pinToLeft: "Pin to left",
  pinToRight: "Pin to right",
  unpin: "Unpin",
  // Tree Data
  treeDataGroupingHeaderName: "Group",
  treeDataExpand: "see children",
  treeDataCollapse: "hide children",
  // Grouping columns
  groupingColumnHeaderName: "Group",
  groupColumn: (name) => `Group by ${name}`,
  unGroupColumn: (name) => `Stop grouping by ${name}`,
  // Master/detail
  detailPanelToggle: "Detail panel toggle",
  expandDetailPanel: "Expand",
  collapseDetailPanel: "Collapse",
  // Pagination
  paginationRowsPerPage: "Rows per page:",
  paginationDisplayedRows: ({
    from,
    to,
    count,
    estimated
  }) => {
    if (!estimated) {
      return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;
    }
    const estimatedLabel = estimated && estimated > to ? `around ${estimated}` : `more than ${to}`;
    return `${from}–${to} of ${count !== -1 ? count : estimatedLabel}`;
  },
  paginationItemAriaLabel: (type) => {
    if (type === "first") {
      return "Go to first page";
    }
    if (type === "last") {
      return "Go to last page";
    }
    if (type === "next") {
      return "Go to next page";
    }
    return "Go to previous page";
  },
  // Row reordering text
  rowReorderingHeaderName: "Row reordering",
  // Aggregation
  aggregationMenuItemHeader: "Aggregation",
  aggregationFunctionLabelNone: "none",
  aggregationFunctionLabelSum: "sum",
  aggregationFunctionLabelAvg: "avg",
  aggregationFunctionLabelMin: "min",
  aggregationFunctionLabelMax: "max",
  aggregationFunctionLabelSize: "size",
  // Pivot panel
  pivotToggleLabel: "Pivot",
  pivotRows: "Rows",
  pivotColumns: "Columns",
  pivotValues: "Values",
  pivotCloseButton: "Close pivot settings",
  pivotSearchButton: "Search fields",
  pivotSearchControlPlaceholder: "Search fields",
  pivotSearchControlLabel: "Search fields",
  pivotSearchControlClear: "Clear search",
  pivotNoFields: "No fields",
  pivotMenuMoveUp: "Move up",
  pivotMenuMoveDown: "Move down",
  pivotMenuMoveToTop: "Move to top",
  pivotMenuMoveToBottom: "Move to bottom",
  pivotMenuRows: "Rows",
  pivotMenuColumns: "Columns",
  pivotMenuValues: "Values",
  pivotMenuOptions: "Field options",
  pivotMenuAddToRows: "Add to Rows",
  pivotMenuAddToColumns: "Add to Columns",
  pivotMenuAddToValues: "Add to Values",
  pivotMenuRemove: "Remove",
  pivotDragToRows: "Drag here to create rows",
  pivotDragToColumns: "Drag here to create columns",
  pivotDragToValues: "Drag here to create values",
  pivotYearColumnHeaderName: "(Year)",
  pivotQuarterColumnHeaderName: "(Quarter)",
  // Charts configuration panel
  chartsNoCharts: "There are no charts available",
  chartsChartNotSelected: "Select a chart type to configure its options",
  chartsTabChart: "Chart",
  chartsTabFields: "Fields",
  chartsTabCustomize: "Customize",
  chartsCloseButton: "Close charts configuration",
  chartsSyncButtonLabel: "Sync chart",
  chartsSearchPlaceholder: "Search fields",
  chartsSearchLabel: "Search fields",
  chartsSearchClear: "Clear search",
  chartsNoFields: "No fields",
  chartsFieldBlocked: "This field cannot be added to any section",
  chartsCategories: "Categories",
  chartsSeries: "Series",
  chartsMenuAddToDimensions: (dimensionLabel) => `Add to ${dimensionLabel}`,
  chartsMenuAddToValues: (valuesLabel) => `Add to ${valuesLabel}`,
  chartsMenuMoveUp: "Move up",
  chartsMenuMoveDown: "Move down",
  chartsMenuMoveToTop: "Move to top",
  chartsMenuMoveToBottom: "Move to bottom",
  chartsMenuOptions: "Field options",
  chartsMenuRemove: "Remove",
  chartsDragToDimensions: (dimensionLabel) => `Drag here to use column as ${dimensionLabel}`,
  chartsDragToValues: (valuesLabel) => `Drag here to use column as ${valuesLabel}`,
  // AI Assistant panel
  aiAssistantPanelTitle: "AI Assistant",
  aiAssistantPanelClose: "Close AI Assistant",
  aiAssistantPanelNewConversation: "New conversation",
  aiAssistantPanelConversationHistory: "Conversation history",
  aiAssistantPanelEmptyConversation: "No prompt history",
  aiAssistantSuggestions: "Suggestions",
  // Prompt field
  promptFieldLabel: "Prompt",
  promptFieldPlaceholder: "Type a prompt…",
  promptFieldPlaceholderWithRecording: "Type or record a prompt…",
  promptFieldPlaceholderListening: "Listening for prompt…",
  promptFieldSpeechRecognitionNotSupported: "Speech recognition is not supported in this browser",
  promptFieldSend: "Send",
  promptFieldRecord: "Record",
  promptFieldStopRecording: "Stop recording",
  // Prompt
  promptRerun: "Run again",
  promptProcessing: "Processing…",
  promptAppliedChanges: "Applied changes",
  // Prompt changes
  promptChangeGroupDescription: (column) => `Group by ${column}`,
  promptChangeAggregationLabel: (column, aggregation) => `${column} (${aggregation})`,
  promptChangeAggregationDescription: (column, aggregation) => `Aggregate ${column} (${aggregation})`,
  promptChangeFilterLabel: (column, operator, value) => {
    if (operator === "is any of") {
      return `${column} is any of: ${value}`;
    }
    return `${column} ${operator} ${value}`;
  },
  promptChangeFilterDescription: (column, operator, value) => {
    if (operator === "is any of") {
      return `Filter where ${column} is any of: ${value}`;
    }
    return `Filter where ${column} ${operator} ${value}`;
  },
  promptChangeSortDescription: (column, direction) => `Sort by ${column} (${direction})`,
  promptChangePivotEnableLabel: "Pivot",
  promptChangePivotEnableDescription: "Enable pivot",
  promptChangePivotColumnsLabel: (count) => `Columns (${count})`,
  promptChangePivotColumnsDescription: (column, direction) => `${column}${direction ? ` (${direction})` : ""}`,
  promptChangePivotRowsLabel: (count) => `Rows (${count})`,
  promptChangePivotValuesLabel: (count) => `Values (${count})`,
  promptChangePivotValuesDescription: (column, aggregation) => `${column} (${aggregation})`
};

// node_modules/@mui/x-data-grid/node_modules/@mui/utils/esm/ClassNameGenerator/ClassNameGenerator.js
var defaultGenerator2 = (componentName) => componentName;
var createClassNameGenerator2 = () => {
  let generate = defaultGenerator2;
  return {
    configure(generator) {
      generate = generator;
    },
    generate(componentName) {
      return generate(componentName);
    },
    reset() {
      generate = defaultGenerator2;
    }
  };
};
var ClassNameGenerator2 = createClassNameGenerator2();
var ClassNameGenerator_default2 = ClassNameGenerator2;

// node_modules/@mui/x-data-grid/node_modules/@mui/utils/esm/generateUtilityClass/generateUtilityClass.js
var globalStateClasses2 = {
  active: "active",
  checked: "checked",
  completed: "completed",
  disabled: "disabled",
  error: "error",
  expanded: "expanded",
  focused: "focused",
  focusVisible: "focusVisible",
  open: "open",
  readOnly: "readOnly",
  required: "required",
  selected: "selected"
};
function generateUtilityClass2(componentName, slot, globalStatePrefix = "Mui") {
  const globalStateClass = globalStateClasses2[slot];
  return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${ClassNameGenerator_default2.generate(componentName)}-${slot}`;
}

// node_modules/@mui/x-data-grid/node_modules/@mui/utils/esm/generateUtilityClasses/generateUtilityClasses.js
function generateUtilityClasses2(componentName, slots, globalStatePrefix = "Mui") {
  const result = {};
  slots.forEach((slot) => {
    result[slot] = generateUtilityClass2(componentName, slot, globalStatePrefix);
  });
  return result;
}

// node_modules/@mui/x-data-grid/esm/constants/gridClasses.js
function getDataGridUtilityClass(slot) {
  return generateUtilityClass2("MuiDataGrid", slot);
}
var gridClasses2 = generateUtilityClasses2("MuiDataGrid", [
  "aiAssistantPanel",
  "aiAssistantPanelHeader",
  "aiAssistantPanelTitleContainer",
  "aiAssistantPanelTitle",
  "aiAssistantPanelBody",
  "aiAssistantPanelEmptyText",
  "aiAssistantPanelFooter",
  "aiAssistantPanelConversation",
  "aiAssistantPanelConversationList",
  "aiAssistantPanelConversationTitle",
  "aiAssistantPanelSuggestions",
  "aiAssistantPanelSuggestionsList",
  "aiAssistantPanelSuggestionsItem",
  "aiAssistantPanelSuggestionsLabel",
  "actionsCell",
  "aggregationColumnHeader",
  "aggregationColumnHeader--alignLeft",
  "aggregationColumnHeader--alignCenter",
  "aggregationColumnHeader--alignRight",
  "aggregationColumnHeaderLabel",
  "aggregationRowOverlayWrapper",
  "autoHeight",
  "autosizing",
  "mainContent",
  "withSidePanel",
  "booleanCell",
  "cell--editable",
  "cell--editing",
  "cell--flex",
  "cell--textCenter",
  "cell--textLeft",
  "cell--textRight",
  "cell--rangeTop",
  "cell--rangeBottom",
  "cell--rangeLeft",
  "cell--rangeRight",
  "cell--pinnedLeft",
  "cell--pinnedRight",
  "cell--selectionMode",
  "cell",
  "cellCheckbox",
  "cellEmpty",
  "cellSkeleton",
  "cellOffsetLeft",
  "checkboxInput",
  "collapsible",
  "collapsibleTrigger",
  "collapsibleIcon",
  "collapsiblePanel",
  "columnHeader",
  "columnHeader--alignCenter",
  "columnHeader--alignLeft",
  "columnHeader--alignRight",
  "columnHeader--dragging",
  "columnHeader--moving",
  "columnHeader--numeric",
  "columnHeader--sortable",
  "columnHeader--sorted",
  "columnHeader--filtered",
  "columnHeader--pinnedLeft",
  "columnHeader--pinnedRight",
  "columnHeader--last",
  "columnHeader--lastUnpinned",
  "columnHeader--siblingFocused",
  "columnHeader--filter",
  "columnHeaderFilterInput",
  "columnHeaderFilterOperatorLabel",
  "columnHeaderCheckbox",
  "columnHeaderDraggableContainer",
  "columnHeaderTitle",
  "columnHeaderTitleContainer",
  "columnHeaderTitleContainerContent",
  "columnHeader--filledGroup",
  "columnHeader--emptyGroup",
  "columnHeaders",
  "columnSeparator--resizable",
  "columnSeparator--resizing",
  "columnSeparator--sideLeft",
  "columnSeparator--sideRight",
  "columnSeparator",
  "columnsManagement",
  "columnsManagementRow",
  "columnsManagementHeader",
  "columnsManagementSearchInput",
  "columnsManagementFooter",
  "columnsManagementScrollArea",
  "columnsManagementEmptyText",
  "container--top",
  "container--bottom",
  "detailPanel",
  "detailPanelToggleCell",
  "detailPanelToggleCell--expanded",
  "footerCell",
  "panel",
  "panelHeader",
  "panelWrapper",
  "panelContent",
  "panelFooter",
  "paper",
  "editBooleanCell",
  "editInputCell",
  "filler",
  "filler--borderBottom",
  "filler--pinnedLeft",
  "filler--pinnedRight",
  "filterForm",
  "filterFormDeleteIcon",
  "filterFormLogicOperatorInput",
  "filterFormColumnInput",
  "filterFormOperatorInput",
  "filterFormValueInput",
  "filterIcon",
  "footerContainer",
  "headerFilterRow",
  "iconButtonContainer",
  "iconSeparator",
  "main",
  "main--hasPinnedRight",
  "main--hiddenContent",
  "menu",
  "menuIcon",
  "menuIconButton",
  "menuOpen",
  "menuList",
  "overlay",
  "overlayWrapper",
  "overlayWrapperInner",
  "root",
  "root--densityStandard",
  "root--densityComfortable",
  "root--densityCompact",
  "root--disableUserSelection",
  "root--noToolbar",
  "row",
  "row--editable",
  "row--editing",
  "row--firstVisible",
  "row--lastVisible",
  // TODO v9: Rename to `cell--dragging`
  "row--dragging",
  "row--dropAbove",
  "row--dropBelow",
  "row--beingDragged",
  "row--dynamicHeight",
  "row--detailPanelExpanded",
  "row--borderBottom",
  "rowReorderCellPlaceholder",
  "rowCount",
  "rowReorderCellContainer",
  "rowReorderCell",
  "rowReorderCell--draggable",
  "rowReorderIcon",
  "rowSkeleton",
  "scrollArea--left",
  "scrollArea--right",
  "scrollArea--up",
  "scrollArea--down",
  "scrollArea",
  "scrollbar",
  "scrollbar--vertical",
  "scrollbar--horizontal",
  "scrollbarFiller",
  "scrollbarFiller--header",
  "scrollbarFiller--borderTop",
  "scrollbarFiller--borderBottom",
  "scrollbarFiller--pinnedRight",
  "selectedRowCount",
  "sortButton",
  "sortIcon",
  "shadowScrollArea",
  "sidebar",
  "sidebarHeader",
  "toolbarContainer",
  "toolbar",
  "toolbarLabel",
  "toolbarDivider",
  "toolbarFilterList",
  "toolbarQuickFilter",
  "toolbarQuickFilterTrigger",
  "toolbarQuickFilterControl",
  "virtualScroller",
  "virtualScroller--hasScrollX",
  "virtualScrollerContent",
  "virtualScrollerContent--overflowed",
  "virtualScrollerRenderZone",
  "withVerticalBorder",
  "withBorderColor",
  "cell--withRightBorder",
  "cell--withLeftBorder",
  "columnHeader--withRightBorder",
  "columnHeader--withLeftBorder",
  "treeDataGroupingCell",
  "treeDataGroupingCellToggle",
  "treeDataGroupingCellLoadingContainer",
  "groupingCriteriaCell",
  "groupingCriteriaCellToggle",
  "groupingCriteriaCellLoadingContainer",
  "pinnedRows",
  "pinnedRows--top",
  "pinnedRows--bottom",
  "pivotPanelAvailableFields",
  "pivotPanelField",
  "pivotPanelField--sorted",
  "pivotPanelFieldActionContainer",
  "pivotPanelFieldCheckbox",
  "pivotPanelFieldDragIcon",
  "pivotPanelFieldList",
  "pivotPanelFieldName",
  "pivotPanelHeader",
  "pivotPanelPlaceholder",
  "pivotPanelScrollArea",
  "pivotPanelSearchContainer",
  "pivotPanelSection",
  "pivotPanelSectionTitle",
  "pivotPanelSections",
  "pivotPanelSwitch",
  "pivotPanelSwitchLabel",
  "prompt",
  "promptContent",
  "promptText",
  "promptFeedback",
  "promptChangeList",
  "promptChangesToggle",
  "promptChangesToggleIcon",
  "promptIcon",
  "promptIconContainer",
  "promptError",
  "promptAction"
]);

// node_modules/@mui/x-data-grid/esm/constants/signature.js
var GridSignature = function(GridSignature2) {
  GridSignature2["DataGrid"] = "DataGrid";
  GridSignature2["DataGridPro"] = "DataGridPro";
  GridSignature2["DataGridPremium"] = "DataGridPremium";
  return GridSignature2;
}({});

// node_modules/@mui/x-data-grid/esm/hooks/utils/useGridEvent.js
var React42 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/esm/utils/cleanupTracking/TimerBasedCleanupTracking.js
var CLEANUP_TIMER_LOOP_MILLIS = 1e3;
var TimerBasedCleanupTracking = class {
  constructor(timeout = CLEANUP_TIMER_LOOP_MILLIS) {
    __publicField(this, "timeouts", /* @__PURE__ */ (() => /* @__PURE__ */ new Map())());
    __publicField(this, "cleanupTimeout", /* @__PURE__ */ (() => CLEANUP_TIMER_LOOP_MILLIS)());
    this.cleanupTimeout = timeout;
  }
  register(object, unsubscribe, unregisterToken) {
    if (!this.timeouts) {
      this.timeouts = /* @__PURE__ */ new Map();
    }
    const timeout = setTimeout(() => {
      if (typeof unsubscribe === "function") {
        unsubscribe();
      }
      this.timeouts.delete(unregisterToken.cleanupToken);
    }, this.cleanupTimeout);
    this.timeouts.set(unregisterToken.cleanupToken, timeout);
  }
  unregister(unregisterToken) {
    const timeout = this.timeouts.get(unregisterToken.cleanupToken);
    if (timeout) {
      this.timeouts.delete(unregisterToken.cleanupToken);
      clearTimeout(timeout);
    }
  }
  reset() {
    if (this.timeouts) {
      this.timeouts.forEach((value, key) => {
        this.unregister({
          cleanupToken: key
        });
      });
      this.timeouts = void 0;
    }
  }
};

// node_modules/@mui/x-data-grid/esm/utils/cleanupTracking/FinalizationRegistryBasedCleanupTracking.js
var FinalizationRegistryBasedCleanupTracking = class {
  constructor() {
    __publicField(this, "registry", (() => new FinalizationRegistry((unsubscribe) => {
      if (typeof unsubscribe === "function") {
        unsubscribe();
      }
    }))());
  }
  register(object, unsubscribe, unregisterToken) {
    this.registry.register(object, unsubscribe, unregisterToken);
  }
  unregister(unregisterToken) {
    this.registry.unregister(unregisterToken);
  }
  reset() {
  }
};

// node_modules/@mui/x-data-grid/esm/hooks/utils/useGridEvent.js
var ObjectToBeRetainedByReact = class _ObjectToBeRetainedByReact {
  static create() {
    return new _ObjectToBeRetainedByReact();
  }
};
var registryContainer = {
  current: createRegistry()
};
var cleanupTokensCounter = 0;
function useGridEvent(apiRef, eventName, handler, options) {
  const objectRetainedByReact = React42.useState(ObjectToBeRetainedByReact.create)[0];
  const subscription = React42.useRef(null);
  const handlerRef = React42.useRef(null);
  handlerRef.current = handler;
  const cleanupTokenRef = React42.useRef(null);
  if (!subscription.current && handlerRef.current) {
    const enhancedHandler = (params, event, details) => {
      var _a;
      if (!event.defaultMuiPrevented) {
        (_a = handlerRef.current) == null ? void 0 : _a.call(handlerRef, params, event, details);
      }
    };
    subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);
    cleanupTokensCounter += 1;
    cleanupTokenRef.current = {
      cleanupToken: cleanupTokensCounter
    };
    registryContainer.current.register(
      objectRetainedByReact,
      // The callback below will be called once this reference stops being retained
      () => {
        var _a;
        (_a = subscription.current) == null ? void 0 : _a.call(subscription);
        subscription.current = null;
        cleanupTokenRef.current = null;
      },
      cleanupTokenRef.current
    );
  } else if (!handlerRef.current && subscription.current) {
    subscription.current();
    subscription.current = null;
    if (cleanupTokenRef.current) {
      registryContainer.current.unregister(cleanupTokenRef.current);
      cleanupTokenRef.current = null;
    }
  }
  React42.useEffect(() => {
    if (!subscription.current && handlerRef.current) {
      const enhancedHandler = (params, event, details) => {
        var _a;
        if (!event.defaultMuiPrevented) {
          (_a = handlerRef.current) == null ? void 0 : _a.call(handlerRef, params, event, details);
        }
      };
      subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);
    }
    if (cleanupTokenRef.current && registryContainer.current) {
      registryContainer.current.unregister(cleanupTokenRef.current);
      cleanupTokenRef.current = null;
    }
    return () => {
      var _a;
      (_a = subscription.current) == null ? void 0 : _a.call(subscription);
      subscription.current = null;
    };
  }, [apiRef, eventName, options]);
}
var OPTIONS_IS_FIRST = {
  isFirst: true
};
function useGridEventPriority(apiRef, eventName, handler) {
  useGridEvent(apiRef, eventName, handler, OPTIONS_IS_FIRST);
}
function unstable_resetCleanupTracking() {
  var _a;
  (_a = registryContainer.current) == null ? void 0 : _a.reset();
  registryContainer.current = createRegistry();
}
function createRegistry() {
  return typeof FinalizationRegistry !== "undefined" ? new FinalizationRegistryBasedCleanupTracking() : new TimerBasedCleanupTracking();
}

// node_modules/@mui/x-data-grid/esm/hooks/utils/useGridSelector.js
var React43 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/node_modules/@mui/x-internals/esm/warning/warning.js
var warnedOnceCache = /* @__PURE__ */ new Set();
function warnOnce(message, gravity = "warning") {
  if (false) {
    return;
  }
  const cleanMessage = Array.isArray(message) ? message.join("\n") : message;
  if (!warnedOnceCache.has(cleanMessage)) {
    warnedOnceCache.add(cleanMessage);
    if (gravity === "error") {
      console.error(cleanMessage);
    } else {
      console.warn(cleanMessage);
    }
  }
}

// node_modules/@mui/x-data-grid/esm/hooks/utils/useGridSelector.js
var import_shim = __toESM(require_shim(), 1);
var defaultCompare = Object.is;
var objectShallowCompare = fastObjectShallowCompare;
var arrayShallowCompare = (a, b) => {
  if (a === b) {
    return true;
  }
  return a.length === b.length && a.every((v, i) => v === b[i]);
};
var argsEqual = (prev, curr) => {
  let fn = Object.is;
  if (curr instanceof Array) {
    fn = arrayShallowCompare;
  } else if (curr instanceof Object) {
    fn = objectShallowCompare;
  }
  return fn(prev, curr);
};
var createRefs = () => ({
  state: null,
  equals: null,
  selector: null,
  args: void 0
});
var EMPTY2 = [];
var emptyGetSnapshot = () => null;
function useGridSelector(apiRef, selector, args = void 0, equals = defaultCompare) {
  if (true) {
    if (!apiRef.current.state) {
      warnOnce(["MUI X: `useGridSelector` has been called before the initialization of the state.", "This hook can only be used inside the context of the grid."]);
    }
  }
  const refs = useLazyRef(createRefs);
  const didInit = refs.current.selector !== null;
  const [state, setState] = React43.useState(
    // We don't use an initialization function to avoid allocations
    didInit ? null : selector(apiRef, args)
  );
  refs.current.state = state;
  refs.current.equals = equals;
  refs.current.selector = selector;
  const prevArgs = refs.current.args;
  refs.current.args = args;
  if (didInit && !argsEqual(prevArgs, args)) {
    const newState = refs.current.selector(apiRef, refs.current.args);
    if (!refs.current.equals(refs.current.state, newState)) {
      refs.current.state = newState;
      setState(newState);
    }
  }
  const subscribe = React43.useCallback(
    () => {
      if (refs.current.subscription) {
        return null;
      }
      refs.current.subscription = apiRef.current.store.subscribe(() => {
        const newState = refs.current.selector(apiRef, refs.current.args);
        if (!refs.current.equals(refs.current.state, newState)) {
          refs.current.state = newState;
          setState(newState);
        }
      });
      return null;
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    EMPTY2
  );
  const unsubscribe = React43.useCallback(() => {
    if (!refs.current.subscription) {
      subscribe();
    }
    return () => {
      if (refs.current.subscription) {
        refs.current.subscription();
        refs.current.subscription = void 0;
      }
    };
  }, EMPTY2);
  (0, import_shim.useSyncExternalStore)(unsubscribe, subscribe, emptyGetSnapshot);
  return state;
}

// node_modules/@mui/x-data-grid/esm/hooks/features/density/densitySelector.js
var COMPACT_DENSITY_FACTOR = 0.7;
var COMFORTABLE_DENSITY_FACTOR = 1.3;
var DENSITY_FACTORS = {
  compact: COMPACT_DENSITY_FACTOR,
  comfortable: COMFORTABLE_DENSITY_FACTOR,
  standard: 1
};
var gridDensitySelector = createRootSelector((state) => state.density);
var gridDensityFactorSelector = createSelector3(gridDensitySelector, (density) => DENSITY_FACTORS[density]);

// node_modules/@mui/x-data-grid/node_modules/@mui/utils/esm/useTimeout/useTimeout.js
var Timeout = class _Timeout {
  constructor() {
    __publicField(this, "currentId", null);
    __publicField(this, "clear", () => {
      if (this.currentId !== null) {
        clearTimeout(this.currentId);
        this.currentId = null;
      }
    });
    __publicField(this, "disposeEffect", () => {
      return this.clear;
    });
  }
  static create() {
    return new _Timeout();
  }
  /**
   * Executes `fn` after `delay`, clearing any previously scheduled call.
   */
  start(delay, fn) {
    this.clear();
    this.currentId = setTimeout(() => {
      this.currentId = null;
      fn();
    }, delay);
  }
};
function useTimeout() {
  const timeout = useLazyRef(Timeout.create).current;
  useOnMount(timeout.disposeEffect);
  return timeout;
}

// node_modules/@mui/x-data-grid/esm/hooks/features/columns/gridColumnsUtils.js
init_extends();

// node_modules/@mui/x-data-grid/node_modules/@mui/utils/esm/resolveProps/resolveProps.js
init_clsx();
function resolveProps2(defaultProps, props, mergeClassNameAndStyle = false) {
  const output = {
    ...props
  };
  for (const key in defaultProps) {
    if (Object.prototype.hasOwnProperty.call(defaultProps, key)) {
      const propName = key;
      if (propName === "components" || propName === "slots") {
        output[propName] = {
          ...defaultProps[propName],
          ...output[propName]
        };
      } else if (propName === "componentsProps" || propName === "slotProps") {
        const defaultSlotProps = defaultProps[propName];
        const slotProps = props[propName];
        if (!slotProps) {
          output[propName] = defaultSlotProps || {};
        } else if (!defaultSlotProps) {
          output[propName] = slotProps;
        } else {
          output[propName] = {
            ...slotProps
          };
          for (const slotKey in defaultSlotProps) {
            if (Object.prototype.hasOwnProperty.call(defaultSlotProps, slotKey)) {
              const slotPropName = slotKey;
              output[propName][slotPropName] = resolveProps2(defaultSlotProps[slotPropName], slotProps[slotPropName], mergeClassNameAndStyle);
            }
          }
        }
      } else if (propName === "className" && mergeClassNameAndStyle && props.className) {
        output.className = clsx_default(defaultProps == null ? void 0 : defaultProps.className, props == null ? void 0 : props.className);
      } else if (propName === "style" && mergeClassNameAndStyle && props.style) {
        output.style = {
          ...defaultProps == null ? void 0 : defaultProps.style,
          ...props == null ? void 0 : props.style
        };
      } else if (output[propName] === void 0) {
        output[propName] = defaultProps[propName];
      }
    }
  }
  return output;
}

// node_modules/@mui/x-data-grid/esm/colDef/gridActionsColDef.js
init_extends();

// node_modules/@mui/x-data-grid/esm/components/cell/GridEditInputCell.js
init_extends();
init_objectWithoutPropertiesLoose();
var React44 = __toESM(require_react(), 1);
var import_prop_types18 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-data-grid/esm/utils/assert.js
function NotRendered(_props) {
  throw new Error("Failed assertion: should not be rendered");
}

// node_modules/@mui/x-data-grid/esm/components/cell/GridEditInputCell.js
var import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
var _excluded24 = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "tabIndex", "hasFocus", "isValidating", "debounceMs", "isProcessingProps", "onValueChange", "slotProps"];
var useUtilityClasses2 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["editInputCell"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var GridEditInputCellRoot = styled_default(NotRendered, {
  name: "MuiDataGrid",
  slot: "EditInputCell"
})({
  font: vars.typography.font.body,
  padding: "1px 0",
  "& input": {
    padding: "0 16px",
    height: "100%"
  }
});
var GridEditInputCell = forwardRef2((props, ref) => {
  const rootProps = useGridRootProps();
  const {
    id,
    value,
    field,
    colDef,
    hasFocus,
    debounceMs = 200,
    isProcessingProps,
    onValueChange,
    slotProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded24);
  const apiRef = useGridApiContext();
  const inputRef = React44.useRef(null);
  const [valueState, setValueState] = React44.useState(value);
  const classes2 = useUtilityClasses2(rootProps);
  const handleChange = React44.useCallback(async (event) => {
    const newValue = event.target.value;
    const column = apiRef.current.getColumn(field);
    let parsedValue = newValue;
    if (column.valueParser) {
      parsedValue = column.valueParser(newValue, apiRef.current.getRow(id), column, apiRef);
    }
    setValueState(parsedValue);
    apiRef.current.setEditCellValue({
      id,
      field,
      value: parsedValue,
      debounceMs,
      unstable_skipValueParser: true
    }, event);
    if (onValueChange) {
      await onValueChange(event, newValue);
    }
  }, [apiRef, debounceMs, field, id, onValueChange]);
  const meta = apiRef.current.unstable_getEditCellMeta(id, field);
  React44.useEffect(() => {
    if ((meta == null ? void 0 : meta.changeReason) !== "debouncedSetEditCellValue") {
      setValueState(value);
    }
  }, [meta, value]);
  useEnhancedEffect_default(() => {
    if (hasFocus) {
      inputRef.current.focus();
    }
  }, [hasFocus]);
  return (0, import_jsx_runtime18.jsx)(GridEditInputCellRoot, _extends({
    as: rootProps.slots.baseInput,
    inputRef,
    className: classes2.root,
    ownerState: rootProps,
    fullWidth: true,
    type: colDef.type === "number" ? colDef.type : "text",
    value: valueState ?? "",
    onChange: handleChange,
    endAdornment: isProcessingProps ? (0, import_jsx_runtime18.jsx)(rootProps.slots.loadIcon, {
      fontSize: "small",
      color: "action"
    }) : void 0
  }, other, slotProps == null ? void 0 : slotProps.root, {
    ref
  }));
});
if (true) GridEditInputCell.displayName = "GridEditInputCell";
true ? GridEditInputCell.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * GridApi that let you manipulate the grid.
   */
  api: import_prop_types18.default.object.isRequired,
  /**
   * The mode of the cell.
   */
  cellMode: import_prop_types18.default.oneOf(["edit", "view"]).isRequired,
  changeReason: import_prop_types18.default.oneOf(["debouncedSetEditCellValue", "setEditCellValue"]),
  /**
   * The column of the row that the current cell belongs to.
   */
  colDef: import_prop_types18.default.object.isRequired,
  debounceMs: import_prop_types18.default.number,
  /**
   * The column field of the cell that triggered the event.
   */
  field: import_prop_types18.default.string.isRequired,
  /**
   * The cell value formatted with the column valueFormatter.
   */
  formattedValue: import_prop_types18.default.any,
  /**
   * If true, the cell is the active element.
   */
  hasFocus: import_prop_types18.default.bool.isRequired,
  /**
   * The grid row id.
   */
  id: import_prop_types18.default.oneOfType([import_prop_types18.default.number, import_prop_types18.default.string]).isRequired,
  /**
   * If true, the cell is editable.
   */
  isEditable: import_prop_types18.default.bool,
  isProcessingProps: import_prop_types18.default.bool,
  isValidating: import_prop_types18.default.bool,
  /**
   * Callback called when the value is changed by the user.
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * @param {Date | null} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.
   * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`
   */
  onValueChange: import_prop_types18.default.func,
  /**
   * The row model of the row that the current cell belongs to.
   */
  row: import_prop_types18.default.any.isRequired,
  /**
   * The node of the row that the current cell belongs to.
   */
  rowNode: import_prop_types18.default.object.isRequired,
  slotProps: import_prop_types18.default.object,
  /**
   * the tabIndex value.
   */
  tabIndex: import_prop_types18.default.oneOf([-1, 0]).isRequired,
  /**
   * The cell value.
   * If the column has `valueGetter`, use `params.row` to directly access the fields.
   */
  value: import_prop_types18.default.any
} : void 0;
var renderEditInputCell = (params) => (0, import_jsx_runtime18.jsx)(GridEditInputCell, _extends({}, params));
if (true) renderEditInputCell.displayName = "renderEditInputCell";

// node_modules/@mui/x-data-grid/esm/hooks/features/sorting/gridSortingUtils.js
init_extends();
var sanitizeSortModel = (model, disableMultipleColumnsSorting) => {
  if (disableMultipleColumnsSorting && model.length > 1) {
    if (true) {
      warnOnce(["MUI X: The `sortModel` can only contain a single item when the `disableMultipleColumnsSorting` prop is set to `true`.", "If you are using the community version of the Data Grid, this prop is always `true`."], "error");
    }
    return [model[0]];
  }
  return model;
};
var mergeStateWithSortModel = (sortModel, disableMultipleColumnsSorting) => (state) => _extends({}, state, {
  sorting: _extends({}, state.sorting, {
    sortModel: sanitizeSortModel(sortModel, disableMultipleColumnsSorting)
  })
});
var isDesc = (direction) => direction === "desc";
var parseSortItem = (sortItem, sortValueGetter, apiRef) => {
  const column = apiRef.current.getColumn(sortItem.field);
  if (!column || sortItem.sort === null) {
    return null;
  }
  let comparator;
  if (column.getSortComparator) {
    comparator = column.getSortComparator(sortItem.sort);
  } else {
    comparator = isDesc(sortItem.sort) ? (...args) => -1 * column.sortComparator(...args) : column.sortComparator;
  }
  if (!comparator) {
    return null;
  }
  const getSortCellParams = (id) => ({
    id,
    field: column.field,
    rowNode: gridRowNodeSelector(apiRef, id),
    value: sortValueGetter(id, column.field),
    api: apiRef.current
  });
  return {
    getSortCellParams,
    comparator
  };
};
var compareRows = (parsedSortItems, row1, row2) => {
  return parsedSortItems.reduce((res, item, index) => {
    if (res !== 0) {
      return res;
    }
    const sortCellParams1 = row1.params[index];
    const sortCellParams2 = row2.params[index];
    res = item.comparator(sortCellParams1.value, sortCellParams2.value, sortCellParams1, sortCellParams2);
    return res;
  }, 0);
};
var buildAggregatedSortingApplier = (sortModel, sortValueGetter, apiRef) => {
  const comparatorList = sortModel.map((item) => parseSortItem(item, sortValueGetter, apiRef)).filter((comparator) => !!comparator);
  if (comparatorList.length === 0) {
    return null;
  }
  return (rowList) => rowList.map((node) => ({
    node,
    params: comparatorList.map((el) => el.getSortCellParams(node.id))
  })).sort((a, b) => compareRows(comparatorList, a, b)).map((row) => row.node.id);
};
var getNextGridSortDirection = (sortingOrder, current) => {
  const currentIdx = sortingOrder.indexOf(current);
  if (!current || currentIdx === -1 || currentIdx + 1 === sortingOrder.length) {
    return sortingOrder[0];
  }
  return sortingOrder[currentIdx + 1];
};
var gridNillComparator = (v1, v2) => {
  if (v1 == null && v2 != null) {
    return -1;
  }
  if (v2 == null && v1 != null) {
    return 1;
  }
  if (v1 == null && v2 == null) {
    return 0;
  }
  return null;
};
var collator = new Intl.Collator();
var gridStringOrNumberComparator = (value1, value2) => {
  const nillResult = gridNillComparator(value1, value2);
  if (nillResult !== null) {
    return nillResult;
  }
  if (typeof value1 === "string") {
    return collator.compare(value1.toString(), value2.toString());
  }
  return value1 - value2;
};
var gridNumberComparator = (value1, value2) => {
  const nillResult = gridNillComparator(value1, value2);
  if (nillResult !== null) {
    return nillResult;
  }
  return Number(value1) - Number(value2);
};
var gridDateComparator = (value1, value2) => {
  const nillResult = gridNillComparator(value1, value2);
  if (nillResult !== null) {
    return nillResult;
  }
  if (value1 > value2) {
    return 1;
  }
  if (value1 < value2) {
    return -1;
  }
  return 0;
};

// node_modules/@mui/x-data-grid/esm/components/panel/filterPanel/GridFilterInputValue.js
init_extends();
init_objectWithoutPropertiesLoose();
var React45 = __toESM(require_react(), 1);
var import_prop_types19 = __toESM(require_prop_types(), 1);
var import_jsx_runtime19 = __toESM(require_jsx_runtime(), 1);
var _excluded25 = ["item", "applyValue", "type", "apiRef", "focusElementRef", "tabIndex", "disabled", "isFilterActive", "slotProps", "clearButton", "headerFilterMenu"];
function GridFilterInputValue(props) {
  var _a, _b, _c;
  const {
    item,
    applyValue,
    type,
    apiRef,
    focusElementRef,
    tabIndex,
    disabled,
    slotProps,
    clearButton,
    headerFilterMenu
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded25);
  const textFieldProps = slotProps == null ? void 0 : slotProps.root;
  const filterTimeout = useTimeout();
  const [filterValueState, setFilterValueState] = React45.useState(sanitizeFilterItemValue(item.value));
  const [applying, setIsApplying] = React45.useState(false);
  const id = useId();
  const rootProps = useGridRootProps();
  const onFilterChange = React45.useCallback((event) => {
    const value = sanitizeFilterItemValue(event.target.value);
    setFilterValueState(value);
    setIsApplying(true);
    filterTimeout.start(rootProps.filterDebounceMs, () => {
      const newItem = _extends({}, item, {
        value: type === "number" && !Number.isNaN(Number(value)) ? Number(value) : value,
        fromInput: id
      });
      applyValue(newItem);
      setIsApplying(false);
    });
  }, [filterTimeout, rootProps.filterDebounceMs, item, type, id, applyValue]);
  React45.useEffect(() => {
    const itemPlusTag = item;
    if (itemPlusTag.fromInput !== id || item.value == null) {
      setFilterValueState(sanitizeFilterItemValue(item.value));
    }
  }, [id, item]);
  return (0, import_jsx_runtime19.jsxs)(React45.Fragment, {
    children: [(0, import_jsx_runtime19.jsx)(rootProps.slots.baseTextField, _extends({
      id,
      label: apiRef.current.getLocaleText("filterPanelInputLabel"),
      placeholder: apiRef.current.getLocaleText("filterPanelInputPlaceholder"),
      value: filterValueState ?? "",
      onChange: onFilterChange,
      type: type || "text",
      disabled,
      slotProps: _extends({}, textFieldProps == null ? void 0 : textFieldProps.slotProps, {
        input: _extends({
          endAdornment: applying ? (0, import_jsx_runtime19.jsx)(rootProps.slots.loadIcon, {
            fontSize: "small",
            color: "action"
          }) : null
        }, (_a = textFieldProps == null ? void 0 : textFieldProps.slotProps) == null ? void 0 : _a.input),
        htmlInput: _extends({
          tabIndex
        }, (_b = textFieldProps == null ? void 0 : textFieldProps.slotProps) == null ? void 0 : _b.htmlInput)
      }),
      inputRef: focusElementRef
    }, (_c = rootProps.slotProps) == null ? void 0 : _c.baseTextField, other, textFieldProps)), headerFilterMenu, clearButton]
  });
}
function sanitizeFilterItemValue(value) {
  if (value == null || value === "") {
    return void 0;
  }
  return String(value);
}
true ? GridFilterInputValue.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types19.default.shape({
    current: import_prop_types19.default.object.isRequired
  }).isRequired,
  applyValue: import_prop_types19.default.func.isRequired,
  className: import_prop_types19.default.string,
  clearButton: import_prop_types19.default.node,
  disabled: import_prop_types19.default.bool,
  focusElementRef: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]),
  headerFilterMenu: import_prop_types19.default.node,
  inputRef: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.shape({
    current: (props, propName) => {
      if (props[propName] == null) {
        return null;
      }
      if (typeof props[propName] !== "object" || props[propName].nodeType !== 1) {
        return new Error(`Expected prop '${propName}' to be of type Element`);
      }
      return null;
    }
  })]),
  /**
   * It is `true` if the filter either has a value or an operator with no value
   * required is selected (for example `isEmpty`)
   */
  isFilterActive: import_prop_types19.default.bool,
  item: import_prop_types19.default.shape({
    field: import_prop_types19.default.string.isRequired,
    id: import_prop_types19.default.oneOfType([import_prop_types19.default.number, import_prop_types19.default.string]),
    operator: import_prop_types19.default.string.isRequired,
    value: import_prop_types19.default.any
  }).isRequired,
  onBlur: import_prop_types19.default.func,
  onFocus: import_prop_types19.default.func,
  slotProps: import_prop_types19.default.object,
  tabIndex: import_prop_types19.default.number,
  type: import_prop_types19.default.oneOf(["date", "datetime-local", "number", "text"])
} : void 0;

// node_modules/@mui/x-data-grid/esm/utils/utils.js
function isNumber(value) {
  return typeof value === "number" && !Number.isNaN(value);
}
function isFunction(value) {
  return typeof value === "function";
}
function isObject(value) {
  return typeof value === "object" && value !== null;
}
function localStorageAvailable() {
  try {
    const key = "__some_random_key_you_are_not_going_to_use__";
    window.localStorage.setItem(key, key);
    window.localStorage.removeItem(key);
    return true;
  } catch (err) {
    return false;
  }
}
function escapeRegExp(value) {
  return value.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
}
var clamp = (value, min, max) => Math.max(min, Math.min(max, value));
function mulberry32(a) {
  return () => {
    let t = a += 1831565813;
    t = Math.imul(t ^ t >>> 15, t | 1);
    t ^= t + Math.imul(t ^ t >>> 7, t | 61);
    return ((t ^ t >>> 14) >>> 0) / 4294967296;
  };
}
function createRandomNumberGenerator(seed) {
  const random = mulberry32(seed);
  return (min, max) => min + (max - min) * random();
}
function deepClone2(obj) {
  if (typeof structuredClone === "function") {
    return structuredClone(obj);
  }
  return JSON.parse(JSON.stringify(obj));
}
var runIf = (condition, fn) => (params) => {
  if (condition) {
    fn(params);
  }
};

// node_modules/@mui/x-data-grid/esm/components/panel/filterPanel/GridFilterInputMultipleValue.js
init_extends();
var React46 = __toESM(require_react(), 1);
var import_prop_types20 = __toESM(require_prop_types(), 1);
var import_jsx_runtime20 = __toESM(require_jsx_runtime(), 1);
function GridFilterInputMultipleValue(props) {
  const {
    item,
    applyValue,
    type,
    apiRef,
    focusElementRef,
    slotProps
  } = props;
  const id = useId();
  const [options, setOptions] = React46.useState([]);
  const [filterValueState, setFilterValueState] = React46.useState(item.value || []);
  const rootProps = useGridRootProps();
  React46.useEffect(() => {
    const itemValue = item.value ?? [];
    setFilterValueState(itemValue.map(String));
  }, [item.value]);
  const handleChange = React46.useCallback((event, value) => {
    setFilterValueState(value.map(String));
    applyValue(_extends({}, item, {
      value: [...value.map((filterItemValue) => type === "number" ? Number(filterItemValue) : filterItemValue)]
    }));
  }, [applyValue, item, type]);
  const handleInputChange = React46.useCallback((event, value) => {
    if (value === "") {
      setOptions([]);
    } else {
      setOptions([value]);
    }
  }, [setOptions]);
  const BaseAutocomplete2 = rootProps.slots.baseAutocomplete;
  return (0, import_jsx_runtime20.jsx)(BaseAutocomplete2, _extends({
    multiple: true,
    freeSolo: true,
    options,
    id,
    value: filterValueState,
    onChange: handleChange,
    onInputChange: handleInputChange,
    label: apiRef.current.getLocaleText("filterPanelInputLabel"),
    placeholder: apiRef.current.getLocaleText("filterPanelInputPlaceholder"),
    slotProps: {
      textField: {
        type: type || "text",
        inputRef: focusElementRef
      }
    }
  }, slotProps == null ? void 0 : slotProps.root));
}
true ? GridFilterInputMultipleValue.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types20.default.shape({
    current: import_prop_types20.default.object.isRequired
  }).isRequired,
  applyValue: import_prop_types20.default.func.isRequired,
  className: import_prop_types20.default.string,
  clearButton: import_prop_types20.default.node,
  disabled: import_prop_types20.default.bool,
  focusElementRef: import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object]),
  headerFilterMenu: import_prop_types20.default.node,
  inputRef: import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.shape({
    current: (props, propName) => {
      if (props[propName] == null) {
        return null;
      }
      if (typeof props[propName] !== "object" || props[propName].nodeType !== 1) {
        return new Error(`Expected prop '${propName}' to be of type Element`);
      }
      return null;
    }
  })]),
  /**
   * It is `true` if the filter either has a value or an operator with no value
   * required is selected (for example `isEmpty`)
   */
  isFilterActive: import_prop_types20.default.bool,
  item: import_prop_types20.default.shape({
    field: import_prop_types20.default.string.isRequired,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]),
    operator: import_prop_types20.default.string.isRequired,
    value: import_prop_types20.default.any
  }).isRequired,
  onBlur: import_prop_types20.default.func,
  onFocus: import_prop_types20.default.func,
  slotProps: import_prop_types20.default.object,
  tabIndex: import_prop_types20.default.number,
  type: import_prop_types20.default.oneOf(["date", "datetime-local", "number", "text"])
} : void 0;

// node_modules/@mui/x-data-grid/esm/hooks/features/filter/gridFilterUtils.js
init_extends();

// node_modules/@mui/x-data-grid/esm/models/gridEditRowModel.js
var GridEditModes = function(GridEditModes2) {
  GridEditModes2["Cell"] = "cell";
  GridEditModes2["Row"] = "row";
  return GridEditModes2;
}(GridEditModes || {});
var GridCellModes = function(GridCellModes2) {
  GridCellModes2["Edit"] = "edit";
  GridCellModes2["View"] = "view";
  return GridCellModes2;
}(GridCellModes || {});
var GridRowModes = function(GridRowModes2) {
  GridRowModes2["Edit"] = "edit";
  GridRowModes2["View"] = "view";
  return GridRowModes2;
}(GridRowModes || {});

// node_modules/@mui/x-data-grid/esm/models/gridFilterItem.js
var GridLogicOperator = function(GridLogicOperator2) {
  GridLogicOperator2["And"] = "and";
  GridLogicOperator2["Or"] = "or";
  return GridLogicOperator2;
}(GridLogicOperator || {});

// node_modules/@mui/x-data-grid/esm/models/gridRowSelectionManager.js
var IncludeManager = class {
  constructor(model) {
    this.data = model.ids;
  }
  has(id) {
    return this.data.has(id);
  }
  select(id) {
    this.data.add(id);
  }
  unselect(id) {
    this.data.delete(id);
  }
};
var ExcludeManager = class {
  constructor(model) {
    this.data = model.ids;
  }
  has(id) {
    return !this.data.has(id);
  }
  select(id) {
    this.data.delete(id);
  }
  unselect(id) {
    this.data.add(id);
  }
};
var createRowSelectionManager = (model) => {
  if (model.type === "include") {
    return new IncludeManager(model);
  }
  return new ExcludeManager(model);
};

// node_modules/@mui/x-data-grid/esm/models/params/gridEditCellParams.js
var GridCellEditStartReasons = function(GridCellEditStartReasons2) {
  GridCellEditStartReasons2["enterKeyDown"] = "enterKeyDown";
  GridCellEditStartReasons2["cellDoubleClick"] = "cellDoubleClick";
  GridCellEditStartReasons2["printableKeyDown"] = "printableKeyDown";
  GridCellEditStartReasons2["deleteKeyDown"] = "deleteKeyDown";
  GridCellEditStartReasons2["pasteKeyDown"] = "pasteKeyDown";
  return GridCellEditStartReasons2;
}(GridCellEditStartReasons || {});
var GridCellEditStopReasons = function(GridCellEditStopReasons2) {
  GridCellEditStopReasons2["cellFocusOut"] = "cellFocusOut";
  GridCellEditStopReasons2["escapeKeyDown"] = "escapeKeyDown";
  GridCellEditStopReasons2["enterKeyDown"] = "enterKeyDown";
  GridCellEditStopReasons2["tabKeyDown"] = "tabKeyDown";
  GridCellEditStopReasons2["shiftTabKeyDown"] = "shiftTabKeyDown";
  return GridCellEditStopReasons2;
}(GridCellEditStopReasons || {});

// node_modules/@mui/x-data-grid/esm/models/params/gridRowParams.js
var GridRowEditStartReasons = function(GridRowEditStartReasons2) {
  GridRowEditStartReasons2["enterKeyDown"] = "enterKeyDown";
  GridRowEditStartReasons2["cellDoubleClick"] = "cellDoubleClick";
  GridRowEditStartReasons2["printableKeyDown"] = "printableKeyDown";
  GridRowEditStartReasons2["deleteKeyDown"] = "deleteKeyDown";
  return GridRowEditStartReasons2;
}(GridRowEditStartReasons || {});
var GridRowEditStopReasons = function(GridRowEditStopReasons2) {
  GridRowEditStopReasons2["rowFocusOut"] = "rowFocusOut";
  GridRowEditStopReasons2["escapeKeyDown"] = "escapeKeyDown";
  GridRowEditStopReasons2["enterKeyDown"] = "enterKeyDown";
  GridRowEditStopReasons2["tabKeyDown"] = "tabKeyDown";
  GridRowEditStopReasons2["shiftTabKeyDown"] = "shiftTabKeyDown";
  return GridRowEditStopReasons2;
}(GridRowEditStopReasons || {});

// node_modules/@mui/x-data-grid/esm/models/gridColumnGrouping.js
function isLeaf(node) {
  return node.field !== void 0;
}

// node_modules/@mui/x-data-grid/esm/hooks/features/filter/gridFilterState.js
var defaultGridFilterLookup = {
  filteredRowsLookup: {},
  filteredChildrenCountLookup: {},
  filteredDescendantCountLookup: {}
};
var getDefaultGridFilterModel = () => ({
  items: [],
  logicOperator: GridLogicOperator.And,
  quickFilterValues: [],
  quickFilterLogicOperator: GridLogicOperator.And
});

// node_modules/@mui/x-data-grid/esm/utils/getPublicApiRef.js
function getPublicApiRef(apiRef) {
  return {
    current: apiRef.current.getPublicApi()
  };
}

// node_modules/@mui/x-data-grid/esm/hooks/features/columns/gridColumnsInterfaces.js
var GridPinnedColumnPosition = function(GridPinnedColumnPosition2) {
  GridPinnedColumnPosition2["LEFT"] = "left";
  GridPinnedColumnPosition2["RIGHT"] = "right";
  return GridPinnedColumnPosition2;
}({});
var EMPTY_PINNED_COLUMN_FIELDS = {
  left: [],
  right: []
};

// node_modules/@mui/x-data-grid/esm/hooks/core/gridCoreSelector.js
var gridIsRtlSelector = createRootSelector((state) => state.isRtl);

// node_modules/@mui/x-data-grid/esm/hooks/features/listView/gridListViewSelectors.js
var gridListViewSelector = createRootSelector((state) => state.props.listView ?? false);
var gridListColumnSelector = createRootSelector((state) => state.listViewColumn);

// node_modules/@mui/x-data-grid/esm/hooks/features/columns/gridColumnsSelector.js
var gridColumnsStateSelector = createRootSelector((state) => state.columns);
var gridColumnFieldsSelector = createSelector3(gridColumnsStateSelector, (columnsState) => columnsState.orderedFields);
var gridColumnLookupSelector = createSelector3(gridColumnsStateSelector, (columnsState) => columnsState.lookup);
var gridColumnDefinitionsSelector = createSelectorMemoized2(gridColumnFieldsSelector, gridColumnLookupSelector, (allFields, lookup) => allFields.map((field) => lookup[field]));
var gridColumnVisibilityModelSelector = createSelector3(gridColumnsStateSelector, (columnsState) => columnsState.columnVisibilityModel);
var gridInitialColumnVisibilityModelSelector = createSelector3(gridColumnsStateSelector, (columnsState) => columnsState.initialColumnVisibilityModel);
var gridVisibleColumnDefinitionsSelector = createSelectorMemoized2(gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector, gridListViewSelector, gridListColumnSelector, (columns, columnVisibilityModel, listView, listColumn) => listView && listColumn ? [listColumn] : columns.filter((column) => columnVisibilityModel[column.field] !== false));
var gridVisibleColumnFieldsSelector = createSelectorMemoized2(gridVisibleColumnDefinitionsSelector, (visibleColumns) => visibleColumns.map((column) => column.field));
var gridPinnedColumnsSelector = createRootSelector((state) => state.pinnedColumns);
var gridExistingPinnedColumnSelector = createSelectorMemoized2(gridPinnedColumnsSelector, gridColumnFieldsSelector, gridIsRtlSelector, (model, orderedFields, isRtl) => filterMissingColumns(model, orderedFields, isRtl));
var gridVisiblePinnedColumnDefinitionsSelector = createSelectorMemoized2(gridColumnsStateSelector, gridPinnedColumnsSelector, gridVisibleColumnFieldsSelector, gridIsRtlSelector, gridListViewSelector, (columnsState, model, visibleColumnFields, isRtl, listView) => {
  if (listView) {
    return EMPTY_PINNED_COLUMN_FIELDS;
  }
  const visiblePinnedFields = filterMissingColumns(model, visibleColumnFields, isRtl);
  const visiblePinnedColumns = {
    left: visiblePinnedFields.left.map((field) => columnsState.lookup[field]),
    right: visiblePinnedFields.right.map((field) => columnsState.lookup[field])
  };
  return visiblePinnedColumns;
});
function filterMissingColumns(pinnedColumns, columns, invert) {
  var _a, _b;
  if (!Array.isArray(pinnedColumns.left) && !Array.isArray(pinnedColumns.right)) {
    return EMPTY_PINNED_COLUMN_FIELDS;
  }
  if (((_a = pinnedColumns.left) == null ? void 0 : _a.length) === 0 && ((_b = pinnedColumns.right) == null ? void 0 : _b.length) === 0) {
    return EMPTY_PINNED_COLUMN_FIELDS;
  }
  const filter = (newPinnedColumns, remainingColumns) => {
    if (!Array.isArray(newPinnedColumns)) {
      return [];
    }
    return newPinnedColumns.filter((field) => remainingColumns.includes(field));
  };
  const leftPinnedColumns = filter(pinnedColumns.left, columns);
  const columnsWithoutLeftPinnedColumns = columns.filter(
    // Filter out from the remaining columns those columns already pinned to the left
    (field) => !leftPinnedColumns.includes(field)
  );
  const rightPinnedColumns = filter(pinnedColumns.right, columnsWithoutLeftPinnedColumns);
  if (invert) {
    return {
      left: rightPinnedColumns,
      right: leftPinnedColumns
    };
  }
  return {
    left: leftPinnedColumns,
    right: rightPinnedColumns
  };
}
var gridColumnPositionsSelector = createSelectorMemoized2(gridVisibleColumnDefinitionsSelector, (visibleColumns) => {
  const positions = [];
  let currentPosition = 0;
  for (let i = 0; i < visibleColumns.length; i += 1) {
    positions.push(currentPosition);
    currentPosition += visibleColumns[i].computedWidth;
  }
  return positions;
});
var gridFilterableColumnDefinitionsSelector = createSelectorMemoized2(gridColumnDefinitionsSelector, (columns) => columns.filter((col) => col.filterable));
var gridFilterableColumnLookupSelector = createSelectorMemoized2(gridColumnDefinitionsSelector, (columns) => columns.reduce((acc, col) => {
  if (col.filterable) {
    acc[col.field] = col;
  }
  return acc;
}, {}));
var gridHasColSpanSelector = createSelectorMemoized2(gridColumnDefinitionsSelector, (columns) => columns.some((column) => column.colSpan !== void 0));

// node_modules/@mui/x-data-grid/esm/hooks/features/filter/gridFilterUtils.js
var hasEval;
function getHasEval() {
  if (hasEval !== void 0) {
    return hasEval;
  }
  try {
    hasEval = new Function("return true")();
  } catch (_) {
    hasEval = false;
  }
  return hasEval;
}
var cleanFilterItem = (item, apiRef) => {
  const cleanItem = _extends({}, item);
  if (cleanItem.id == null) {
    cleanItem.id = Math.round(Math.random() * 1e5);
  }
  if (cleanItem.operator == null) {
    const column = gridColumnLookupSelector(apiRef)[cleanItem.field];
    cleanItem.operator = column && column.filterOperators[0].value;
  }
  return cleanItem;
};
var sanitizeFilterModel = (model, disableMultipleColumnsFiltering, apiRef) => {
  const hasSeveralItems = model.items.length > 1;
  let items;
  if (hasSeveralItems && disableMultipleColumnsFiltering) {
    if (true) {
      warnOnce(["MUI X: The `filterModel` can only contain a single item when the `disableMultipleColumnsFiltering` prop is set to `true`.", "If you are using the community version of the Data Grid, this prop is always `true`."], "error");
    }
    items = [model.items[0]];
  } else {
    items = model.items;
  }
  const hasItemsWithoutIds = hasSeveralItems && items.some((item) => item.id == null);
  const hasItemWithoutOperator = items.some((item) => item.operator == null);
  if (true) {
    if (hasItemsWithoutIds) {
      warnOnce("MUI X: The `id` field is required on `filterModel.items` when you use multiple filters.", "error");
    }
  }
  if (true) {
    if (hasItemWithoutOperator) {
      warnOnce("MUI X: The `operator` field is required on `filterModel.items`, one or more of your filtering item has no `operator` provided.", "error");
    }
  }
  if (hasItemWithoutOperator || hasItemsWithoutIds) {
    return _extends({}, model, {
      items: items.map((item) => cleanFilterItem(item, apiRef))
    });
  }
  if (model.items !== items) {
    return _extends({}, model, {
      items
    });
  }
  return model;
};
var mergeStateWithFilterModel = (filterModel, disableMultipleColumnsFiltering, apiRef) => (filteringState) => _extends({}, filteringState, {
  filterModel: sanitizeFilterModel(filterModel, disableMultipleColumnsFiltering, apiRef)
});
var removeDiacritics = (value) => {
  if (typeof value === "string") {
    return value.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
  }
  return value;
};
var getFilterCallbackFromItem = (filterItem, filterValueGetter, apiRef) => {
  var _a;
  if (!filterItem.field || !filterItem.operator) {
    return null;
  }
  const column = apiRef.current.getColumn(filterItem.field);
  if (!column) {
    return null;
  }
  let parsedValue;
  if (column.valueParser) {
    const parser = column.valueParser;
    parsedValue = Array.isArray(filterItem.value) ? (_a = filterItem.value) == null ? void 0 : _a.map((x) => parser(x, void 0, column, apiRef)) : parser(filterItem.value, void 0, column, apiRef);
  } else {
    parsedValue = filterItem.value;
  }
  const {
    ignoreDiacritics
  } = apiRef.current.rootProps;
  if (ignoreDiacritics) {
    parsedValue = removeDiacritics(parsedValue);
  }
  const newFilterItem = _extends({}, filterItem, {
    value: parsedValue
  });
  const filterOperators = column.filterOperators;
  if (!(filterOperators == null ? void 0 : filterOperators.length)) {
    throw new Error(`MUI X: No filter operators found for column '${column.field}'.`);
  }
  const filterOperator = filterOperators.find((operator) => operator.value === newFilterItem.operator);
  if (!filterOperator) {
    throw new Error(`MUI X: No filter operator found for column '${column.field}' and operator value '${newFilterItem.operator}'.`);
  }
  const publicApiRef = getPublicApiRef(apiRef);
  const applyFilterOnRow = filterOperator.getApplyFilterFn(newFilterItem, column);
  if (typeof applyFilterOnRow !== "function") {
    return null;
  }
  return {
    item: newFilterItem,
    fn: (row) => {
      let value = filterValueGetter(row, column);
      if (ignoreDiacritics) {
        value = removeDiacritics(value);
      }
      return applyFilterOnRow(value, row, column, publicApiRef);
    }
  };
};
var filterItemsApplierId = 1;
var buildAggregatedFilterItemsApplier = (filterModel, filterValueGetter, apiRef, disableEval) => {
  const {
    items
  } = filterModel;
  const appliers = items.map((item) => getFilterCallbackFromItem(item, filterValueGetter, apiRef)).filter((callback) => !!callback);
  if (appliers.length === 0) {
    return null;
  }
  if (disableEval || !getHasEval()) {
    return (row, shouldApplyFilter) => {
      const resultPerItemId = {};
      for (let i = 0; i < appliers.length; i += 1) {
        const applier = appliers[i];
        if (!shouldApplyFilter || shouldApplyFilter(applier.item.field)) {
          resultPerItemId[applier.item.id] = applier.fn(row);
        }
      }
      return resultPerItemId;
    };
  }
  const filterItemCore = new Function("appliers", "row", "shouldApplyFilter", `"use strict";
${appliers.map((applier, i) => `const shouldApply${i} = !shouldApplyFilter || shouldApplyFilter(${JSON.stringify(applier.item.field)});`).join("\n")}

const result$$ = {
${appliers.map((applier, i) => `  ${JSON.stringify(String(applier.item.id))}: !shouldApply${i} ? false : appliers[${i}].fn(row),`).join("\n")}
};

return result$$;`.replaceAll("$$", String(filterItemsApplierId)));
  filterItemsApplierId += 1;
  const filterItem = (row, shouldApplyItem) => filterItemCore(appliers, row, shouldApplyItem);
  return filterItem;
};
var shouldQuickFilterExcludeHiddenColumns = (filterModel) => {
  return filterModel.quickFilterExcludeHiddenColumns ?? true;
};
var buildAggregatedQuickFilterApplier = (filterModel, filterValueGetter, apiRef) => {
  var _a;
  const quickFilterValues = ((_a = filterModel.quickFilterValues) == null ? void 0 : _a.filter(Boolean)) ?? [];
  if (quickFilterValues.length === 0) {
    return null;
  }
  const allColumnFields = gridColumnFieldsSelector(apiRef);
  const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);
  let columnFields;
  if (shouldQuickFilterExcludeHiddenColumns(filterModel)) {
    columnFields = allColumnFields.filter((field) => columnVisibilityModel[field] !== false);
  } else {
    columnFields = allColumnFields;
  }
  const appliersPerField = [];
  const {
    ignoreDiacritics
  } = apiRef.current.rootProps;
  const publicApiRef = getPublicApiRef(apiRef);
  columnFields.forEach((field) => {
    const column = apiRef.current.getColumn(field);
    const getApplyQuickFilterFn = column == null ? void 0 : column.getApplyQuickFilterFn;
    if (getApplyQuickFilterFn) {
      appliersPerField.push({
        column,
        appliers: quickFilterValues.map((quickFilterValue) => {
          const value = ignoreDiacritics ? removeDiacritics(quickFilterValue) : quickFilterValue;
          return {
            fn: getApplyQuickFilterFn(value, column, publicApiRef)
          };
        })
      });
    }
  });
  return function isRowMatchingQuickFilter(row, shouldApplyFilter) {
    const result = {};
    outer: for (let v = 0; v < quickFilterValues.length; v += 1) {
      const filterValue = quickFilterValues[v];
      for (let i = 0; i < appliersPerField.length; i += 1) {
        const {
          column,
          appliers
        } = appliersPerField[i];
        const {
          field
        } = column;
        if (shouldApplyFilter && !shouldApplyFilter(field)) {
          continue;
        }
        const applier = appliers[v];
        let value = filterValueGetter(row, column);
        if (applier.fn === null) {
          continue;
        }
        if (ignoreDiacritics) {
          value = removeDiacritics(value);
        }
        const isMatching = applier.fn(value, row, column, publicApiRef);
        if (isMatching) {
          result[filterValue] = true;
          continue outer;
        }
      }
      result[filterValue] = false;
    }
    return result;
  };
};
var buildAggregatedFilterApplier = (filterModel, filterValueGetter, apiRef, disableEval) => {
  const isRowMatchingFilterItems = buildAggregatedFilterItemsApplier(filterModel, filterValueGetter, apiRef, disableEval);
  const isRowMatchingQuickFilter = buildAggregatedQuickFilterApplier(filterModel, filterValueGetter, apiRef);
  return function isRowMatchingFilters(row, shouldApplyFilter, result) {
    result.passingFilterItems = (isRowMatchingFilterItems == null ? void 0 : isRowMatchingFilterItems(row, shouldApplyFilter)) ?? null;
    result.passingQuickFilterValues = (isRowMatchingQuickFilter == null ? void 0 : isRowMatchingQuickFilter(row, shouldApplyFilter)) ?? null;
  };
};
var isNotNull = (result) => result != null;
var filterModelItems = (cache, filterValueGetter, apiRef, items) => {
  if (!cache.cleanedFilterItems) {
    cache.cleanedFilterItems = items.filter((item) => getFilterCallbackFromItem(item, filterValueGetter, apiRef) !== null);
  }
  return cache.cleanedFilterItems;
};
var passFilterLogic = (allFilterItemResults, allQuickFilterResults, filterModel, filterValueGetter, apiRef, cache) => {
  const cleanedFilterItems = filterModelItems(cache, filterValueGetter, apiRef, filterModel.items);
  const cleanedFilterItemResults = allFilterItemResults.filter(isNotNull);
  const cleanedQuickFilterResults = allQuickFilterResults.filter(isNotNull);
  if (cleanedFilterItemResults.length > 0) {
    const filterItemPredicate = (item) => {
      return cleanedFilterItemResults.some((filterItemResult) => filterItemResult[item.id]);
    };
    const logicOperator = filterModel.logicOperator ?? getDefaultGridFilterModel().logicOperator;
    if (logicOperator === GridLogicOperator.And) {
      const passesAllFilters = cleanedFilterItems.every(filterItemPredicate);
      if (!passesAllFilters) {
        return false;
      }
    } else {
      const passesSomeFilters = cleanedFilterItems.some(filterItemPredicate);
      if (!passesSomeFilters) {
        return false;
      }
    }
  }
  if (cleanedQuickFilterResults.length > 0 && filterModel.quickFilterValues != null) {
    const quickFilterValuePredicate = (value) => {
      return cleanedQuickFilterResults.some((quickFilterValueResult) => quickFilterValueResult[value]);
    };
    const quickFilterLogicOperator = filterModel.quickFilterLogicOperator ?? getDefaultGridFilterModel().quickFilterLogicOperator;
    if (quickFilterLogicOperator === GridLogicOperator.And) {
      const passesAllQuickFilterValues = filterModel.quickFilterValues.every(quickFilterValuePredicate);
      if (!passesAllQuickFilterValues) {
        return false;
      }
    } else {
      const passesSomeQuickFilterValues = filterModel.quickFilterValues.some(quickFilterValuePredicate);
      if (!passesSomeQuickFilterValues) {
        return false;
      }
    }
  }
  return true;
};

// node_modules/@mui/x-data-grid/esm/colDef/gridStringOperators.js
var getGridStringQuickFilterFn = (value) => {
  if (!value) {
    return null;
  }
  const filterRegex = new RegExp(escapeRegExp(value), "i");
  return (_, row, column, apiRef) => {
    let columnValue = apiRef.current.getRowFormattedValue(row, column);
    if (apiRef.current.ignoreDiacritics) {
      columnValue = removeDiacritics(columnValue);
    }
    return columnValue != null ? filterRegex.test(columnValue.toString()) : false;
  };
};
var createContainsFilterFn = (disableTrim, negate) => (filterItem) => {
  if (!filterItem.value) {
    return null;
  }
  const trimmedValue = disableTrim ? filterItem.value : filterItem.value.trim();
  const filterRegex = new RegExp(escapeRegExp(trimmedValue), "i");
  return (value) => {
    if (value == null) {
      return negate;
    }
    const matches = filterRegex.test(String(value));
    return negate ? !matches : matches;
  };
};
var createEqualityFilterFn = (disableTrim, negate) => (filterItem) => {
  if (!filterItem.value) {
    return null;
  }
  const trimmedValue = disableTrim ? filterItem.value : filterItem.value.trim();
  const collator4 = new Intl.Collator(void 0, {
    sensitivity: "base",
    usage: "search"
  });
  return (value) => {
    if (value == null) {
      return negate;
    }
    const isEqual = collator4.compare(trimmedValue, value.toString()) === 0;
    return negate ? !isEqual : isEqual;
  };
};
var createEmptyFilterFn = (negate) => () => {
  return (value) => {
    const isEmpty2 = value === "" || value == null;
    return negate ? !isEmpty2 : isEmpty2;
  };
};
var getGridStringOperators = (disableTrim = false) => [{
  value: "contains",
  getApplyFilterFn: createContainsFilterFn(disableTrim, false),
  InputComponent: GridFilterInputValue
}, {
  value: "doesNotContain",
  getApplyFilterFn: createContainsFilterFn(disableTrim, true),
  InputComponent: GridFilterInputValue
}, {
  value: "equals",
  getApplyFilterFn: createEqualityFilterFn(disableTrim, false),
  InputComponent: GridFilterInputValue
}, {
  value: "doesNotEqual",
  getApplyFilterFn: createEqualityFilterFn(disableTrim, true),
  InputComponent: GridFilterInputValue
}, {
  value: "startsWith",
  getApplyFilterFn: (filterItem) => {
    if (!filterItem.value) {
      return null;
    }
    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();
    const filterRegex = new RegExp(`^${escapeRegExp(filterItemValue)}.*$`, "i");
    return (value) => {
      return value != null ? filterRegex.test(value.toString()) : false;
    };
  },
  InputComponent: GridFilterInputValue
}, {
  value: "endsWith",
  getApplyFilterFn: (filterItem) => {
    if (!filterItem.value) {
      return null;
    }
    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();
    const filterRegex = new RegExp(`.*${escapeRegExp(filterItemValue)}$`, "i");
    return (value) => {
      return value != null ? filterRegex.test(value.toString()) : false;
    };
  },
  InputComponent: GridFilterInputValue
}, {
  value: "isEmpty",
  getApplyFilterFn: createEmptyFilterFn(false),
  requiresFilterValue: false
}, {
  value: "isNotEmpty",
  getApplyFilterFn: createEmptyFilterFn(true),
  requiresFilterValue: false
}, {
  value: "isAnyOf",
  getApplyFilterFn: (filterItem) => {
    if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {
      return null;
    }
    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.map((val) => val.trim());
    const collator4 = new Intl.Collator(void 0, {
      sensitivity: "base",
      usage: "search"
    });
    return (value) => value != null ? filterItemValue.some((filterValue) => {
      return collator4.compare(filterValue, value.toString() || "") === 0;
    }) : false;
  },
  InputComponent: GridFilterInputMultipleValue
}];

// node_modules/@mui/x-data-grid/esm/colDef/gridStringColDef.js
var GRID_STRING_COL_DEF = {
  width: 100,
  minWidth: 50,
  maxWidth: Infinity,
  hideable: true,
  sortable: true,
  resizable: true,
  filterable: true,
  groupable: true,
  pinnable: true,
  // @ts-ignore
  aggregable: true,
  chartable: true,
  editable: false,
  sortComparator: gridStringOrNumberComparator,
  type: "string",
  align: "left",
  filterOperators: getGridStringOperators(),
  renderEditCell: renderEditInputCell,
  getApplyQuickFilterFn: getGridStringQuickFilterFn
};

// node_modules/@mui/x-data-grid/esm/components/cell/GridActionsCell.js
init_extends();
init_objectWithoutPropertiesLoose();
var React51 = __toESM(require_react(), 1);
var import_prop_types22 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-data-grid/esm/components/menu/GridMenu.js
init_extends();
init_objectWithoutPropertiesLoose();
var React50 = __toESM(require_react(), 1);
var import_prop_types21 = __toESM(require_prop_types(), 1);
init_clsx();

// node_modules/@mui/x-data-grid/node_modules/@mui/utils/esm/HTMLElementType/HTMLElementType.js
function HTMLElementType(props, propName, componentName, location, propFullName) {
  if (false) {
    return null;
  }
  const propValue = props[propName];
  const safePropName = propFullName || propName;
  if (propValue == null) {
    return null;
  }
  if (propValue && propValue.nodeType !== 1) {
    return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an HTMLElement.`);
  }
  return null;
}

// node_modules/@mui/x-data-grid/esm/utils/keyboardUtils.js
function isPrintableKey(event) {
  return event.key.length === 1 && !event.ctrlKey && !event.metaKey;
}
var isNavigationKey = (key) => key.indexOf("Arrow") === 0 || key.indexOf("Page") === 0 || key === " " || key === "Home" || key === "End";
var isKeyboardEvent = (event) => !!event.key;
var isHideMenuKey = (key) => key === "Tab" || key === "Escape";
function isPasteShortcut(event) {
  return (event.ctrlKey || event.metaKey) && // We can't use event.code === 'KeyV' as event.code assumes a QWERTY keyboard layout,
  // for example, it would be another letter on a Dvorak physical keyboard.
  // We can't use event.key === 'v' as event.key is not stable with key modifiers and keyboard layouts,
  // for example, it would be ה on a Hebrew keyboard layout.
  // https://github.com/w3c/uievents/issues/377 could be a long-term solution
  String.fromCharCode(event.keyCode) === "V" && !event.shiftKey && !event.altKey;
}
function isCopyShortcut(event) {
  return (event.ctrlKey || event.metaKey) && String.fromCharCode(event.keyCode) === "C" && !event.shiftKey && !event.altKey;
}

// node_modules/@mui/x-data-grid/esm/utils/css/context.js
var React49 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/esm/hooks/utils/useGridConfiguration.js
var React48 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/esm/components/GridConfigurationContext.js
var React47 = __toESM(require_react(), 1);
var GridConfigurationContext = React47.createContext(void 0);
if (true) GridConfigurationContext.displayName = "GridConfigurationContext";

// node_modules/@mui/x-data-grid/esm/hooks/utils/useGridConfiguration.js
var useGridConfiguration = () => {
  const configuration2 = React48.useContext(GridConfigurationContext);
  if (configuration2 === void 0) {
    throw new Error(["MUI X: Could not find the Data Grid configuration context.", "It looks like you rendered your component outside of a DataGrid, DataGridPro or DataGridPremium parent component.", "This can also happen if you are bundling multiple versions of the Data Grid."].join("\n"));
  }
  return configuration2;
};

// node_modules/@mui/x-data-grid/esm/utils/css/context.js
var import_jsx_runtime21 = __toESM(require_jsx_runtime(), 1);
var CLASSNAME_PREFIX = "MuiDataGridVariables";
var CSSVariablesContext = React49.createContext({
  className: "unset",
  tag: (0, import_jsx_runtime21.jsx)("style", {
    href: "/unset"
  })
});
if (true) CSSVariablesContext.displayName = "CSSVariablesContext";
function useCSSVariablesClass() {
  return React49.useContext(CSSVariablesContext).className;
}
function useCSSVariablesContext() {
  return React49.useContext(CSSVariablesContext);
}
function GridPortalWrapper({
  children
}) {
  const className = useCSSVariablesClass();
  return (0, import_jsx_runtime21.jsx)("div", {
    className,
    children
  });
}
function GridCSSVariablesContext(props) {
  const config = useGridConfiguration();
  const rootProps = useGridRootProps();
  const description = config.hooks.useCSSVariables();
  const context = React49.useMemo(() => {
    const className = `${CLASSNAME_PREFIX}-${description.id}`;
    const cssString = `.${className}{${variablesToString(description.variables)}}`;
    const tag = (0, import_jsx_runtime21.jsx)("style", {
      href: `/${className}`,
      nonce: rootProps.nonce,
      children: cssString
    });
    return {
      className,
      tag
    };
  }, [rootProps.nonce, description]);
  return (0, import_jsx_runtime21.jsx)(CSSVariablesContext.Provider, {
    value: context,
    children: props.children
  });
}
function variablesToString(variables) {
  let output = "";
  for (const key in variables) {
    if (Object.hasOwn(variables, key) && variables[key] !== void 0) {
      output += `${key}:${variables[key]};`;
    }
  }
  return output;
}

// node_modules/@mui/x-data-grid/esm/components/menu/GridMenu.js
var import_jsx_runtime22 = __toESM(require_jsx_runtime(), 1);
var _excluded26 = ["open", "target", "onClose", "children", "position", "className", "onExited"];
var useUtilityClasses3 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["menu"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var GridMenuRoot = styled_default(NotRendered, {
  name: "MuiDataGrid",
  slot: "Menu"
})({
  zIndex: vars.zIndex.menu,
  [`& .${gridClasses2.menuList}`]: {
    outline: 0
  }
});
function GridMenu(props) {
  var _a;
  const {
    open,
    target,
    onClose,
    children,
    position: position2,
    className,
    onExited
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded26);
  const apiRef = useGridApiContext();
  const rootProps = useGridRootProps();
  const classes2 = useUtilityClasses3(rootProps);
  const variablesClass = useCSSVariablesClass();
  const savedFocusRef = React50.useRef(null);
  useEnhancedEffect_default(() => {
    var _a2, _b;
    if (open) {
      savedFocusRef.current = document.activeElement instanceof HTMLElement ? document.activeElement : null;
    } else {
      (_b = (_a2 = savedFocusRef.current) == null ? void 0 : _a2.focus) == null ? void 0 : _b.call(_a2);
      savedFocusRef.current = null;
    }
  }, [open]);
  React50.useEffect(() => {
    const eventName = open ? "menuOpen" : "menuClose";
    apiRef.current.publishEvent(eventName, {
      target
    });
  }, [apiRef, open, target]);
  const handleClickAway = (event) => {
    if (event.target && (target === event.target || (target == null ? void 0 : target.contains(event.target)))) {
      return;
    }
    onClose(event);
  };
  const handleKeyDown = (event) => {
    if (isHideMenuKey(event.key)) {
      onClose(event);
    }
  };
  return (0, import_jsx_runtime22.jsx)(GridMenuRoot, _extends({
    as: rootProps.slots.basePopper,
    className: clsx_default(classes2.root, className, variablesClass),
    ownerState: rootProps,
    open,
    target,
    transition: true,
    placement: position2,
    onClickAway: handleClickAway,
    onExited,
    clickAwayMouseEvent: "onMouseDown",
    onKeyDown: handleKeyDown
  }, other, (_a = rootProps.slotProps) == null ? void 0 : _a.basePopper, {
    children
  }));
}
true ? GridMenu.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  children: import_prop_types21.default.node,
  className: import_prop_types21.default.string,
  onClose: import_prop_types21.default.func.isRequired,
  onExited: import_prop_types21.default.func,
  open: import_prop_types21.default.bool.isRequired,
  position: import_prop_types21.default.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  target: HTMLElementType
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/cell/GridActionsCell.js
var import_jsx_runtime23 = __toESM(require_jsx_runtime(), 1);
var _excluded27 = ["api", "colDef", "id", "hasFocus", "isEditable", "field", "value", "formattedValue", "row", "rowNode", "cellMode", "tabIndex", "position", "focusElementRef"];
var hasActions = (colDef) => typeof colDef.getActions === "function";
function GridActionsCell(props) {
  var _a;
  const {
    colDef,
    id,
    hasFocus,
    tabIndex,
    position: position2 = "bottom-end",
    focusElementRef
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded27);
  const [focusedButtonIndex, setFocusedButtonIndex] = React51.useState(-1);
  const [open, setOpen] = React51.useState(false);
  const apiRef = useGridApiContext();
  const rootRef = React51.useRef(null);
  const buttonRef = React51.useRef(null);
  const ignoreCallToFocus = React51.useRef(false);
  const touchRippleRefs = React51.useRef({});
  const isRtl = useRtl();
  const menuId = useId();
  const buttonId = useId();
  const rootProps = useGridRootProps();
  if (!hasActions(colDef)) {
    throw new Error("MUI X: Missing the `getActions` property in the `GridColDef`.");
  }
  const options = colDef.getActions(apiRef.current.getRowParams(id));
  const iconButtons = options.filter((option) => !option.props.showInMenu);
  const menuButtons = options.filter((option) => option.props.showInMenu);
  const numberOfButtons = iconButtons.length + (menuButtons.length ? 1 : 0);
  React51.useLayoutEffect(() => {
    if (!hasFocus) {
      Object.entries(touchRippleRefs.current).forEach(([index, ref]) => {
        ref == null ? void 0 : ref.stop({}, () => {
          delete touchRippleRefs.current[index];
        });
      });
    }
  }, [hasFocus]);
  React51.useEffect(() => {
    if (focusedButtonIndex < 0 || !rootRef.current) {
      return;
    }
    if (focusedButtonIndex >= rootRef.current.children.length) {
      return;
    }
    const child = rootRef.current.children[focusedButtonIndex];
    child.focus({
      preventScroll: true
    });
  }, [focusedButtonIndex]);
  React51.useEffect(() => {
    if (!hasFocus) {
      setFocusedButtonIndex(-1);
      ignoreCallToFocus.current = false;
    }
  }, [hasFocus]);
  React51.useImperativeHandle(focusElementRef, () => ({
    focus() {
      if (!ignoreCallToFocus.current) {
        const focusableButtonIndex = options.findIndex((o) => !o.props.disabled);
        setFocusedButtonIndex(focusableButtonIndex);
      }
    }
  }), [options]);
  React51.useEffect(() => {
    if (focusedButtonIndex >= numberOfButtons) {
      setFocusedButtonIndex(numberOfButtons - 1);
    }
  }, [focusedButtonIndex, numberOfButtons]);
  const showMenu = () => {
    setOpen(true);
    setFocusedButtonIndex(numberOfButtons - 1);
    ignoreCallToFocus.current = true;
  };
  const hideMenu = () => {
    setOpen(false);
  };
  const toggleMenu = (event) => {
    event.stopPropagation();
    event.preventDefault();
    if (open) {
      hideMenu();
    } else {
      showMenu();
    }
  };
  const handleTouchRippleRef = (index) => (instance) => {
    touchRippleRefs.current[index] = instance;
  };
  const handleButtonClick = (index, onClick) => (event) => {
    setFocusedButtonIndex(index);
    ignoreCallToFocus.current = true;
    if (onClick) {
      onClick(event);
    }
  };
  const handleRootKeyDown = (event) => {
    if (numberOfButtons <= 1) {
      return;
    }
    const getNewIndex = (index, direction) => {
      var _a2;
      if (index < 0 || index > options.length) {
        return index;
      }
      const rtlMod = isRtl ? -1 : 1;
      const indexMod = (direction === "left" ? -1 : 1) * rtlMod;
      return ((_a2 = options[index + indexMod]) == null ? void 0 : _a2.props.disabled) ? getNewIndex(index + indexMod, direction) : index + indexMod;
    };
    let newIndex = focusedButtonIndex;
    if (event.key === "ArrowRight") {
      newIndex = getNewIndex(focusedButtonIndex, "right");
    } else if (event.key === "ArrowLeft") {
      newIndex = getNewIndex(focusedButtonIndex, "left");
    }
    if (newIndex < 0 || newIndex >= numberOfButtons) {
      return;
    }
    if (newIndex !== focusedButtonIndex) {
      event.preventDefault();
      event.stopPropagation();
      setFocusedButtonIndex(newIndex);
    }
  };
  const attributes = numberOfButtons > 0 ? {
    role: "menu",
    onKeyDown: handleRootKeyDown
  } : void 0;
  return (0, import_jsx_runtime23.jsxs)("div", _extends({
    ref: rootRef,
    tabIndex: -1,
    className: gridClasses2.actionsCell
  }, attributes, other, {
    children: [iconButtons.map((button, index) => React51.cloneElement(button, {
      key: index,
      touchRippleRef: handleTouchRippleRef(index),
      onClick: handleButtonClick(index, button.props.onClick),
      tabIndex: focusedButtonIndex === index ? tabIndex : -1
    })), menuButtons.length > 0 && buttonId && (0, import_jsx_runtime23.jsx)(rootProps.slots.baseIconButton, _extends({
      ref: buttonRef,
      id: buttonId,
      "aria-label": apiRef.current.getLocaleText("actionsCellMore"),
      "aria-haspopup": "menu",
      "aria-expanded": open,
      "aria-controls": open ? menuId : void 0,
      role: "menuitem",
      size: "small",
      onClick: toggleMenu,
      touchRippleRef: handleTouchRippleRef(buttonId),
      tabIndex: focusedButtonIndex === iconButtons.length ? tabIndex : -1
    }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseIconButton, {
      children: (0, import_jsx_runtime23.jsx)(rootProps.slots.moreActionsIcon, {
        fontSize: "small"
      })
    })), menuButtons.length > 0 && (0, import_jsx_runtime23.jsx)(GridMenu, {
      open,
      target: buttonRef.current,
      position: position2,
      onClose: hideMenu,
      children: (0, import_jsx_runtime23.jsx)(rootProps.slots.baseMenuList, {
        id: menuId,
        className: gridClasses2.menuList,
        "aria-labelledby": buttonId,
        autoFocusItem: true,
        children: menuButtons.map((button, index) => React51.cloneElement(button, {
          key: index,
          closeMenu: hideMenu
        }))
      })
    })]
  }));
}
true ? GridActionsCell.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  api: import_prop_types22.default.object,
  /**
   * The mode of the cell.
   */
  cellMode: import_prop_types22.default.oneOf(["edit", "view"]).isRequired,
  /**
   * The column of the row that the current cell belongs to.
   */
  colDef: import_prop_types22.default.object.isRequired,
  /**
   * The column field of the cell that triggered the event.
   */
  field: import_prop_types22.default.string.isRequired,
  /**
   * A ref allowing to set imperative focus.
   * It can be passed to the element that should receive focus.
   * @ignore - do not document.
   */
  focusElementRef: import_prop_types22.default.oneOfType([import_prop_types22.default.func, import_prop_types22.default.shape({
    current: import_prop_types22.default.shape({
      focus: import_prop_types22.default.func.isRequired
    })
  })]),
  /**
   * The cell value formatted with the column valueFormatter.
   */
  formattedValue: import_prop_types22.default.any,
  /**
   * If true, the cell is the active element.
   */
  hasFocus: import_prop_types22.default.bool.isRequired,
  /**
   * The grid row id.
   */
  id: import_prop_types22.default.oneOfType([import_prop_types22.default.number, import_prop_types22.default.string]).isRequired,
  /**
   * If true, the cell is editable.
   */
  isEditable: import_prop_types22.default.bool,
  position: import_prop_types22.default.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  /**
   * The row model of the row that the current cell belongs to.
   */
  row: import_prop_types22.default.any.isRequired,
  /**
   * The node of the row that the current cell belongs to.
   */
  rowNode: import_prop_types22.default.object.isRequired,
  /**
   * the tabIndex value.
   */
  tabIndex: import_prop_types22.default.oneOf([-1, 0]).isRequired,
  /**
   * The cell value.
   * If the column has `valueGetter`, use `params.row` to directly access the fields.
   */
  value: import_prop_types22.default.any
} : void 0;
var renderActionsCell = (params) => (0, import_jsx_runtime23.jsx)(GridActionsCell, _extends({}, params));
if (true) renderActionsCell.displayName = "renderActionsCell";

// node_modules/@mui/x-data-grid/esm/colDef/gridActionsColDef.js
var GRID_ACTIONS_COLUMN_TYPE = "actions";
var GRID_ACTIONS_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
  sortable: false,
  filterable: false,
  // @ts-ignore
  aggregable: false,
  chartable: false,
  width: 100,
  display: "flex",
  align: "center",
  headerAlign: "center",
  headerName: "",
  disableColumnMenu: true,
  disableExport: true,
  renderCell: renderActionsCell,
  getApplyQuickFilterFn: () => null
});

// node_modules/@mui/x-data-grid/esm/colDef/gridBooleanColDef.js
init_extends();

// node_modules/@mui/x-data-grid/esm/components/cell/GridBooleanCell.js
init_extends();
init_objectWithoutPropertiesLoose();
var React52 = __toESM(require_react(), 1);
var import_prop_types23 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-data-grid/esm/internals/constants.js
var GRID_TREE_DATA_GROUPING_FIELD = "__tree_data_group__";
var GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD = "__row_group_by_columns_group__";
var GRID_DETAIL_PANEL_TOGGLE_FIELD = "__detail_panel_toggle__";
var PinnedColumnPosition = function(PinnedColumnPosition2) {
  PinnedColumnPosition2[PinnedColumnPosition2["NONE"] = 0] = "NONE";
  PinnedColumnPosition2[PinnedColumnPosition2["LEFT"] = 1] = "LEFT";
  PinnedColumnPosition2[PinnedColumnPosition2["RIGHT"] = 2] = "RIGHT";
  PinnedColumnPosition2[PinnedColumnPosition2["VIRTUAL"] = 3] = "VIRTUAL";
  return PinnedColumnPosition2;
}({});

// node_modules/@mui/x-data-grid/esm/components/cell/GridBooleanCell.js
var import_jsx_runtime24 = __toESM(require_jsx_runtime(), 1);
var _excluded28 = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "hasFocus", "tabIndex", "hideDescendantCount"];
var useUtilityClasses4 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["booleanCell"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
function GridBooleanCellRaw(props) {
  const {
    value,
    rowNode
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded28);
  const apiRef = useGridApiContext();
  const rootProps = useGridRootProps();
  const ownerState = {
    classes: rootProps.classes
  };
  const classes2 = useUtilityClasses4(ownerState);
  const maxDepth = useGridSelector(apiRef, gridRowMaximumTreeDepthSelector);
  const isServerSideRowGroupingRow = (
    // @ts-expect-error - Access tree data prop
    maxDepth > 0 && rowNode.type === "group" && rootProps.treeData === false
  );
  const Icon = React52.useMemo(() => value ? rootProps.slots.booleanCellTrueIcon : rootProps.slots.booleanCellFalseIcon, [rootProps.slots.booleanCellFalseIcon, rootProps.slots.booleanCellTrueIcon, value]);
  if (isServerSideRowGroupingRow && value === void 0) {
    return null;
  }
  return (0, import_jsx_runtime24.jsx)(Icon, _extends({
    fontSize: "small",
    className: classes2.root,
    titleAccess: apiRef.current.getLocaleText(value ? "booleanCellTrueLabel" : "booleanCellFalseLabel"),
    "data-value": Boolean(value)
  }, other));
}
true ? GridBooleanCellRaw.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * GridApi that let you manipulate the grid.
   */
  api: import_prop_types23.default.object.isRequired,
  /**
   * The mode of the cell.
   */
  cellMode: import_prop_types23.default.oneOf(["edit", "view"]).isRequired,
  /**
   * The column of the row that the current cell belongs to.
   */
  colDef: import_prop_types23.default.object.isRequired,
  /**
   * The column field of the cell that triggered the event.
   */
  field: import_prop_types23.default.string.isRequired,
  /**
   * A ref allowing to set imperative focus.
   * It can be passed to the element that should receive focus.
   * @ignore - do not document.
   */
  focusElementRef: import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.shape({
    current: import_prop_types23.default.shape({
      focus: import_prop_types23.default.func.isRequired
    })
  })]),
  /**
   * The cell value formatted with the column valueFormatter.
   */
  formattedValue: import_prop_types23.default.any,
  /**
   * If true, the cell is the active element.
   */
  hasFocus: import_prop_types23.default.bool.isRequired,
  hideDescendantCount: import_prop_types23.default.bool,
  /**
   * The grid row id.
   */
  id: import_prop_types23.default.oneOfType([import_prop_types23.default.number, import_prop_types23.default.string]).isRequired,
  /**
   * If true, the cell is editable.
   */
  isEditable: import_prop_types23.default.bool,
  /**
   * The row model of the row that the current cell belongs to.
   */
  row: import_prop_types23.default.any.isRequired,
  /**
   * The node of the row that the current cell belongs to.
   */
  rowNode: import_prop_types23.default.object.isRequired,
  /**
   * the tabIndex value.
   */
  tabIndex: import_prop_types23.default.oneOf([-1, 0]).isRequired,
  /**
   * The cell value.
   * If the column has `valueGetter`, use `params.row` to directly access the fields.
   */
  value: import_prop_types23.default.any
} : void 0;
var GridBooleanCell = React52.memo(GridBooleanCellRaw);
if (true) GridBooleanCell.displayName = "GridBooleanCell";
var renderBooleanCell = (params) => {
  if (params.field !== GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD && isAutogeneratedRowNode(params.rowNode)) {
    return "";
  }
  return (0, import_jsx_runtime24.jsx)(GridBooleanCell, _extends({}, params));
};
if (true) renderBooleanCell.displayName = "renderBooleanCell";

// node_modules/@mui/x-data-grid/esm/components/cell/GridEditBooleanCell.js
init_extends();
init_objectWithoutPropertiesLoose();
var React53 = __toESM(require_react(), 1);
var import_prop_types24 = __toESM(require_prop_types(), 1);
init_clsx();
var import_jsx_runtime25 = __toESM(require_jsx_runtime(), 1);
var _excluded29 = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "tabIndex", "className", "hasFocus", "isValidating", "isProcessingProps", "error", "onValueChange"];
var useUtilityClasses5 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["editBooleanCell"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
function GridEditBooleanCell(props) {
  var _a;
  const {
    id: idProp,
    value,
    field,
    className,
    hasFocus,
    onValueChange
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded29);
  const apiRef = useGridApiContext();
  const inputRef = React53.useRef(null);
  const id = useId();
  const [valueState, setValueState] = React53.useState(value);
  const rootProps = useGridRootProps();
  const ownerState = {
    classes: rootProps.classes
  };
  const classes2 = useUtilityClasses5(ownerState);
  const handleChange = React53.useCallback(async (event) => {
    const newValue = event.target.checked;
    if (onValueChange) {
      await onValueChange(event, newValue);
    }
    setValueState(newValue);
    await apiRef.current.setEditCellValue({
      id: idProp,
      field,
      value: newValue
    }, event);
  }, [apiRef, field, idProp, onValueChange]);
  React53.useEffect(() => {
    setValueState(value);
  }, [value]);
  useEnhancedEffect_default(() => {
    if (hasFocus) {
      inputRef.current.focus();
    }
  }, [hasFocus]);
  return (0, import_jsx_runtime25.jsx)("label", _extends({
    htmlFor: id,
    className: clsx_default(classes2.root, className)
  }, other, {
    children: (0, import_jsx_runtime25.jsx)(rootProps.slots.baseCheckbox, _extends({
      id,
      inputRef,
      checked: Boolean(valueState),
      onChange: handleChange,
      size: "small"
    }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseCheckbox))
  }));
}
true ? GridEditBooleanCell.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * GridApi that let you manipulate the grid.
   */
  api: import_prop_types24.default.object.isRequired,
  /**
   * The mode of the cell.
   */
  cellMode: import_prop_types24.default.oneOf(["edit", "view"]).isRequired,
  changeReason: import_prop_types24.default.oneOf(["debouncedSetEditCellValue", "setEditCellValue"]),
  /**
   * The column of the row that the current cell belongs to.
   */
  colDef: import_prop_types24.default.object.isRequired,
  /**
   * The column field of the cell that triggered the event.
   */
  field: import_prop_types24.default.string.isRequired,
  /**
   * The cell value formatted with the column valueFormatter.
   */
  formattedValue: import_prop_types24.default.any,
  /**
   * If true, the cell is the active element.
   */
  hasFocus: import_prop_types24.default.bool.isRequired,
  /**
   * The grid row id.
   */
  id: import_prop_types24.default.oneOfType([import_prop_types24.default.number, import_prop_types24.default.string]).isRequired,
  /**
   * If true, the cell is editable.
   */
  isEditable: import_prop_types24.default.bool,
  isProcessingProps: import_prop_types24.default.bool,
  isValidating: import_prop_types24.default.bool,
  /**
   * Callback called when the value is changed by the user.
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * @param {boolean} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.
   * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`
   */
  onValueChange: import_prop_types24.default.func,
  /**
   * The row model of the row that the current cell belongs to.
   */
  row: import_prop_types24.default.any.isRequired,
  /**
   * The node of the row that the current cell belongs to.
   */
  rowNode: import_prop_types24.default.object.isRequired,
  /**
   * the tabIndex value.
   */
  tabIndex: import_prop_types24.default.oneOf([-1, 0]).isRequired,
  /**
   * The cell value.
   * If the column has `valueGetter`, use `params.row` to directly access the fields.
   */
  value: import_prop_types24.default.any
} : void 0;
var renderEditBooleanCell = (params) => (0, import_jsx_runtime25.jsx)(GridEditBooleanCell, _extends({}, params));
if (true) renderEditBooleanCell.displayName = "renderEditBooleanCell";

// node_modules/@mui/x-data-grid/esm/components/panel/filterPanel/GridFilterInputBoolean.js
init_extends();
init_objectWithoutPropertiesLoose();
var React54 = __toESM(require_react(), 1);
var import_prop_types26 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-data-grid/node_modules/@mui/utils/esm/refType/refType.js
var import_prop_types25 = __toESM(require_prop_types(), 1);
var refType = import_prop_types25.default.oneOfType([import_prop_types25.default.func, import_prop_types25.default.object]);
var refType_default = refType;

// node_modules/@mui/x-data-grid/esm/components/panel/filterPanel/GridFilterInputBoolean.js
var import_jsx_runtime26 = __toESM(require_jsx_runtime(), 1);
var _excluded30 = ["item", "applyValue", "apiRef", "focusElementRef", "isFilterActive", "headerFilterMenu", "clearButton", "tabIndex", "slotProps"];
function GridFilterInputBoolean(props) {
  var _a, _b;
  const {
    item,
    applyValue,
    apiRef,
    focusElementRef,
    headerFilterMenu,
    clearButton,
    tabIndex,
    slotProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded30);
  const [filterValueState, setFilterValueState] = React54.useState(sanitizeFilterItemValue2(item.value));
  const rootProps = useGridRootProps();
  const labelId = useId();
  const selectId = useId();
  const baseSelectProps = ((_a = rootProps.slotProps) == null ? void 0 : _a.baseSelect) || {};
  const isSelectNative = baseSelectProps.native ?? false;
  const baseSelectOptionProps = ((_b = rootProps.slotProps) == null ? void 0 : _b.baseSelectOption) || {};
  const onFilterChange = React54.useCallback((event) => {
    const value = sanitizeFilterItemValue2(event.target.value);
    setFilterValueState(value);
    applyValue(_extends({}, item, {
      value
    }));
  }, [applyValue, item]);
  React54.useEffect(() => {
    setFilterValueState(sanitizeFilterItemValue2(item.value));
  }, [item.value]);
  const label = (slotProps == null ? void 0 : slotProps.root.label) ?? apiRef.current.getLocaleText("filterPanelInputLabel");
  const rootSlotProps = slotProps == null ? void 0 : slotProps.root.slotProps;
  return (0, import_jsx_runtime26.jsxs)(React54.Fragment, {
    children: [(0, import_jsx_runtime26.jsxs)(rootProps.slots.baseSelect, _extends({
      fullWidth: true,
      labelId,
      id: selectId,
      label,
      value: filterValueState === void 0 ? "" : String(filterValueState),
      onChange: onFilterChange,
      native: isSelectNative,
      slotProps: {
        htmlInput: _extends({
          ref: focusElementRef,
          tabIndex
        }, rootSlotProps == null ? void 0 : rootSlotProps.htmlInput)
      }
    }, baseSelectProps, other, slotProps == null ? void 0 : slotProps.root, {
      children: [(0, import_jsx_runtime26.jsx)(rootProps.slots.baseSelectOption, _extends({}, baseSelectOptionProps, {
        native: isSelectNative,
        value: "",
        children: apiRef.current.getLocaleText("filterValueAny")
      })), (0, import_jsx_runtime26.jsx)(rootProps.slots.baseSelectOption, _extends({}, baseSelectOptionProps, {
        native: isSelectNative,
        value: "true",
        children: apiRef.current.getLocaleText("filterValueTrue")
      })), (0, import_jsx_runtime26.jsx)(rootProps.slots.baseSelectOption, _extends({}, baseSelectOptionProps, {
        native: isSelectNative,
        value: "false",
        children: apiRef.current.getLocaleText("filterValueFalse")
      }))]
    })), headerFilterMenu, clearButton]
  });
}
function sanitizeFilterItemValue2(value) {
  if (String(value).toLowerCase() === "true") {
    return true;
  }
  if (String(value).toLowerCase() === "false") {
    return false;
  }
  return void 0;
}
true ? GridFilterInputBoolean.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types26.default.shape({
    current: import_prop_types26.default.object.isRequired
  }).isRequired,
  applyValue: import_prop_types26.default.func.isRequired,
  className: import_prop_types26.default.string,
  clearButton: import_prop_types26.default.node,
  disabled: import_prop_types26.default.bool,
  focusElementRef: refType_default,
  headerFilterMenu: import_prop_types26.default.node,
  inputRef: import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.shape({
    current: (props, propName) => {
      if (props[propName] == null) {
        return null;
      }
      if (typeof props[propName] !== "object" || props[propName].nodeType !== 1) {
        return new Error(`Expected prop '${propName}' to be of type Element`);
      }
      return null;
    }
  })]),
  /**
   * It is `true` if the filter either has a value or an operator with no value
   * required is selected (for example `isEmpty`)
   */
  isFilterActive: import_prop_types26.default.bool,
  item: import_prop_types26.default.shape({
    field: import_prop_types26.default.string.isRequired,
    id: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string]),
    operator: import_prop_types26.default.string.isRequired,
    value: import_prop_types26.default.any
  }).isRequired,
  onBlur: import_prop_types26.default.func,
  onFocus: import_prop_types26.default.func,
  slotProps: import_prop_types26.default.object,
  tabIndex: import_prop_types26.default.number
} : void 0;

// node_modules/@mui/x-data-grid/esm/colDef/gridBooleanOperators.js
var getGridBooleanOperators = () => [{
  value: "is",
  getApplyFilterFn: (filterItem) => {
    const sanitizedValue = sanitizeFilterItemValue2(filterItem.value);
    if (sanitizedValue === void 0) {
      return null;
    }
    return (value) => Boolean(value) === sanitizedValue;
  },
  InputComponent: GridFilterInputBoolean
}];

// node_modules/@mui/x-data-grid/esm/colDef/gridBooleanColDef.js
var gridBooleanFormatter = (value, row, column, apiRef) => {
  return value ? apiRef.current.getLocaleText("booleanCellTrueLabel") : apiRef.current.getLocaleText("booleanCellFalseLabel");
};
var stringToBoolean = (value) => {
  switch (value.toLowerCase().trim()) {
    case "true":
    case "yes":
    case "1":
      return true;
    case "false":
    case "no":
    case "0":
    case "null":
    case "undefined":
      return false;
    default:
      return void 0;
  }
};
var GRID_BOOLEAN_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
  type: "boolean",
  display: "flex",
  align: "center",
  headerAlign: "center",
  renderCell: renderBooleanCell,
  renderEditCell: renderEditBooleanCell,
  sortComparator: gridNumberComparator,
  valueFormatter: gridBooleanFormatter,
  filterOperators: getGridBooleanOperators(),
  getApplyQuickFilterFn: () => null,
  // @ts-ignore
  aggregable: false,
  chartable: false,
  // @ts-ignore
  pastedValueParser: (value) => stringToBoolean(value)
});

// node_modules/@mui/x-data-grid/esm/colDef/gridCheckboxSelectionColDef.js
init_extends();
var React57 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/esm/components/columnSelection/GridCellCheckboxRenderer.js
init_extends();
init_objectWithoutPropertiesLoose();
var React55 = __toESM(require_react(), 1);
var import_prop_types27 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-data-grid/node_modules/@mui/x-internals/esm/isObjectEmpty/isObjectEmpty.js
function isObjectEmpty3(object) {
  for (const _ in object) {
    return false;
  }
  return true;
}

// node_modules/@mui/x-data-grid/esm/hooks/features/sorting/gridSortingSelector.js
var gridSortingStateSelector = createRootSelector((state) => state.sorting);
var gridSortedRowIdsSelector = createSelector3(gridSortingStateSelector, (sortingState) => sortingState.sortedRows);
var gridSortedRowEntriesSelector = createSelectorMemoized2(gridSortedRowIdsSelector, gridRowsLookupSelector, gridRowTreeSelector, (sortedIds, idRowsLookup, rowTree) => sortedIds.reduce((acc, id) => {
  const model = idRowsLookup[id];
  if (model) {
    acc.push({
      id,
      model
    });
  } else {
    const rowNode = rowTree[id];
    if (rowNode && isAutogeneratedRowNode(rowNode)) {
      acc.push({
        id,
        model: {
          [GRID_ID_AUTOGENERATED]: id
        }
      });
    }
  }
  return acc;
}, []));
var gridSortModelSelector = createSelector3(gridSortingStateSelector, (sorting) => sorting.sortModel);
var gridSortColumnLookupSelector = createSelectorMemoized2(gridSortModelSelector, (sortModel) => {
  const result = sortModel.reduce((res, sortItem, index) => {
    res[sortItem.field] = {
      sortDirection: sortItem.sort,
      sortIndex: sortModel.length > 1 ? index + 1 : void 0
    };
    return res;
  }, {});
  return result;
});
var gridSortedRowIndexLookupSelector = createSelectorMemoized2(gridSortedRowIdsSelector, (sortedIds) => {
  return sortedIds.reduce((acc, id, index) => {
    acc[id] = index;
    return acc;
  }, /* @__PURE__ */ Object.create(null));
});

// node_modules/@mui/x-data-grid/esm/hooks/features/filter/gridFilterSelector.js
var gridFilterStateSelector = createRootSelector((state) => state.filter);
var gridFilterModelSelector = createSelector3(gridFilterStateSelector, (filterState) => filterState.filterModel);
var gridQuickFilterValuesSelector = createSelector3(gridFilterModelSelector, (filterModel) => filterModel.quickFilterValues);
var gridVisibleRowsLookupSelector = createRootSelector((state) => state.visibleRowsLookup);
var gridFilteredRowsLookupSelector = createSelector3(gridFilterStateSelector, (filterState) => filterState.filteredRowsLookup);
var gridFilteredChildrenCountLookupSelector = createSelector3(gridFilterStateSelector, (filterState) => filterState.filteredChildrenCountLookup);
var gridFilteredDescendantCountLookupSelector = createSelector3(gridFilterStateSelector, (filterState) => filterState.filteredDescendantCountLookup);
var gridExpandedSortedRowEntriesSelector = createSelectorMemoized2(gridVisibleRowsLookupSelector, gridSortedRowEntriesSelector, (visibleRowsLookup, sortedRows) => {
  if (isObjectEmpty3(visibleRowsLookup)) {
    return sortedRows;
  }
  return sortedRows.filter((row) => visibleRowsLookup[row.id] !== false);
});
var gridExpandedSortedRowIdsSelector = createSelectorMemoized2(gridExpandedSortedRowEntriesSelector, (visibleSortedRowEntries) => visibleSortedRowEntries.map((row) => row.id));
var gridFilteredSortedRowEntriesSelector = createSelectorMemoized2(gridFilteredRowsLookupSelector, gridSortedRowEntriesSelector, (filteredRowsLookup, sortedRows) => isObjectEmpty3(filteredRowsLookup) ? sortedRows : sortedRows.filter((row) => filteredRowsLookup[row.id] !== false));
var gridFilteredSortedRowIdsSelector = createSelectorMemoized2(gridFilteredSortedRowEntriesSelector, (filteredSortedRowEntries) => filteredSortedRowEntries.map((row) => row.id));
var gridExpandedSortedRowTreeLevelPositionLookupSelector = createSelectorMemoized2(gridExpandedSortedRowIdsSelector, gridRowTreeSelector, (visibleSortedRowIds, rowTree) => {
  const depthPositionCounter = {};
  let lastDepth = 0;
  return visibleSortedRowIds.reduce((acc, rowId) => {
    const rowNode = rowTree[rowId];
    if (!depthPositionCounter[rowNode.depth]) {
      depthPositionCounter[rowNode.depth] = 0;
    }
    if (rowNode.depth > lastDepth) {
      depthPositionCounter[rowNode.depth] = 0;
    }
    lastDepth = rowNode.depth;
    depthPositionCounter[rowNode.depth] += 1;
    acc[rowId] = depthPositionCounter[rowNode.depth];
    return acc;
  }, {});
});
var gridFilteredSortedDepthRowEntriesSelector = createSelectorMemoized2(gridFilteredSortedRowEntriesSelector, gridRowTreeSelector, gridRowMaximumTreeDepthSelector, (sortedRows, rowTree, rowTreeDepth) => {
  if (rowTreeDepth < 2) {
    return [sortedRows];
  }
  return sortedRows.reduce((acc, row) => {
    var _a;
    const depth = (_a = rowTree[row.id]) == null ? void 0 : _a.depth;
    if (depth === void 0) {
      return acc;
    }
    if (!acc[depth]) {
      acc[depth] = [];
    }
    acc[depth].push(row);
    return acc;
  }, [[]]);
});
var gridFilteredSortedTopLevelRowEntriesSelector = createSelector3(gridFilteredSortedDepthRowEntriesSelector, (filteredSortedDepthRows) => filteredSortedDepthRows[0] ?? []);
var gridExpandedRowCountSelector = createSelector3(gridExpandedSortedRowEntriesSelector, (visibleSortedRows) => visibleSortedRows.length);
var gridFilteredTopLevelRowCountSelector = createSelector3(gridFilteredSortedTopLevelRowEntriesSelector, (visibleSortedTopLevelRows) => visibleSortedTopLevelRows.length);
var gridFilteredRowCountSelector = createSelector3(gridFilteredSortedRowEntriesSelector, (filteredSortedRowEntries) => filteredSortedRowEntries.length);
var gridFilteredDescendantRowCountSelector = createSelector3(gridFilteredRowCountSelector, gridFilteredTopLevelRowCountSelector, (totalRowCount, topLevelRowCount) => totalRowCount - topLevelRowCount);
var gridFilterActiveItemsSelector = createSelectorMemoized2(gridFilterModelSelector, gridColumnLookupSelector, (filterModel, columnLookup) => {
  var _a;
  return (_a = filterModel.items) == null ? void 0 : _a.filter((item) => {
    var _a2, _b;
    if (!item.field) {
      return false;
    }
    const column = columnLookup[item.field];
    if (!(column == null ? void 0 : column.filterOperators) || ((_a2 = column == null ? void 0 : column.filterOperators) == null ? void 0 : _a2.length) === 0) {
      return false;
    }
    const filterOperator = column.filterOperators.find((operator) => operator.value === item.operator);
    if (!filterOperator) {
      return false;
    }
    return !filterOperator.InputComponent || item.value != null && ((_b = item.value) == null ? void 0 : _b.toString()) !== "";
  });
});
var gridFilterActiveItemsLookupSelector = createSelectorMemoized2(gridFilterActiveItemsSelector, (activeFilters) => {
  const result = activeFilters.reduce((res, filterItem) => {
    if (!res[filterItem.field]) {
      res[filterItem.field] = [filterItem];
    } else {
      res[filterItem.field].push(filterItem);
    }
    return res;
  }, {});
  return result;
});
var gridExpandedSortedRowIndexLookupSelector = createSelectorMemoized2(gridExpandedSortedRowIdsSelector, (expandedSortedIds) => {
  return expandedSortedIds.reduce((acc, id, index) => {
    acc[id] = index;
    return acc;
  }, /* @__PURE__ */ Object.create(null));
});

// node_modules/@mui/x-data-grid/esm/hooks/features/rowSelection/gridRowSelectionSelector.js
var gridRowSelectionStateSelector = createRootSelector((state) => state.rowSelection);
var gridRowSelectionManagerSelector = createSelectorMemoized2(gridRowSelectionStateSelector, createRowSelectionManager);
var gridRowSelectionCountSelector = createSelector3(gridRowSelectionStateSelector, gridFilteredRowCountSelector, (selection, filteredRowCount) => {
  if (selection.type === "include") {
    return selection.ids.size;
  }
  return filteredRowCount - selection.ids.size;
});
var gridRowSelectionIdsSelector = createSelectorMemoized2(gridRowSelectionStateSelector, gridRowsLookupSelector, gridDataRowIdsSelector, (selectionModel, rowsLookup, rowIds) => {
  const map = /* @__PURE__ */ new Map();
  if (selectionModel.type === "include") {
    for (const id of selectionModel.ids) {
      map.set(id, rowsLookup[id]);
    }
  } else {
    for (let i = 0; i < rowIds.length; i += 1) {
      const id = rowIds[i];
      if (!selectionModel.ids.has(id)) {
        map.set(id, rowsLookup[id]);
      }
    }
  }
  return map;
});

// node_modules/@mui/x-data-grid/esm/hooks/features/rowSelection/utils.js
function getGridRowGroupSelectableDescendants(apiRef, groupId) {
  var _a;
  const rowTree = gridRowTreeSelector(apiRef);
  const sortedRowIds = gridSortedRowIdsSelector(apiRef);
  const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);
  const groupNode = rowTree[groupId];
  if (!groupNode || groupNode.type !== "group") {
    return [];
  }
  const descendants = [];
  const startIndex = sortedRowIds.findIndex((id) => id === groupId) + 1;
  for (let index = startIndex; index < sortedRowIds.length && ((_a = rowTree[sortedRowIds[index]]) == null ? void 0 : _a.depth) > groupNode.depth; index += 1) {
    const id = sortedRowIds[index];
    if (filteredRowsLookup[id] !== false && apiRef.current.isRowSelectable(id)) {
      descendants.push(id);
    }
  }
  return descendants;
}
var checkboxPropsSelector = createSelector3(gridRowTreeSelector, gridFilteredRowsLookupSelector, gridRowSelectionManagerSelector, (rowTree, filteredRowsLookup, rowSelectionManager, {
  groupId,
  autoSelectParents
}) => {
  const groupNode = rowTree[groupId];
  if (!groupNode || groupNode.type !== "group" || rowSelectionManager.has(groupId)) {
    return {
      isIndeterminate: false,
      isChecked: rowSelectionManager.has(groupId)
    };
  }
  let hasSelectedDescendant = false;
  let hasUnSelectedDescendant = false;
  const traverseDescendants = (itemToTraverseId) => {
    if (filteredRowsLookup[itemToTraverseId] === false || // Perf: Skip checking the rest of the descendants if we already
    // know that there is a selected and an unselected descendant
    hasSelectedDescendant && hasUnSelectedDescendant) {
      return;
    }
    const node = rowTree[itemToTraverseId];
    if ((node == null ? void 0 : node.type) === "group") {
      node.children.forEach(traverseDescendants);
    }
    if (rowSelectionManager.has(itemToTraverseId)) {
      hasSelectedDescendant = true;
    } else {
      hasUnSelectedDescendant = true;
    }
  };
  traverseDescendants(groupId);
  return {
    isIndeterminate: hasSelectedDescendant && hasUnSelectedDescendant,
    isChecked: autoSelectParents ? hasSelectedDescendant && !hasUnSelectedDescendant : false
  };
});
function isMultipleRowSelectionEnabled(props) {
  if (props.signature === GridSignature.DataGrid) {
    return props.checkboxSelection && props.disableMultipleRowSelection !== true;
  }
  return !props.disableMultipleRowSelection;
}
var getRowNodeParents = (tree, id) => {
  const parents = [];
  let parent = id;
  while (parent != null && parent !== GRID_ROOT_GROUP_ID) {
    const node = tree[parent];
    if (!node) {
      return parents;
    }
    parents.push(parent);
    parent = node.parent;
  }
  return parents;
};
var getFilteredRowNodeSiblings = (tree, filteredRows, id) => {
  const node = tree[id];
  if (!node) {
    return [];
  }
  const parent = node.parent;
  if (parent == null) {
    return [];
  }
  const parentNode = tree[parent];
  return parentNode.children.filter((childId) => childId !== id && filteredRows[childId] !== false);
};
var findRowsToSelect = (apiRef, tree, selectedRow, autoSelectDescendants, autoSelectParents, addRow, rowSelectionManager = gridRowSelectionManagerSelector(apiRef)) => {
  const filteredRows = gridFilteredRowsLookupSelector(apiRef);
  const selectedDescendants = /* @__PURE__ */ new Set([]);
  if (!autoSelectDescendants && !autoSelectParents || filteredRows[selectedRow] === false) {
    return;
  }
  if (autoSelectDescendants) {
    const rowNode = tree[selectedRow];
    if ((rowNode == null ? void 0 : rowNode.type) === "group") {
      const descendants = getGridRowGroupSelectableDescendants(apiRef, selectedRow);
      descendants.forEach((rowId) => {
        addRow(rowId);
        selectedDescendants.add(rowId);
      });
    }
  }
  if (autoSelectParents) {
    const checkAllDescendantsSelected = (rowId) => {
      if (!rowSelectionManager.has(rowId) && !selectedDescendants.has(rowId)) {
        return false;
      }
      const node = tree[rowId];
      if (!node) {
        return false;
      }
      if (node.type !== "group") {
        return true;
      }
      return node.children.every(checkAllDescendantsSelected);
    };
    const traverseParents = (rowId) => {
      const siblings = getFilteredRowNodeSiblings(tree, filteredRows, rowId);
      if (siblings.length === 0 || siblings.every(checkAllDescendantsSelected)) {
        const rowNode2 = tree[rowId];
        const parent = rowNode2 == null ? void 0 : rowNode2.parent;
        if (parent != null && parent !== GRID_ROOT_GROUP_ID && apiRef.current.isRowSelectable(parent)) {
          addRow(parent);
          selectedDescendants.add(parent);
          traverseParents(parent);
        }
      }
    };
    const rowNode = tree[selectedRow];
    if (!rowNode || rowNode.parent === GRID_ROOT_GROUP_ID) {
      return;
    }
    traverseParents(selectedRow);
  }
};
var findRowsToDeselect = (apiRef, tree, deselectedRow, autoSelectDescendants, autoSelectParents, removeRow) => {
  const rowSelectionManager = gridRowSelectionManagerSelector(apiRef);
  if (!autoSelectParents && !autoSelectDescendants) {
    return;
  }
  if (autoSelectParents) {
    const allParents = getRowNodeParents(tree, deselectedRow);
    allParents.forEach((parent) => {
      const isSelected = rowSelectionManager.has(parent);
      if (isSelected) {
        removeRow(parent);
      }
    });
  }
  if (autoSelectDescendants) {
    const rowNode = tree[deselectedRow];
    if ((rowNode == null ? void 0 : rowNode.type) === "group") {
      const descendants = getGridRowGroupSelectableDescendants(apiRef, deselectedRow);
      descendants.forEach((descendant) => {
        removeRow(descendant);
      });
    }
  }
};

// node_modules/@mui/x-data-grid/esm/components/columnSelection/GridCellCheckboxRenderer.js
var import_jsx_runtime27 = __toESM(require_jsx_runtime(), 1);
var _excluded31 = ["field", "id", "formattedValue", "row", "rowNode", "colDef", "isEditable", "cellMode", "hasFocus", "tabIndex", "api"];
var useUtilityClasses6 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["checkboxInput"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var GridCellCheckboxForwardRef = forwardRef2(function GridCellCheckboxRenderer(props, ref) {
  var _a, _b;
  const {
    field,
    id,
    rowNode,
    tabIndex
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded31);
  const apiRef = useGridApiContext();
  const rootProps = useGridRootProps();
  const ownerState = {
    classes: rootProps.classes
  };
  const classes2 = useUtilityClasses6(ownerState);
  const handleChange = (event) => {
    const params = {
      value: event.target.checked,
      id
    };
    apiRef.current.publishEvent("rowSelectionCheckboxChange", params, event);
  };
  React55.useLayoutEffect(() => {
    if (tabIndex === 0) {
      const element = apiRef.current.getCellElement(id, field);
      if (element) {
        element.tabIndex = -1;
      }
    }
  }, [apiRef, tabIndex, id, field]);
  const handleKeyDown = React55.useCallback((event) => {
    if (event.key === " ") {
      event.stopPropagation();
    }
  }, []);
  const isSelectable = apiRef.current.isRowSelectable(id);
  const {
    isIndeterminate,
    isChecked
  } = useGridSelector(apiRef, checkboxPropsSelector, {
    groupId: id,
    autoSelectParents: ((_a = rootProps.rowSelectionPropagation) == null ? void 0 : _a.parents) ?? false
  });
  if (rowNode.type === "footer" || rowNode.type === "pinnedRow") {
    return null;
  }
  const label = apiRef.current.getLocaleText(isChecked && !isIndeterminate ? "checkboxSelectionUnselectRow" : "checkboxSelectionSelectRow");
  return (0, import_jsx_runtime27.jsx)(rootProps.slots.baseCheckbox, _extends({
    tabIndex,
    checked: isChecked && !isIndeterminate,
    onChange: handleChange,
    className: classes2.root,
    slotProps: {
      htmlInput: {
        "aria-label": label,
        name: "select_row"
      }
    },
    onKeyDown: handleKeyDown,
    indeterminate: isIndeterminate,
    disabled: !isSelectable
  }, (_b = rootProps.slotProps) == null ? void 0 : _b.baseCheckbox, other, {
    ref
  }));
});
if (true) GridCellCheckboxForwardRef.displayName = "GridCellCheckboxForwardRef";
true ? GridCellCheckboxForwardRef.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * GridApi that let you manipulate the grid.
   */
  api: import_prop_types27.default.object.isRequired,
  /**
   * The mode of the cell.
   */
  cellMode: import_prop_types27.default.oneOf(["edit", "view"]).isRequired,
  /**
   * The column of the row that the current cell belongs to.
   */
  colDef: import_prop_types27.default.object.isRequired,
  /**
   * The column field of the cell that triggered the event.
   */
  field: import_prop_types27.default.string.isRequired,
  /**
   * A ref allowing to set imperative focus.
   * It can be passed to the element that should receive focus.
   * @ignore - do not document.
   */
  focusElementRef: import_prop_types27.default.oneOfType([import_prop_types27.default.func, import_prop_types27.default.shape({
    current: import_prop_types27.default.shape({
      focus: import_prop_types27.default.func.isRequired
    })
  })]),
  /**
   * The cell value formatted with the column valueFormatter.
   */
  formattedValue: import_prop_types27.default.any,
  /**
   * If true, the cell is the active element.
   */
  hasFocus: import_prop_types27.default.bool.isRequired,
  /**
   * The grid row id.
   */
  id: import_prop_types27.default.oneOfType([import_prop_types27.default.number, import_prop_types27.default.string]).isRequired,
  /**
   * If true, the cell is editable.
   */
  isEditable: import_prop_types27.default.bool,
  /**
   * The row model of the row that the current cell belongs to.
   */
  row: import_prop_types27.default.any.isRequired,
  /**
   * The node of the row that the current cell belongs to.
   */
  rowNode: import_prop_types27.default.object.isRequired,
  /**
   * the tabIndex value.
   */
  tabIndex: import_prop_types27.default.oneOf([-1, 0]).isRequired,
  /**
   * The cell value.
   * If the column has `valueGetter`, use `params.row` to directly access the fields.
   */
  value: import_prop_types27.default.any
} : void 0;
var GridCellCheckboxRenderer2 = GridCellCheckboxForwardRef;

// node_modules/@mui/x-data-grid/esm/components/columnSelection/GridHeaderCheckbox.js
init_extends();
init_objectWithoutPropertiesLoose();
var React56 = __toESM(require_react(), 1);
var import_prop_types28 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-data-grid/esm/hooks/features/focus/gridFocusStateSelector.js
var gridFocusStateSelector = createRootSelector((state) => state.focus);
var gridFocusCellSelector = createSelector3(gridFocusStateSelector, (focusState) => focusState.cell);
var gridFocusColumnHeaderSelector = createSelector3(gridFocusStateSelector, (focusState) => focusState.columnHeader);
var gridFocusColumnHeaderFilterSelector = createSelector3(gridFocusStateSelector, (focusState) => focusState.columnHeaderFilter);
var gridFocusColumnGroupHeaderSelector = createSelector3(gridFocusStateSelector, (focusState) => focusState.columnGroupHeader);
var gridTabIndexStateSelector = createRootSelector((state) => state.tabIndex);
var gridTabIndexCellSelector = createSelector3(gridTabIndexStateSelector, (state) => state.cell);
var gridTabIndexColumnHeaderSelector = createSelector3(gridTabIndexStateSelector, (state) => state.columnHeader);
var gridTabIndexColumnHeaderFilterSelector = createSelector3(gridTabIndexStateSelector, (state) => state.columnHeaderFilter);
var gridTabIndexColumnGroupHeaderSelector = createSelector3(gridTabIndexStateSelector, (state) => state.columnGroupHeader);

// node_modules/@mui/x-data-grid/esm/hooks/features/pagination/gridPaginationUtils.js
var MAX_PAGE_SIZE = 100;
var defaultPageSize = (autoPageSize) => autoPageSize ? 0 : 100;
var getPageCount = (rowCount, pageSize, page) => {
  if (pageSize > 0 && rowCount > 0) {
    return Math.ceil(rowCount / pageSize);
  }
  if (rowCount === -1) {
    return page + 2;
  }
  return 0;
};
var getDefaultGridPaginationModel = (autoPageSize) => ({
  page: 0,
  pageSize: autoPageSize ? 0 : 100
});
var getValidPage = (page, pageCount = 0) => {
  if (pageCount === 0) {
    return page;
  }
  return Math.max(Math.min(page, pageCount - 1), 0);
};
var throwIfPageSizeExceedsTheLimit = (pageSize, signatureProp) => {
  if (signatureProp === GridSignature.DataGrid && pageSize > MAX_PAGE_SIZE) {
    throw new Error(["MUI X: `pageSize` cannot exceed 100 in the MIT version of the DataGrid.", "You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature."].join("\n"));
  }
};

// node_modules/@mui/x-data-grid/esm/hooks/features/pagination/gridPaginationSelector.js
var ALL_RESULTS_PAGE_VALUE = -1;
var gridPaginationSelector = createRootSelector((state) => state.pagination);
var gridPaginationEnabledClientSideSelector = createSelector3(gridPaginationSelector, (pagination) => pagination.enabled && pagination.paginationMode === "client");
var gridPaginationModelSelector = createSelector3(gridPaginationSelector, (pagination) => pagination.paginationModel);
var gridPaginationRowCountSelector = createSelector3(gridPaginationSelector, (pagination) => pagination.rowCount);
var gridPaginationMetaSelector = createSelector3(gridPaginationSelector, (pagination) => pagination.meta);
var gridPageSelector = createSelector3(gridPaginationModelSelector, (paginationModel) => paginationModel.page);
var gridPageSizeSelector = createSelector3(gridPaginationModelSelector, (paginationModel) => paginationModel.pageSize);
var gridPageCountSelector = createSelector3(gridPaginationModelSelector, gridPaginationRowCountSelector, (paginationModel, rowCount) => getPageCount(rowCount, paginationModel.pageSize, paginationModel.page));
var gridPaginationRowRangeSelector = createSelectorMemoized2(gridPaginationEnabledClientSideSelector, gridPaginationModelSelector, gridRowTreeSelector, gridRowMaximumTreeDepthSelector, gridExpandedSortedRowEntriesSelector, gridFilteredSortedTopLevelRowEntriesSelector, (clientSidePaginationEnabled, paginationModel, rowTree, rowTreeDepth, visibleSortedRowEntries, visibleSortedTopLevelRowEntries) => {
  var _a;
  if (!clientSidePaginationEnabled) {
    return null;
  }
  const visibleTopLevelRowCount = visibleSortedTopLevelRowEntries.length;
  const topLevelFirstRowIndex = Math.min(paginationModel.pageSize * paginationModel.page, visibleTopLevelRowCount - 1);
  const topLevelLastRowIndex = paginationModel.pageSize === ALL_RESULTS_PAGE_VALUE ? visibleTopLevelRowCount - 1 : Math.min(topLevelFirstRowIndex + paginationModel.pageSize - 1, visibleTopLevelRowCount - 1);
  if (topLevelFirstRowIndex === -1 || topLevelLastRowIndex === -1) {
    return null;
  }
  if (rowTreeDepth < 2) {
    return {
      firstRowIndex: topLevelFirstRowIndex,
      lastRowIndex: topLevelLastRowIndex
    };
  }
  const topLevelFirstRow = visibleSortedTopLevelRowEntries[topLevelFirstRowIndex];
  const topLevelRowsInCurrentPageCount = topLevelLastRowIndex - topLevelFirstRowIndex + 1;
  const firstRowIndex = visibleSortedRowEntries.findIndex((row) => row.id === topLevelFirstRow.id);
  let lastRowIndex = firstRowIndex;
  let topLevelRowAdded = 0;
  while (lastRowIndex < visibleSortedRowEntries.length && topLevelRowAdded <= topLevelRowsInCurrentPageCount) {
    const row = visibleSortedRowEntries[lastRowIndex];
    const depth = (_a = rowTree[row.id]) == null ? void 0 : _a.depth;
    if (depth === void 0) {
      lastRowIndex += 1;
    } else {
      if (topLevelRowAdded < topLevelRowsInCurrentPageCount || depth > 0) {
        lastRowIndex += 1;
      }
      if (depth === 0) {
        topLevelRowAdded += 1;
      }
    }
  }
  return {
    firstRowIndex,
    lastRowIndex: lastRowIndex - 1
  };
});
var gridPaginatedVisibleSortedGridRowEntriesSelector = createSelectorMemoized2(gridExpandedSortedRowEntriesSelector, gridPaginationRowRangeSelector, (visibleSortedRowEntries, paginationRange) => {
  if (!paginationRange) {
    return [];
  }
  return visibleSortedRowEntries.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);
});
var gridPaginatedVisibleSortedGridRowIdsSelector = createSelectorMemoized2(gridExpandedSortedRowIdsSelector, gridPaginationRowRangeSelector, (visibleSortedRowIds, paginationRange) => {
  if (!paginationRange) {
    return [];
  }
  return visibleSortedRowIds.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);
});
var gridVisibleRowsSelector = createSelectorMemoized2(gridPaginationEnabledClientSideSelector, gridPaginationRowRangeSelector, gridPaginatedVisibleSortedGridRowEntriesSelector, gridExpandedSortedRowEntriesSelector, (clientPaginationEnabled, paginationRowRange, paginationRows, expandedSortedRowEntries) => {
  if (clientPaginationEnabled) {
    return {
      rows: paginationRows,
      range: paginationRowRange,
      rowIdToIndexMap: paginationRows.reduce((lookup, row, index) => {
        lookup.set(row.id, index);
        return lookup;
      }, /* @__PURE__ */ new Map())
    };
  }
  return {
    rows: expandedSortedRowEntries,
    range: expandedSortedRowEntries.length === 0 ? null : {
      firstRowIndex: 0,
      lastRowIndex: expandedSortedRowEntries.length - 1
    },
    rowIdToIndexMap: expandedSortedRowEntries.reduce((lookup, row, index) => {
      lookup.set(row.id, index);
      return lookup;
    }, /* @__PURE__ */ new Map())
  };
});

// node_modules/@mui/x-data-grid/esm/components/columnSelection/GridHeaderCheckbox.js
var import_jsx_runtime28 = __toESM(require_jsx_runtime(), 1);
var _excluded32 = ["field", "colDef"];
var useUtilityClasses7 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["checkboxInput"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var GridHeaderCheckbox = forwardRef2(function GridHeaderCheckbox2(props, ref) {
  var _a;
  const other = _objectWithoutPropertiesLoose(props, _excluded32);
  const [, forceUpdate] = React56.useState(false);
  const apiRef = useGridApiContext();
  const rootProps = useGridRootProps();
  const ownerState = {
    classes: rootProps.classes
  };
  const classes2 = useUtilityClasses7(ownerState);
  const tabIndexState = useGridSelector(apiRef, gridTabIndexColumnHeaderSelector);
  const selection = useGridSelector(apiRef, gridRowSelectionStateSelector);
  const visibleRowIds = useGridSelector(apiRef, gridExpandedSortedRowIdsSelector);
  const paginatedVisibleRowIds = useGridSelector(apiRef, gridPaginatedVisibleSortedGridRowIdsSelector);
  const filteredSelection = React56.useMemo(() => {
    const isRowSelectable = rootProps.isRowSelectable;
    if (typeof isRowSelectable !== "function") {
      return selection;
    }
    if (selection.type === "exclude") {
      return selection;
    }
    const selectionModel = {
      type: "include",
      ids: /* @__PURE__ */ new Set()
    };
    for (const id of selection.ids) {
      if (rootProps.keepNonExistentRowsSelected) {
        selectionModel.ids.add(id);
      }
      if (!apiRef.current.getRow(id)) {
        continue;
      }
      if (isRowSelectable(apiRef.current.getRowParams(id))) {
        selectionModel.ids.add(id);
      }
    }
    return selectionModel;
  }, [apiRef, rootProps.isRowSelectable, rootProps.keepNonExistentRowsSelected, selection]);
  const selectionCandidates = React56.useMemo(() => {
    const rowIds = !rootProps.pagination || !rootProps.checkboxSelectionVisibleOnly || rootProps.paginationMode === "server" ? visibleRowIds : paginatedVisibleRowIds;
    const candidates = /* @__PURE__ */ new Set();
    for (let i = 0; i < rowIds.length; i += 1) {
      const id = rowIds[i];
      if (!apiRef.current.getRow(id)) {
        continue;
      }
      if (apiRef.current.isRowSelectable(id)) {
        candidates.add(id);
      }
    }
    return candidates;
  }, [apiRef, rootProps.pagination, rootProps.paginationMode, rootProps.checkboxSelectionVisibleOnly, paginatedVisibleRowIds, visibleRowIds]);
  const currentSelectionSize = React56.useMemo(() => {
    const selectionManager = createRowSelectionManager(filteredSelection);
    let size = 0;
    for (const id of selectionCandidates) {
      if (selectionManager.has(id)) {
        size += 1;
      }
    }
    return size;
  }, [filteredSelection, selectionCandidates]);
  const isIndeterminate = React56.useMemo(() => {
    if (currentSelectionSize === 0) {
      return false;
    }
    const selectionManager = createRowSelectionManager(filteredSelection);
    for (const rowId of selectionCandidates) {
      if (!selectionManager.has(rowId)) {
        return true;
      }
    }
    return false;
  }, [currentSelectionSize, filteredSelection, selectionCandidates]);
  const isChecked = currentSelectionSize > 0;
  const handleChange = (event) => {
    const params = {
      value: event.target.checked
    };
    apiRef.current.publishEvent("headerSelectionCheckboxChange", params);
  };
  const tabIndex = tabIndexState !== null && tabIndexState.field === props.field ? 0 : -1;
  React56.useLayoutEffect(() => {
    const element = apiRef.current.getColumnHeaderElement(props.field);
    if (tabIndex === 0 && element) {
      element.tabIndex = -1;
    }
  }, [tabIndex, apiRef, props.field]);
  const handleKeyDown = React56.useCallback((event) => {
    if (event.key === " ") {
      apiRef.current.publishEvent("headerSelectionCheckboxChange", {
        value: !isChecked
      });
    }
  }, [apiRef, isChecked]);
  const handleSelectionChange = React56.useCallback(() => {
    forceUpdate((p) => !p);
  }, []);
  React56.useEffect(() => {
    return apiRef.current.subscribeEvent("rowSelectionChange", handleSelectionChange);
  }, [apiRef, handleSelectionChange]);
  const label = apiRef.current.getLocaleText(isChecked && !isIndeterminate ? "checkboxSelectionUnselectAllRows" : "checkboxSelectionSelectAllRows");
  return (0, import_jsx_runtime28.jsx)(rootProps.slots.baseCheckbox, _extends({
    indeterminate: isIndeterminate,
    checked: isChecked && !isIndeterminate,
    onChange: handleChange,
    className: classes2.root,
    slotProps: {
      htmlInput: {
        "aria-label": label,
        name: "select_all_rows"
      }
    },
    tabIndex,
    onKeyDown: handleKeyDown,
    disabled: !isMultipleRowSelectionEnabled(rootProps)
  }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseCheckbox, other, {
    ref
  }));
});
if (true) GridHeaderCheckbox.displayName = "GridHeaderCheckbox";
true ? GridHeaderCheckbox.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The column of the current header component.
   */
  colDef: import_prop_types28.default.object.isRequired,
  /**
   * The column field of the column that triggered the event
   */
  field: import_prop_types28.default.string.isRequired
} : void 0;

// node_modules/@mui/x-data-grid/esm/hooks/core/gridPropsSelectors.js
var gridRowIdSelector = createRootSelector((state, row) => {
  if (GRID_ID_AUTOGENERATED in row) {
    return row[GRID_ID_AUTOGENERATED];
  }
  return state.props.getRowId ? state.props.getRowId(row) : row.id;
});

// node_modules/@mui/x-data-grid/esm/colDef/gridCheckboxSelectionColDef.js
var import_jsx_runtime29 = __toESM(require_jsx_runtime(), 1);
var GRID_CHECKBOX_SELECTION_FIELD = "__check__";
var GRID_CHECKBOX_SELECTION_COL_DEF = _extends({}, GRID_BOOLEAN_COL_DEF, {
  type: "custom",
  field: GRID_CHECKBOX_SELECTION_FIELD,
  width: 50,
  resizable: false,
  sortable: false,
  filterable: false,
  // @ts-ignore
  aggregable: false,
  chartable: false,
  disableColumnMenu: true,
  disableReorder: true,
  disableExport: true,
  getApplyQuickFilterFn: () => null,
  display: "flex",
  valueGetter: (value, row, column, apiRef) => {
    const rowId = gridRowIdSelector(apiRef, row);
    return apiRef.current.isRowSelected(rowId);
  },
  rowSpanValueGetter: (_, row, column, apiRef) => gridRowIdSelector(apiRef, row),
  renderHeader: (params) => (0, import_jsx_runtime29.jsx)(GridHeaderCheckbox, _extends({}, params)),
  renderCell: (params) => (0, import_jsx_runtime29.jsx)(GridCellCheckboxRenderer2, _extends({}, params))
});

// node_modules/@mui/x-data-grid/esm/colDef/gridDateColDef.js
init_extends();

// node_modules/@mui/x-data-grid/esm/components/panel/filterPanel/GridFilterInputDate.js
init_extends();
init_objectWithoutPropertiesLoose();
var React58 = __toESM(require_react(), 1);
var import_prop_types29 = __toESM(require_prop_types(), 1);
var import_jsx_runtime30 = __toESM(require_jsx_runtime(), 1);
var _excluded33 = ["item", "applyValue", "type", "apiRef", "focusElementRef", "slotProps", "isFilterActive", "headerFilterMenu", "clearButton", "tabIndex", "disabled"];
function convertFilterItemValueToInputValue(itemValue, inputType) {
  if (itemValue == null) {
    return "";
  }
  const dateCopy = new Date(itemValue);
  if (Number.isNaN(dateCopy.getTime())) {
    return "";
  }
  if (inputType === "date") {
    return dateCopy.toISOString().substring(0, 10);
  }
  if (inputType === "datetime-local") {
    dateCopy.setMinutes(dateCopy.getMinutes() - dateCopy.getTimezoneOffset());
    return dateCopy.toISOString().substring(0, 19);
  }
  return dateCopy.toISOString().substring(0, 10);
}
function GridFilterInputDate(props) {
  var _a;
  const {
    item,
    applyValue,
    type,
    apiRef,
    focusElementRef,
    slotProps,
    headerFilterMenu,
    clearButton,
    tabIndex,
    disabled
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded33);
  const rootSlotProps = slotProps == null ? void 0 : slotProps.root.slotProps;
  const filterTimeout = useTimeout();
  const [filterValueState, setFilterValueState] = React58.useState(() => convertFilterItemValueToInputValue(item.value, type));
  const [applying, setIsApplying] = React58.useState(false);
  const id = useId();
  const rootProps = useGridRootProps();
  const onFilterChange = React58.useCallback((event) => {
    filterTimeout.clear();
    const value = event.target.value;
    setFilterValueState(value);
    setIsApplying(true);
    filterTimeout.start(rootProps.filterDebounceMs, () => {
      const date = new Date(value);
      applyValue(_extends({}, item, {
        value: Number.isNaN(date.getTime()) ? void 0 : date
      }));
      setIsApplying(false);
    });
  }, [applyValue, item, rootProps.filterDebounceMs, filterTimeout]);
  React58.useEffect(() => {
    const value = convertFilterItemValueToInputValue(item.value, type);
    setFilterValueState(value);
  }, [item.value, type]);
  return (0, import_jsx_runtime30.jsxs)(React58.Fragment, {
    children: [(0, import_jsx_runtime30.jsx)(rootProps.slots.baseTextField, _extends({
      fullWidth: true,
      id,
      label: apiRef.current.getLocaleText("filterPanelInputLabel"),
      placeholder: apiRef.current.getLocaleText("filterPanelInputPlaceholder"),
      value: filterValueState,
      onChange: onFilterChange,
      type: type || "text",
      disabled,
      inputRef: focusElementRef,
      slotProps: _extends({}, rootSlotProps, {
        input: _extends({
          endAdornment: applying ? (0, import_jsx_runtime30.jsx)(rootProps.slots.loadIcon, {
            fontSize: "small",
            color: "action"
          }) : null
        }, rootSlotProps == null ? void 0 : rootSlotProps.input),
        htmlInput: _extends({
          max: type === "datetime-local" ? "9999-12-31T23:59" : "9999-12-31",
          tabIndex
        }, rootSlotProps == null ? void 0 : rootSlotProps.htmlInput)
      })
    }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseTextField, other, slotProps == null ? void 0 : slotProps.root)), headerFilterMenu, clearButton]
  });
}
true ? GridFilterInputDate.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types29.default.shape({
    current: import_prop_types29.default.object.isRequired
  }).isRequired,
  applyValue: import_prop_types29.default.func.isRequired,
  className: import_prop_types29.default.string,
  clearButton: import_prop_types29.default.node,
  disabled: import_prop_types29.default.bool,
  focusElementRef: import_prop_types29.default.oneOfType([import_prop_types29.default.func, import_prop_types29.default.object]),
  headerFilterMenu: import_prop_types29.default.node,
  inputRef: import_prop_types29.default.oneOfType([import_prop_types29.default.func, import_prop_types29.default.shape({
    current: (props, propName) => {
      if (props[propName] == null) {
        return null;
      }
      if (typeof props[propName] !== "object" || props[propName].nodeType !== 1) {
        return new Error(`Expected prop '${propName}' to be of type Element`);
      }
      return null;
    }
  })]),
  /**
   * It is `true` if the filter either has a value or an operator with no value
   * required is selected (for example `isEmpty`)
   */
  isFilterActive: import_prop_types29.default.bool,
  item: import_prop_types29.default.shape({
    field: import_prop_types29.default.string.isRequired,
    id: import_prop_types29.default.oneOfType([import_prop_types29.default.number, import_prop_types29.default.string]),
    operator: import_prop_types29.default.string.isRequired,
    value: import_prop_types29.default.any
  }).isRequired,
  onBlur: import_prop_types29.default.func,
  onFocus: import_prop_types29.default.func,
  slotProps: import_prop_types29.default.object,
  tabIndex: import_prop_types29.default.number,
  type: import_prop_types29.default.oneOf(["date", "datetime-local"])
} : void 0;

// node_modules/@mui/x-data-grid/esm/colDef/gridDateOperators.js
function buildApplyFilterFn(filterItem, compareFn, showTime, keepHours) {
  if (!filterItem.value) {
    return null;
  }
  const date = new Date(filterItem.value);
  if (showTime) {
    date.setSeconds(0, 0);
  } else {
    date.setMinutes(date.getMinutes() + date.getTimezoneOffset());
    date.setHours(0, 0, 0, 0);
  }
  const time = date.getTime();
  return (value) => {
    if (!value) {
      return false;
    }
    if (keepHours) {
      return compareFn(value.getTime(), time);
    }
    const dateCopy = new Date(value);
    if (showTime) {
      dateCopy.setSeconds(0, 0);
    } else {
      dateCopy.setHours(0, 0, 0, 0);
    }
    return compareFn(dateCopy.getTime(), time);
  };
}
var getGridDateOperators = (showTime) => [{
  value: "is",
  getApplyFilterFn: (filterItem) => {
    return buildApplyFilterFn(filterItem, (value1, value2) => value1 === value2, showTime);
  },
  InputComponent: GridFilterInputDate,
  InputComponentProps: {
    type: showTime ? "datetime-local" : "date"
  }
}, {
  value: "not",
  getApplyFilterFn: (filterItem) => {
    return buildApplyFilterFn(filterItem, (value1, value2) => value1 !== value2, showTime);
  },
  InputComponent: GridFilterInputDate,
  InputComponentProps: {
    type: showTime ? "datetime-local" : "date"
  }
}, {
  value: "after",
  getApplyFilterFn: (filterItem) => {
    return buildApplyFilterFn(filterItem, (value1, value2) => value1 > value2, showTime);
  },
  InputComponent: GridFilterInputDate,
  InputComponentProps: {
    type: showTime ? "datetime-local" : "date"
  }
}, {
  value: "onOrAfter",
  getApplyFilterFn: (filterItem) => {
    return buildApplyFilterFn(filterItem, (value1, value2) => value1 >= value2, showTime);
  },
  InputComponent: GridFilterInputDate,
  InputComponentProps: {
    type: showTime ? "datetime-local" : "date"
  }
}, {
  value: "before",
  getApplyFilterFn: (filterItem) => {
    return buildApplyFilterFn(filterItem, (value1, value2) => value1 < value2, showTime, !showTime);
  },
  InputComponent: GridFilterInputDate,
  InputComponentProps: {
    type: showTime ? "datetime-local" : "date"
  }
}, {
  value: "onOrBefore",
  getApplyFilterFn: (filterItem) => {
    return buildApplyFilterFn(filterItem, (value1, value2) => value1 <= value2, showTime);
  },
  InputComponent: GridFilterInputDate,
  InputComponentProps: {
    type: showTime ? "datetime-local" : "date"
  }
}, {
  value: "isEmpty",
  getApplyFilterFn: () => {
    return (value) => {
      return value == null;
    };
  },
  requiresFilterValue: false
}, {
  value: "isNotEmpty",
  getApplyFilterFn: () => {
    return (value) => {
      return value != null;
    };
  },
  requiresFilterValue: false
}];

// node_modules/@mui/x-data-grid/esm/components/cell/GridEditDateCell.js
init_extends();
init_objectWithoutPropertiesLoose();
var React59 = __toESM(require_react(), 1);
var import_prop_types30 = __toESM(require_prop_types(), 1);
var import_jsx_runtime31 = __toESM(require_jsx_runtime(), 1);
var _excluded34 = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "tabIndex", "hasFocus", "inputProps", "isValidating", "isProcessingProps", "onValueChange", "slotProps"];
var StyledInputBase = styled_default(NotRendered)({
  fontSize: "inherit"
});
var useUtilityClasses8 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["editInputCell"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
function GridEditDateCell(props) {
  var _a, _b;
  const {
    id,
    value: valueProp,
    field,
    colDef,
    hasFocus,
    onValueChange,
    slotProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded34);
  const isDateTime = colDef.type === "dateTime";
  const apiRef = useGridApiContext();
  const inputRef = React59.useRef(null);
  const valueTransformed = React59.useMemo(() => {
    let parsedDate;
    if (valueProp == null) {
      parsedDate = null;
    } else if (valueProp instanceof Date) {
      parsedDate = valueProp;
    } else {
      parsedDate = new Date((valueProp ?? "").toString());
    }
    let formattedDate;
    if (parsedDate == null || Number.isNaN(parsedDate.getTime())) {
      formattedDate = "";
    } else {
      const localDate = new Date(parsedDate.getTime() - parsedDate.getTimezoneOffset() * 60 * 1e3);
      formattedDate = localDate.toISOString().substr(0, isDateTime ? 16 : 10);
    }
    return {
      parsed: parsedDate,
      formatted: formattedDate
    };
  }, [valueProp, isDateTime]);
  const [valueState, setValueState] = React59.useState(valueTransformed);
  const rootProps = useGridRootProps();
  const ownerState = {
    classes: rootProps.classes
  };
  const classes2 = useUtilityClasses8(ownerState);
  const parseValueToDate = React59.useCallback((value) => {
    if (value === "") {
      return null;
    }
    const [date, time] = value.split("T");
    const [year, month, day] = date.split("-");
    const parsedDate = /* @__PURE__ */ new Date();
    parsedDate.setFullYear(Number(year), Number(month) - 1, Number(day));
    parsedDate.setHours(0, 0, 0, 0);
    if (time) {
      const [hours, minutes] = time.split(":");
      parsedDate.setHours(Number(hours), Number(minutes), 0, 0);
    }
    return parsedDate;
  }, []);
  const handleChange = React59.useCallback(async (event) => {
    const newFormattedDate = event.target.value;
    const newParsedDate = parseValueToDate(newFormattedDate);
    if (onValueChange) {
      await onValueChange(event, newParsedDate);
    }
    setValueState({
      parsed: newParsedDate,
      formatted: newFormattedDate
    });
    apiRef.current.setEditCellValue({
      id,
      field,
      value: newParsedDate
    }, event);
  }, [apiRef, field, id, onValueChange, parseValueToDate]);
  React59.useEffect(() => {
    setValueState((state) => {
      var _a2, _b2;
      if (valueTransformed.parsed !== state.parsed && ((_a2 = valueTransformed.parsed) == null ? void 0 : _a2.getTime()) !== ((_b2 = state.parsed) == null ? void 0 : _b2.getTime())) {
        return valueTransformed;
      }
      return state;
    });
  }, [valueTransformed]);
  useEnhancedEffect_default(() => {
    if (hasFocus) {
      inputRef.current.focus();
    }
  }, [hasFocus]);
  return (0, import_jsx_runtime31.jsx)(StyledInputBase, _extends({
    as: rootProps.slots.baseInput,
    inputRef,
    fullWidth: true,
    className: classes2.root,
    type: isDateTime ? "datetime-local" : "date",
    value: valueState.formatted,
    onChange: handleChange
  }, other, slotProps == null ? void 0 : slotProps.root, {
    slotProps: {
      htmlInput: _extends({
        max: isDateTime ? "9999-12-31T23:59" : "9999-12-31"
      }, (_b = (_a = slotProps == null ? void 0 : slotProps.root) == null ? void 0 : _a.slotProps) == null ? void 0 : _b.htmlInput)
    }
  }));
}
true ? GridEditDateCell.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * GridApi that let you manipulate the grid.
   */
  api: import_prop_types30.default.object.isRequired,
  /**
   * The mode of the cell.
   */
  cellMode: import_prop_types30.default.oneOf(["edit", "view"]).isRequired,
  changeReason: import_prop_types30.default.oneOf(["debouncedSetEditCellValue", "setEditCellValue"]),
  /**
   * The column of the row that the current cell belongs to.
   */
  colDef: import_prop_types30.default.object.isRequired,
  /**
   * The column field of the cell that triggered the event.
   */
  field: import_prop_types30.default.string.isRequired,
  /**
   * The cell value formatted with the column valueFormatter.
   */
  formattedValue: import_prop_types30.default.any,
  /**
   * If true, the cell is the active element.
   */
  hasFocus: import_prop_types30.default.bool.isRequired,
  /**
   * The grid row id.
   */
  id: import_prop_types30.default.oneOfType([import_prop_types30.default.number, import_prop_types30.default.string]).isRequired,
  /**
   * If true, the cell is editable.
   */
  isEditable: import_prop_types30.default.bool,
  isProcessingProps: import_prop_types30.default.bool,
  isValidating: import_prop_types30.default.bool,
  /**
   * Callback called when the value is changed by the user.
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * @param {Date | null} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.
   * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`
   */
  onValueChange: import_prop_types30.default.func,
  /**
   * The row model of the row that the current cell belongs to.
   */
  row: import_prop_types30.default.any.isRequired,
  /**
   * The node of the row that the current cell belongs to.
   */
  rowNode: import_prop_types30.default.object.isRequired,
  slotProps: import_prop_types30.default.object,
  /**
   * the tabIndex value.
   */
  tabIndex: import_prop_types30.default.oneOf([-1, 0]).isRequired,
  /**
   * The cell value.
   * If the column has `valueGetter`, use `params.row` to directly access the fields.
   */
  value: import_prop_types30.default.any
} : void 0;
var renderEditDateCell = (params) => (0, import_jsx_runtime31.jsx)(GridEditDateCell, _extends({}, params));
if (true) renderEditDateCell.displayName = "renderEditDateCell";

// node_modules/@mui/x-data-grid/esm/colDef/gridDateColDef.js
function throwIfNotDateObject({
  value,
  columnType,
  rowId,
  field
}) {
  if (!(value instanceof Date)) {
    throw new Error([`MUI X: \`${columnType}\` column type only accepts \`Date\` objects as values.`, "Use `valueGetter` to transform the value into a `Date` object.", `Row ID: ${rowId}, field: "${field}".`].join("\n"));
  }
}
var gridDateFormatter = (value, row, column, apiRef) => {
  if (!value) {
    return "";
  }
  const rowId = gridRowIdSelector(apiRef, row);
  if (isAutogeneratedRow(row) && !(value instanceof Date)) {
    return value;
  }
  throwIfNotDateObject({
    value,
    columnType: "date",
    rowId,
    field: column.field
  });
  return value.toLocaleDateString();
};
var gridDateTimeFormatter = (value, row, column, apiRef) => {
  if (!value) {
    return "";
  }
  const rowId = gridRowIdSelector(apiRef, row);
  if (isAutogeneratedRow(row) && !(value instanceof Date)) {
    return value;
  }
  throwIfNotDateObject({
    value,
    columnType: "dateTime",
    rowId,
    field: column.field
  });
  return value.toLocaleString();
};
var GRID_DATE_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
  type: "date",
  sortComparator: gridDateComparator,
  valueFormatter: gridDateFormatter,
  filterOperators: getGridDateOperators(),
  renderEditCell: renderEditDateCell,
  // @ts-ignore
  pastedValueParser: (value) => new Date(value)
});
var GRID_DATETIME_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
  type: "dateTime",
  sortComparator: gridDateComparator,
  valueFormatter: gridDateTimeFormatter,
  filterOperators: getGridDateOperators(true),
  renderEditCell: renderEditDateCell,
  // @ts-ignore
  pastedValueParser: (value) => new Date(value)
});

// node_modules/@mui/x-data-grid/esm/colDef/gridNumericColDef.js
init_extends();

// node_modules/@mui/x-data-grid/esm/colDef/gridNumericOperators.js
var parseNumericValue = (value) => {
  if (value == null) {
    return null;
  }
  return Number(value);
};
var getGridNumericQuickFilterFn = (value) => {
  if (value == null || Number.isNaN(value) || value === "") {
    return null;
  }
  return (columnValue) => {
    return parseNumericValue(columnValue) === parseNumericValue(value);
  };
};
var getGridNumericOperators = () => [{
  value: "=",
  getApplyFilterFn: (filterItem) => {
    if (filterItem.value == null || Number.isNaN(filterItem.value)) {
      return null;
    }
    return (value) => {
      return parseNumericValue(value) === filterItem.value;
    };
  },
  InputComponent: GridFilterInputValue,
  InputComponentProps: {
    type: "number"
  }
}, {
  value: "!=",
  getApplyFilterFn: (filterItem) => {
    if (filterItem.value == null || Number.isNaN(filterItem.value)) {
      return null;
    }
    return (value) => {
      return parseNumericValue(value) !== filterItem.value;
    };
  },
  InputComponent: GridFilterInputValue,
  InputComponentProps: {
    type: "number"
  }
}, {
  value: ">",
  getApplyFilterFn: (filterItem) => {
    if (filterItem.value == null || Number.isNaN(filterItem.value)) {
      return null;
    }
    return (value) => {
      if (value == null) {
        return false;
      }
      return parseNumericValue(value) > filterItem.value;
    };
  },
  InputComponent: GridFilterInputValue,
  InputComponentProps: {
    type: "number"
  }
}, {
  value: ">=",
  getApplyFilterFn: (filterItem) => {
    if (filterItem.value == null || Number.isNaN(filterItem.value)) {
      return null;
    }
    return (value) => {
      if (value == null) {
        return false;
      }
      return parseNumericValue(value) >= filterItem.value;
    };
  },
  InputComponent: GridFilterInputValue,
  InputComponentProps: {
    type: "number"
  }
}, {
  value: "<",
  getApplyFilterFn: (filterItem) => {
    if (filterItem.value == null || Number.isNaN(filterItem.value)) {
      return null;
    }
    return (value) => {
      if (value == null) {
        return false;
      }
      return parseNumericValue(value) < filterItem.value;
    };
  },
  InputComponent: GridFilterInputValue,
  InputComponentProps: {
    type: "number"
  }
}, {
  value: "<=",
  getApplyFilterFn: (filterItem) => {
    if (filterItem.value == null || Number.isNaN(filterItem.value)) {
      return null;
    }
    return (value) => {
      if (value == null) {
        return false;
      }
      return parseNumericValue(value) <= filterItem.value;
    };
  },
  InputComponent: GridFilterInputValue,
  InputComponentProps: {
    type: "number"
  }
}, {
  value: "isEmpty",
  getApplyFilterFn: () => {
    return (value) => {
      return value == null;
    };
  },
  requiresFilterValue: false
}, {
  value: "isNotEmpty",
  getApplyFilterFn: () => {
    return (value) => {
      return value != null;
    };
  },
  requiresFilterValue: false
}, {
  value: "isAnyOf",
  getApplyFilterFn: (filterItem) => {
    if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {
      return null;
    }
    return (value) => {
      return value != null && filterItem.value.includes(Number(value));
    };
  },
  InputComponent: GridFilterInputMultipleValue,
  InputComponentProps: {
    type: "number"
  }
}];

// node_modules/@mui/x-data-grid/esm/colDef/gridNumericColDef.js
var GRID_NUMERIC_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
  type: "number",
  align: "right",
  headerAlign: "right",
  sortComparator: gridNumberComparator,
  valueParser: (value) => value === "" ? null : Number(value),
  valueFormatter: (value) => isNumber(value) ? value.toLocaleString() : value || "",
  filterOperators: getGridNumericOperators(),
  getApplyQuickFilterFn: getGridNumericQuickFilterFn
});

// node_modules/@mui/x-data-grid/esm/colDef/gridSingleSelectColDef.js
init_extends();

// node_modules/@mui/x-data-grid/esm/components/cell/GridEditSingleSelectCell.js
init_extends();
init_objectWithoutPropertiesLoose();
var React60 = __toESM(require_react(), 1);
var import_prop_types31 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-data-grid/esm/components/panel/filterPanel/filterPanelUtils.js
init_extends();
function isSingleSelectColDef(colDef) {
  return (colDef == null ? void 0 : colDef.type) === "singleSelect";
}
function getValueOptions(column, additionalParams) {
  if (!column) {
    return void 0;
  }
  return typeof column.valueOptions === "function" ? column.valueOptions(_extends({
    field: column.field
  }, additionalParams)) : column.valueOptions;
}
function getValueFromValueOptions(value, valueOptions, getOptionValue) {
  if (valueOptions === void 0) {
    return void 0;
  }
  const result = valueOptions.find((option) => {
    const optionValue = getOptionValue(option);
    return String(optionValue) === String(value);
  });
  return getOptionValue(result);
}

// node_modules/@mui/x-data-grid/esm/components/cell/GridEditSingleSelectCell.js
var import_react4 = __toESM(require_react(), 1);
var import_jsx_runtime32 = __toESM(require_jsx_runtime(), 1);
var _excluded35 = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "tabIndex", "className", "hasFocus", "isValidating", "isProcessingProps", "error", "onValueChange", "initialOpen", "slotProps"];
function isKeyboardEvent2(event) {
  return "key" in event && !!event.key;
}
function GridEditSingleSelectCell(props) {
  var _a, _b;
  const rootProps = useGridRootProps();
  const {
    id,
    value: valueProp,
    field,
    row,
    colDef,
    hasFocus,
    error,
    onValueChange,
    initialOpen = rootProps.editMode === GridEditModes.Cell,
    slotProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded35);
  const apiRef = useGridApiContext();
  const ref = React60.useRef(null);
  const inputRef = React60.useRef(null);
  const [open, setOpen] = React60.useState(initialOpen);
  const baseSelectProps = ((_a = rootProps.slotProps) == null ? void 0 : _a.baseSelect) || {};
  const isSelectNative = baseSelectProps.native ?? false;
  useEnhancedEffect_default(() => {
    var _a2;
    if (hasFocus) {
      (_a2 = inputRef.current) == null ? void 0 : _a2.focus();
    }
  }, [hasFocus]);
  if (!isSingleSelectColDef(colDef)) {
    return null;
  }
  const valueOptions = getValueOptions(colDef, {
    id,
    row
  });
  if (!valueOptions) {
    return null;
  }
  const getOptionValue = colDef.getOptionValue;
  const getOptionLabel = colDef.getOptionLabel;
  const handleChange = async (event) => {
    if (!isSingleSelectColDef(colDef) || !valueOptions) {
      return;
    }
    setOpen(false);
    const target = event.target;
    const formattedTargetValue = getValueFromValueOptions(target.value, valueOptions, getOptionValue);
    if (onValueChange) {
      await onValueChange(event, formattedTargetValue);
    }
    await apiRef.current.setEditCellValue({
      id,
      field,
      value: formattedTargetValue
    }, event);
  };
  const handleClose = (event, reason) => {
    if (rootProps.editMode === GridEditModes.Row) {
      setOpen(false);
      return;
    }
    if (reason === "backdropClick" || event.key === "Escape") {
      const params = apiRef.current.getCellParams(id, field);
      apiRef.current.publishEvent("cellEditStop", _extends({}, params, {
        reason: event.key === "Escape" ? GridCellEditStopReasons.escapeKeyDown : GridCellEditStopReasons.cellFocusOut
      }));
    }
  };
  const handleOpen = (event) => {
    if (isKeyboardEvent2(event) && event.key === "Enter") {
      return;
    }
    setOpen(true);
  };
  if (!valueOptions || !colDef) {
    return null;
  }
  return (0, import_jsx_runtime32.jsx)(rootProps.slots.baseSelect, _extends({
    ref,
    value: valueProp,
    onChange: handleChange,
    open,
    onOpen: handleOpen,
    onClose: handleClose,
    error,
    native: isSelectNative,
    fullWidth: true,
    slotProps: {
      htmlInput: {
        ref: inputRef
      }
    }
  }, other, slotProps == null ? void 0 : slotProps.root, (_b = rootProps.slotProps) == null ? void 0 : _b.baseSelect, {
    children: valueOptions.map((valueOption) => {
      var _a2;
      const value = getOptionValue(valueOption);
      return (0, import_react4.createElement)(rootProps.slots.baseSelectOption, _extends({}, ((_a2 = rootProps.slotProps) == null ? void 0 : _a2.baseSelectOption) || {}, {
        native: isSelectNative,
        key: value,
        value
      }), getOptionLabel(valueOption));
    })
  }));
}
true ? GridEditSingleSelectCell.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * GridApi that let you manipulate the grid.
   */
  api: import_prop_types31.default.object.isRequired,
  /**
   * The mode of the cell.
   */
  cellMode: import_prop_types31.default.oneOf(["edit", "view"]).isRequired,
  changeReason: import_prop_types31.default.oneOf(["debouncedSetEditCellValue", "setEditCellValue"]),
  /**
   * The column of the row that the current cell belongs to.
   */
  colDef: import_prop_types31.default.object.isRequired,
  /**
   * The column field of the cell that triggered the event.
   */
  field: import_prop_types31.default.string.isRequired,
  /**
   * The cell value formatted with the column valueFormatter.
   */
  formattedValue: import_prop_types31.default.any,
  /**
   * If true, the cell is the active element.
   */
  hasFocus: import_prop_types31.default.bool.isRequired,
  /**
   * The grid row id.
   */
  id: import_prop_types31.default.oneOfType([import_prop_types31.default.number, import_prop_types31.default.string]).isRequired,
  /**
   * If true, the select opens by default.
   */
  initialOpen: import_prop_types31.default.bool,
  /**
   * If true, the cell is editable.
   */
  isEditable: import_prop_types31.default.bool,
  isProcessingProps: import_prop_types31.default.bool,
  isValidating: import_prop_types31.default.bool,
  /**
   * Callback called when the value is changed by the user.
   * @param {Event<any>} event The event source of the callback.
   * @param {any} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.
   * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`
   */
  onValueChange: import_prop_types31.default.func,
  /**
   * The row model of the row that the current cell belongs to.
   */
  row: import_prop_types31.default.any.isRequired,
  /**
   * The node of the row that the current cell belongs to.
   */
  rowNode: import_prop_types31.default.object.isRequired,
  /**
   * the tabIndex value.
   */
  tabIndex: import_prop_types31.default.oneOf([-1, 0]).isRequired,
  /**
   * The cell value.
   * If the column has `valueGetter`, use `params.row` to directly access the fields.
   */
  value: import_prop_types31.default.any
} : void 0;
var renderEditSingleSelectCell = (params) => (0, import_jsx_runtime32.jsx)(GridEditSingleSelectCell, _extends({}, params));
if (true) renderEditSingleSelectCell.displayName = "renderEditSingleSelectCell";

// node_modules/@mui/x-data-grid/esm/components/panel/filterPanel/GridFilterInputSingleSelect.js
init_objectWithoutPropertiesLoose();
init_extends();
var React61 = __toESM(require_react(), 1);
var import_prop_types32 = __toESM(require_prop_types(), 1);
var import_react5 = __toESM(require_react(), 1);
var import_jsx_runtime33 = __toESM(require_jsx_runtime(), 1);
var _excluded36 = ["item", "applyValue", "type", "apiRef", "focusElementRef", "tabIndex", "isFilterActive", "clearButton", "headerFilterMenu", "slotProps"];
var renderSingleSelectOptions = ({
  column,
  OptionComponent,
  getOptionLabel,
  getOptionValue,
  isSelectNative,
  baseSelectOptionProps
}) => {
  const iterableColumnValues = ["", ...getValueOptions(column) || []];
  return iterableColumnValues.map((option) => {
    const value = getOptionValue(option);
    let label = getOptionLabel(option);
    if (label === "") {
      label = " ";
    }
    return (0, import_react5.createElement)(OptionComponent, _extends({}, baseSelectOptionProps, {
      native: isSelectNative,
      key: value,
      value
    }), label);
  });
};
function GridFilterInputSingleSelect(props) {
  var _a, _b, _c, _d, _e;
  const {
    item,
    applyValue,
    type,
    apiRef,
    focusElementRef,
    tabIndex,
    clearButton,
    headerFilterMenu,
    slotProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded36);
  const filterValue = item.value ?? "";
  const id = useId();
  const labelId = useId();
  const rootProps = useGridRootProps();
  const isSelectNative = ((_b = (_a = rootProps.slotProps) == null ? void 0 : _a.baseSelect) == null ? void 0 : _b.native) ?? false;
  const resolvedColumn = apiRef.current.getColumn(item.field);
  const getOptionValue = resolvedColumn.getOptionValue;
  const getOptionLabel = resolvedColumn.getOptionLabel;
  const currentValueOptions = React61.useMemo(() => {
    return getValueOptions(resolvedColumn);
  }, [resolvedColumn]);
  const onFilterChange = React61.useCallback((event) => {
    let value = event.target.value;
    value = getValueFromValueOptions(value, currentValueOptions, getOptionValue);
    applyValue(_extends({}, item, {
      value
    }));
  }, [currentValueOptions, getOptionValue, applyValue, item]);
  if (!resolvedColumn || !isSingleSelectColDef(resolvedColumn)) {
    return null;
  }
  const label = (slotProps == null ? void 0 : slotProps.root.label) ?? apiRef.current.getLocaleText("filterPanelInputLabel");
  return (0, import_jsx_runtime33.jsxs)(React61.Fragment, {
    children: [(0, import_jsx_runtime33.jsx)(rootProps.slots.baseSelect, _extends({
      fullWidth: true,
      id,
      label,
      labelId,
      value: filterValue,
      onChange: onFilterChange,
      slotProps: {
        htmlInput: _extends({
          tabIndex,
          ref: focusElementRef,
          type: type || "text",
          placeholder: (slotProps == null ? void 0 : slotProps.root.placeholder) ?? apiRef.current.getLocaleText("filterPanelInputPlaceholder")
        }, (_c = slotProps == null ? void 0 : slotProps.root.slotProps) == null ? void 0 : _c.htmlInput)
      },
      native: isSelectNative
    }, (_d = rootProps.slotProps) == null ? void 0 : _d.baseSelect, other, slotProps == null ? void 0 : slotProps.root, {
      children: renderSingleSelectOptions({
        column: resolvedColumn,
        OptionComponent: rootProps.slots.baseSelectOption,
        getOptionLabel,
        getOptionValue,
        isSelectNative,
        baseSelectOptionProps: (_e = rootProps.slotProps) == null ? void 0 : _e.baseSelectOption
      })
    })), headerFilterMenu, clearButton]
  });
}
true ? GridFilterInputSingleSelect.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types32.default.shape({
    current: import_prop_types32.default.object.isRequired
  }).isRequired,
  applyValue: import_prop_types32.default.func.isRequired,
  className: import_prop_types32.default.string,
  clearButton: import_prop_types32.default.node,
  disabled: import_prop_types32.default.bool,
  focusElementRef: import_prop_types32.default.oneOfType([import_prop_types32.default.func, import_prop_types32.default.object]),
  headerFilterMenu: import_prop_types32.default.node,
  inputRef: import_prop_types32.default.oneOfType([import_prop_types32.default.func, import_prop_types32.default.shape({
    current: (props, propName) => {
      if (props[propName] == null) {
        return null;
      }
      if (typeof props[propName] !== "object" || props[propName].nodeType !== 1) {
        return new Error(`Expected prop '${propName}' to be of type Element`);
      }
      return null;
    }
  })]),
  /**
   * It is `true` if the filter either has a value or an operator with no value
   * required is selected (for example `isEmpty`)
   */
  isFilterActive: import_prop_types32.default.bool,
  item: import_prop_types32.default.shape({
    field: import_prop_types32.default.string.isRequired,
    id: import_prop_types32.default.oneOfType([import_prop_types32.default.number, import_prop_types32.default.string]),
    operator: import_prop_types32.default.string.isRequired,
    value: import_prop_types32.default.any
  }).isRequired,
  onBlur: import_prop_types32.default.func,
  onFocus: import_prop_types32.default.func,
  slotProps: import_prop_types32.default.object,
  tabIndex: import_prop_types32.default.number,
  type: import_prop_types32.default.oneOf(["singleSelect"])
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/panel/filterPanel/GridFilterInputMultipleSingleSelect.js
init_extends();
init_objectWithoutPropertiesLoose();
var React62 = __toESM(require_react(), 1);
var import_prop_types33 = __toESM(require_prop_types(), 1);
var import_jsx_runtime34 = __toESM(require_jsx_runtime(), 1);
var _excluded37 = ["item", "applyValue", "type", "apiRef", "focusElementRef", "slotProps"];
function GridFilterInputMultipleSingleSelect(props) {
  const {
    item,
    applyValue,
    type,
    apiRef,
    focusElementRef,
    slotProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded37);
  const id = useId();
  const rootProps = useGridRootProps();
  const resolvedColumn = apiRef.current.getColumn(item.field);
  const getOptionValue = resolvedColumn.getOptionValue;
  const getOptionLabel = resolvedColumn.getOptionLabel;
  const isOptionEqualToValue = React62.useCallback((option, value) => getOptionValue(option) === getOptionValue(value), [getOptionValue]);
  const resolvedValueOptions = React62.useMemo(() => {
    return getValueOptions(resolvedColumn) || [];
  }, [resolvedColumn]);
  const filteredValues = React62.useMemo(() => {
    if (!Array.isArray(item.value)) {
      return [];
    }
    return item.value.reduce((acc, value) => {
      const resolvedValue = resolvedValueOptions.find((v) => getOptionValue(v) === value);
      if (resolvedValue != null) {
        acc.push(resolvedValue);
      }
      return acc;
    }, []);
  }, [getOptionValue, item.value, resolvedValueOptions]);
  const handleChange = React62.useCallback((event, value) => {
    applyValue(_extends({}, item, {
      value: value.map(getOptionValue)
    }));
  }, [applyValue, item, getOptionValue]);
  if (!resolvedColumn || !isSingleSelectColDef(resolvedColumn)) {
    return null;
  }
  const BaseAutocomplete2 = rootProps.slots.baseAutocomplete;
  return (0, import_jsx_runtime34.jsx)(BaseAutocomplete2, _extends({
    multiple: true,
    options: resolvedValueOptions,
    isOptionEqualToValue,
    id,
    value: filteredValues,
    onChange: handleChange,
    getOptionLabel,
    label: apiRef.current.getLocaleText("filterPanelInputLabel"),
    placeholder: apiRef.current.getLocaleText("filterPanelInputPlaceholder"),
    slotProps: {
      textField: {
        type: type || "text",
        inputRef: focusElementRef
      }
    }
  }, other, slotProps == null ? void 0 : slotProps.root));
}
true ? GridFilterInputMultipleSingleSelect.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types33.default.shape({
    current: import_prop_types33.default.object.isRequired
  }).isRequired,
  applyValue: import_prop_types33.default.func.isRequired,
  className: import_prop_types33.default.string,
  clearButton: import_prop_types33.default.node,
  disabled: import_prop_types33.default.bool,
  focusElementRef: import_prop_types33.default.oneOfType([import_prop_types33.default.func, import_prop_types33.default.object]),
  headerFilterMenu: import_prop_types33.default.node,
  inputRef: import_prop_types33.default.oneOfType([import_prop_types33.default.func, import_prop_types33.default.shape({
    current: (props, propName) => {
      if (props[propName] == null) {
        return null;
      }
      if (typeof props[propName] !== "object" || props[propName].nodeType !== 1) {
        return new Error(`Expected prop '${propName}' to be of type Element`);
      }
      return null;
    }
  })]),
  /**
   * It is `true` if the filter either has a value or an operator with no value
   * required is selected (for example `isEmpty`)
   */
  isFilterActive: import_prop_types33.default.bool,
  item: import_prop_types33.default.shape({
    field: import_prop_types33.default.string.isRequired,
    id: import_prop_types33.default.oneOfType([import_prop_types33.default.number, import_prop_types33.default.string]),
    operator: import_prop_types33.default.string.isRequired,
    value: import_prop_types33.default.any
  }).isRequired,
  onBlur: import_prop_types33.default.func,
  onFocus: import_prop_types33.default.func,
  slotProps: import_prop_types33.default.object,
  tabIndex: import_prop_types33.default.number,
  type: import_prop_types33.default.oneOf(["singleSelect"])
} : void 0;

// node_modules/@mui/x-data-grid/esm/colDef/gridSingleSelectOperators.js
var parseObjectValue = (value) => {
  if (value == null || !isObject(value)) {
    return value;
  }
  return value.value;
};
var getGridSingleSelectOperators = () => [{
  value: "is",
  getApplyFilterFn: (filterItem) => {
    if (filterItem.value == null || filterItem.value === "") {
      return null;
    }
    return (value) => parseObjectValue(value) === parseObjectValue(filterItem.value);
  },
  InputComponent: GridFilterInputSingleSelect
}, {
  value: "not",
  getApplyFilterFn: (filterItem) => {
    if (filterItem.value == null || filterItem.value === "") {
      return null;
    }
    return (value) => parseObjectValue(value) !== parseObjectValue(filterItem.value);
  },
  InputComponent: GridFilterInputSingleSelect
}, {
  value: "isAnyOf",
  getApplyFilterFn: (filterItem) => {
    if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {
      return null;
    }
    const filterItemValues = filterItem.value.map(parseObjectValue);
    return (value) => filterItemValues.includes(parseObjectValue(value));
  },
  InputComponent: GridFilterInputMultipleSingleSelect
}];

// node_modules/@mui/x-data-grid/esm/colDef/gridSingleSelectColDef.js
var isArrayOfObjects = (options) => {
  return typeof options[0] === "object";
};
var defaultGetOptionValue = (value) => {
  return isObject(value) ? value.value : value;
};
var defaultGetOptionLabel = (value) => {
  return isObject(value) ? value.label : String(value);
};
var GRID_SINGLE_SELECT_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
  type: "singleSelect",
  getOptionLabel: defaultGetOptionLabel,
  getOptionValue: defaultGetOptionValue,
  valueFormatter(value, row, colDef, apiRef) {
    const rowId = gridRowIdSelector(apiRef, row);
    if (!isSingleSelectColDef(colDef)) {
      return "";
    }
    const valueOptions = getValueOptions(colDef, {
      id: rowId,
      row
    });
    if (value == null) {
      return "";
    }
    if (!valueOptions) {
      return value;
    }
    if (!isArrayOfObjects(valueOptions)) {
      return colDef.getOptionLabel(value);
    }
    const valueOption = valueOptions.find((option) => colDef.getOptionValue(option) === value);
    return valueOption ? colDef.getOptionLabel(valueOption) : "";
  },
  renderEditCell: renderEditSingleSelectCell,
  filterOperators: getGridSingleSelectOperators(),
  // @ts-ignore
  pastedValueParser: (value, row, column) => {
    const colDef = column;
    const valueOptions = getValueOptions(colDef) || [];
    const getOptionValue = colDef.getOptionValue;
    const valueOption = valueOptions.find((option) => {
      if (getOptionValue(option) === value) {
        return true;
      }
      return false;
    });
    if (valueOption) {
      return value;
    }
    return void 0;
  }
});

// node_modules/@mui/x-data-grid/esm/colDef/gridDefaultColumnTypes.js
var DEFAULT_GRID_COL_TYPE_KEY = "string";
var getGridDefaultColumnTypes = () => {
  const nativeColumnTypes = {
    string: GRID_STRING_COL_DEF,
    number: GRID_NUMERIC_COL_DEF,
    date: GRID_DATE_COL_DEF,
    dateTime: GRID_DATETIME_COL_DEF,
    boolean: GRID_BOOLEAN_COL_DEF,
    singleSelect: GRID_SINGLE_SELECT_COL_DEF,
    [GRID_ACTIONS_COLUMN_TYPE]: GRID_ACTIONS_COL_DEF,
    custom: GRID_STRING_COL_DEF
  };
  return nativeColumnTypes;
};

// node_modules/@mui/x-data-grid/esm/hooks/features/headerFiltering/gridHeaderFilteringSelectors.js
var gridHeaderFilteringStateSelector = createRootSelector((state) => state.headerFiltering);
var gridHeaderFilteringEnabledSelector = createSelector3(
  gridHeaderFilteringStateSelector,
  // No initialization in MIT, so we need to default to false to be used by `getTotalHeaderHeight`
  (headerFilteringState) => (headerFilteringState == null ? void 0 : headerFilteringState.enabled) ?? false
);
var gridHeaderFilteringEditFieldSelector = createSelector3(gridHeaderFilteringStateSelector, (headerFilteringState) => headerFilteringState.editing);
var gridHeaderFilteringMenuSelector = createSelector3(gridHeaderFilteringStateSelector, (headerFilteringState) => headerFilteringState.menuOpen);

// node_modules/@mui/x-data-grid/esm/hooks/features/columnGrouping/gridColumnGroupsSelector.js
var gridColumnGroupingSelector = createRootSelector((state) => state.columnGrouping);
var gridColumnGroupsUnwrappedModelSelector = createSelectorMemoized2(gridColumnGroupingSelector, (columnGrouping) => (columnGrouping == null ? void 0 : columnGrouping.unwrappedGroupingModel) ?? {});
var gridColumnGroupsLookupSelector = createSelectorMemoized2(gridColumnGroupingSelector, (columnGrouping) => (columnGrouping == null ? void 0 : columnGrouping.lookup) ?? {});
var gridColumnGroupsHeaderStructureSelector = createSelectorMemoized2(gridColumnGroupingSelector, (columnGrouping) => (columnGrouping == null ? void 0 : columnGrouping.headerStructure) ?? []);
var gridColumnGroupsHeaderMaxDepthSelector = createSelector3(gridColumnGroupingSelector, (columnGrouping) => (columnGrouping == null ? void 0 : columnGrouping.maxDepth) ?? 0);

// node_modules/@mui/x-data-grid/esm/hooks/features/columns/gridColumnsUtils.js
var COLUMNS_DIMENSION_PROPERTIES = ["maxWidth", "minWidth", "width", "flex"];
var COLUMN_TYPES = getGridDefaultColumnTypes();
function computeFlexColumnsWidth({
  initialFreeSpace,
  totalFlexUnits,
  flexColumns
}) {
  const uniqueFlexColumns = new Set(flexColumns.map((col) => col.field));
  const flexColumnsLookup = {
    all: {},
    frozenFields: [],
    freeze: (field) => {
      const value = flexColumnsLookup.all[field];
      if (value && value.frozen !== true) {
        flexColumnsLookup.all[field].frozen = true;
        flexColumnsLookup.frozenFields.push(field);
      }
    }
  };
  function loopOverFlexItems() {
    if (flexColumnsLookup.frozenFields.length === uniqueFlexColumns.size) {
      return;
    }
    const violationsLookup = {
      min: {},
      max: {}
    };
    let remainingFreeSpace = initialFreeSpace;
    let flexUnits = totalFlexUnits;
    let totalViolation = 0;
    flexColumnsLookup.frozenFields.forEach((field) => {
      remainingFreeSpace -= flexColumnsLookup.all[field].computedWidth;
      flexUnits -= flexColumnsLookup.all[field].flex;
    });
    for (let i = 0; i < flexColumns.length; i += 1) {
      const column = flexColumns[i];
      if (flexColumnsLookup.all[column.field] && flexColumnsLookup.all[column.field].frozen === true) {
        continue;
      }
      const widthPerFlexUnit = remainingFreeSpace / flexUnits;
      let computedWidth = widthPerFlexUnit * column.flex;
      if (computedWidth < column.minWidth) {
        totalViolation += column.minWidth - computedWidth;
        computedWidth = column.minWidth;
        violationsLookup.min[column.field] = true;
      } else if (computedWidth > column.maxWidth) {
        totalViolation += column.maxWidth - computedWidth;
        computedWidth = column.maxWidth;
        violationsLookup.max[column.field] = true;
      }
      flexColumnsLookup.all[column.field] = {
        frozen: false,
        computedWidth,
        flex: column.flex
      };
    }
    if (totalViolation < 0) {
      Object.keys(violationsLookup.max).forEach((field) => {
        flexColumnsLookup.freeze(field);
      });
    } else if (totalViolation > 0) {
      Object.keys(violationsLookup.min).forEach((field) => {
        flexColumnsLookup.freeze(field);
      });
    } else {
      flexColumns.forEach(({
        field
      }) => {
        flexColumnsLookup.freeze(field);
      });
    }
    loopOverFlexItems();
  }
  loopOverFlexItems();
  return flexColumnsLookup.all;
}
var hydrateColumnsWidth = (rawState, dimensions) => {
  const columnsLookup = {};
  let totalFlexUnits = 0;
  let widthAllocatedBeforeFlex = 0;
  const flexColumns = [];
  rawState.orderedFields.forEach((columnField) => {
    let column = rawState.lookup[columnField];
    let computedWidth = 0;
    let isFlex = false;
    if (rawState.columnVisibilityModel[columnField] !== false) {
      if (column.flex && column.flex > 0) {
        totalFlexUnits += column.flex;
        isFlex = true;
      } else {
        computedWidth = clamp(column.width || GRID_STRING_COL_DEF.width, column.minWidth || GRID_STRING_COL_DEF.minWidth, column.maxWidth || GRID_STRING_COL_DEF.maxWidth);
      }
      widthAllocatedBeforeFlex += computedWidth;
    }
    if (column.computedWidth !== computedWidth) {
      column = _extends({}, column, {
        computedWidth
      });
    }
    if (isFlex) {
      flexColumns.push(column);
    }
    columnsLookup[columnField] = column;
  });
  const availableWidth = dimensions === void 0 ? 0 : dimensions.viewportOuterSize.width - (dimensions.hasScrollY ? dimensions.scrollbarSize : 0);
  const initialFreeSpace = Math.max(availableWidth - widthAllocatedBeforeFlex, 0);
  if (totalFlexUnits > 0 && availableWidth > 0) {
    const computedColumnWidths = computeFlexColumnsWidth({
      initialFreeSpace,
      totalFlexUnits,
      flexColumns
    });
    Object.keys(computedColumnWidths).forEach((field) => {
      columnsLookup[field] = _extends({}, columnsLookup[field], {
        computedWidth: computedColumnWidths[field].computedWidth
      });
    });
  }
  return _extends({}, rawState, {
    lookup: columnsLookup
  });
};
var applyInitialState = (columnsState, initialState) => {
  if (!initialState) {
    return columnsState;
  }
  const {
    orderedFields = [],
    dimensions = {}
  } = initialState;
  const columnsWithUpdatedDimensions = Object.keys(dimensions);
  if (columnsWithUpdatedDimensions.length === 0 && orderedFields.length === 0) {
    return columnsState;
  }
  const orderedFieldsLookup = {};
  const cleanOrderedFields = [];
  for (let i = 0; i < orderedFields.length; i += 1) {
    const field = orderedFields[i];
    if (columnsState.lookup[field]) {
      orderedFieldsLookup[field] = true;
      cleanOrderedFields.push(field);
    }
  }
  const newOrderedFields = cleanOrderedFields.length === 0 ? columnsState.orderedFields : [...cleanOrderedFields, ...columnsState.orderedFields.filter((field) => !orderedFieldsLookup[field])];
  const newColumnLookup = _extends({}, columnsState.lookup);
  for (let i = 0; i < columnsWithUpdatedDimensions.length; i += 1) {
    const field = columnsWithUpdatedDimensions[i];
    const newColDef = _extends({}, newColumnLookup[field], {
      hasBeenResized: true
    });
    Object.entries(dimensions[field]).forEach(([key, value]) => {
      newColDef[key] = value === -1 ? Infinity : value;
    });
    newColumnLookup[field] = newColDef;
  }
  const newColumnsState = _extends({}, columnsState, {
    orderedFields: newOrderedFields,
    lookup: newColumnLookup
  });
  return newColumnsState;
};
function getDefaultColTypeDef(type) {
  let colDef = COLUMN_TYPES[DEFAULT_GRID_COL_TYPE_KEY];
  if (type && COLUMN_TYPES[type]) {
    colDef = COLUMN_TYPES[type];
  }
  return colDef;
}
var createColumnsState = ({
  apiRef,
  columnsToUpsert,
  initialState,
  columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef),
  keepOnlyColumnsToUpsert = false,
  updateInitialVisibilityModel = false
}) => {
  var _a, _b;
  const isInsideStateInitializer = !apiRef.current.state.columns;
  let columnsState;
  if (isInsideStateInitializer) {
    columnsState = {
      orderedFields: [],
      lookup: {},
      columnVisibilityModel,
      initialColumnVisibilityModel: columnVisibilityModel
    };
  } else {
    const currentState = gridColumnsStateSelector(apiRef);
    columnsState = {
      orderedFields: keepOnlyColumnsToUpsert ? [] : [...currentState.orderedFields],
      lookup: _extends({}, currentState.lookup),
      // Will be cleaned later if keepOnlyColumnsToUpsert=true
      columnVisibilityModel,
      initialColumnVisibilityModel: updateInitialVisibilityModel ? columnVisibilityModel : currentState.initialColumnVisibilityModel
    };
  }
  const columnsToKeep = {};
  if (keepOnlyColumnsToUpsert && !isInsideStateInitializer) {
    for (const key in columnsState.lookup) {
      if (Object.prototype.hasOwnProperty.call(columnsState.lookup, key)) {
        columnsToKeep[key] = false;
      }
    }
  }
  const columnsToUpsertLookup = {};
  columnsToUpsert.forEach((newColumn) => {
    const {
      field
    } = newColumn;
    columnsToUpsertLookup[field] = true;
    columnsToKeep[field] = true;
    let existingState = columnsState.lookup[field];
    if (existingState == null) {
      existingState = _extends({}, getDefaultColTypeDef(newColumn.type), {
        field,
        hasBeenResized: false
      });
      columnsState.orderedFields.push(field);
    } else if (keepOnlyColumnsToUpsert) {
      columnsState.orderedFields.push(field);
    }
    if (existingState && existingState.type !== newColumn.type) {
      existingState = _extends({}, getDefaultColTypeDef(newColumn.type), {
        field
      });
    }
    let hasBeenResized = existingState.hasBeenResized;
    COLUMNS_DIMENSION_PROPERTIES.forEach((key) => {
      if (newColumn[key] !== void 0) {
        hasBeenResized = true;
        if (newColumn[key] === -1) {
          newColumn[key] = Infinity;
        }
      }
    });
    columnsState.lookup[field] = resolveProps2(existingState, _extends({}, getDefaultColTypeDef(newColumn.type), newColumn, {
      hasBeenResized
    }));
  });
  if (keepOnlyColumnsToUpsert && !isInsideStateInitializer) {
    Object.keys(columnsState.lookup).forEach((field) => {
      if (!columnsToKeep[field]) {
        delete columnsState.lookup[field];
      }
    });
  }
  const columnsStateWithPreProcessing = apiRef.current.unstable_applyPipeProcessors("hydrateColumns", columnsState);
  const columnsStateWithPortableColumns = applyInitialState(columnsStateWithPreProcessing, initialState);
  return hydrateColumnsWidth(columnsStateWithPortableColumns, ((_b = (_a = apiRef.current).getRootDimensions) == null ? void 0 : _b.call(_a)) ?? void 0);
};
function getTotalHeaderHeight(apiRef, props) {
  if (props.listView) {
    return 0;
  }
  const densityFactor = gridDensityFactorSelector(apiRef);
  const maxDepth = gridColumnGroupsHeaderMaxDepthSelector(apiRef);
  const isHeaderFilteringEnabled = gridHeaderFilteringEnabledSelector(apiRef);
  const columnHeadersHeight = Math.floor(props.columnHeaderHeight * densityFactor);
  const columnGroupHeadersHeight = Math.floor((props.columnGroupHeaderHeight ?? props.columnHeaderHeight) * densityFactor);
  const filterHeadersHeight = isHeaderFilteringEnabled ? Math.floor((props.headerFilterHeight ?? props.columnHeaderHeight) * densityFactor) : 0;
  return columnHeadersHeight + columnGroupHeadersHeight * maxDepth + filterHeadersHeight;
}

// node_modules/@mui/x-data-grid/esm/components/GridScrollArea.js
var import_jsx_runtime35 = __toESM(require_jsx_runtime(), 1);
var CLIFF = 1;
var SLOP = 1.5;
var useUtilityClasses9 = (ownerState) => {
  const {
    scrollDirection,
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["scrollArea", `scrollArea--${scrollDirection}`]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var GridScrollAreaRawRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "ScrollArea",
  overridesResolver: (props, styles) => [{
    [`&.${gridClasses2["scrollArea--left"]}`]: styles["scrollArea--left"]
  }, {
    [`&.${gridClasses2["scrollArea--right"]}`]: styles["scrollArea--right"]
  }, {
    [`&.${gridClasses2["scrollArea--up"]}`]: styles["scrollArea--up"]
  }, {
    [`&.${gridClasses2["scrollArea--down"]}`]: styles["scrollArea--down"]
  }, styles.scrollArea]
})(() => ({
  position: "absolute",
  zIndex: 101,
  // Horizontal scroll areas
  [`&.${gridClasses2["scrollArea--left"]}`]: {
    top: 0,
    left: 0,
    width: 20,
    bottom: 0
  },
  [`&.${gridClasses2["scrollArea--right"]}`]: {
    top: 0,
    right: 0,
    width: 20,
    bottom: 0
  },
  // Vertical scroll areas
  [`&.${gridClasses2["scrollArea--up"]}`]: {
    top: 0,
    left: 0,
    right: 0,
    height: 20
  },
  [`&.${gridClasses2["scrollArea--down"]}`]: {
    bottom: 0,
    left: 0,
    right: 0,
    height: 20
  }
}));
var offsetSelector = createSelector3(gridDimensionsSelector, (dimensions, direction) => {
  if (direction === "left") {
    return dimensions.leftPinnedWidth;
  }
  if (direction === "right") {
    return dimensions.rightPinnedWidth + (dimensions.hasScrollX ? dimensions.scrollbarSize : 0);
  }
  return 0;
});
function GridScrollAreaWrapper(props) {
  const apiRef = useGridApiContext();
  const [dragDirection, setDragDirection] = React63.useState("none");
  useGridEvent(apiRef, "columnHeaderDragStart", () => setDragDirection("horizontal"));
  useGridEvent(apiRef, "columnHeaderDragEnd", () => setDragDirection("none"));
  useGridEvent(apiRef, "rowDragStart", () => setDragDirection("vertical"));
  useGridEvent(apiRef, "rowDragEnd", () => setDragDirection("none"));
  if (dragDirection === "none") {
    return null;
  }
  if (dragDirection === "horizontal") {
    return (0, import_jsx_runtime35.jsx)(GridHorizontalScrollAreaContent, _extends({}, props));
  }
  return (0, import_jsx_runtime35.jsx)(GridVerticalScrollAreaContent, _extends({}, props));
}
function GridHorizontalScrollAreaContent(props) {
  const {
    scrollDirection,
    scrollPosition
  } = props;
  const rootRef = React63.useRef(null);
  const apiRef = useGridApiContext();
  const timeout = useTimeout();
  const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);
  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);
  const sideOffset = useGridSelector(apiRef, offsetSelector, scrollDirection);
  const getCanScrollMore = () => {
    const dimensions = gridDimensionsSelector(apiRef);
    if (scrollDirection === "left") {
      return scrollPosition.current.left > 0;
    }
    if (scrollDirection === "right") {
      const maxScrollLeft = columnsTotalWidth - dimensions.viewportInnerSize.width;
      return scrollPosition.current.left < maxScrollLeft;
    }
    return false;
  };
  const rootProps = useGridRootProps();
  const totalHeaderHeight = getTotalHeaderHeight(apiRef, rootProps);
  const headerHeight = Math.floor(rootProps.columnHeaderHeight * densityFactor);
  const style4 = _extends({
    height: headerHeight,
    top: totalHeaderHeight - headerHeight
  }, scrollDirection === "left" ? {
    left: sideOffset
  } : {}, scrollDirection === "right" ? {
    right: sideOffset
  } : {});
  const handleDragOver = useEventCallback_default((event) => {
    let offset;
    event.preventDefault();
    if (scrollDirection === "left") {
      offset = event.clientX - rootRef.current.getBoundingClientRect().right;
    } else if (scrollDirection === "right") {
      offset = Math.max(1, event.clientX - rootRef.current.getBoundingClientRect().left);
    } else {
      throw new Error("MUI X: Wrong drag direction");
    }
    offset = (offset - CLIFF) * SLOP + CLIFF;
    timeout.start(0, () => {
      apiRef.current.scroll({
        left: scrollPosition.current.left + offset,
        top: scrollPosition.current.top
      });
    });
  });
  return (0, import_jsx_runtime35.jsx)(GridScrollAreaContent, _extends({}, props, {
    ref: rootRef,
    getCanScrollMore,
    style: style4,
    handleDragOver
  }));
}
function GridVerticalScrollAreaContent(props) {
  const {
    scrollDirection,
    scrollPosition
  } = props;
  const rootRef = React63.useRef(null);
  const apiRef = useGridApiContext();
  const timeout = useTimeout();
  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);
  const getCanScrollMore = () => {
    const dimensions = gridDimensionsSelector(apiRef);
    if (scrollDirection === "up") {
      return scrollPosition.current.top > 0;
    }
    if (scrollDirection === "down") {
      const totalRowsHeight = rowsMeta.currentPageTotalHeight || 0;
      const maxScrollTop = totalRowsHeight - dimensions.viewportInnerSize.height - (dimensions.hasScrollX ? dimensions.scrollbarSize : 0);
      return scrollPosition.current.top < maxScrollTop;
    }
    return false;
  };
  const rootProps = useGridRootProps();
  const totalHeaderHeight = getTotalHeaderHeight(apiRef, rootProps);
  const style4 = {
    top: scrollDirection === "up" ? totalHeaderHeight : void 0,
    bottom: scrollDirection === "down" ? 0 : void 0
  };
  const handleDragOver = useEventCallback_default((event) => {
    let offset;
    event.preventDefault();
    if (scrollDirection === "up") {
      offset = event.clientY - rootRef.current.getBoundingClientRect().bottom;
    } else if (scrollDirection === "down") {
      offset = Math.max(1, event.clientY - rootRef.current.getBoundingClientRect().top);
    } else {
      throw new Error("MUI X: Wrong drag direction");
    }
    offset = (offset - CLIFF) * SLOP + CLIFF;
    timeout.start(0, () => {
      apiRef.current.scroll({
        left: scrollPosition.current.left,
        top: scrollPosition.current.top + offset
      });
    });
  });
  return (0, import_jsx_runtime35.jsx)(GridScrollAreaContent, _extends({}, props, {
    ref: rootRef,
    getCanScrollMore,
    style: style4,
    handleDragOver
  }));
}
var GridScrollAreaContent = forwardRef2(function GridScrollAreaContent2(props, ref) {
  const {
    scrollDirection,
    getCanScrollMore,
    style: style4,
    handleDragOver
  } = props;
  const apiRef = useGridApiContext();
  const [canScrollMore, setCanScrollMore] = React63.useState(getCanScrollMore);
  const rootProps = useGridRootProps();
  const ownerState = _extends({}, rootProps, {
    scrollDirection
  });
  const classes2 = useUtilityClasses9(ownerState);
  const handleScrolling = () => {
    setCanScrollMore(getCanScrollMore);
  };
  useGridEvent(apiRef, "scrollPositionChange", handleScrolling);
  if (!canScrollMore) {
    return null;
  }
  return (0, import_jsx_runtime35.jsx)(GridScrollAreaRawRoot, {
    ref,
    className: classes2.root,
    ownerState,
    onDragOver: handleDragOver,
    style: style4
  });
});
if (true) GridScrollAreaContent.displayName = "GridScrollAreaContent";
var GridScrollArea = fastMemo(GridScrollAreaWrapper);

// node_modules/@mui/x-data-grid/esm/hooks/utils/useGridPrivateApiContext.js
var React64 = __toESM(require_react(), 1);
var GridPrivateApiContext = React64.createContext(void 0);
if (true) GridPrivateApiContext.displayName = "GridPrivateApiContext";
function useGridPrivateApiContext() {
  const privateApiRef = React64.useContext(GridPrivateApiContext);
  if (privateApiRef === void 0) {
    throw new Error(["MUI X: Could not find the Data Grid private context.", "It looks like you rendered your component outside of a DataGrid, DataGridPro or DataGridPremium parent component.", "This can also happen if you are bundling multiple versions of the Data Grid."].join("\n"));
  }
  return privateApiRef;
}

// node_modules/@mui/x-data-grid/esm/hooks/features/overlays/useGridOverlays.js
init_extends();
var React71 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/node_modules/@mui/x-internals/esm/useRunOnce/useRunOnce.js
var React65 = __toESM(require_react(), 1);
var noop2 = () => {
};
var useRunOnce = (condition, effect) => {
  const didRun = React65.useRef(false);
  useEnhancedEffect_default(() => {
    if (didRun.current || !condition) {
      return noop2;
    }
    didRun.current = true;
    return effect();
  }, [didRun.current || condition]);
};

// node_modules/@mui/x-data-grid/esm/hooks/utils/useGridApiMethod.js
var React66 = __toESM(require_react(), 1);
function useGridApiMethod(privateApiRef, apiMethods, visibility2) {
  const isFirstRender = React66.useRef(true);
  useEnhancedEffect_default(() => {
    isFirstRender.current = false;
    privateApiRef.current.register(visibility2, apiMethods);
  }, [privateApiRef, visibility2, apiMethods]);
  if (isFirstRender.current) {
    privateApiRef.current.register(visibility2, apiMethods);
  }
}

// node_modules/@mui/x-data-grid/esm/hooks/utils/useGridLogger.js
var React67 = __toESM(require_react(), 1);
function useGridLogger(privateApiRef, name) {
  const logger = React67.useRef(null);
  if (logger.current) {
    return logger.current;
  }
  const newLogger = privateApiRef.current.getLogger(name);
  logger.current = newLogger;
  return newLogger;
}

// node_modules/@mui/x-data-grid/esm/hooks/utils/useGridNativeEventListener.js
var useGridNativeEventListener = (apiRef, ref, eventName, handler, options) => {
  const logger = useGridLogger(apiRef, "useNativeEventListener");
  useGridEventPriority(apiRef, "rootMount", () => {
    const targetElement = ref();
    if (!targetElement || !eventName) {
      return void 0;
    }
    logger.debug(`Binding native ${eventName} event`);
    targetElement.addEventListener(eventName, handler, options);
    return () => {
      logger.debug(`Clearing native ${eventName} event`);
      targetElement.removeEventListener(eventName, handler, options);
    };
  });
};

// node_modules/@mui/x-data-grid/node_modules/@mui/x-internals/esm/useFirstRender/useFirstRender.js
var React68 = __toESM(require_react(), 1);
function useFirstRender(callback) {
  const isFirstRender = React68.useRef(true);
  if (isFirstRender.current) {
    isFirstRender.current = false;
    callback();
  }
}

// node_modules/@mui/x-data-grid/esm/hooks/utils/useRunOncePerLoop.js
var React69 = __toESM(require_react(), 1);
function useRunOncePerLoop(callback, nextFrame = false) {
  const scheduledRef = React69.useRef(false);
  const schedule = React69.useCallback((...args) => {
    if (scheduledRef.current) {
      return;
    }
    scheduledRef.current = true;
    const runner = () => {
      scheduledRef.current = false;
      callback(...args);
    };
    if (nextFrame) {
      if (typeof requestAnimationFrame === "function") {
        requestAnimationFrame(runner);
      }
      return;
    }
    if (typeof queueMicrotask === "function") {
      queueMicrotask(runner);
    } else {
      Promise.resolve().then(runner);
    }
  }, [callback, nextFrame]);
  return schedule;
}

// node_modules/@mui/x-data-grid/esm/components/base/GridOverlays.js
init_extends();
var React70 = __toESM(require_react(), 1);
var import_prop_types34 = __toESM(require_prop_types(), 1);
var import_jsx_runtime36 = __toESM(require_jsx_runtime(), 1);
var GridOverlayWrapperRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "OverlayWrapper",
  shouldForwardProp: (prop) => prop !== "overlayType" && prop !== "loadingOverlayVariant" && prop !== "right"
})(({
  overlayType,
  loadingOverlayVariant,
  right: right2
}) => (
  // Skeleton overlay should flow with the scroll container and not be sticky
  loadingOverlayVariant !== "skeleton" ? {
    position: "sticky",
    // To stay in place while scrolling
    top: "var(--DataGrid-headersTotalHeight)",
    // TODO: take pinned rows into account
    left: 0,
    right: `${right2}px`,
    width: 0,
    // To stay above the content instead of shifting it down
    height: 0,
    // To stay above the content instead of shifting it down
    zIndex: overlayType === "loadingOverlay" ? 5 : 4
    // Should be above pinned columns and detail panel
  } : {}
));
var GridOverlayWrapperInner = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "OverlayWrapperInner",
  shouldForwardProp: (prop) => prop !== "overlayType" && prop !== "loadingOverlayVariant"
})({});
var useUtilityClasses10 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["overlayWrapper"],
    inner: ["overlayWrapperInner"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
function GridOverlayWrapper(props) {
  const apiRef = useGridApiContext();
  const rootProps = useGridRootProps();
  const dimensions = useGridSelector(apiRef, gridDimensionsSelector);
  let height2 = Math.max(dimensions.viewportOuterSize.height - dimensions.topContainerHeight - dimensions.bottomContainerHeight - (dimensions.hasScrollX ? dimensions.scrollbarSize : 0), 0);
  if (height2 === 0) {
    height2 = minimalContentHeight;
  }
  const classes2 = useUtilityClasses10(_extends({}, props, {
    classes: rootProps.classes
  }));
  return (0, import_jsx_runtime36.jsx)(GridOverlayWrapperRoot, _extends({
    className: classes2.root
  }, props, {
    right: dimensions.columnsTotalWidth - dimensions.viewportOuterSize.width,
    children: (0, import_jsx_runtime36.jsx)(GridOverlayWrapperInner, _extends({
      className: classes2.inner,
      style: {
        height: height2,
        width: dimensions.viewportOuterSize.width
      }
    }, props))
  }));
}
true ? GridOverlayWrapper.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  loadingOverlayVariant: import_prop_types34.default.oneOf(["circular-progress", "linear-progress", "skeleton"]),
  overlayType: import_prop_types34.default.oneOf(["loadingOverlay", "noResultsOverlay", "noRowsOverlay", "noColumnsOverlay", "emptyPivotOverlay"])
} : void 0;

// node_modules/@mui/x-data-grid/esm/hooks/features/pivoting/gridPivotingSelectors.js
var gridPivotingStateSelector = createRootSelector(
  // @ts-ignore
  (state) => state.pivoting
);
var gridPivotActiveSelector = createSelector3(gridPivotingStateSelector, (pivoting) => pivoting == null ? void 0 : pivoting.active);
var emptyColumns = /* @__PURE__ */ new Map();
var gridPivotInitialColumnsSelector = createSelector3(gridPivotingStateSelector, (pivoting) => (pivoting == null ? void 0 : pivoting.initialColumns) || emptyColumns);

// node_modules/@mui/x-data-grid/esm/hooks/features/overlays/useGridOverlays.js
var import_jsx_runtime37 = __toESM(require_jsx_runtime(), 1);
var useGridOverlays = () => {
  var _a, _b;
  const apiRef = useGridApiContext();
  const rootProps = useGridRootProps();
  const totalRowCount = useGridSelector(apiRef, gridRowCountSelector);
  const visibleRowCount = useGridSelector(apiRef, gridExpandedRowCountSelector);
  const pinnedRowsCount = useGridSelector(apiRef, gridPinnedRowsCountSelector);
  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);
  const noRows = totalRowCount === 0 && pinnedRowsCount === 0;
  const loading = useGridSelector(apiRef, gridRowsLoadingSelector);
  const pivotActive = useGridSelector(apiRef, gridPivotActiveSelector);
  const showNoRowsOverlay = !loading && noRows;
  const showNoResultsOverlay = !loading && totalRowCount > 0 && visibleRowCount === 0;
  const showNoColumnsOverlay = !loading && visibleColumns.length === 0;
  const showEmptyPivotOverlay = showNoRowsOverlay && pivotActive;
  let overlayType = null;
  let loadingOverlayVariant = null;
  if (showNoRowsOverlay) {
    overlayType = "noRowsOverlay";
  }
  if (showNoColumnsOverlay) {
    overlayType = "noColumnsOverlay";
  }
  if (showEmptyPivotOverlay) {
    overlayType = "emptyPivotOverlay";
  }
  if (showNoResultsOverlay) {
    overlayType = "noResultsOverlay";
  }
  if (loading) {
    overlayType = "loadingOverlay";
    loadingOverlayVariant = ((_b = (_a = rootProps.slotProps) == null ? void 0 : _a.loadingOverlay) == null ? void 0 : _b[noRows ? "noRowsVariant" : "variant"]) ?? (noRows ? "skeleton" : "linear-progress");
  }
  const overlaysProps = {
    overlayType,
    loadingOverlayVariant
  };
  const getOverlay = () => {
    var _a2, _b2;
    if (!overlayType) {
      return null;
    }
    const Overlay = (_a2 = rootProps.slots) == null ? void 0 : _a2[overlayType];
    const overlayProps = (_b2 = rootProps.slotProps) == null ? void 0 : _b2[overlayType];
    return (0, import_jsx_runtime37.jsx)(GridOverlayWrapper, _extends({}, overlaysProps, {
      children: (0, import_jsx_runtime37.jsx)(Overlay, _extends({}, overlayProps))
    }));
  };
  if (true) getOverlay.displayName = "getOverlay";
  return {
    getOverlay,
    overlaysProps
  };
};

// node_modules/@mui/x-data-grid/esm/components/GridHeaders.js
init_extends();
var React72 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/esm/hooks/features/columnMenu/columnMenuSelector.js
var gridColumnMenuSelector = createRootSelector((state) => state.columnMenu);

// node_modules/@mui/x-data-grid/esm/components/GridHeaders.js
var import_jsx_runtime38 = __toESM(require_jsx_runtime(), 1);
function GridHeaders() {
  var _a;
  const apiRef = useGridPrivateApiContext();
  const rootProps = useGridRootProps();
  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);
  const filterColumnLookup = useGridSelector(apiRef, gridFilterActiveItemsLookupSelector);
  const sortColumnLookup = useGridSelector(apiRef, gridSortColumnLookupSelector);
  const columnHeaderTabIndexState = useGridSelector(apiRef, gridTabIndexColumnHeaderSelector);
  const hasNoCellTabIndexState = useGridSelector(apiRef, () => gridTabIndexCellSelector(apiRef) === null);
  const columnGroupHeaderTabIndexState = useGridSelector(apiRef, gridTabIndexColumnGroupHeaderSelector);
  const columnHeaderFocus = useGridSelector(apiRef, gridFocusColumnHeaderSelector);
  const columnGroupHeaderFocus = useGridSelector(apiRef, gridFocusColumnGroupHeaderSelector);
  const headerGroupingMaxDepth = useGridSelector(apiRef, gridColumnGroupsHeaderMaxDepthSelector);
  const columnMenuState = useGridSelector(apiRef, gridColumnMenuSelector);
  const columnVisibility = useGridSelector(apiRef, gridColumnVisibilityModelSelector);
  const columnGroupsHeaderStructure = useGridSelector(apiRef, gridColumnGroupsHeaderStructureSelector);
  const hasOtherElementInTabSequence = !(columnGroupHeaderTabIndexState === null && columnHeaderTabIndexState === null && hasNoCellTabIndexState);
  const columnsContainerRef = apiRef.current.columnHeadersContainerRef;
  return (0, import_jsx_runtime38.jsx)(rootProps.slots.columnHeaders, _extends({
    ref: columnsContainerRef,
    visibleColumns,
    filterColumnLookup,
    sortColumnLookup,
    columnHeaderTabIndexState,
    columnGroupHeaderTabIndexState,
    columnHeaderFocus,
    columnGroupHeaderFocus,
    headerGroupingMaxDepth,
    columnMenuState,
    columnVisibility,
    columnGroupsHeaderStructure,
    hasOtherElementInTabSequence
  }, (_a = rootProps.slotProps) == null ? void 0 : _a.columnHeaders));
}
var MemoizedGridHeaders = fastMemo(GridHeaders);

// node_modules/@mui/x-data-grid/esm/components/virtualization/GridMainContainer.js
init_extends();
var React73 = __toESM(require_react(), 1);
var import_jsx_runtime39 = __toESM(require_jsx_runtime(), 1);
var GridPanelAnchor = styled_default2("div")({
  position: "absolute",
  top: `var(--DataGrid-headersTotalHeight)`,
  left: 0,
  width: "calc(100% - (var(--DataGrid-hasScrollY) * var(--DataGrid-scrollbarSize)))"
});
var Element = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "Main",
  overridesResolver: (props, styles) => {
    const {
      ownerState,
      loadingOverlayVariant,
      overlayType
    } = props;
    const hideContent = loadingOverlayVariant === "skeleton" || overlayType === "noColumnsOverlay";
    return [styles.main, ownerState.hasPinnedRight && styles["main--hasPinnedRight"], hideContent && styles["main--hiddenContent"]];
  }
})({
  flexGrow: 1,
  position: "relative",
  overflow: "hidden",
  display: "flex",
  flexDirection: "column"
});
var GridMainContainer = forwardRef2((props, ref) => {
  var _a;
  const {
    ownerState
  } = props;
  const rootProps = useGridRootProps();
  const configuration2 = useGridConfiguration();
  const ariaAttributes = configuration2.hooks.useGridAriaAttributes();
  return (0, import_jsx_runtime39.jsxs)(Element, _extends({
    ownerState,
    className: props.className,
    tabIndex: -1
  }, ariaAttributes, (_a = rootProps.slotProps) == null ? void 0 : _a.main, {
    ref,
    children: [(0, import_jsx_runtime39.jsx)(GridPanelAnchor, {
      role: "presentation",
      "data-id": "gridPanelAnchor"
    }), props.children]
  }));
});
if (true) GridMainContainer.displayName = "GridMainContainer";

// node_modules/@mui/x-data-grid/esm/components/virtualization/GridTopContainer.js
init_extends();
var React74 = __toESM(require_react(), 1);
init_clsx();
var import_jsx_runtime40 = __toESM(require_jsx_runtime(), 1);
var useUtilityClasses11 = () => {
  const slots = {
    root: ["topContainer"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, {});
};
var Element2 = styled_default2("div")({
  position: "sticky",
  zIndex: 40,
  top: 0
});
function GridTopContainer(props) {
  const classes2 = useUtilityClasses11();
  return (0, import_jsx_runtime40.jsx)(Element2, _extends({}, props, {
    className: clsx_default(classes2.root, gridClasses2["container--top"]),
    role: "presentation"
  }));
}

// node_modules/@mui/x-data-grid/esm/components/virtualization/GridVirtualScrollerContent.js
init_extends();
var React75 = __toESM(require_react(), 1);
init_clsx();
var import_jsx_runtime41 = __toESM(require_jsx_runtime(), 1);
var useUtilityClasses12 = (props, overflowedContent) => {
  const {
    classes: classes2
  } = props;
  const slots = {
    root: ["virtualScrollerContent", overflowedContent && "virtualScrollerContent--overflowed"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var VirtualScrollerContentRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "VirtualScrollerContent",
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.virtualScrollerContent, ownerState.overflowedContent && styles["virtualScrollerContent--overflowed"]];
  }
})({});
var GridVirtualScrollerContent = forwardRef2(function GridVirtualScrollerContent2(props, ref) {
  var _a;
  const rootProps = useGridRootProps();
  const overflowedContent = !rootProps.autoHeight && ((_a = props.style) == null ? void 0 : _a.minHeight) === "auto";
  const classes2 = useUtilityClasses12(rootProps, overflowedContent);
  const ownerState = {
    classes: rootProps.classes,
    overflowedContent
  };
  return (0, import_jsx_runtime41.jsx)(VirtualScrollerContentRoot, _extends({}, props, {
    ownerState,
    className: clsx_default(classes2.root, props.className),
    ref
  }));
});
if (true) GridVirtualScrollerContent.displayName = "GridVirtualScrollerContent";

// node_modules/@mui/x-data-grid/esm/components/virtualization/GridVirtualScrollerFiller.js
var React76 = __toESM(require_react(), 1);
var import_jsx_runtime42 = __toESM(require_jsx_runtime(), 1);
var Filler = styled_default2("div")({
  display: "flex",
  flexDirection: "row",
  width: "var(--DataGrid-rowWidth)",
  boxSizing: "border-box"
});
var Pinned = styled_default2("div")({
  position: "sticky",
  height: "100%",
  boxSizing: "border-box",
  borderTop: "1px solid var(--rowBorderColor)",
  backgroundColor: vars.cell.background.pinned
});
var PinnedLeft = styled_default2(Pinned)({
  left: 0,
  borderRight: "1px solid var(--rowBorderColor)"
});
var PinnedRight = styled_default2(Pinned)({
  right: 0,
  borderLeft: "1px solid var(--rowBorderColor)"
});
var Main = styled_default2("div")({
  flexGrow: 1,
  borderTop: "1px solid var(--rowBorderColor)"
});
function GridVirtualScrollerFiller({
  rowsLength
}) {
  const apiRef = useGridApiContext();
  const {
    viewportOuterSize,
    minimumSize,
    hasScrollX,
    hasScrollY,
    scrollbarSize,
    leftPinnedWidth,
    rightPinnedWidth
  } = useGridSelector(apiRef, gridDimensionsSelector);
  const height2 = hasScrollX ? scrollbarSize : 0;
  const needsLastRowBorder = viewportOuterSize.height - minimumSize.height > 0;
  if (height2 === 0 && !needsLastRowBorder) {
    return null;
  }
  return (0, import_jsx_runtime42.jsxs)(Filler, {
    className: gridClasses2.filler,
    role: "presentation",
    style: {
      height: height2,
      "--rowBorderColor": rowsLength === 0 ? "transparent" : "var(--DataGrid-rowBorderColor)"
    },
    children: [leftPinnedWidth > 0 && (0, import_jsx_runtime42.jsx)(PinnedLeft, {
      className: gridClasses2["filler--pinnedLeft"],
      style: {
        width: leftPinnedWidth
      }
    }), (0, import_jsx_runtime42.jsx)(Main, {}), rightPinnedWidth > 0 && (0, import_jsx_runtime42.jsx)(PinnedRight, {
      className: gridClasses2["filler--pinnedRight"],
      style: {
        width: rightPinnedWidth + (hasScrollY ? scrollbarSize : 0)
      }
    })]
  });
}
var Memoized = fastMemo(GridVirtualScrollerFiller);

// node_modules/@mui/x-data-grid/esm/components/virtualization/GridVirtualScrollerRenderZone.js
init_extends();
init_objectWithoutPropertiesLoose();
var React77 = __toESM(require_react(), 1);
init_clsx();
var import_jsx_runtime43 = __toESM(require_jsx_runtime(), 1);
var _excluded38 = ["className"];
var useUtilityClasses13 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["virtualScrollerRenderZone"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var VirtualScrollerRenderZoneRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "VirtualScrollerRenderZone"
})({
  position: "absolute",
  display: "flex",
  // Prevents margin collapsing when using `getRowSpacing`
  flexDirection: "column"
});
var GridVirtualScrollerRenderZone = forwardRef2(function GridVirtualScrollerRenderZone2(props, ref) {
  const {
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded38);
  const apiRef = useGridPrivateApiContext();
  const rootProps = useGridRootProps();
  const classes2 = useUtilityClasses13(rootProps);
  const offsetTop = apiRef.current.virtualizer.api.useVirtualization().getters.getOffsetTop();
  return (0, import_jsx_runtime43.jsx)(VirtualScrollerRenderZoneRoot, _extends({
    className: clsx_default(classes2.root, className),
    ownerState: rootProps,
    style: {
      transform: `translate3d(0, ${offsetTop}px, 0)`
    }
  }, other, {
    ref
  }));
});
if (true) GridVirtualScrollerRenderZone.displayName = "GridVirtualScrollerRenderZone";

// node_modules/@mui/x-data-grid/esm/components/virtualization/GridVirtualScrollbar.js
var React87 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/esm/hooks/features/columnResize/columnResizeSelector.js
var gridColumnResizeSelector = createRootSelector((state) => state.columnResize);
var gridResizingColumnFieldSelector = createSelector3(gridColumnResizeSelector, (columnResize) => columnResize.resizingColumnField);

// node_modules/@mui/x-data-grid/esm/hooks/features/columnResize/gridColumnResizeApi.js
var DEFAULT_GRID_AUTOSIZE_OPTIONS = {
  includeHeaders: true,
  includeOutliers: false,
  outliersFactor: 1.5,
  expand: false,
  disableColumnVirtualization: true
};

// node_modules/@mui/x-data-grid/esm/hooks/features/editing/gridEditingSelectors.js
var gridEditRowsStateSelector = createRootSelector((state) => state.editRows);
var gridRowIsEditingSelector = createSelector3(gridEditRowsStateSelector, (editRows, {
  rowId,
  editMode
}) => editMode === GridEditModes.Row && Boolean(editRows[rowId]));
var gridEditCellStateSelector = createSelector3(gridEditRowsStateSelector, (editRows, {
  rowId,
  field
}) => {
  var _a;
  return ((_a = editRows[rowId]) == null ? void 0 : _a[field]) ?? null;
});

// node_modules/@mui/x-data-grid/esm/hooks/features/preferencesPanel/gridPreferencePanelSelector.js
var gridPreferencePanelStateSelector = createRootSelector((state) => state.preferencePanel);
var gridPreferencePanelSelectorWithLabel = createSelector3(gridPreferencePanelStateSelector, (panel, labelId) => {
  if (panel.open && panel.labelId === labelId) {
    return true;
  }
  return false;
});

// node_modules/@mui/x-data-grid/esm/hooks/features/preferencesPanel/gridPreferencePanelsValue.js
var GridPreferencePanelsValue = function(GridPreferencePanelsValue2) {
  GridPreferencePanelsValue2["filters"] = "filters";
  GridPreferencePanelsValue2["columns"] = "columns";
  GridPreferencePanelsValue2["aiAssistant"] = "aiAssistant";
  return GridPreferencePanelsValue2;
}(GridPreferencePanelsValue || {});

// node_modules/@mui/x-virtualizer/node_modules/@mui/utils/esm/useLazyRef/useLazyRef.js
var React78 = __toESM(require_react(), 1);
var UNINITIALIZED2 = {};
function useLazyRef2(init, initArg) {
  const ref = React78.useRef(UNINITIALIZED2);
  if (ref.current === UNINITIALIZED2) {
    ref.current = init(initArg);
  }
  return ref;
}

// node_modules/@mui/x-virtualizer/node_modules/@mui/x-internals/esm/store/createSelector.js
var reselectCreateSelector2 = createSelectorCreator({
  memoize: lruMemoize,
  memoizeOptions: {
    maxSize: 1,
    equalityCheck: Object.is
  }
});
var createSelector4 = (a, b, c, d, e, f, ...other) => {
  if (other.length > 0) {
    throw new Error("Unsupported number of selectors");
  }
  let selector;
  if (a && b && c && d && e && f) {
    selector = (state, a1, a2, a3) => {
      const va = a(state, a1, a2, a3);
      const vb = b(state, a1, a2, a3);
      const vc = c(state, a1, a2, a3);
      const vd = d(state, a1, a2, a3);
      const ve = e(state, a1, a2, a3);
      return f(va, vb, vc, vd, ve, a1, a2, a3);
    };
  } else if (a && b && c && d && e) {
    selector = (state, a1, a2, a3) => {
      const va = a(state, a1, a2, a3);
      const vb = b(state, a1, a2, a3);
      const vc = c(state, a1, a2, a3);
      const vd = d(state, a1, a2, a3);
      return e(va, vb, vc, vd, a1, a2, a3);
    };
  } else if (a && b && c && d) {
    selector = (state, a1, a2, a3) => {
      const va = a(state, a1, a2, a3);
      const vb = b(state, a1, a2, a3);
      const vc = c(state, a1, a2, a3);
      return d(va, vb, vc, a1, a2, a3);
    };
  } else if (a && b && c) {
    selector = (state, a1, a2, a3) => {
      const va = a(state, a1, a2, a3);
      const vb = b(state, a1, a2, a3);
      return c(va, vb, a1, a2, a3);
    };
  } else if (a && b) {
    selector = (state, a1, a2, a3) => {
      const va = a(state, a1, a2, a3);
      return b(va, a1, a2, a3);
    };
  } else if (a) {
    selector = a;
  } else {
    throw new Error("Missing arguments");
  }
  return selector;
};
var createSelectorMemoized3 = (...inputs) => {
  const cache = /* @__PURE__ */ new WeakMap();
  let nextCacheId = 1;
  const combiner = inputs[inputs.length - 1];
  const nSelectors = inputs.length - 1 || 1;
  const argsLength = Math.max(combiner.length - nSelectors, 0);
  if (argsLength > 3) {
    throw new Error("Unsupported number of arguments");
  }
  const selector = (state, a1, a2, a3) => {
    let cacheKey = state.__cacheKey__;
    if (!cacheKey) {
      cacheKey = {
        id: nextCacheId
      };
      state.__cacheKey__ = cacheKey;
      nextCacheId += 1;
    }
    let fn = cache.get(cacheKey);
    if (!fn) {
      const selectors6 = inputs.length === 1 ? [(x) => x, combiner] : inputs;
      let reselectArgs = inputs;
      const selectorArgs = [void 0, void 0, void 0];
      switch (argsLength) {
        case 0:
          break;
        case 1: {
          reselectArgs = [...selectors6.slice(0, -1), () => selectorArgs[0], combiner];
          break;
        }
        case 2: {
          reselectArgs = [...selectors6.slice(0, -1), () => selectorArgs[0], () => selectorArgs[1], combiner];
          break;
        }
        case 3: {
          reselectArgs = [...selectors6.slice(0, -1), () => selectorArgs[0], () => selectorArgs[1], () => selectorArgs[2], combiner];
          break;
        }
        default:
          throw new Error("Unsupported number of arguments");
      }
      fn = reselectCreateSelector2(...reselectArgs);
      fn.selectorArgs = selectorArgs;
      cache.set(cacheKey, fn);
    }
    switch (argsLength) {
      case 3:
        fn.selectorArgs[2] = a3;
      case 2:
        fn.selectorArgs[1] = a2;
      case 1:
        fn.selectorArgs[0] = a1;
      case 0:
      default:
    }
    switch (argsLength) {
      case 0:
        return fn(state);
      case 1:
        return fn(state, a1);
      case 2:
        return fn(state, a1, a2);
      case 3:
        return fn(state, a1, a2, a3);
      default:
        throw new Error("unreachable");
    }
  };
  return selector;
};

// node_modules/@mui/x-virtualizer/node_modules/@mui/x-internals/esm/store/useStore.js
var import_with_selector2 = __toESM(require_with_selector(), 1);
function useStore2(store, selector, a1, a2, a3) {
  const selectorWithArgs = (state) => selector(state, a1, a2, a3);
  return (0, import_with_selector2.useSyncExternalStoreWithSelector)(store.subscribe, store.getSnapshot, store.getSnapshot, selectorWithArgs);
}

// node_modules/@mui/x-virtualizer/node_modules/@mui/utils/esm/useOnMount/useOnMount.js
var React79 = __toESM(require_react(), 1);
var EMPTY3 = [];
function useOnMount2(fn) {
  React79.useEffect(fn, EMPTY3);
}

// node_modules/@mui/x-virtualizer/node_modules/@mui/x-internals/esm/store/useStoreEffect.js
var noop3 = () => {
};
function useStoreEffect2(store, selector, effect) {
  const instance = useLazyRef2(initialize2, {
    store,
    selector
  }).current;
  instance.effect = effect;
  useOnMount2(instance.onMount);
}
function initialize2(params) {
  const {
    store,
    selector
  } = params;
  let previousState = selector(store.state);
  const instance = {
    effect: noop3,
    dispose: null,
    // We want a single subscription done right away and cleared on unmount only,
    // but React triggers `useOnMount` multiple times in dev, so we need to manage
    // the subscription anyway.
    subscribe: () => {
      instance.dispose ?? (instance.dispose = store.subscribe((state) => {
        const nextState = selector(state);
        instance.effect(previousState, nextState);
        previousState = nextState;
      }));
    },
    onMount: () => {
      instance.subscribe();
      return () => {
        var _a;
        (_a = instance.dispose) == null ? void 0 : _a.call(instance);
        instance.dispose = null;
      };
    }
  };
  instance.subscribe();
  return instance;
}

// node_modules/@mui/x-virtualizer/node_modules/@mui/x-internals/esm/store/Store.js
init_extends();
var Store2 = class _Store {
  constructor(state) {
    __publicField(this, "subscribe", (fn) => {
      this.listeners.add(fn);
      return () => {
        this.listeners.delete(fn);
      };
    });
    __publicField(this, "getSnapshot", () => {
      return this.state;
    });
    this.state = state;
    this.listeners = /* @__PURE__ */ new Set();
    this.updateTick = 0;
  }
  // HACK: `any` fixes adding listeners that accept partial state.
  // Internal state to handle recursive `setState()` calls
  static create(state) {
    return new _Store(state);
  }
  setState(newState) {
    this.state = newState;
    this.updateTick += 1;
    const currentTick = this.updateTick;
    const it = this.listeners.values();
    let result;
    while (result = it.next(), !result.done) {
      if (currentTick !== this.updateTick) {
        return;
      }
      const listener = result.value;
      listener(newState);
    }
  }
  update(changes) {
    for (const key in changes) {
      if (!Object.is(this.state[key], changes[key])) {
        this.setState(_extends({}, this.state, changes));
        return;
      }
    }
  }
  set(key, value) {
    if (!Object.is(this.state[key], value)) {
      this.setState(_extends({}, this.state, {
        [key]: value
      }));
    }
  }
};

// node_modules/@mui/x-virtualizer/node_modules/@mui/utils/esm/useEventCallback/useEventCallback.js
var React81 = __toESM(require_react(), 1);

// node_modules/@mui/x-virtualizer/node_modules/@mui/utils/esm/useEnhancedEffect/useEnhancedEffect.js
var React80 = __toESM(require_react(), 1);
var useEnhancedEffect3 = typeof window !== "undefined" ? React80.useLayoutEffect : React80.useEffect;
var useEnhancedEffect_default3 = useEnhancedEffect3;

// node_modules/@mui/x-virtualizer/node_modules/@mui/utils/esm/useEventCallback/useEventCallback.js
function useEventCallback2(fn) {
  const ref = React81.useRef(fn);
  useEnhancedEffect_default3(() => {
    ref.current = fn;
  });
  return React81.useRef((...args) => (
    // @ts-expect-error hide `this`
    (0, ref.current)(...args)
  )).current;
}
var useEventCallback_default2 = useEventCallback2;

// node_modules/@mui/x-virtualizer/esm/features/colspan.js
var selectors = {};
var Colspan = {
  initialize: initializeState,
  use: useColspan,
  selectors
};
function initializeState(_params) {
  return {
    colspanMap: /* @__PURE__ */ new Map()
  };
}
function useColspan(store, params, api) {
  var _a;
  const getColspan = (_a = params.colspan) == null ? void 0 : _a.getColspan;
  const resetColSpan = () => {
    store.state.colspanMap = /* @__PURE__ */ new Map();
  };
  const getCellColSpanInfo = (rowId, columnIndex) => {
    var _a2;
    return (_a2 = store.state.colspanMap.get(rowId)) == null ? void 0 : _a2[columnIndex];
  };
  const calculateColSpan = useEventCallback_default2(getColspan ? (rowId, minFirstColumn, maxLastColumn, columns) => {
    for (let i = minFirstColumn; i < maxLastColumn; i += 1) {
      const cellProps = calculateCellColSpan(store.state.colspanMap, i, rowId, minFirstColumn, maxLastColumn, columns, getColspan);
      if (cellProps.colSpan > 1) {
        i += cellProps.colSpan - 1;
      }
    }
  } : () => {
  });
  api.calculateColSpan = calculateColSpan;
  return {
    resetColSpan,
    getCellColSpanInfo,
    calculateColSpan
  };
}
function calculateCellColSpan(lookup, columnIndex, rowId, minFirstColumnIndex, maxLastColumnIndex, columns, getColspan) {
  const columnsLength = columns.length;
  const column = columns[columnIndex];
  const colSpan = getColspan(rowId, column, columnIndex);
  if (!colSpan || colSpan === 1) {
    setCellColSpanInfo(lookup, rowId, columnIndex, {
      spannedByColSpan: false,
      cellProps: {
        colSpan: 1,
        width: column.computedWidth
      }
    });
    return {
      colSpan: 1
    };
  }
  let width2 = column.computedWidth;
  for (let j = 1; j < colSpan; j += 1) {
    const nextColumnIndex = columnIndex + j;
    if (nextColumnIndex >= minFirstColumnIndex && nextColumnIndex < maxLastColumnIndex) {
      const nextColumn = columns[nextColumnIndex];
      width2 += nextColumn.computedWidth;
      setCellColSpanInfo(lookup, rowId, columnIndex + j, {
        spannedByColSpan: true,
        rightVisibleCellIndex: Math.min(columnIndex + colSpan, columnsLength - 1),
        leftVisibleCellIndex: columnIndex
      });
    }
    setCellColSpanInfo(lookup, rowId, columnIndex, {
      spannedByColSpan: false,
      cellProps: {
        colSpan,
        width: width2
      }
    });
  }
  return {
    colSpan
  };
}
function setCellColSpanInfo(colspanMap, rowId, columnIndex, cellColSpanInfo) {
  let columnInfo = colspanMap.get(rowId);
  if (!columnInfo) {
    columnInfo = {};
    colspanMap.set(rowId, columnInfo);
  }
  columnInfo[columnIndex] = cellColSpanInfo;
}

// node_modules/@mui/x-virtualizer/esm/features/dimensions.js
init_extends();
var React82 = __toESM(require_react(), 1);

// node_modules/@mui/x-virtualizer/node_modules/@mui/utils/esm/ownerDocument/ownerDocument.js
function ownerDocument(node) {
  return node && node.ownerDocument || document;
}

// node_modules/@mui/x-virtualizer/node_modules/@mui/x-internals/esm/throttle/throttle.js
function throttle(func, wait = 166) {
  let timeout;
  let lastArgs;
  const later = () => {
    timeout = void 0;
    func(...lastArgs);
  };
  function throttled(...args) {
    lastArgs = args;
    if (timeout === void 0) {
      timeout = setTimeout(later, wait);
    }
  }
  throttled.clear = () => {
    clearTimeout(timeout);
    timeout = void 0;
  };
  return throttled;
}

// node_modules/@mui/x-virtualizer/node_modules/@mui/x-internals/esm/isDeepEqual/isDeepEqual.js
function isDeepEqual(a, b) {
  if (a === b) {
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    if (a.constructor !== b.constructor) {
      return false;
    }
    if (Array.isArray(a)) {
      const length2 = a.length;
      if (length2 !== b.length) {
        return false;
      }
      for (let i = 0; i < length2; i += 1) {
        if (!isDeepEqual(a[i], b[i])) {
          return false;
        }
      }
      return true;
    }
    if (a instanceof Map && b instanceof Map) {
      if (a.size !== b.size) {
        return false;
      }
      const entriesA = Array.from(a.entries());
      for (let i = 0; i < entriesA.length; i += 1) {
        if (!b.has(entriesA[i][0])) {
          return false;
        }
      }
      for (let i = 0; i < entriesA.length; i += 1) {
        const entryA = entriesA[i];
        if (!isDeepEqual(entryA[1], b.get(entryA[0]))) {
          return false;
        }
      }
      return true;
    }
    if (a instanceof Set && b instanceof Set) {
      if (a.size !== b.size) {
        return false;
      }
      const entries = Array.from(a.entries());
      for (let i = 0; i < entries.length; i += 1) {
        if (!b.has(entries[i][0])) {
          return false;
        }
      }
      return true;
    }
    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
      const length2 = a.length;
      if (length2 !== b.length) {
        return false;
      }
      for (let i = 0; i < length2; i += 1) {
        if (a[i] !== b[i]) {
          return false;
        }
      }
      return true;
    }
    if (a.constructor === RegExp) {
      return a.source === b.source && a.flags === b.flags;
    }
    if (a.valueOf !== Object.prototype.valueOf) {
      return a.valueOf() === b.valueOf();
    }
    if (a.toString !== Object.prototype.toString) {
      return a.toString() === b.toString();
    }
    const keys2 = Object.keys(a);
    const length = keys2.length;
    if (length !== Object.keys(b).length) {
      return false;
    }
    for (let i = 0; i < length; i += 1) {
      if (!Object.prototype.hasOwnProperty.call(b, keys2[i])) {
        return false;
      }
    }
    for (let i = 0; i < length; i += 1) {
      const key = keys2[i];
      if (!isDeepEqual(a[key], b[key])) {
        return false;
      }
    }
    return true;
  }
  return a !== a && b !== b;
}

// node_modules/@mui/x-virtualizer/node_modules/@mui/x-internals/esm/math/index.js
function roundToDecimalPlaces(value, decimals) {
  return Math.round(value * 10 ** decimals) / 10 ** decimals;
}

// node_modules/@mui/x-virtualizer/esm/models/core.js
var Size = {
  EMPTY: {
    width: 0,
    height: 0
  },
  equals: (a, b) => a.width === b.width && a.height === b.height
};
var PinnedRows = {
  EMPTY: {
    top: [],
    bottom: []
  }
};
var PinnedColumns = {
  EMPTY: {
    left: [],
    right: []
  }
};
var ScrollDirection = function(ScrollDirection2) {
  ScrollDirection2[ScrollDirection2["NONE"] = 0] = "NONE";
  ScrollDirection2[ScrollDirection2["UP"] = 1] = "UP";
  ScrollDirection2[ScrollDirection2["DOWN"] = 2] = "DOWN";
  ScrollDirection2[ScrollDirection2["LEFT"] = 3] = "LEFT";
  ScrollDirection2[ScrollDirection2["RIGHT"] = 4] = "RIGHT";
  return ScrollDirection2;
}({});
(function(_ScrollDirection) {
  function forDelta(dx, dy) {
    if (dx === 0 && dy === 0) {
      return ScrollDirection.NONE;
    }
    if (Math.abs(dy) >= Math.abs(dx)) {
      if (dy > 0) {
        return ScrollDirection.DOWN;
      } else {
        return ScrollDirection.UP;
      }
    } else {
      if (dx > 0) {
        return ScrollDirection.RIGHT;
      } else {
        return ScrollDirection.LEFT;
      }
    }
  }
  _ScrollDirection.forDelta = forDelta;
})(ScrollDirection || (ScrollDirection = {}));

// node_modules/@mui/x-virtualizer/esm/features/dimensions.js
var EMPTY_DIMENSIONS = {
  isReady: false,
  root: Size.EMPTY,
  viewportOuterSize: Size.EMPTY,
  viewportInnerSize: Size.EMPTY,
  contentSize: Size.EMPTY,
  minimumSize: Size.EMPTY,
  hasScrollX: false,
  hasScrollY: false,
  scrollbarSize: 0,
  rowWidth: 0,
  rowHeight: 0,
  columnsTotalWidth: 0,
  leftPinnedWidth: 0,
  rightPinnedWidth: 0,
  topContainerHeight: 0,
  bottomContainerHeight: 0
};
var selectors2 = {
  rootSize: (state) => state.rootSize,
  dimensions: (state) => state.dimensions,
  rowHeight: (state) => state.dimensions.rowHeight,
  contentHeight: (state) => state.dimensions.contentSize.height,
  rowsMeta: (state) => state.rowsMeta,
  columnPositions: createSelectorMemoized3((_, columns) => {
    const positions = [];
    let currentPosition = 0;
    for (let i = 0; i < columns.length; i += 1) {
      positions.push(currentPosition);
      currentPosition += columns[i].computedWidth;
    }
    return positions;
  }),
  needsHorizontalScrollbar: (state) => state.dimensions.viewportOuterSize.width > 0 && state.dimensions.columnsTotalWidth > state.dimensions.viewportOuterSize.width
};
var Dimensions = {
  initialize: initializeState2,
  use: useDimensions,
  selectors: selectors2
};
function initializeState2(params) {
  const dimensions = _extends({}, EMPTY_DIMENSIONS, params.dimensions);
  const {
    rowCount
  } = params;
  const {
    rowHeight
  } = dimensions;
  const rowsMeta = {
    currentPageTotalHeight: rowCount * rowHeight,
    positions: Array.from({
      length: rowCount
    }, (_, i) => i * rowHeight),
    pinnedTopRowsTotalHeight: 0,
    pinnedBottomRowsTotalHeight: 0
  };
  const rowHeights = /* @__PURE__ */ new Map();
  return {
    rootSize: Size.EMPTY,
    dimensions,
    rowsMeta,
    rowHeights
  };
}
function useDimensions(store, params, _api) {
  const isFirstSizing = React82.useRef(true);
  const {
    refs,
    dimensions: {
      rowHeight,
      columnsTotalWidth,
      leftPinnedWidth,
      rightPinnedWidth,
      topPinnedHeight,
      bottomPinnedHeight
    },
    onResize
  } = params;
  const containerNode = refs.container.current;
  const updateDimensions = React82.useCallback(() => {
    if (isFirstSizing.current) {
      return;
    }
    const rootSize = selectors2.rootSize(store.state);
    const rowsMeta2 = selectors2.rowsMeta(store.state);
    const scrollbarSize = measureScrollbarSize(containerNode, params.dimensions.scrollbarSize);
    const topContainerHeight = topPinnedHeight + rowsMeta2.pinnedTopRowsTotalHeight;
    const bottomContainerHeight = bottomPinnedHeight + rowsMeta2.pinnedBottomRowsTotalHeight;
    const contentSize = {
      width: columnsTotalWidth,
      height: roundToDecimalPlaces(rowsMeta2.currentPageTotalHeight, 1)
    };
    let viewportOuterSize;
    let viewportInnerSize;
    let hasScrollX = false;
    let hasScrollY = false;
    if (params.autoHeight) {
      hasScrollY = false;
      hasScrollX = Math.round(columnsTotalWidth) > Math.round(rootSize.width);
      viewportOuterSize = {
        width: rootSize.width,
        height: topContainerHeight + bottomContainerHeight + contentSize.height
      };
      viewportInnerSize = {
        width: Math.max(0, viewportOuterSize.width - (hasScrollY ? scrollbarSize : 0)),
        height: Math.max(0, viewportOuterSize.height - (hasScrollX ? scrollbarSize : 0))
      };
    } else {
      viewportOuterSize = {
        width: rootSize.width,
        height: rootSize.height
      };
      viewportInnerSize = {
        width: Math.max(0, viewportOuterSize.width),
        height: Math.max(0, viewportOuterSize.height - topContainerHeight - bottomContainerHeight)
      };
      const content = contentSize;
      const container = viewportInnerSize;
      const hasScrollXIfNoYScrollBar = content.width > container.width;
      const hasScrollYIfNoXScrollBar = content.height > container.height;
      if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {
        hasScrollY = hasScrollYIfNoXScrollBar;
        hasScrollX = content.width + (hasScrollY ? scrollbarSize : 0) > container.width;
        if (hasScrollX) {
          hasScrollY = content.height + scrollbarSize > container.height;
        }
      }
      if (hasScrollY) {
        viewportInnerSize.width -= scrollbarSize;
      }
      if (hasScrollX) {
        viewportInnerSize.height -= scrollbarSize;
      }
    }
    const rowWidth = Math.max(viewportOuterSize.width, columnsTotalWidth + (hasScrollY ? scrollbarSize : 0));
    const minimumSize = {
      width: columnsTotalWidth,
      height: topContainerHeight + contentSize.height + bottomContainerHeight
    };
    const newDimensions = {
      isReady: true,
      root: rootSize,
      viewportOuterSize,
      viewportInnerSize,
      contentSize,
      minimumSize,
      hasScrollX,
      hasScrollY,
      scrollbarSize,
      rowWidth,
      rowHeight,
      columnsTotalWidth,
      leftPinnedWidth,
      rightPinnedWidth,
      topContainerHeight,
      bottomContainerHeight
    };
    const prevDimensions = store.state.dimensions;
    if (isDeepEqual(prevDimensions, newDimensions)) {
      return;
    }
    store.update({
      dimensions: newDimensions
    });
    onResize == null ? void 0 : onResize(newDimensions.root);
  }, [store, containerNode, params.dimensions.scrollbarSize, params.autoHeight, onResize, rowHeight, columnsTotalWidth, leftPinnedWidth, rightPinnedWidth, topPinnedHeight, bottomPinnedHeight]);
  const {
    resizeThrottleMs
  } = params;
  const updateDimensionCallback = useEventCallback_default2(updateDimensions);
  const debouncedUpdateDimensions = React82.useMemo(() => resizeThrottleMs > 0 ? throttle(updateDimensionCallback, resizeThrottleMs) : void 0, [resizeThrottleMs, updateDimensionCallback]);
  React82.useEffect(() => debouncedUpdateDimensions == null ? void 0 : debouncedUpdateDimensions.clear, [debouncedUpdateDimensions]);
  const setRootSize = useEventCallback_default2((rootSize) => {
    store.state.rootSize = rootSize;
    if (isFirstSizing.current || !debouncedUpdateDimensions) {
      isFirstSizing.current = false;
      updateDimensions();
    } else {
      debouncedUpdateDimensions();
    }
  });
  useEnhancedEffect_default3(() => observeRootNode(containerNode, store, setRootSize), [containerNode, store, setRootSize]);
  useEnhancedEffect_default3(updateDimensions, [updateDimensions]);
  const rowsMeta = useRowsMeta(store, params, updateDimensions);
  return {
    updateDimensions,
    debouncedUpdateDimensions,
    rowsMeta
  };
}
function useRowsMeta(store, params, updateDimensions) {
  const heightCache = store.state.rowHeights;
  const {
    rows,
    getRowHeight: getRowHeightProp,
    getRowSpacing,
    getEstimatedRowHeight
  } = params;
  const lastMeasuredRowIndex = React82.useRef(-1);
  const hasRowWithAutoHeight = React82.useRef(false);
  const isHeightMetaValid = React82.useRef(false);
  const pinnedRows = params.pinnedRows;
  const rowHeight = useStore2(store, selectors2.rowHeight);
  const getRowHeightEntry = useEventCallback_default2((rowId) => {
    let entry = heightCache.get(rowId);
    if (entry === void 0) {
      entry = {
        content: store.state.dimensions.rowHeight,
        spacingTop: 0,
        spacingBottom: 0,
        detail: 0,
        autoHeight: false,
        needsFirstMeasurement: true
      };
      heightCache.set(rowId, entry);
    }
    return entry;
  });
  const {
    applyRowHeight
  } = params;
  const processHeightEntry = React82.useCallback((row) => {
    eslintUseValue(rowHeight);
    const dimensions = selectors2.dimensions(store.state);
    const baseRowHeight = dimensions.rowHeight;
    const entry = getRowHeightEntry(row.id);
    if (!getRowHeightProp) {
      entry.content = baseRowHeight;
      entry.needsFirstMeasurement = false;
    } else {
      const rowHeightFromUser = getRowHeightProp(row);
      if (rowHeightFromUser === "auto") {
        if (entry.needsFirstMeasurement) {
          const estimatedRowHeight = getEstimatedRowHeight ? getEstimatedRowHeight(row) : baseRowHeight;
          entry.content = estimatedRowHeight ?? baseRowHeight;
        }
        hasRowWithAutoHeight.current = true;
        entry.autoHeight = true;
      } else {
        entry.content = rowHeightFromUser ?? dimensions.rowHeight;
        entry.needsFirstMeasurement = false;
        entry.autoHeight = false;
      }
    }
    if (getRowSpacing) {
      const spacing3 = getRowSpacing(row);
      entry.spacingTop = spacing3.top ?? 0;
      entry.spacingBottom = spacing3.bottom ?? 0;
    } else {
      entry.spacingTop = 0;
      entry.spacingBottom = 0;
    }
    applyRowHeight == null ? void 0 : applyRowHeight(entry, row);
    return entry;
  }, [store, getRowHeightProp, getRowHeightEntry, getEstimatedRowHeight, rowHeight, getRowSpacing, applyRowHeight]);
  const hydrateRowsMeta = React82.useCallback(() => {
    hasRowWithAutoHeight.current = false;
    const pinnedTopRowsTotalHeight = (pinnedRows == null ? void 0 : pinnedRows.top.reduce((acc, row) => {
      const entry = processHeightEntry(row);
      return acc + entry.content + entry.spacingTop + entry.spacingBottom + entry.detail;
    }, 0)) ?? 0;
    const pinnedBottomRowsTotalHeight = (pinnedRows == null ? void 0 : pinnedRows.bottom.reduce((acc, row) => {
      const entry = processHeightEntry(row);
      return acc + entry.content + entry.spacingTop + entry.spacingBottom + entry.detail;
    }, 0)) ?? 0;
    const positions = [];
    const currentPageTotalHeight = rows.reduce((acc, row) => {
      positions.push(acc);
      const entry = processHeightEntry(row);
      const total = entry.content + entry.spacingTop + entry.spacingBottom + entry.detail;
      return acc + total;
    }, 0);
    if (!hasRowWithAutoHeight.current) {
      lastMeasuredRowIndex.current = Infinity;
    }
    const didHeightsChange = pinnedTopRowsTotalHeight !== store.state.rowsMeta.pinnedTopRowsTotalHeight || pinnedBottomRowsTotalHeight !== store.state.rowsMeta.pinnedBottomRowsTotalHeight || currentPageTotalHeight !== store.state.rowsMeta.currentPageTotalHeight;
    const rowsMeta = {
      currentPageTotalHeight,
      positions,
      pinnedTopRowsTotalHeight,
      pinnedBottomRowsTotalHeight
    };
    store.set("rowsMeta", rowsMeta);
    if (didHeightsChange) {
      updateDimensions();
    }
    isHeightMetaValid.current = true;
  }, [store, pinnedRows, rows, processHeightEntry, updateDimensions]);
  const hydrateRowsMetaLatest = useEventCallback_default2(hydrateRowsMeta);
  const getRowHeight = (rowId) => {
    var _a;
    return ((_a = heightCache.get(rowId)) == null ? void 0 : _a.content) ?? selectors2.rowHeight(store.state);
  };
  const storeRowHeightMeasurement = (id, height2) => {
    const entry = getRowHeightEntry(id);
    const didChange = entry.content !== height2;
    entry.needsFirstMeasurement = false;
    entry.content = height2;
    isHeightMetaValid.current && (isHeightMetaValid.current = !didChange);
  };
  const rowHasAutoHeight = (id) => {
    var _a;
    return ((_a = heightCache.get(id)) == null ? void 0 : _a.autoHeight) ?? false;
  };
  const getLastMeasuredRowIndex = () => {
    return lastMeasuredRowIndex.current;
  };
  const setLastMeasuredRowIndex = (index) => {
    if (hasRowWithAutoHeight.current && index > lastMeasuredRowIndex.current) {
      lastMeasuredRowIndex.current = index;
    }
  };
  const resetRowHeights = () => {
    heightCache.clear();
    hydrateRowsMeta();
  };
  const resizeObserver = useLazyRef2(() => typeof ResizeObserver === "undefined" ? void 0 : new ResizeObserver((entries) => {
    var _a, _b;
    for (let i = 0; i < entries.length; i += 1) {
      const entry = entries[i];
      const height2 = entry.borderBoxSize && entry.borderBoxSize.length > 0 ? entry.borderBoxSize[0].blockSize : entry.contentRect.height;
      const rowId = entry.target.__mui_id;
      const focusedVirtualRowId = (_b = (_a = params.focusedVirtualCell) == null ? void 0 : _a.call(params)) == null ? void 0 : _b.id;
      if (focusedVirtualRowId === rowId && height2 === 0) {
        return;
      }
      storeRowHeightMeasurement(rowId, height2);
    }
    if (!isHeightMetaValid.current) {
      requestAnimationFrame(() => {
        hydrateRowsMetaLatest();
      });
    }
  })).current;
  const observeRowHeight = (element, rowId) => {
    element.__mui_id = rowId;
    resizeObserver == null ? void 0 : resizeObserver.observe(element);
    return () => resizeObserver == null ? void 0 : resizeObserver.unobserve(element);
  };
  useEnhancedEffect_default3(() => {
    hydrateRowsMeta();
  }, [hydrateRowsMeta]);
  return {
    getRowHeight,
    setLastMeasuredRowIndex,
    storeRowHeightMeasurement,
    hydrateRowsMeta,
    observeRowHeight,
    rowHasAutoHeight,
    getRowHeightEntry,
    getLastMeasuredRowIndex,
    resetRowHeights
  };
}
function observeRootNode(node, store, setRootSize) {
  if (!node) {
    return void 0;
  }
  const bounds = node.getBoundingClientRect();
  const initialSize = {
    width: roundToDecimalPlaces(bounds.width, 1),
    height: roundToDecimalPlaces(bounds.height, 1)
  };
  if (store.state.rootSize === Size.EMPTY || !Size.equals(initialSize, store.state.rootSize)) {
    setRootSize(initialSize);
  }
  if (typeof ResizeObserver === "undefined") {
    return void 0;
  }
  const observer = new ResizeObserver(([entry]) => {
    if (!entry) {
      return;
    }
    const rootSize = {
      width: roundToDecimalPlaces(entry.contentRect.width, 1),
      height: roundToDecimalPlaces(entry.contentRect.height, 1)
    };
    if (!Size.equals(rootSize, store.state.rootSize)) {
      setRootSize(rootSize);
    }
  });
  observer.observe(node);
  return () => {
    observer.disconnect();
  };
}
var scrollbarSizeCache = /* @__PURE__ */ new WeakMap();
function measureScrollbarSize(element, scrollbarSize) {
  if (scrollbarSize !== void 0) {
    return scrollbarSize;
  }
  if (element === null) {
    return 0;
  }
  const cachedSize = scrollbarSizeCache.get(element);
  if (cachedSize !== void 0) {
    return cachedSize;
  }
  const doc = ownerDocument(element);
  const scrollDiv = doc.createElement("div");
  scrollDiv.style.width = "99px";
  scrollDiv.style.height = "99px";
  scrollDiv.style.position = "absolute";
  scrollDiv.style.overflow = "scroll";
  scrollDiv.className = "scrollDiv";
  element.appendChild(scrollDiv);
  const size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
  element.removeChild(scrollDiv);
  scrollbarSizeCache.set(element, size);
  return size;
}
function eslintUseValue(_) {
}

// node_modules/@mui/x-virtualizer/esm/features/virtualization.js
init_extends();
var React85 = __toESM(require_react(), 1);
var ReactDOM = __toESM(require_react_dom(), 1);

// node_modules/@mui/x-virtualizer/node_modules/@mui/utils/esm/useTimeout/useTimeout.js
var Timeout2 = class _Timeout {
  constructor() {
    __publicField(this, "currentId", null);
    __publicField(this, "clear", () => {
      if (this.currentId !== null) {
        clearTimeout(this.currentId);
        this.currentId = null;
      }
    });
    __publicField(this, "disposeEffect", () => {
      return this.clear;
    });
  }
  static create() {
    return new _Timeout();
  }
  /**
   * Executes `fn` after `delay`, clearing any previously scheduled call.
   */
  start(delay, fn) {
    this.clear();
    this.currentId = setTimeout(() => {
      this.currentId = null;
      fn();
    }, delay);
  }
};
function useTimeout2() {
  const timeout = useLazyRef2(Timeout2.create).current;
  useOnMount2(timeout.disposeEffect);
  return timeout;
}

// node_modules/@mui/x-virtualizer/node_modules/@mui/x-internals/esm/platform/index.js
var userAgent = typeof navigator !== "undefined" ? navigator.userAgent.toLowerCase() : "empty";
var isFirefox = userAgent.includes("firefox");
var isJSDOM = typeof window !== "undefined" && /jsdom|HappyDOM/.test(window.navigator.userAgent);

// node_modules/@mui/x-virtualizer/node_modules/@mui/x-internals/esm/useRunOnce/useRunOnce.js
var React83 = __toESM(require_react(), 1);
var noop4 = () => {
};
var useRunOnce2 = (condition, effect) => {
  const didRun = React83.useRef(false);
  useEnhancedEffect_default3(() => {
    if (didRun.current || !condition) {
      return noop4;
    }
    didRun.current = true;
    return effect();
  }, [didRun.current || condition]);
};

// node_modules/@mui/x-virtualizer/node_modules/@mui/x-internals/esm/useFirstRender/useFirstRender.js
var React84 = __toESM(require_react(), 1);
function useFirstRender2(callback) {
  const isFirstRender = React84.useRef(true);
  if (isFirstRender.current) {
    isFirstRender.current = false;
    callback();
  }
}

// node_modules/@mui/x-virtualizer/esm/features/virtualization.js
var clamp2 = (value, min, max) => Math.max(min, Math.min(max, value));
var MINIMUM_COLUMN_WIDTH = 50;
var EMPTY_SCROLL_POSITION = {
  top: 0,
  left: 0
};
var EMPTY_DETAIL_PANELS = Object.freeze(/* @__PURE__ */ new Map());
var EMPTY_RENDER_CONTEXT = {
  firstRowIndex: 0,
  lastRowIndex: 0,
  firstColumnIndex: 0,
  lastColumnIndex: 0
};
var selectors3 = {
  renderContext: createSelector4((state) => state.virtualization.renderContext),
  enabledForRows: createSelector4((state) => state.virtualization.enabledForRows),
  enabledForColumns: createSelector4((state) => state.virtualization.enabledForColumns)
};
var Virtualization = {
  initialize: initializeState3,
  use: useVirtualization,
  selectors: selectors3
};
function initializeState3(params) {
  var _a;
  const state = {
    virtualization: _extends({
      enabled: !isJSDOM,
      enabledForRows: !isJSDOM,
      enabledForColumns: !isJSDOM,
      renderContext: EMPTY_RENDER_CONTEXT
    }, (_a = params.initialState) == null ? void 0 : _a.virtualization),
    // FIXME: refactor once the state shape is settled
    getters: null
  };
  return state;
}
function useVirtualization(store, params, api) {
  const {
    refs,
    dimensions: {
      rowHeight,
      columnsTotalWidth
    },
    virtualization: {
      isRtl = false,
      rowBufferPx = 150,
      columnBufferPx = 150
    },
    colspan,
    initialState,
    rows,
    range,
    columns,
    pinnedRows = PinnedRows.EMPTY,
    pinnedColumns = PinnedColumns.EMPTY,
    minimalContentHeight: minimalContentHeight2,
    autoHeight,
    onWheel,
    onTouchMove,
    onRenderContextChange,
    onScrollChange,
    scrollReset,
    renderRow,
    renderInfiniteLoadingTrigger
  } = params;
  const needsHorizontalScrollbar = useStore2(store, Dimensions.selectors.needsHorizontalScrollbar);
  const hasBottomPinnedRows = pinnedRows.bottom.length > 0;
  const [panels, setPanels] = React85.useState(EMPTY_DETAIL_PANELS);
  const [, setRefTick] = React85.useState(0);
  const isRenderContextReady = React85.useRef(false);
  const renderContext = useStore2(store, selectors3.renderContext);
  const enabledForRows = useStore2(store, selectors3.enabledForRows);
  const enabledForColumns = useStore2(store, selectors3.enabledForColumns);
  const rowsMeta = useStore2(store, Dimensions.selectors.rowsMeta);
  const contentHeight = useStore2(store, Dimensions.selectors.contentHeight);
  const scrollPosition = React85.useRef((initialState == null ? void 0 : initialState.scroll) ?? EMPTY_SCROLL_POSITION);
  const ignoreNextScrollEvent = React85.useRef(false);
  const previousContextScrollPosition = React85.useRef(EMPTY_SCROLL_POSITION);
  const previousRowContext = React85.useRef(EMPTY_RENDER_CONTEXT);
  const scrollTimeout = useTimeout2();
  const frozenContext = React85.useRef(void 0);
  const scrollCache = useLazyRef2(() => createScrollCache(isRtl, rowBufferPx, columnBufferPx, rowHeight * 15, MINIMUM_COLUMN_WIDTH * 6)).current;
  const updateRenderContext = React85.useCallback((nextRenderContext) => {
    if (!areRenderContextsEqual(nextRenderContext, store.state.virtualization.renderContext)) {
      store.set("virtualization", _extends({}, store.state.virtualization, {
        renderContext: nextRenderContext
      }));
    }
    const isReady = Dimensions.selectors.dimensions(store.state).isReady;
    const didRowsIntervalChange = nextRenderContext.firstRowIndex !== previousRowContext.current.firstRowIndex || nextRenderContext.lastRowIndex !== previousRowContext.current.lastRowIndex;
    if (isReady && didRowsIntervalChange) {
      previousRowContext.current = nextRenderContext;
      onRenderContextChange == null ? void 0 : onRenderContextChange(nextRenderContext);
    }
    previousContextScrollPosition.current = scrollPosition.current;
  }, [store, onRenderContextChange]);
  const triggerUpdateRenderContext = useEventCallback_default2(() => {
    const scroller = refs.scroller.current;
    if (!scroller) {
      return void 0;
    }
    const dimensions = Dimensions.selectors.dimensions(store.state);
    const maxScrollTop = Math.ceil(dimensions.minimumSize.height - dimensions.viewportOuterSize.height);
    const maxScrollLeft = Math.ceil(dimensions.minimumSize.width - dimensions.viewportInnerSize.width);
    const newScroll = {
      top: clamp2(scroller.scrollTop, 0, maxScrollTop),
      left: isRtl ? clamp2(scroller.scrollLeft, -maxScrollLeft, 0) : clamp2(scroller.scrollLeft, 0, maxScrollLeft)
    };
    const dx = newScroll.left - scrollPosition.current.left;
    const dy = newScroll.top - scrollPosition.current.top;
    const isScrolling = dx !== 0 || dy !== 0;
    scrollPosition.current = newScroll;
    const direction = isScrolling ? ScrollDirection.forDelta(dx, dy) : ScrollDirection.NONE;
    const rowScroll = Math.abs(scrollPosition.current.top - previousContextScrollPosition.current.top);
    const columnScroll = Math.abs(scrollPosition.current.left - previousContextScrollPosition.current.left);
    const didCrossThreshold = rowScroll >= rowHeight || columnScroll >= MINIMUM_COLUMN_WIDTH;
    const didChangeDirection = scrollCache.direction !== direction;
    const shouldUpdate = didCrossThreshold || didChangeDirection;
    if (!shouldUpdate) {
      return renderContext;
    }
    if (didChangeDirection) {
      switch (direction) {
        case ScrollDirection.NONE:
        case ScrollDirection.LEFT:
        case ScrollDirection.RIGHT:
          frozenContext.current = void 0;
          break;
        default:
          frozenContext.current = renderContext;
          break;
      }
    }
    scrollCache.direction = direction;
    scrollCache.buffer = bufferForDirection(isRtl, direction, rowBufferPx, columnBufferPx, rowHeight * 15, MINIMUM_COLUMN_WIDTH * 6);
    const inputs = inputsSelector(store, params, api, enabledForRows, enabledForColumns);
    const nextRenderContext = computeRenderContext(inputs, scrollPosition.current, scrollCache);
    if (!areRenderContextsEqual(nextRenderContext, renderContext)) {
      ReactDOM.flushSync(() => {
        updateRenderContext(nextRenderContext);
      });
      scrollTimeout.start(1e3, triggerUpdateRenderContext);
    }
    return nextRenderContext;
  });
  const forceUpdateRenderContext = useEventCallback_default2(() => {
    if (!Dimensions.selectors.dimensions(store.state).isReady && (enabledForRows || enabledForColumns)) {
      return;
    }
    const inputs = inputsSelector(store, params, api, enabledForRows, enabledForColumns);
    const nextRenderContext = computeRenderContext(inputs, scrollPosition.current, scrollCache);
    frozenContext.current = void 0;
    updateRenderContext(nextRenderContext);
  });
  const handleScroll = useEventCallback_default2(() => {
    if (ignoreNextScrollEvent.current) {
      ignoreNextScrollEvent.current = false;
      return;
    }
    const nextRenderContext = triggerUpdateRenderContext();
    if (nextRenderContext) {
      onScrollChange == null ? void 0 : onScrollChange(scrollPosition.current, nextRenderContext);
    }
  });
  const getOffsetTop = () => {
    return rowsMeta.positions[renderContext.firstRowIndex] ?? 0;
  };
  const getRows = (rowParams = {}, unstable_rowTree) => {
    var _a;
    if (!rowParams.rows && !range) {
      return [];
    }
    let baseRenderContext = renderContext;
    if (rowParams.renderContext) {
      baseRenderContext = rowParams.renderContext;
      baseRenderContext.firstColumnIndex = renderContext.firstColumnIndex;
      baseRenderContext.lastColumnIndex = renderContext.lastColumnIndex;
    }
    const isLastSection = !hasBottomPinnedRows && rowParams.position === void 0 || hasBottomPinnedRows && rowParams.position === "bottom";
    const isPinnedSection = rowParams.position !== void 0;
    let rowIndexOffset;
    switch (rowParams.position) {
      case "top":
        rowIndexOffset = 0;
        break;
      case "bottom":
        rowIndexOffset = pinnedRows.top.length + rows.length;
        break;
      case void 0:
      default:
        rowIndexOffset = pinnedRows.top.length;
        break;
    }
    const rowModels = rowParams.rows ?? rows;
    const firstRowToRender = baseRenderContext.firstRowIndex;
    const lastRowToRender = Math.min(baseRenderContext.lastRowIndex, rowModels.length);
    const rowIndexes = rowParams.rows ? createRange(0, rowParams.rows.length) : createRange(firstRowToRender, lastRowToRender);
    let virtualRowIndex = -1;
    const focusedVirtualCell = (_a = params.focusedVirtualCell) == null ? void 0 : _a.call(params);
    if (!isPinnedSection && focusedVirtualCell) {
      if (focusedVirtualCell.rowIndex < firstRowToRender) {
        rowIndexes.unshift(focusedVirtualCell.rowIndex);
        virtualRowIndex = focusedVirtualCell.rowIndex;
      }
      if (focusedVirtualCell.rowIndex > lastRowToRender) {
        rowIndexes.push(focusedVirtualCell.rowIndex);
        virtualRowIndex = focusedVirtualCell.rowIndex;
      }
    }
    const rowElements = [];
    const columnPositions = Dimensions.selectors.columnPositions(store.state, columns);
    rowIndexes.forEach((rowIndexInPage) => {
      const {
        id,
        model
      } = rowModels[rowIndexInPage];
      if (unstable_rowTree && !unstable_rowTree[id]) {
        return;
      }
      const rowIndex = ((range == null ? void 0 : range.firstRowIndex) || 0) + rowIndexOffset + rowIndexInPage;
      if (colspan == null ? void 0 : colspan.enabled) {
        const minFirstColumn = pinnedColumns.left.length;
        const maxLastColumn = columns.length - pinnedColumns.right.length;
        api.calculateColSpan(id, minFirstColumn, maxLastColumn, columns);
        if (pinnedColumns.left.length > 0) {
          api.calculateColSpan(id, 0, pinnedColumns.left.length, columns);
        }
        if (pinnedColumns.right.length > 0) {
          api.calculateColSpan(id, columns.length - pinnedColumns.right.length, columns.length, columns);
        }
      }
      const baseRowHeight = !api.rowsMeta.rowHasAutoHeight(id) ? api.rowsMeta.getRowHeight(id) : "auto";
      let isFirstVisible = false;
      if (rowParams.position === void 0) {
        isFirstVisible = rowIndexInPage === 0;
      }
      let isLastVisible = false;
      const isLastVisibleInSection = rowIndexInPage === rowModels.length - 1;
      if (isLastSection) {
        if (!isPinnedSection) {
          const lastIndex = rows.length - 1;
          const isLastVisibleRowIndex = rowIndexInPage === lastIndex;
          if (isLastVisibleRowIndex) {
            isLastVisible = true;
          }
        } else {
          isLastVisible = isLastVisibleInSection;
        }
      }
      let currentRenderContext = baseRenderContext;
      if (frozenContext.current && rowIndexInPage >= frozenContext.current.firstRowIndex && rowIndexInPage < frozenContext.current.lastRowIndex) {
        currentRenderContext = frozenContext.current;
      }
      const isVirtualFocusRow = rowIndexInPage === virtualRowIndex;
      const isVirtualFocusColumn = (focusedVirtualCell == null ? void 0 : focusedVirtualCell.rowIndex) === rowIndex;
      const offsetLeft = computeOffsetLeft(columnPositions, currentRenderContext, pinnedColumns.left.length);
      const showBottomBorder = isLastVisibleInSection && rowParams.position === "top";
      const firstColumnIndex = currentRenderContext.firstColumnIndex;
      const lastColumnIndex = currentRenderContext.lastColumnIndex;
      rowElements.push(renderRow({
        id,
        model,
        rowIndex,
        offsetLeft,
        columnsTotalWidth,
        baseRowHeight,
        firstColumnIndex,
        lastColumnIndex,
        focusedColumnIndex: isVirtualFocusColumn ? focusedVirtualCell.columnIndex : void 0,
        isFirstVisible,
        isLastVisible,
        isVirtualFocusRow,
        showBottomBorder
      }));
      if (isVirtualFocusRow) {
        return;
      }
      const panel = panels.get(id);
      if (panel) {
        rowElements.push(panel);
      }
      if (rowParams.position === void 0 && isLastVisibleInSection) {
        rowElements.push(renderInfiniteLoadingTrigger(id));
      }
    });
    return rowElements;
  };
  const scrollerStyle = React85.useMemo(() => ({
    overflowX: !needsHorizontalScrollbar ? "hidden" : void 0,
    overflowY: autoHeight ? "hidden" : void 0
  }), [needsHorizontalScrollbar, autoHeight]);
  const contentSize = React85.useMemo(() => {
    const size = {
      width: needsHorizontalScrollbar ? columnsTotalWidth : "auto",
      flexBasis: contentHeight,
      flexShrink: 0
    };
    if (size.flexBasis === 0) {
      size.flexBasis = minimalContentHeight2;
    }
    return size;
  }, [columnsTotalWidth, contentHeight, needsHorizontalScrollbar, minimalContentHeight2]);
  const scrollRestoreCallback = React85.useRef(null);
  const contentNodeRef = React85.useCallback((node) => {
    var _a;
    if (!node) {
      return;
    }
    (_a = scrollRestoreCallback.current) == null ? void 0 : _a.call(scrollRestoreCallback, columnsTotalWidth, contentHeight);
  }, [columnsTotalWidth, contentHeight]);
  useEnhancedEffect_default3(() => {
    if (!isRenderContextReady.current) {
      return;
    }
    forceUpdateRenderContext();
  }, [enabledForColumns, enabledForRows, forceUpdateRenderContext]);
  useEnhancedEffect_default3(() => {
    if (refs.scroller.current) {
      refs.scroller.current.scrollLeft = 0;
    }
  }, [refs.scroller, scrollReset]);
  useRunOnce2(renderContext !== EMPTY_RENDER_CONTEXT, () => {
    onScrollChange == null ? void 0 : onScrollChange(scrollPosition.current, renderContext);
    isRenderContextReady.current = true;
    if ((initialState == null ? void 0 : initialState.scroll) && refs.scroller.current) {
      const scroller = refs.scroller.current;
      const {
        top: top2,
        left: left2
      } = initialState.scroll;
      const isScrollRestored = {
        top: !(top2 > 0),
        left: !(left2 > 0)
      };
      if (!isScrollRestored.left && columnsTotalWidth) {
        scroller.scrollLeft = left2;
        isScrollRestored.left = true;
        ignoreNextScrollEvent.current = true;
      }
      if (!isScrollRestored.top && contentHeight) {
        scroller.scrollTop = top2;
        ignoreNextScrollEvent.current = true;
      }
      if (!isScrollRestored.top || !isScrollRestored.left) {
        scrollRestoreCallback.current = (columnsTotalWidthCurrent, contentHeightCurrent) => {
          if (!isScrollRestored.left && columnsTotalWidthCurrent) {
            scroller.scrollLeft = left2;
            isScrollRestored.left = true;
            ignoreNextScrollEvent.current = true;
          }
          if (!isScrollRestored.top && contentHeightCurrent) {
            scroller.scrollTop = top2;
            isScrollRestored.top = true;
            ignoreNextScrollEvent.current = true;
          }
          if (isScrollRestored.left && isScrollRestored.top) {
            scrollRestoreCallback.current = null;
          }
        };
      }
    }
  });
  useStoreEffect2(store, Dimensions.selectors.dimensions, forceUpdateRenderContext);
  const refSetter = (name) => (node) => {
    if (node && refs[name].current !== node) {
      refs[name].current = node;
      setRefTick((tick) => tick + 1);
    }
  };
  const getters = {
    setPanels,
    getOffsetTop,
    getRows,
    getContainerProps: () => ({
      ref: refSetter("container")
    }),
    getScrollerProps: () => ({
      ref: refSetter("scroller"),
      onScroll: handleScroll,
      onWheel,
      onTouchMove,
      style: scrollerStyle,
      role: "presentation",
      // `tabIndex` shouldn't be used along role=presentation, but it fixes a Firefox bug
      // https://github.com/mui/mui-x/pull/13891#discussion_r1683416024
      tabIndex: isFirefox ? -1 : void 0
    }),
    getContentProps: () => ({
      ref: contentNodeRef,
      style: contentSize,
      role: "presentation"
    }),
    getScrollbarVerticalProps: () => ({
      ref: refSetter("scrollbarVertical"),
      scrollPosition
    }),
    getScrollbarHorizontalProps: () => ({
      ref: refSetter("scrollbarHorizontal"),
      scrollPosition
    }),
    getScrollAreaProps: () => ({
      scrollPosition
    })
  };
  useFirstRender2(() => {
    store.state = _extends({}, store.state, {
      getters
    });
  });
  React85.useEffect(() => {
    store.update({
      getters
    });
  }, Object.values(getters));
  const getCellColSpanInfo = () => {
    throw new Error("Unimplemented: colspan feature is required");
  };
  const calculateColSpan = () => {
    throw new Error("Unimplemented: colspan feature is required");
  };
  const getHiddenCellsOrigin = () => {
    throw new Error("Unimplemented: rowspan feature is required");
  };
  return {
    getters,
    useVirtualization: () => useStore2(store, (state) => state),
    setPanels,
    forceUpdateRenderContext,
    getCellColSpanInfo,
    calculateColSpan,
    getHiddenCellsOrigin
  };
}
function inputsSelector(store, params, api, enabledForRows, enabledForColumns) {
  var _a;
  const dimensions = Dimensions.selectors.dimensions(store.state);
  const rows = params.rows;
  const range = params.range;
  const columns = params.columns;
  const hiddenCellsOriginMap = api.getHiddenCellsOrigin();
  const lastRowId = (_a = params.rows.at(-1)) == null ? void 0 : _a.id;
  const lastColumn = columns.at(-1);
  return {
    api,
    enabledForRows,
    enabledForColumns,
    autoHeight: params.autoHeight,
    rowBufferPx: params.virtualization.rowBufferPx,
    columnBufferPx: params.virtualization.columnBufferPx,
    leftPinnedWidth: dimensions.leftPinnedWidth,
    columnsTotalWidth: dimensions.columnsTotalWidth,
    viewportInnerWidth: dimensions.viewportInnerSize.width,
    viewportInnerHeight: dimensions.viewportInnerSize.height,
    lastRowHeight: lastRowId !== void 0 ? api.rowsMeta.getRowHeight(lastRowId) : 0,
    lastColumnWidth: (lastColumn == null ? void 0 : lastColumn.computedWidth) ?? 0,
    rowsMeta: Dimensions.selectors.rowsMeta(store.state),
    columnPositions: Dimensions.selectors.columnPositions(store.state, params.columns),
    rows,
    range,
    pinnedColumns: params.pinnedColumns,
    columns,
    hiddenCellsOriginMap,
    virtualizeColumnsWithAutoRowHeight: params.virtualizeColumnsWithAutoRowHeight
  };
}
function computeRenderContext(inputs, scrollPosition, scrollCache) {
  const renderContext = {
    firstRowIndex: 0,
    lastRowIndex: inputs.rows.length,
    firstColumnIndex: 0,
    lastColumnIndex: inputs.columns.length
  };
  const {
    top: top2,
    left: left2
  } = scrollPosition;
  const realLeft = Math.abs(left2) + inputs.leftPinnedWidth;
  if (inputs.enabledForRows) {
    let firstRowIndex = Math.min(getNearestIndexToRender(inputs, top2, {
      atStart: true,
      lastPosition: inputs.rowsMeta.positions[inputs.rowsMeta.positions.length - 1] + inputs.lastRowHeight
    }), inputs.rowsMeta.positions.length - 1);
    const rowSpanHiddenCellOrigin = inputs.hiddenCellsOriginMap[firstRowIndex];
    if (rowSpanHiddenCellOrigin) {
      const minSpannedRowIndex = Math.min(...Object.values(rowSpanHiddenCellOrigin));
      firstRowIndex = Math.min(firstRowIndex, minSpannedRowIndex);
    }
    const lastRowIndex = inputs.autoHeight ? firstRowIndex + inputs.rows.length : getNearestIndexToRender(inputs, top2 + inputs.viewportInnerHeight);
    renderContext.firstRowIndex = firstRowIndex;
    renderContext.lastRowIndex = lastRowIndex;
  }
  if (inputs.enabledForColumns) {
    let firstColumnIndex = 0;
    let lastColumnIndex = inputs.columnPositions.length;
    let hasRowWithAutoHeight = false;
    const [firstRowToRender, lastRowToRender] = getIndexesToRender({
      firstIndex: renderContext.firstRowIndex,
      lastIndex: renderContext.lastRowIndex,
      minFirstIndex: 0,
      maxLastIndex: inputs.rows.length,
      bufferBefore: scrollCache.buffer.rowBefore,
      bufferAfter: scrollCache.buffer.rowAfter,
      positions: inputs.rowsMeta.positions,
      lastSize: inputs.lastRowHeight
    });
    if (!inputs.virtualizeColumnsWithAutoRowHeight) {
      for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {
        const row = inputs.rows[i];
        hasRowWithAutoHeight = inputs.api.rowsMeta.rowHasAutoHeight(row.id);
      }
    }
    if (!hasRowWithAutoHeight || inputs.virtualizeColumnsWithAutoRowHeight) {
      firstColumnIndex = binarySearch(realLeft, inputs.columnPositions, {
        atStart: true,
        lastPosition: inputs.columnsTotalWidth
      });
      lastColumnIndex = binarySearch(realLeft + inputs.viewportInnerWidth, inputs.columnPositions);
    }
    renderContext.firstColumnIndex = firstColumnIndex;
    renderContext.lastColumnIndex = lastColumnIndex;
  }
  const actualRenderContext = deriveRenderContext(inputs, renderContext, scrollCache);
  return actualRenderContext;
}
function getNearestIndexToRender(inputs, offset, options) {
  var _a, _b;
  const lastMeasuredIndexRelativeToAllRows = inputs.api.rowsMeta.getLastMeasuredRowIndex();
  let allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;
  if (((_a = inputs.range) == null ? void 0 : _a.lastRowIndex) && !allRowsMeasured) {
    allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= inputs.range.lastRowIndex;
  }
  const lastMeasuredIndexRelativeToCurrentPage = clamp2(lastMeasuredIndexRelativeToAllRows - (((_b = inputs.range) == null ? void 0 : _b.firstRowIndex) || 0), 0, inputs.rowsMeta.positions.length);
  if (allRowsMeasured || inputs.rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {
    return binarySearch(offset, inputs.rowsMeta.positions, options);
  }
  return exponentialSearch(offset, inputs.rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage, options);
}
function deriveRenderContext(inputs, nextRenderContext, scrollCache) {
  var _a, _b;
  const [firstRowToRender, lastRowToRender] = getIndexesToRender({
    firstIndex: nextRenderContext.firstRowIndex,
    lastIndex: nextRenderContext.lastRowIndex,
    minFirstIndex: 0,
    maxLastIndex: inputs.rows.length,
    bufferBefore: scrollCache.buffer.rowBefore,
    bufferAfter: scrollCache.buffer.rowAfter,
    positions: inputs.rowsMeta.positions,
    lastSize: inputs.lastRowHeight
  });
  const [initialFirstColumnToRender, lastColumnToRender] = getIndexesToRender({
    firstIndex: nextRenderContext.firstColumnIndex,
    lastIndex: nextRenderContext.lastColumnIndex,
    minFirstIndex: ((_a = inputs.pinnedColumns) == null ? void 0 : _a.left.length) ?? 0,
    maxLastIndex: inputs.columns.length - (((_b = inputs.pinnedColumns) == null ? void 0 : _b.right.length) ?? 0),
    bufferBefore: scrollCache.buffer.columnBefore,
    bufferAfter: scrollCache.buffer.columnAfter,
    positions: inputs.columnPositions,
    lastSize: inputs.lastColumnWidth
  });
  const firstColumnToRender = getFirstNonSpannedColumnToRender({
    api: inputs.api,
    firstColumnToRender: initialFirstColumnToRender,
    firstRowToRender,
    lastRowToRender,
    visibleRows: inputs.rows
  });
  return {
    firstRowIndex: firstRowToRender,
    lastRowIndex: lastRowToRender,
    firstColumnIndex: firstColumnToRender,
    lastColumnIndex: lastColumnToRender
  };
}
function binarySearch(offset, positions, options = void 0, sliceStart = 0, sliceEnd = positions.length) {
  if (positions.length <= 0) {
    return -1;
  }
  if (sliceStart >= sliceEnd) {
    return sliceStart;
  }
  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);
  const position2 = positions[pivot];
  let isBefore;
  if (options == null ? void 0 : options.atStart) {
    const width2 = (pivot === positions.length - 1 ? options.lastPosition : positions[pivot + 1]) - position2;
    isBefore = offset - width2 < position2;
  } else {
    isBefore = offset <= position2;
  }
  return isBefore ? binarySearch(offset, positions, options, sliceStart, pivot) : binarySearch(offset, positions, options, pivot + 1, sliceEnd);
}
function exponentialSearch(offset, positions, index, options = void 0) {
  let interval = 1;
  while (index < positions.length && Math.abs(positions[index]) < offset) {
    index += interval;
    interval *= 2;
  }
  return binarySearch(offset, positions, options, Math.floor(index / 2), Math.min(index, positions.length));
}
function getIndexesToRender({
  firstIndex,
  lastIndex,
  bufferBefore,
  bufferAfter,
  minFirstIndex,
  maxLastIndex,
  positions,
  lastSize
}) {
  const firstPosition = positions[firstIndex] - bufferBefore;
  const lastPosition = positions[lastIndex] + bufferAfter;
  const firstIndexPadded = binarySearch(firstPosition, positions, {
    atStart: true,
    lastPosition: positions[positions.length - 1] + lastSize
  });
  const lastIndexPadded = binarySearch(lastPosition, positions);
  return [clamp2(firstIndexPadded, minFirstIndex, maxLastIndex), clamp2(lastIndexPadded, minFirstIndex, maxLastIndex)];
}
function areRenderContextsEqual(context1, context2) {
  if (context1 === context2) {
    return true;
  }
  return context1.firstRowIndex === context2.firstRowIndex && context1.lastRowIndex === context2.lastRowIndex && context1.firstColumnIndex === context2.firstColumnIndex && context1.lastColumnIndex === context2.lastColumnIndex;
}
function computeOffsetLeft(columnPositions, renderContext, pinnedLeftLength) {
  const left2 = (columnPositions[renderContext.firstColumnIndex] ?? 0) - (columnPositions[pinnedLeftLength] ?? 0);
  return Math.abs(left2);
}
function bufferForDirection(isRtl, direction, rowBufferPx, columnBufferPx, verticalBuffer, horizontalBuffer) {
  if (isRtl) {
    switch (direction) {
      case ScrollDirection.LEFT:
        direction = ScrollDirection.RIGHT;
        break;
      case ScrollDirection.RIGHT:
        direction = ScrollDirection.LEFT;
        break;
      default:
    }
  }
  switch (direction) {
    case ScrollDirection.NONE:
      return {
        rowAfter: rowBufferPx,
        rowBefore: rowBufferPx,
        columnAfter: columnBufferPx,
        columnBefore: columnBufferPx
      };
    case ScrollDirection.LEFT:
      return {
        rowAfter: 0,
        rowBefore: 0,
        columnAfter: 0,
        columnBefore: horizontalBuffer
      };
    case ScrollDirection.RIGHT:
      return {
        rowAfter: 0,
        rowBefore: 0,
        columnAfter: horizontalBuffer,
        columnBefore: 0
      };
    case ScrollDirection.UP:
      return {
        rowAfter: 0,
        rowBefore: verticalBuffer,
        columnAfter: 0,
        columnBefore: 0
      };
    case ScrollDirection.DOWN:
      return {
        rowAfter: verticalBuffer,
        rowBefore: 0,
        columnAfter: 0,
        columnBefore: 0
      };
    default:
      throw new Error("unreachable");
  }
}
function createScrollCache(isRtl, rowBufferPx, columnBufferPx, verticalBuffer, horizontalBuffer) {
  return {
    direction: ScrollDirection.NONE,
    buffer: bufferForDirection(isRtl, ScrollDirection.NONE, rowBufferPx, columnBufferPx, verticalBuffer, horizontalBuffer)
  };
}
function createRange(from, to) {
  return Array.from({
    length: to - from
  }).map((_, i) => from + i);
}
function getFirstNonSpannedColumnToRender({
  api,
  firstColumnToRender,
  firstRowToRender,
  lastRowToRender,
  visibleRows
}) {
  let firstNonSpannedColumnToRender = firstColumnToRender;
  let foundStableColumn = false;
  while (!foundStableColumn && firstNonSpannedColumnToRender >= 0) {
    foundStableColumn = true;
    for (let i = firstRowToRender; i < lastRowToRender; i += 1) {
      const row = visibleRows[i];
      if (row) {
        const rowId = visibleRows[i].id;
        const cellColSpanInfo = api.getCellColSpanInfo(rowId, firstNonSpannedColumnToRender);
        if (cellColSpanInfo && cellColSpanInfo.spannedByColSpan && cellColSpanInfo.leftVisibleCellIndex < firstNonSpannedColumnToRender) {
          firstNonSpannedColumnToRender = cellColSpanInfo.leftVisibleCellIndex;
          foundStableColumn = false;
          break;
        }
      }
    }
  }
  return firstNonSpannedColumnToRender;
}

// node_modules/@mui/x-virtualizer/esm/features/keyboard.js
var selectors4 = {};
var Keyboard = {
  initialize: initializeState4,
  use: useKeyboard,
  selectors: selectors4
};
function initializeState4(_params) {
  return {};
}
function useKeyboard(store, params, _api) {
  const getViewportPageSize = () => {
    const dimensions = Dimensions.selectors.dimensions(store.state);
    if (!dimensions.isReady) {
      return 0;
    }
    if (params.getRowHeight) {
      const renderContext = Virtualization.selectors.renderContext(store.state);
      const viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;
      return Math.min(viewportPageSize - 1, params.rows.length);
    }
    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / dimensions.rowHeight);
    return Math.min(maximumPageSizeWithoutScrollBar, params.rows.length);
  };
  return {
    getViewportPageSize
  };
}

// node_modules/@mui/x-virtualizer/esm/features/rowspan.js
var EMPTY_RANGE = {
  firstRowIndex: 0,
  lastRowIndex: 0
};
var EMPTY_CACHES = {
  spannedCells: {},
  hiddenCells: {},
  hiddenCellOriginMap: {}
};
var selectors5 = {
  state: (state) => state.rowSpanning,
  hiddenCells: (state) => state.rowSpanning.caches.hiddenCells,
  spannedCells: (state) => state.rowSpanning.caches.spannedCells,
  hiddenCellsOriginMap: (state) => state.rowSpanning.caches.hiddenCellOriginMap
};
var Rowspan = {
  initialize: initializeState5,
  use: useRowspan,
  selectors: selectors5
};
function initializeState5(params) {
  var _a;
  return {
    rowSpanning: ((_a = params.initialState) == null ? void 0 : _a.rowSpanning) ?? {
      caches: EMPTY_CACHES,
      processedRange: EMPTY_RANGE
    }
  };
}
function useRowspan(store, _params, _api) {
  const getHiddenCellsOrigin = () => selectors5.hiddenCellsOriginMap(store.state);
  return {
    getHiddenCellsOrigin
  };
}

// node_modules/@mui/x-virtualizer/esm/useVirtualizer.js
var FEATURES = [Dimensions, Virtualization, Colspan, Rowspan, Keyboard];
var useVirtualizer = (params) => {
  const store = useLazyRef2(() => {
    return new Store2(FEATURES.map((f) => f.initialize(params)).reduce((state, partial) => Object.assign(state, partial), {}));
  }).current;
  const api = {};
  for (const feature of FEATURES) {
    Object.assign(api, feature.use(store, params, api));
  }
  return {
    store,
    api
  };
};

// node_modules/@mui/x-data-grid/esm/hooks/features/virtualization/useGridVirtualization.js
init_extends();
var React86 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/esm/utils/isJSDOM.js
var isJSDOM2 = typeof window !== "undefined" && /jsdom|HappyDOM/.test(window.navigator.userAgent);

// node_modules/@mui/x-data-grid/esm/hooks/features/virtualization/useGridVirtualization.js
var HAS_LAYOUT = !isJSDOM2;
var virtualizationStateInitializer = (state, props) => {
  const {
    disableVirtualization,
    autoHeight
  } = props;
  const virtualization = {
    enabled: !disableVirtualization && HAS_LAYOUT,
    enabledForColumns: !disableVirtualization && HAS_LAYOUT,
    enabledForRows: !disableVirtualization && !autoHeight && HAS_LAYOUT,
    renderContext: EMPTY_RENDER_CONTEXT
  };
  return _extends({}, state, {
    virtualization
  });
};
function useGridVirtualization(apiRef, rootProps) {
  const {
    virtualizer
  } = apiRef.current;
  const {
    autoHeight,
    disableVirtualization
  } = rootProps;
  const setVirtualization = (enabled) => {
    enabled && (enabled = HAS_LAYOUT);
    virtualizer.store.set("virtualization", _extends({}, virtualizer.store.state.virtualization, {
      enabled,
      enabledForColumns: enabled,
      enabledForRows: enabled && !autoHeight
    }));
  };
  const setColumnVirtualization = (enabled) => {
    enabled && (enabled = HAS_LAYOUT);
    virtualizer.store.set("virtualization", _extends({}, virtualizer.store.state.virtualization, {
      enabledForColumns: enabled
    }));
  };
  const api = {
    unstable_setVirtualization: setVirtualization,
    unstable_setColumnVirtualization: setColumnVirtualization
  };
  useGridApiMethod(apiRef, api, "public");
  const forceUpdateRenderContext = virtualizer.api.forceUpdateRenderContext;
  apiRef.current.register("private", {
    updateRenderContext: forceUpdateRenderContext
  });
  useGridEventPriority(apiRef, "sortedRowsSet", forceUpdateRenderContext);
  useGridEventPriority(apiRef, "paginationModelChange", forceUpdateRenderContext);
  useGridEventPriority(apiRef, "columnsChange", forceUpdateRenderContext);
  React86.useEffect(() => {
    setVirtualization(!rootProps.disableVirtualization);
  }, [disableVirtualization, autoHeight]);
}

// node_modules/@mui/x-data-grid/esm/hooks/features/virtualization/gridVirtualizationSelectors.js
var gridVirtualizationSelector = createRootSelector((state) => state.virtualization);
var gridVirtualizationEnabledSelector = createSelector3(gridVirtualizationSelector, (state) => state.enabled);
var gridVirtualizationColumnEnabledSelector = createSelector3(gridVirtualizationSelector, (state) => state.enabledForColumns);
var gridVirtualizationRowEnabledSelector = createSelector3(gridVirtualizationSelector, (state) => state.enabledForRows);
var gridRenderContextSelector = createSelector3(gridVirtualizationSelector, (state) => state.renderContext);
var firstColumnIndexSelector = createRootSelector((state) => state.virtualization.renderContext.firstColumnIndex);
var lastColumnIndexSelector = createRootSelector((state) => state.virtualization.renderContext.lastColumnIndex);
var gridRenderContextColumnsSelector = createSelectorMemoized2(firstColumnIndexSelector, lastColumnIndexSelector, (firstColumnIndex, lastColumnIndex) => ({
  firstColumnIndex,
  lastColumnIndex
}));

// node_modules/@mui/x-data-grid/esm/hooks/features/dataSource/cache.js
function getKeyDefault(params) {
  return JSON.stringify([params.filterModel, params.sortModel, params.start, params.end]);
}
var GridDataSourceCacheDefault = class {
  constructor({
    ttl = 3e5,
    getKey = getKeyDefault
  }) {
    this.cache = {};
    this.ttl = ttl;
    this.getKey = getKey;
  }
  set(key, value) {
    const keyString = this.getKey(key);
    const expiry = Date.now() + this.ttl;
    this.cache[keyString] = {
      value,
      expiry
    };
  }
  get(key) {
    const keyString = this.getKey(key);
    const entry = this.cache[keyString];
    if (!entry) {
      return void 0;
    }
    if (Date.now() > entry.expiry) {
      delete this.cache[keyString];
      return void 0;
    }
    return entry.value;
  }
  clear() {
    this.cache = {};
  }
};

// node_modules/@mui/x-data-grid/esm/hooks/features/dataSource/gridDataSourceError.js
var GridGetRowsError = class extends Error {
  /**
   * The parameters used in the failed request
   */
  /**
   * The original error that caused this error
   */
  constructor(options) {
    super(options.message);
    this.name = "GridGetRowsError";
    this.params = options.params;
    this.cause = options.cause;
  }
};
var GridUpdateRowError = class extends Error {
  /**
   * The parameters used in the failed request
   */
  /**
   * The original error that caused this error
   */
  constructor(options) {
    super(options.message);
    this.name = "GridUpdateRowError";
    this.params = options.params;
    this.cause = options.cause;
  }
};

// node_modules/@mui/x-data-grid/esm/components/virtualization/GridVirtualScrollbar.js
var import_jsx_runtime44 = __toESM(require_jsx_runtime(), 1);
var useUtilityClasses14 = (ownerState, position2) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["scrollbar", `scrollbar--${position2}`],
    content: ["scrollbarContent"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var Scrollbar = styled_default2("div")({
  position: "absolute",
  display: "inline-block",
  zIndex: 60,
  "&:hover": {
    zIndex: 70
  },
  // In macOS Safari and Gnome Web, scrollbars are overlaid and don't affect the layout. So we consider
  // their size to be 0px throughout all the calculations, but the floating scrollbar container does need
  // to appear and have a real size. We set it to 14px because it seems like an acceptable value and we
  // don't have a method to find the required size for scrollbars on those platforms.
  "--size": "calc(max(var(--DataGrid-scrollbarSize), 14px))"
});
var ScrollbarVertical = styled_default2(Scrollbar)({
  width: "var(--size)",
  height: "calc(var(--DataGrid-hasScrollY) * (100% - var(--DataGrid-topContainerHeight) - var(--DataGrid-bottomContainerHeight) - var(--DataGrid-hasScrollX) * var(--DataGrid-scrollbarSize)))",
  overflowY: "auto",
  overflowX: "hidden",
  // Disable focus-visible style, it's a scrollbar.
  outline: 0,
  "& > div": {
    width: "var(--size)"
  },
  top: "var(--DataGrid-topContainerHeight)",
  right: "0px"
});
var ScrollbarHorizontal = styled_default2(Scrollbar)({
  width: "100%",
  height: "var(--size)",
  overflowY: "hidden",
  overflowX: "auto",
  // Disable focus-visible style, it's a scrollbar.
  outline: 0,
  "& > div": {
    height: "var(--size)"
  },
  bottom: "0px"
});
var GridVirtualScrollbar = forwardRef2(function GridVirtualScrollbar2(props, ref) {
  const apiRef = useGridPrivateApiContext();
  const rootProps = useGridRootProps();
  const isLocked = React87.useRef(false);
  const lastPosition = React87.useRef(0);
  const scrollbarRef = React87.useRef(null);
  const contentRef = React87.useRef(null);
  const classes2 = useUtilityClasses14(rootProps, props.position);
  const dimensions = useGridSelector(apiRef, gridDimensionsSelector);
  const propertyDimension = props.position === "vertical" ? "height" : "width";
  const propertyScroll = props.position === "vertical" ? "scrollTop" : "scrollLeft";
  const propertyScrollPosition = props.position === "vertical" ? "top" : "left";
  const hasScroll = props.position === "vertical" ? dimensions.hasScrollX : dimensions.hasScrollY;
  const contentSize = dimensions.minimumSize[propertyDimension] + (hasScroll ? dimensions.scrollbarSize : 0);
  const scrollbarSize = props.position === "vertical" ? dimensions.viewportInnerSize.height : dimensions.viewportOuterSize.width;
  const scrollbarInnerSize = scrollbarSize * (contentSize / dimensions.viewportOuterSize[propertyDimension]);
  const onScrollerScroll = useEventCallback_default(() => {
    const scrollbar = scrollbarRef.current;
    const scrollPosition = props.scrollPosition.current;
    if (!scrollbar) {
      return;
    }
    if (scrollPosition[propertyScrollPosition] === lastPosition.current) {
      return;
    }
    lastPosition.current = scrollPosition[propertyScrollPosition];
    if (isLocked.current) {
      isLocked.current = false;
      return;
    }
    isLocked.current = true;
    const value = scrollPosition[propertyScrollPosition] / contentSize;
    scrollbar[propertyScroll] = value * scrollbarInnerSize;
  });
  const onScrollbarScroll = useEventCallback_default(() => {
    const scroller = apiRef.current.virtualScrollerRef.current;
    const scrollbar = scrollbarRef.current;
    if (!scrollbar) {
      return;
    }
    if (isLocked.current) {
      isLocked.current = false;
      return;
    }
    isLocked.current = true;
    const value = scrollbar[propertyScroll] / scrollbarInnerSize;
    scroller[propertyScroll] = value * contentSize;
  });
  useOnMount(() => {
    const scroller = apiRef.current.virtualScrollerRef.current;
    const scrollbar = scrollbarRef.current;
    const options = {
      passive: true
    };
    scroller.addEventListener("scroll", onScrollerScroll, options);
    scrollbar.addEventListener("scroll", onScrollbarScroll, options);
    return () => {
      scroller.removeEventListener("scroll", onScrollerScroll, options);
      scrollbar.removeEventListener("scroll", onScrollbarScroll, options);
    };
  });
  React87.useEffect(() => {
    const content = contentRef.current;
    content.style.setProperty(propertyDimension, `${scrollbarInnerSize}px`);
  }, [scrollbarInnerSize, propertyDimension]);
  const Container2 = props.position === "vertical" ? ScrollbarVertical : ScrollbarHorizontal;
  return (0, import_jsx_runtime44.jsx)(Container2, {
    ref: useForkRef(ref, scrollbarRef),
    className: classes2.root,
    style: props.position === "vertical" && rootProps.listView ? {
      height: "100%",
      top: 0
    } : void 0,
    tabIndex: -1,
    "aria-hidden": "true",
    onFocus: (event) => {
      event.target.blur();
    },
    children: (0, import_jsx_runtime44.jsx)("div", {
      ref: contentRef,
      className: classes2.content
    })
  });
});
if (true) GridVirtualScrollbar.displayName = "GridVirtualScrollbar";

// node_modules/@mui/x-data-grid/esm/components/virtualization/GridVirtualScroller.js
var import_jsx_runtime45 = __toESM(require_jsx_runtime(), 1);
var useUtilityClasses15 = (ownerState) => {
  const {
    classes: classes2,
    hasScrollX,
    hasPinnedRight,
    loadingOverlayVariant,
    overlayType
  } = ownerState;
  const hideContent = loadingOverlayVariant === "skeleton" || overlayType === "noColumnsOverlay";
  const slots = {
    root: ["main", hasPinnedRight && "main--hasPinnedRight", hideContent && "main--hiddenContent"],
    scroller: ["virtualScroller", hasScrollX && "virtualScroller--hasScrollX"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var Scroller = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "VirtualScroller",
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.virtualScroller, ownerState.hasScrollX && styles["virtualScroller--hasScrollX"]];
  }
})({
  position: "relative",
  height: "100%",
  flexGrow: 1,
  overflow: "scroll",
  scrollbarWidth: "none",
  display: "flex",
  flexDirection: "column",
  "&::-webkit-scrollbar": {
    display: "none"
    /* Safari and Chrome */
  },
  "@media print": {
    overflow: "hidden"
  },
  // See https://github.com/mui/mui-x/issues/10547
  zIndex: 0
});
var hasPinnedRightSelector = (apiRef) => apiRef.current.state.dimensions.rightPinnedWidth > 0;
function GridVirtualScroller(props) {
  const apiRef = useGridPrivateApiContext();
  const rootProps = useGridRootProps();
  const hasScrollY = useGridSelector(apiRef, gridHasScrollYSelector);
  const hasScrollX = useGridSelector(apiRef, gridHasScrollXSelector);
  const hasPinnedRight = useGridSelector(apiRef, hasPinnedRightSelector);
  const hasBottomFiller = useGridSelector(apiRef, gridHasBottomFillerSelector);
  const {
    getOverlay,
    overlaysProps
  } = useGridOverlays();
  const ownerState = _extends({
    classes: rootProps.classes,
    hasScrollX,
    hasPinnedRight
  }, overlaysProps);
  const classes2 = useUtilityClasses15(ownerState);
  const virtualScroller = apiRef.current.virtualizer.api.useVirtualization().getters;
  const {
    getContainerProps,
    getScrollerProps,
    getContentProps,
    getScrollbarVerticalProps,
    getScrollbarHorizontalProps,
    getRows,
    getScrollAreaProps
  } = virtualScroller;
  const rows = getRows(void 0, gridRowTreeSelector(apiRef));
  return (0, import_jsx_runtime45.jsxs)(GridMainContainer, _extends({
    className: classes2.root
  }, getContainerProps(), {
    ownerState,
    children: [(0, import_jsx_runtime45.jsx)(GridScrollArea, _extends({
      scrollDirection: "left"
    }, getScrollAreaProps())), (0, import_jsx_runtime45.jsx)(GridScrollArea, _extends({
      scrollDirection: "right"
    }, getScrollAreaProps())), (0, import_jsx_runtime45.jsx)(GridScrollArea, _extends({
      scrollDirection: "up"
    }, getScrollAreaProps())), (0, import_jsx_runtime45.jsx)(GridScrollArea, _extends({
      scrollDirection: "down"
    }, getScrollAreaProps())), (0, import_jsx_runtime45.jsxs)(Scroller, _extends({
      className: classes2.scroller
    }, getScrollerProps(), {
      ownerState,
      children: [(0, import_jsx_runtime45.jsxs)(GridTopContainer, {
        children: [!rootProps.listView && (0, import_jsx_runtime45.jsx)(MemoizedGridHeaders, {}), (0, import_jsx_runtime45.jsx)(rootProps.slots.pinnedRows, {
          position: "top",
          virtualScroller
        })]
      }), getOverlay(), (0, import_jsx_runtime45.jsx)(GridVirtualScrollerContent, _extends({}, getContentProps(), {
        children: (0, import_jsx_runtime45.jsxs)(GridVirtualScrollerRenderZone, {
          role: "rowgroup",
          children: [rows, (0, import_jsx_runtime45.jsx)(rootProps.slots.detailPanels, {
            virtualScroller
          })]
        })
      })), hasBottomFiller && (0, import_jsx_runtime45.jsx)(Memoized, {
        rowsLength: rows.length
      }), (0, import_jsx_runtime45.jsx)(rootProps.slots.bottomContainer, {
        children: (0, import_jsx_runtime45.jsx)(rootProps.slots.pinnedRows, {
          position: "bottom",
          virtualScroller
        })
      })]
    })), hasScrollX && !rootProps.listView && (0, import_jsx_runtime45.jsx)(GridVirtualScrollbar, _extends({
      position: "horizontal"
    }, getScrollbarHorizontalProps())), hasScrollY && (0, import_jsx_runtime45.jsx)(GridVirtualScrollbar, _extends({
      position: "vertical"
    }, getScrollbarVerticalProps())), props.children]
  }));
}

// node_modules/@mui/x-data-grid/esm/components/base/GridFooterPlaceholder.js
init_extends();
var React89 = __toESM(require_react(), 1);
var import_jsx_runtime46 = __toESM(require_jsx_runtime(), 1);
function GridFooterPlaceholder() {
  var _a;
  const rootProps = useGridRootProps();
  if (rootProps.hideFooter) {
    return null;
  }
  return (0, import_jsx_runtime46.jsx)(rootProps.slots.footer, _extends(
    {},
    (_a = rootProps.slotProps) == null ? void 0 : _a.footer
    /* FIXME: typing error */
  ));
}

// node_modules/@mui/x-data-grid/esm/components/cell/GridCell.js
init_extends();
init_objectWithoutPropertiesLoose();
var React90 = __toESM(require_react(), 1);
var import_prop_types35 = __toESM(require_prop_types(), 1);
init_clsx();

// node_modules/@mui/x-data-grid/node_modules/@mui/utils/esm/ownerDocument/ownerDocument.js
function ownerDocument2(node) {
  return node && node.ownerDocument || document;
}

// node_modules/@mui/x-data-grid/node_modules/@mui/utils/esm/capitalize/capitalize.js
function capitalize2(string) {
  if (typeof string !== "string") {
    throw new Error(true ? "MUI: `capitalize(string)` expects a string argument." : formatMuiErrorMessage2(7));
  }
  return string.charAt(0).toUpperCase() + string.slice(1);
}

// node_modules/@mui/x-data-grid/esm/utils/doesSupportPreventScroll.js
var cachedSupportsPreventScroll;
function doesSupportPreventScroll() {
  if (cachedSupportsPreventScroll === void 0) {
    document.createElement("div").focus({
      get preventScroll() {
        cachedSupportsPreventScroll = true;
        return false;
      }
    });
  }
  return cachedSupportsPreventScroll;
}

// node_modules/@mui/x-data-grid/esm/internals/utils/computeSlots.js
init_extends();
function computeSlots({
  defaultSlots: defaultSlots2,
  slots
}) {
  const overrides = slots;
  if (!overrides || Object.keys(overrides).length === 0) {
    return defaultSlots2;
  }
  const result = _extends({}, defaultSlots2);
  Object.keys(overrides).forEach((key) => {
    const k = key;
    if (overrides[k] !== void 0) {
      result[k] = overrides[k];
    }
  });
  return result;
}

// node_modules/@mui/x-data-grid/esm/internals/utils/propValidation.js
var propValidatorsDataGrid = [(props) => props.autoPageSize && props.autoHeight && ["MUI X: `<DataGrid autoPageSize={true} autoHeight={true} />` are not valid props.", "You cannot use both the `autoPageSize` and `autoHeight` props at the same time because `autoHeight` scales the height of the Data Grid according to the `pageSize`.", "", "Please remove one of these two props."].join("\n") || void 0, (props) => props.paginationMode === "client" && props.paginationMeta != null && ['MUI X: Usage of the `paginationMeta` prop with client-side pagination (`paginationMode="client"`) has no effect.', '`paginationMeta` is only meant to be used with `paginationMode="server"`.'].join("\n") || void 0, (props) => props.signature === GridSignature.DataGrid && props.paginationMode === "client" && isNumber(props.rowCount) && ['MUI X: Usage of the `rowCount` prop with client side pagination (`paginationMode="client"`) has no effect.', '`rowCount` is only meant to be used with `paginationMode="server"`.'].join("\n") || void 0, (props) => props.paginationMode === "server" && props.rowCount == null && !props.dataSource && ["MUI X: The `rowCount` prop must be passed using `paginationMode='server'`", "For more detail, see http://mui.com/components/data-grid/pagination/#index-based-pagination"].join("\n") || void 0];
function validateProps(props, validators) {
  validators.forEach((validator) => {
    const message = validator(props);
    if (message) {
      warnOnce(message, "error");
    }
  });
}

// node_modules/@mui/x-data-grid/esm/internals/utils/gridRowGroupingUtils.js
var getRowGroupingCriteriaFromGroupingField = (groupingColDefField) => {
  const match = groupingColDefField.match(/^__row_group_by_columns_group_(.*)__$/);
  if (!match) {
    return null;
  }
  return match[1];
};
var isGroupingColumn = (field) => field === GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD || getRowGroupingCriteriaFromGroupingField(field) !== null;

// node_modules/@mui/x-data-grid/esm/utils/rtlFlipSide.js
var rtlFlipSide = (position2, isRtl) => {
  if (!position2) {
    return void 0;
  }
  if (!isRtl) {
    if (position2 === PinnedColumnPosition.LEFT) {
      return "left";
    }
    if (position2 === PinnedColumnPosition.RIGHT) {
      return "right";
    }
  } else {
    if (position2 === PinnedColumnPosition.LEFT) {
      return "right";
    }
    if (position2 === PinnedColumnPosition.RIGHT) {
      return "left";
    }
  }
  return void 0;
};

// node_modules/@mui/x-data-grid/esm/internals/utils/attachPinnedStyle.js
function attachPinnedStyle(style4, isRtl, pinnedPosition, pinnedOffset) {
  const side = rtlFlipSide(pinnedPosition, isRtl);
  if (!side || pinnedOffset === void 0) {
    return style4;
  }
  style4[side] = pinnedOffset;
  return style4;
}

// node_modules/@mui/x-data-grid/esm/components/cell/GridCell.js
var import_jsx_runtime47 = __toESM(require_jsx_runtime(), 1);
var _excluded39 = ["column", "row", "rowId", "rowNode", "align", "children", "colIndex", "width", "className", "style", "colSpan", "disableDragEvents", "isNotVisible", "pinnedOffset", "pinnedPosition", "showRightBorder", "showLeftBorder", "onClick", "onDoubleClick", "onMouseDown", "onMouseUp", "onMouseOver", "onKeyDown", "onKeyUp", "onDragEnter", "onDragOver"];
var _excluded210 = ["changeReason", "unstable_updateValueOnRender"];
var gridPinnedColumnPositionLookup = {
  [PinnedColumnPosition.LEFT]: GridPinnedColumnPosition.LEFT,
  [PinnedColumnPosition.RIGHT]: GridPinnedColumnPosition.RIGHT,
  [PinnedColumnPosition.NONE]: void 0,
  [PinnedColumnPosition.VIRTUAL]: void 0
};
var useUtilityClasses16 = (ownerState) => {
  const {
    align,
    showLeftBorder,
    showRightBorder,
    pinnedPosition,
    isEditable,
    isSelected,
    isSelectionMode,
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["cell", `cell--text${capitalize2(align)}`, isSelected && "selected", isEditable && "cell--editable", showLeftBorder && "cell--withLeftBorder", showRightBorder && "cell--withRightBorder", pinnedPosition === PinnedColumnPosition.LEFT && "cell--pinnedLeft", pinnedPosition === PinnedColumnPosition.RIGHT && "cell--pinnedRight", isSelectionMode && !isEditable && "cell--selectionMode"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var GridCell = forwardRef2(function GridCell2(props, ref) {
  var _a, _b;
  const {
    column,
    row,
    rowId,
    rowNode,
    align,
    colIndex,
    width: width2,
    className,
    style: styleProp,
    colSpan,
    disableDragEvents,
    isNotVisible,
    pinnedOffset,
    pinnedPosition,
    showRightBorder,
    showLeftBorder,
    onClick,
    onDoubleClick,
    onMouseDown,
    onMouseUp,
    onMouseOver,
    onKeyDown,
    onKeyUp,
    onDragEnter,
    onDragOver
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded39);
  const apiRef = useGridPrivateApiContext();
  const rootProps = useGridRootProps();
  const isRtl = useRtl();
  const field = column.field;
  const editCellState = useGridSelector(apiRef, gridEditCellStateSelector, {
    rowId,
    field
  });
  const config = useGridConfiguration();
  const cellAggregationResult = config.hooks.useCellAggregationResult(rowId, field);
  const cellMode = editCellState ? GridCellModes.Edit : GridCellModes.View;
  const {
    value: forcedValue,
    formattedValue: forcedFormattedValue
  } = cellAggregationResult || {};
  const cellParams = apiRef.current.getCellParamsForRow(rowId, field, row, {
    colDef: column,
    cellMode,
    rowNode,
    tabIndex: useGridSelector(apiRef, () => {
      const cellTabIndex = gridTabIndexCellSelector(apiRef);
      return cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === rowId ? 0 : -1;
    }),
    hasFocus: useGridSelector(apiRef, () => {
      const focus = gridFocusCellSelector(apiRef);
      return (focus == null ? void 0 : focus.id) === rowId && focus.field === field;
    }),
    value: forcedValue,
    formattedValue: forcedFormattedValue
  });
  cellParams.api = apiRef.current;
  const isSelected = useGridSelector(apiRef, () => apiRef.current.unstable_applyPipeProcessors("isCellSelected", false, {
    id: rowId,
    field
  }));
  const store = apiRef.current.virtualizer.store;
  const hiddenCells = useStore(store, Rowspan.selectors.hiddenCells);
  const spannedCells = useStore(store, Rowspan.selectors.spannedCells);
  const {
    hasFocus,
    isEditable = false,
    value
  } = cellParams;
  const canManageOwnFocus = column.type === "actions" && "getActions" in column && typeof column.getActions === "function" && column.getActions(apiRef.current.getRowParams(rowId)).some((action) => !action.props.disabled);
  const tabIndex = (cellMode === "view" || !isEditable) && !canManageOwnFocus ? cellParams.tabIndex : -1;
  const {
    classes: rootClasses,
    getCellClassName
  } = rootProps;
  const pipesClassName = useGridSelector(apiRef, () => apiRef.current.unstable_applyPipeProcessors("cellClassName", [], {
    id: rowId,
    field
  }).filter(Boolean).join(" "));
  const classNames = [pipesClassName];
  if (column.cellClassName) {
    classNames.push(typeof column.cellClassName === "function" ? column.cellClassName(cellParams) : column.cellClassName);
  }
  if (column.display === "flex") {
    classNames.push(gridClasses2["cell--flex"]);
  }
  if (getCellClassName) {
    classNames.push(getCellClassName(cellParams));
  }
  const valueToRender = cellParams.formattedValue ?? value;
  const cellRef = React90.useRef(null);
  const handleRef = useForkRef(ref, cellRef);
  const focusElementRef = React90.useRef(null);
  const isSelectionMode = rootProps.cellSelection ?? false;
  const ownerState = {
    align,
    showLeftBorder,
    showRightBorder,
    isEditable,
    classes: rootProps.classes,
    pinnedPosition,
    isSelected,
    isSelectionMode
  };
  const classes2 = useUtilityClasses16(ownerState);
  const publishMouseUp = React90.useCallback((eventName) => (event) => {
    const params = apiRef.current.getCellParams(rowId, field || "");
    apiRef.current.publishEvent(eventName, params, event);
    if (onMouseUp) {
      onMouseUp(event);
    }
  }, [apiRef, field, onMouseUp, rowId]);
  const publishMouseDown = React90.useCallback((eventName) => (event) => {
    const params = apiRef.current.getCellParams(rowId, field || "");
    apiRef.current.publishEvent(eventName, params, event);
    if (onMouseDown) {
      onMouseDown(event);
    }
  }, [apiRef, field, onMouseDown, rowId]);
  const publish = React90.useCallback((eventName, propHandler) => (event) => {
    if (!apiRef.current.getRow(rowId)) {
      return;
    }
    const params = apiRef.current.getCellParams(rowId, field || "");
    apiRef.current.publishEvent(eventName, params, event);
    if (propHandler) {
      propHandler(event);
    }
  }, [apiRef, field, rowId]);
  const isCellRowSpanned = ((_a = hiddenCells[rowId]) == null ? void 0 : _a[colIndex]) ?? false;
  const rowSpan = ((_b = spannedCells[rowId]) == null ? void 0 : _b[colIndex]) ?? 1;
  const style4 = React90.useMemo(() => {
    if (isNotVisible) {
      return {
        padding: 0,
        opacity: 0,
        width: 0,
        height: 0,
        border: 0
      };
    }
    const cellStyle = attachPinnedStyle(_extends({
      "--width": `${width2}px`
    }, styleProp), isRtl, pinnedPosition, pinnedOffset);
    const isLeftPinned = pinnedPosition === PinnedColumnPosition.LEFT;
    const isRightPinned = pinnedPosition === PinnedColumnPosition.RIGHT;
    if (rowSpan > 1) {
      cellStyle.height = `calc(var(--height) * ${rowSpan})`;
      cellStyle.zIndex = 10;
      if (isLeftPinned || isRightPinned) {
        cellStyle.zIndex = 40;
      }
    }
    return cellStyle;
  }, [width2, isNotVisible, styleProp, pinnedOffset, pinnedPosition, isRtl, rowSpan]);
  React90.useEffect(() => {
    if (!hasFocus || cellMode === GridCellModes.Edit) {
      return;
    }
    const doc = ownerDocument2(apiRef.current.rootElementRef.current);
    if (cellRef.current && !cellRef.current.contains(doc.activeElement)) {
      const focusableElement = cellRef.current.querySelector('[tabindex="0"]');
      const elementToFocus = focusElementRef.current || focusableElement || cellRef.current;
      if (doesSupportPreventScroll()) {
        elementToFocus.focus({
          preventScroll: true
        });
      } else {
        const scrollPosition = apiRef.current.getScrollPosition();
        elementToFocus.focus();
        apiRef.current.scroll(scrollPosition);
      }
    }
  }, [hasFocus, cellMode, apiRef]);
  if (isCellRowSpanned) {
    return (0, import_jsx_runtime47.jsx)("div", {
      "data-colindex": colIndex,
      role: "presentation",
      style: _extends({
        width: "var(--width)"
      }, style4)
    });
  }
  let handleFocus = other.onFocus;
  if (false) {
    handleFocus = (event) => {
      const focusedCell = gridFocusCellSelector(apiRef);
      if ((focusedCell == null ? void 0 : focusedCell.id) === rowId && focusedCell.field === field) {
        if (typeof other.onFocus === "function") {
          other.onFocus(event);
        }
        return;
      }
      if (!warnedOnce) {
        console.warn([`MUI X: The cell with id=${rowId} and field=${field} received focus.`, `According to the state, the focus should be at id=${focusedCell == null ? void 0 : focusedCell.id}, field=${focusedCell == null ? void 0 : focusedCell.field}.`, "Not syncing the state may cause unwanted behaviors since the `cellFocusIn` event won't be fired.", "Call `fireEvent.mouseUp` before the `fireEvent.click` to sync the focus with the state."].join("\n"));
        warnedOnce = true;
      }
    };
  }
  let children;
  let title;
  if (editCellState === null && column.renderCell) {
    children = column.renderCell(cellParams);
  }
  if (editCellState !== null && column.renderEditCell) {
    const updatedRow = apiRef.current.getRowWithUpdatedValues(rowId, column.field);
    const editCellStateRest = _objectWithoutPropertiesLoose(editCellState, _excluded210);
    const formattedValue = column.valueFormatter ? column.valueFormatter(editCellState.value, updatedRow, column, apiRef) : cellParams.formattedValue;
    const params = _extends({}, cellParams, {
      row: updatedRow,
      formattedValue
    }, editCellStateRest);
    children = column.renderEditCell(params);
    classNames.push(gridClasses2["cell--editing"]);
    classNames.push(rootClasses == null ? void 0 : rootClasses["cell--editing"]);
  }
  if (children === void 0) {
    const valueString = valueToRender == null ? void 0 : valueToRender.toString();
    children = valueString;
    title = valueString;
  }
  if (React90.isValidElement(children) && canManageOwnFocus) {
    children = React90.cloneElement(children, {
      focusElementRef
    });
  }
  const draggableEventHandlers = disableDragEvents ? null : {
    onDragEnter: publish("cellDragEnter", onDragEnter),
    onDragOver: publish("cellDragOver", onDragOver)
  };
  return (0, import_jsx_runtime47.jsx)("div", _extends({
    className: clsx_default(classes2.root, classNames, className),
    role: "gridcell",
    "data-field": field,
    "data-colindex": colIndex,
    "aria-colindex": colIndex + 1,
    "aria-colspan": colSpan,
    "aria-rowspan": rowSpan,
    style: style4,
    title,
    tabIndex,
    onClick: publish("cellClick", onClick),
    onDoubleClick: publish("cellDoubleClick", onDoubleClick),
    onMouseOver: publish("cellMouseOver", onMouseOver),
    onMouseDown: publishMouseDown("cellMouseDown"),
    onMouseUp: publishMouseUp("cellMouseUp"),
    onKeyDown: publish("cellKeyDown", onKeyDown),
    onKeyUp: publish("cellKeyUp", onKeyUp)
  }, draggableEventHandlers, other, {
    onFocus: handleFocus,
    ref: handleRef,
    children
  }));
});
if (true) GridCell.displayName = "GridCell";
true ? GridCell.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  align: import_prop_types35.default.oneOf(["center", "left", "right"]).isRequired,
  colIndex: import_prop_types35.default.number.isRequired,
  colSpan: import_prop_types35.default.number,
  column: import_prop_types35.default.object.isRequired,
  disableDragEvents: import_prop_types35.default.bool,
  isNotVisible: import_prop_types35.default.bool.isRequired,
  pinnedOffset: import_prop_types35.default.number,
  pinnedPosition: import_prop_types35.default.oneOf([0, 1, 2, 3]).isRequired,
  row: import_prop_types35.default.object.isRequired,
  rowId: import_prop_types35.default.oneOfType([import_prop_types35.default.number, import_prop_types35.default.string]).isRequired,
  rowNode: import_prop_types35.default.object.isRequired,
  showLeftBorder: import_prop_types35.default.bool.isRequired,
  showRightBorder: import_prop_types35.default.bool.isRequired,
  width: import_prop_types35.default.number.isRequired
} : void 0;
var MemoizedGridCell = fastMemo(GridCell);

// node_modules/@mui/x-data-grid/esm/components/cell/GridActionsCellItem.js
init_extends();
init_objectWithoutPropertiesLoose();
var React91 = __toESM(require_react(), 1);
var import_prop_types36 = __toESM(require_prop_types(), 1);
var import_jsx_runtime48 = __toESM(require_jsx_runtime(), 1);
var _excluded40 = ["label", "icon", "showInMenu", "onClick"];
var _excluded211 = ["label", "icon", "showInMenu", "onClick", "closeMenuOnClick", "closeMenu"];
var GridActionsCellItem = forwardRef2((props, ref) => {
  var _a;
  const rootProps = useGridRootProps();
  if (!props.showInMenu) {
    const {
      label: label2,
      icon: icon2,
      onClick: onClick2
    } = props, other2 = _objectWithoutPropertiesLoose(props, _excluded40);
    const handleClick2 = (event) => {
      onClick2 == null ? void 0 : onClick2(event);
    };
    return (0, import_jsx_runtime48.jsx)(rootProps.slots.baseIconButton, _extends({
      size: "small",
      role: "menuitem",
      "aria-label": label2
    }, other2, {
      onClick: handleClick2
    }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseIconButton, {
      ref,
      children: React91.cloneElement(icon2, {
        fontSize: "small"
      })
    }));
  }
  const {
    label,
    icon,
    onClick,
    closeMenuOnClick = true,
    closeMenu
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded211);
  const handleClick = (event) => {
    onClick == null ? void 0 : onClick(event);
    if (closeMenuOnClick) {
      closeMenu == null ? void 0 : closeMenu();
    }
  };
  return (0, import_jsx_runtime48.jsx)(rootProps.slots.baseMenuItem, _extends({
    ref
  }, other, {
    onClick: handleClick,
    iconStart: icon,
    children: label
  }));
});
if (true) GridActionsCellItem.displayName = "GridActionsCellItem";
true ? GridActionsCellItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  className: import_prop_types36.default.string,
  /**
   * from https://mui.com/material-ui/api/button-base/#ButtonBase-prop-component
   */
  component: import_prop_types36.default.elementType,
  disabled: import_prop_types36.default.bool,
  icon: import_prop_types36.default.oneOfType([import_prop_types36.default.element, import_prop_types36.default.func, import_prop_types36.default.number, import_prop_types36.default.object, import_prop_types36.default.string, import_prop_types36.default.bool]),
  label: import_prop_types36.default.node,
  showInMenu: import_prop_types36.default.bool,
  style: import_prop_types36.default.object
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/cell/GridSkeletonCell.js
init_extends();
init_objectWithoutPropertiesLoose();
var React92 = __toESM(require_react(), 1);
var import_prop_types37 = __toESM(require_prop_types(), 1);
init_clsx();
var import_jsx_runtime49 = __toESM(require_jsx_runtime(), 1);
var _excluded41 = ["field", "type", "align", "width", "height", "empty", "style", "className"];
var CIRCULAR_CONTENT_SIZE = "1.3em";
var CONTENT_HEIGHT = "1.2em";
var DEFAULT_CONTENT_WIDTH_RANGE = [40, 80];
var CONTENT_WIDTH_RANGE_BY_TYPE = {
  number: [40, 60],
  string: [40, 80],
  date: [40, 60],
  dateTime: [60, 80],
  singleSelect: [40, 80]
};
var useUtilityClasses17 = (ownerState) => {
  const {
    align,
    classes: classes2,
    empty
  } = ownerState;
  const slots = {
    root: ["cell", "cellSkeleton", `cell--text${align ? capitalize2(align) : "Left"}`, empty && "cellEmpty"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var randomNumberGenerator = createRandomNumberGenerator(12345);
function GridSkeletonCell(props) {
  const {
    field,
    type,
    align,
    width: width2,
    height: height2,
    empty = false,
    style: style4,
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded41);
  const rootProps = useGridRootProps();
  const ownerState = {
    classes: rootProps.classes,
    align,
    empty
  };
  const classes2 = useUtilityClasses17(ownerState);
  const skeletonProps = React92.useMemo(() => {
    const isCircularContent = type === "boolean" || type === "actions";
    if (isCircularContent) {
      return {
        variant: "circular",
        width: CIRCULAR_CONTENT_SIZE,
        height: CIRCULAR_CONTENT_SIZE
      };
    }
    const [min, max] = type ? CONTENT_WIDTH_RANGE_BY_TYPE[type] ?? DEFAULT_CONTENT_WIDTH_RANGE : DEFAULT_CONTENT_WIDTH_RANGE;
    return {
      variant: "text",
      width: `${Math.round(randomNumberGenerator(min, max))}%`,
      height: CONTENT_HEIGHT
    };
  }, [type]);
  return (0, import_jsx_runtime49.jsx)("div", _extends({
    "data-field": field,
    className: clsx_default(classes2.root, className),
    style: _extends({
      height: height2,
      maxWidth: width2,
      minWidth: width2
    }, style4)
  }, other, {
    children: !empty && (0, import_jsx_runtime49.jsx)(rootProps.slots.baseSkeleton, _extends({}, skeletonProps))
  }));
}
true ? GridSkeletonCell.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  align: import_prop_types37.default.string,
  /**
   * If `true`, the cell will not display the skeleton but still reserve the cell space.
   * @default false
   */
  empty: import_prop_types37.default.bool,
  field: import_prop_types37.default.string,
  height: import_prop_types37.default.oneOfType([import_prop_types37.default.oneOf(["auto"]), import_prop_types37.default.number]),
  type: import_prop_types37.default.oneOf(["actions", "boolean", "custom", "date", "dateTime", "number", "singleSelect", "string"]),
  width: import_prop_types37.default.oneOfType([import_prop_types37.default.number, import_prop_types37.default.string])
} : void 0;
var Memoized2 = fastMemo(GridSkeletonCell);

// node_modules/@mui/x-data-grid/esm/components/containers/GridRoot.js
init_extends();
init_objectWithoutPropertiesLoose();
var React96 = __toESM(require_react(), 1);
var import_prop_types38 = __toESM(require_prop_types(), 1);
init_clsx();

// node_modules/@mui/x-data-grid/esm/components/containers/GridRootStyles.js
var columnSeparatorTargetSize = 10;
var columnSeparatorOffset = -5;
var focusOutlineWidth = 1;
var separatorIconDragStyles = {
  width: 3,
  rx: 1.5,
  x: 10.5
};
var ignoreSsrWarning = "/* emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason */";
var shouldShowBorderTopRightRadiusSelector = (apiRef) => apiRef.current.state.dimensions.hasScrollX && (!apiRef.current.state.dimensions.hasScrollY || apiRef.current.state.dimensions.scrollbarSize === 0);
var GridRootStyles = styled_default("div", {
  name: "MuiDataGrid",
  slot: "Root",
  overridesResolver: (props, styles) => [
    // Root overrides
    styles.root,
    {
      [`&.${gridClasses2.autoHeight}`]: styles.autoHeight
    },
    {
      [`&.${gridClasses2.autosizing}`]: styles.autosizing
    },
    {
      [`&.${gridClasses2["root--densityStandard"]}`]: styles["root--densityStandard"]
    },
    {
      [`&.${gridClasses2["root--densityComfortable"]}`]: styles["root--densityComfortable"]
    },
    {
      [`&.${gridClasses2["root--densityCompact"]}`]: styles["root--densityCompact"]
    },
    {
      [`&.${gridClasses2["root--disableUserSelection"]}`]: styles["root--disableUserSelection"]
    },
    {
      [`&.${gridClasses2["root--noToolbar"]}`]: styles["root--noToolbar"]
    },
    {
      [`&.${gridClasses2.withVerticalBorder}`]: styles.withVerticalBorder
    },
    // Child element overrides
    // - Only declare overrides here for class names that are not applied to `styled` components.
    // - For `styled` components, declare overrides in the component itself.
    {
      [`& .${gridClasses2.actionsCell}`]: styles.actionsCell
    },
    {
      [`& .${gridClasses2.booleanCell}`]: styles.booleanCell
    },
    {
      [`& .${gridClasses2.cell}`]: styles.cell
    },
    {
      [`& .${gridClasses2["cell--editable"]}`]: styles["cell--editable"]
    },
    {
      [`& .${gridClasses2["cell--editing"]}`]: styles["cell--editing"]
    },
    {
      [`& .${gridClasses2["cell--flex"]}`]: styles["cell--flex"]
    },
    {
      [`& .${gridClasses2["cell--pinnedLeft"]}`]: styles["cell--pinnedLeft"]
    },
    {
      [`& .${gridClasses2["cell--pinnedRight"]}`]: styles["cell--pinnedRight"]
    },
    {
      [`& .${gridClasses2["cell--rangeBottom"]}`]: styles["cell--rangeBottom"]
    },
    {
      [`& .${gridClasses2["cell--rangeLeft"]}`]: styles["cell--rangeLeft"]
    },
    {
      [`& .${gridClasses2["cell--rangeRight"]}`]: styles["cell--rangeRight"]
    },
    {
      [`& .${gridClasses2["cell--rangeTop"]}`]: styles["cell--rangeTop"]
    },
    {
      [`& .${gridClasses2["cell--selectionMode"]}`]: styles["cell--selectionMode"]
    },
    {
      [`& .${gridClasses2["cell--textCenter"]}`]: styles["cell--textCenter"]
    },
    {
      [`& .${gridClasses2["cell--textLeft"]}`]: styles["cell--textLeft"]
    },
    {
      [`& .${gridClasses2["cell--textRight"]}`]: styles["cell--textRight"]
    },
    {
      [`& .${gridClasses2["cell--withLeftBorder"]}`]: styles["cell--withLeftBorder"]
    },
    {
      [`& .${gridClasses2["cell--withRightBorder"]}`]: styles["cell--withRightBorder"]
    },
    {
      [`& .${gridClasses2.cellCheckbox}`]: styles.cellCheckbox
    },
    {
      [`& .${gridClasses2.cellEmpty}`]: styles.cellEmpty
    },
    {
      [`& .${gridClasses2.cellOffsetLeft}`]: styles.cellOffsetLeft
    },
    {
      [`& .${gridClasses2.cellSkeleton}`]: styles.cellSkeleton
    },
    {
      [`& .${gridClasses2.checkboxInput}`]: styles.checkboxInput
    },
    {
      [`& .${gridClasses2.columnHeader}`]: styles.columnHeader
    },
    {
      [`& .${gridClasses2["columnHeader--alignCenter"]}`]: styles["columnHeader--alignCenter"]
    },
    {
      [`& .${gridClasses2["columnHeader--alignLeft"]}`]: styles["columnHeader--alignLeft"]
    },
    {
      [`& .${gridClasses2["columnHeader--alignRight"]}`]: styles["columnHeader--alignRight"]
    },
    {
      [`& .${gridClasses2["columnHeader--dragging"]}`]: styles["columnHeader--dragging"]
    },
    {
      [`& .${gridClasses2["columnHeader--emptyGroup"]}`]: styles["columnHeader--emptyGroup"]
    },
    {
      [`& .${gridClasses2["columnHeader--filledGroup"]}`]: styles["columnHeader--filledGroup"]
    },
    {
      [`& .${gridClasses2["columnHeader--filtered"]}`]: styles["columnHeader--filtered"]
    },
    {
      [`& .${gridClasses2["columnHeader--last"]}`]: styles["columnHeader--last"]
    },
    {
      [`& .${gridClasses2["columnHeader--lastUnpinned"]}`]: styles["columnHeader--lastUnpinned"]
    },
    {
      [`& .${gridClasses2["columnHeader--moving"]}`]: styles["columnHeader--moving"]
    },
    {
      [`& .${gridClasses2["columnHeader--numeric"]}`]: styles["columnHeader--numeric"]
    },
    {
      [`& .${gridClasses2["columnHeader--pinnedLeft"]}`]: styles["columnHeader--pinnedLeft"]
    },
    {
      [`& .${gridClasses2["columnHeader--pinnedRight"]}`]: styles["columnHeader--pinnedRight"]
    },
    {
      [`& .${gridClasses2["columnHeader--siblingFocused"]}`]: styles["columnHeader--siblingFocused"]
    },
    {
      [`& .${gridClasses2["columnHeader--sortable"]}`]: styles["columnHeader--sortable"]
    },
    {
      [`& .${gridClasses2["columnHeader--sorted"]}`]: styles["columnHeader--sorted"]
    },
    {
      [`& .${gridClasses2["columnHeader--withLeftBorder"]}`]: styles["columnHeader--withLeftBorder"]
    },
    {
      [`& .${gridClasses2["columnHeader--withRightBorder"]}`]: styles["columnHeader--withRightBorder"]
    },
    {
      [`& .${gridClasses2.columnHeaderCheckbox}`]: styles.columnHeaderCheckbox
    },
    {
      [`& .${gridClasses2.columnHeaderDraggableContainer}`]: styles.columnHeaderDraggableContainer
    },
    {
      [`& .${gridClasses2.columnHeaderTitleContainer}`]: styles.columnHeaderTitleContainer
    },
    {
      [`& .${gridClasses2.columnHeaderTitleContainerContent}`]: styles.columnHeaderTitleContainerContent
    },
    {
      [`& .${gridClasses2.columnSeparator}`]: styles.columnSeparator
    },
    {
      [`& .${gridClasses2["columnSeparator--resizable"]}`]: styles["columnSeparator--resizable"]
    },
    {
      [`& .${gridClasses2["columnSeparator--resizing"]}`]: styles["columnSeparator--resizing"]
    },
    {
      [`& .${gridClasses2["columnSeparator--sideLeft"]}`]: styles["columnSeparator--sideLeft"]
    },
    {
      [`& .${gridClasses2["columnSeparator--sideRight"]}`]: styles["columnSeparator--sideRight"]
    },
    {
      [`& .${gridClasses2["container--bottom"]}`]: styles["container--bottom"]
    },
    {
      [`& .${gridClasses2["container--top"]}`]: styles["container--top"]
    },
    {
      [`& .${gridClasses2.detailPanelToggleCell}`]: styles.detailPanelToggleCell
    },
    {
      [`& .${gridClasses2["detailPanelToggleCell--expanded"]}`]: styles["detailPanelToggleCell--expanded"]
    },
    {
      [`& .${gridClasses2.editBooleanCell}`]: styles.editBooleanCell
    },
    {
      [`& .${gridClasses2.filterIcon}`]: styles.filterIcon
    },
    {
      [`& .${gridClasses2["filler--borderBottom"]}`]: styles["filler--borderBottom"]
    },
    {
      [`& .${gridClasses2["filler--pinnedLeft"]}`]: styles["filler--pinnedLeft"]
    },
    {
      [`& .${gridClasses2["filler--pinnedRight"]}`]: styles["filler--pinnedRight"]
    },
    {
      [`& .${gridClasses2.groupingCriteriaCell}`]: styles.groupingCriteriaCell
    },
    {
      [`& .${gridClasses2.groupingCriteriaCellLoadingContainer}`]: styles.groupingCriteriaCellLoadingContainer
    },
    {
      [`& .${gridClasses2.groupingCriteriaCellToggle}`]: styles.groupingCriteriaCellToggle
    },
    {
      [`& .${gridClasses2.headerFilterRow}`]: styles.headerFilterRow
    },
    {
      [`& .${gridClasses2.iconSeparator}`]: styles.iconSeparator
    },
    {
      [`& .${gridClasses2.menuIcon}`]: styles.menuIcon
    },
    {
      [`& .${gridClasses2.menuIconButton}`]: styles.menuIconButton
    },
    {
      [`& .${gridClasses2.menuList}`]: styles.menuList
    },
    {
      [`& .${gridClasses2.menuOpen}`]: styles.menuOpen
    },
    {
      [`& .${gridClasses2.overlayWrapperInner}`]: styles.overlayWrapperInner
    },
    {
      [`& .${gridClasses2.pinnedRows}`]: styles.pinnedRows
    },
    {
      [`& .${gridClasses2["pinnedRows--bottom"]}`]: styles["pinnedRows--bottom"]
    },
    {
      [`& .${gridClasses2["pinnedRows--top"]}`]: styles["pinnedRows--top"]
    },
    {
      [`& .${gridClasses2.row}`]: styles.row
    },
    {
      [`& .${gridClasses2["row--borderBottom"]}`]: styles["row--borderBottom"]
    },
    {
      [`& .${gridClasses2["row--detailPanelExpanded"]}`]: styles["row--detailPanelExpanded"]
    },
    {
      [`& .${gridClasses2["row--dragging"]}`]: styles["row--dragging"]
    },
    {
      [`& .${gridClasses2["row--dynamicHeight"]}`]: styles["row--dynamicHeight"]
    },
    {
      [`& .${gridClasses2["row--editable"]}`]: styles["row--editable"]
    },
    {
      [`& .${gridClasses2["row--editing"]}`]: styles["row--editing"]
    },
    {
      [`& .${gridClasses2["row--firstVisible"]}`]: styles["row--firstVisible"]
    },
    {
      [`& .${gridClasses2["row--lastVisible"]}`]: styles["row--lastVisible"]
    },
    {
      [`& .${gridClasses2.rowReorderCell}`]: styles.rowReorderCell
    },
    {
      [`& .${gridClasses2["rowReorderCell--draggable"]}`]: styles["rowReorderCell--draggable"]
    },
    {
      [`& .${gridClasses2.rowReorderCellContainer}`]: styles.rowReorderCellContainer
    },
    {
      [`& .${gridClasses2.rowReorderCellPlaceholder}`]: styles.rowReorderCellPlaceholder
    },
    {
      [`& .${gridClasses2.rowSkeleton}`]: styles.rowSkeleton
    },
    {
      [`& .${gridClasses2.scrollbar}`]: styles.scrollbar
    },
    {
      [`& .${gridClasses2["scrollbar--horizontal"]}`]: styles["scrollbar--horizontal"]
    },
    {
      [`& .${gridClasses2["scrollbar--vertical"]}`]: styles["scrollbar--vertical"]
    },
    {
      [`& .${gridClasses2.scrollbarFiller}`]: styles.scrollbarFiller
    },
    {
      [`& .${gridClasses2["scrollbarFiller--borderBottom"]}`]: styles["scrollbarFiller--borderBottom"]
    },
    {
      [`& .${gridClasses2["scrollbarFiller--borderTop"]}`]: styles["scrollbarFiller--borderTop"]
    },
    {
      [`& .${gridClasses2["scrollbarFiller--header"]}`]: styles["scrollbarFiller--header"]
    },
    {
      [`& .${gridClasses2["scrollbarFiller--pinnedRight"]}`]: styles["scrollbarFiller--pinnedRight"]
    },
    {
      [`& .${gridClasses2.sortIcon}`]: styles.sortIcon
    },
    {
      [`& .${gridClasses2.treeDataGroupingCell}`]: styles.treeDataGroupingCell
    },
    {
      [`& .${gridClasses2.treeDataGroupingCellLoadingContainer}`]: styles.treeDataGroupingCellLoadingContainer
    },
    {
      [`& .${gridClasses2.treeDataGroupingCellToggle}`]: styles.treeDataGroupingCellToggle
    },
    {
      [`& .${gridClasses2.withBorderColor}`]: styles.withBorderColor
    },
    {
      [`& .${gridClasses2["row--dropAbove"]}`]: styles["row--dropAbove"]
    },
    {
      [`& .${gridClasses2["row--dropBelow"]}`]: styles["row--dropBelow"]
    },
    {
      [`& .${gridClasses2["row--beingDragged"]}`]: styles["row--beingDragged"]
    }
  ]
})(() => {
  const apiRef = useGridPrivateApiContext();
  const shouldShowBorderTopRightRadius = useGridSelector(apiRef, shouldShowBorderTopRightRadiusSelector);
  const baseBackground = vars.colors.background.base;
  const headerBackground = vars.header.background.base;
  const pinnedBackground = vars.cell.background.pinned;
  const hoverColor = removeOpacity2(vars.colors.interactive.hover);
  const hoverOpacity = vars.colors.interactive.hoverOpacity;
  const selectedColor = vars.colors.interactive.selected;
  const selectedOpacity = vars.colors.interactive.selectedOpacity;
  const selectedHoverColor = selectedColor;
  const selectedHoverOpacity = `calc(${selectedOpacity} + ${hoverOpacity})`;
  const hoverBackground = mix(baseBackground, hoverColor, hoverOpacity);
  const selectedBackground = mix(baseBackground, selectedColor, selectedOpacity);
  const selectedHoverBackground = mix(baseBackground, selectedHoverColor, selectedHoverOpacity);
  const pinnedHoverBackground = mix(pinnedBackground, hoverColor, hoverOpacity);
  const pinnedSelectedBackground = mix(pinnedBackground, selectedColor, selectedOpacity);
  const pinnedSelectedHoverBackground = mix(pinnedBackground, selectedHoverColor, selectedHoverOpacity);
  const getPinnedBackgroundStyles = (backgroundColor2) => ({
    [`& .${gridClasses2["cell--pinnedLeft"]}, & .${gridClasses2["cell--pinnedRight"]}`]: {
      backgroundColor: backgroundColor2,
      "&.Mui-selected": {
        backgroundColor: mix(backgroundColor2, selectedBackground, selectedOpacity),
        "&:hover": {
          backgroundColor: mix(backgroundColor2, selectedHoverBackground, selectedHoverOpacity)
        }
      }
    }
  });
  const pinnedHoverStyles = getPinnedBackgroundStyles(pinnedHoverBackground);
  const pinnedSelectedStyles = getPinnedBackgroundStyles(pinnedSelectedBackground);
  const pinnedSelectedHoverStyles = getPinnedBackgroundStyles(pinnedSelectedHoverBackground);
  const selectedStyles = {
    backgroundColor: selectedBackground,
    "&:hover": {
      backgroundColor: selectedHoverBackground,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: selectedBackground
      }
    }
  };
  const gridStyle = {
    "--unstable_DataGrid-radius": vars.radius.base,
    "--unstable_DataGrid-headWeight": vars.typography.fontWeight.medium,
    "--DataGrid-rowBorderColor": vars.colors.border.base,
    "--DataGrid-cellOffsetMultiplier": 2,
    "--DataGrid-width": "0px",
    "--DataGrid-hasScrollX": "0",
    "--DataGrid-hasScrollY": "0",
    "--DataGrid-scrollbarSize": "10px",
    "--DataGrid-rowWidth": "0px",
    "--DataGrid-columnsTotalWidth": "0px",
    "--DataGrid-leftPinnedWidth": "0px",
    "--DataGrid-rightPinnedWidth": "0px",
    "--DataGrid-headerHeight": "0px",
    "--DataGrid-headersTotalHeight": "0px",
    "--DataGrid-topContainerHeight": "0px",
    "--DataGrid-bottomContainerHeight": "0px",
    flex: 1,
    boxSizing: "border-box",
    position: "relative",
    borderWidth: "1px",
    borderStyle: "solid",
    borderColor: vars.colors.border.base,
    borderRadius: "var(--unstable_DataGrid-radius)",
    backgroundColor: vars.colors.background.base,
    color: vars.colors.foreground.base,
    font: vars.typography.font.body,
    outline: "none",
    height: "100%",
    display: "flex",
    minWidth: 0,
    // See https://github.com/mui/mui-x/issues/8547
    minHeight: 0,
    flexDirection: "column",
    overflow: "hidden",
    overflowAnchor: "none",
    // Keep the same scrolling position
    transform: "translate(0, 0)",
    // Create a stacking context to keep scrollbars from showing on top
    [`.${gridClasses2.main} > *:first-child${ignoreSsrWarning}`]: {
      borderTopLeftRadius: "var(--unstable_DataGrid-radius)",
      borderTopRightRadius: "var(--unstable_DataGrid-radius)"
    },
    [`&.${gridClasses2.autoHeight}`]: {
      height: "auto"
    },
    [`&.${gridClasses2.autosizing}`]: {
      [`& .${gridClasses2.columnHeaderTitleContainerContent} > *`]: {
        overflow: "visible !important"
      },
      "@media (hover: hover)": {
        [`& .${gridClasses2.menuIcon}`]: {
          width: "0 !important",
          visibility: "hidden !important"
        }
      },
      [`& .${gridClasses2.cell}`]: {
        overflow: "visible !important",
        whiteSpace: "nowrap",
        minWidth: "max-content !important",
        maxWidth: "max-content !important"
      },
      [`& .${gridClasses2.groupingCriteriaCell}`]: {
        width: "unset"
      },
      [`& .${gridClasses2.treeDataGroupingCell}`]: {
        width: "unset"
      }
    },
    [`&.${gridClasses2.withSidePanel}`]: {
      flexDirection: "row"
    },
    [`& .${gridClasses2.mainContent}`]: {
      display: "flex",
      flexDirection: "column",
      overflow: "hidden",
      flex: 1
    },
    [`& .${gridClasses2.columnHeader}, & .${gridClasses2.cell}`]: {
      WebkitTapHighlightColor: "transparent",
      padding: "0 10px",
      boxSizing: "border-box"
    },
    [`& .${gridClasses2.columnHeader}:focus-within, & .${gridClasses2.cell}:focus-within`]: {
      outline: `solid ${setOpacity2(vars.colors.interactive.focus, 0.5)} ${focusOutlineWidth}px`,
      outlineOffset: focusOutlineWidth * -1
    },
    [`& .${gridClasses2.columnHeader}:focus, & .${gridClasses2.cell}:focus`]: {
      outline: `solid ${vars.colors.interactive.focus} ${focusOutlineWidth}px`,
      outlineOffset: focusOutlineWidth * -1
    },
    // Hide the column separator when:
    // - the column is focused and has an outline
    // - the next column is focused and has an outline
    // - the column has a left or right border
    // - the next column is pinned right and has a left border
    [`& .${gridClasses2.columnHeader}:focus,
      & .${gridClasses2["columnHeader--withLeftBorder"]},
      & .${gridClasses2["columnHeader--withRightBorder"]},
      & .${gridClasses2["columnHeader--siblingFocused"]},
      & .${gridClasses2["virtualScroller--hasScrollX"]} .${gridClasses2["columnHeader--lastUnpinned"]},
      & .${gridClasses2["virtualScroller--hasScrollX"]} .${gridClasses2["columnHeader--last"]}
      `]: {
      [`& .${gridClasses2.columnSeparator}`]: {
        opacity: 0
      },
      // Show resizable separators at all times on touch devices
      "@media (hover: none)": {
        [`& .${gridClasses2["columnSeparator--resizable"]}`]: {
          opacity: 1
        }
      },
      [`& .${gridClasses2["columnSeparator--resizable"]}:hover`]: {
        opacity: 1
      }
    },
    [`&.${gridClasses2["root--noToolbar"]} [aria-rowindex="1"] [aria-colindex="1"]`]: {
      borderTopLeftRadius: "calc(var(--unstable_DataGrid-radius) - 1px)"
    },
    [`&.${gridClasses2["root--noToolbar"]} [aria-rowindex="1"] .${gridClasses2["columnHeader--last"]}`]: {
      borderTopRightRadius: shouldShowBorderTopRightRadius ? "calc(var(--unstable_DataGrid-radius) - 1px)" : void 0
    },
    [`& .${gridClasses2.columnHeaderCheckbox}, & .${gridClasses2.cellCheckbox}`]: {
      padding: 0,
      justifyContent: "center",
      alignItems: "center"
    },
    [`& .${gridClasses2.columnHeader}`]: {
      position: "relative",
      display: "flex",
      alignItems: "center",
      backgroundColor: headerBackground
    },
    [`& .${gridClasses2["columnHeader--filter"]}`]: {
      paddingTop: 8,
      paddingBottom: 8,
      paddingRight: 5,
      minHeight: "min-content",
      overflow: "hidden"
    },
    [`& .${gridClasses2["virtualScroller--hasScrollX"]} .${gridClasses2["columnHeader--last"]}`]: {
      overflow: "hidden"
    },
    [`& .${gridClasses2["pivotPanelField--sorted"]} .${gridClasses2.iconButtonContainer},
      & .${gridClasses2["columnHeader--sorted"]} .${gridClasses2.iconButtonContainer},
      & .${gridClasses2["columnHeader--filtered"]} .${gridClasses2.iconButtonContainer}`]: {
      visibility: "visible",
      width: "auto"
    },
    [`& .${gridClasses2.pivotPanelField}:not(.${gridClasses2["pivotPanelField--sorted"]}) .${gridClasses2.sortButton},
      & .${gridClasses2.columnHeader}:not(.${gridClasses2["columnHeader--sorted"]}) .${gridClasses2.sortButton}`]: {
      opacity: 0,
      transition: vars.transition(["opacity"], {
        duration: vars.transitions.duration.short
      })
    },
    [`& .${gridClasses2.columnHeaderTitleContainer}`]: {
      display: "flex",
      alignItems: "center",
      gap: vars.spacing(0.25),
      minWidth: 0,
      flex: 1,
      whiteSpace: "nowrap",
      overflow: "hidden"
    },
    [`& .${gridClasses2.columnHeaderTitleContainerContent}`]: {
      overflow: "hidden",
      display: "flex",
      alignItems: "center"
    },
    [`& .${gridClasses2["columnHeader--filledGroup"]} .${gridClasses2.columnHeaderTitleContainer}`]: {
      borderBottomWidth: "1px",
      borderBottomStyle: "solid",
      boxSizing: "border-box"
    },
    [`& .${gridClasses2.sortIcon}, & .${gridClasses2.filterIcon}`]: {
      fontSize: "inherit"
    },
    [`& .${gridClasses2["columnHeader--sortable"]}`]: {
      cursor: "pointer"
    },
    [`& .${gridClasses2["columnHeader--alignCenter"]} .${gridClasses2.columnHeaderTitleContainer}`]: {
      justifyContent: "center"
    },
    [`& .${gridClasses2["columnHeader--alignRight"]} .${gridClasses2.columnHeaderDraggableContainer}, & .${gridClasses2["columnHeader--alignRight"]} .${gridClasses2.columnHeaderTitleContainer}`]: {
      flexDirection: "row-reverse"
    },
    [`& .${gridClasses2["columnHeader--alignCenter"]} .${gridClasses2.menuIcon}`]: {
      marginLeft: "auto"
    },
    [`& .${gridClasses2["columnHeader--alignRight"]} .${gridClasses2.menuIcon}`]: {
      marginRight: "auto",
      marginLeft: -5
    },
    [`& .${gridClasses2["columnHeader--moving"]}`]: {
      backgroundColor: hoverBackground
    },
    [`& .${gridClasses2["columnHeader--pinnedLeft"]}, & .${gridClasses2["columnHeader--pinnedRight"]}`]: {
      position: "sticky",
      zIndex: 40,
      // Should be above the column separator
      background: vars.header.background.base
    },
    [`& .${gridClasses2.columnSeparator}`]: {
      position: "absolute",
      overflow: "hidden",
      zIndex: 30,
      display: "flex",
      flexDirection: "column",
      justifyContent: "center",
      alignItems: "center",
      maxWidth: columnSeparatorTargetSize,
      color: vars.colors.border.base
    },
    [`& .${gridClasses2.columnHeaders}`]: {
      width: "var(--DataGrid-rowWidth)",
      backgroundColor: headerBackground
    },
    "@media (hover: hover)": {
      [`& .${gridClasses2.columnHeader}:hover`]: {
        [`& .${gridClasses2.menuIcon}`]: {
          width: "auto",
          visibility: "visible"
        },
        [`& .${gridClasses2.iconButtonContainer}`]: {
          visibility: "visible",
          width: "auto"
        }
      },
      [`& .${gridClasses2.columnHeader}:not(.${gridClasses2["columnHeader--sorted"]}):hover .${gridClasses2.sortButton},
        & .${gridClasses2.pivotPanelField}:not(.${gridClasses2["pivotPanelField--sorted"]}):hover .${gridClasses2.sortButton},
        & .${gridClasses2.pivotPanelField}:not(.${gridClasses2["pivotPanelField--sorted"]}) .${gridClasses2.sortButton}:focus-visible`]: {
        opacity: 0.5
      }
    },
    "@media (hover: none)": {
      [`& .${gridClasses2.columnHeader} .${gridClasses2.menuIcon}`]: {
        width: "auto",
        visibility: "visible"
      },
      [`& .${gridClasses2.columnHeader}:focus,
        & .${gridClasses2["columnHeader--siblingFocused"]}`]: {
        [`.${gridClasses2["columnSeparator--resizable"]}`]: {
          color: vars.colors.foreground.accent
        }
      },
      [`& .${gridClasses2.pivotPanelField}:not(.${gridClasses2["pivotPanelField--sorted"]}) .${gridClasses2.sortButton}`]: {
        opacity: 0.5
      }
    },
    // Hide the column separator when the column has border and it is not resizable
    // In this case, this column separator may block interaction with the separator from the adjacent column that is resizable
    [`& .${gridClasses2["columnHeader--withLeftBorder"]} .${gridClasses2["columnSeparator--sideLeft"]}:not(.${gridClasses2["columnSeparator--resizable"]}), & .${gridClasses2["columnHeader--withRightBorder"]} .${gridClasses2["columnSeparator--sideRight"]}:not(.${gridClasses2["columnSeparator--resizable"]})`]: {
      display: "none"
    },
    [`& .${gridClasses2["columnSeparator--sideLeft"]}`]: {
      left: columnSeparatorOffset
    },
    [`& .${gridClasses2["columnSeparator--sideRight"]}`]: {
      right: columnSeparatorOffset
    },
    [`& .${gridClasses2["columnHeader--withRightBorder"]} .${gridClasses2["columnSeparator--sideLeft"]}`]: {
      left: columnSeparatorOffset - 0.5
    },
    [`& .${gridClasses2["columnHeader--withRightBorder"]} .${gridClasses2["columnSeparator--sideRight"]}`]: {
      right: columnSeparatorOffset - 0.5
    },
    [`& .${gridClasses2["columnSeparator--resizable"]}`]: {
      cursor: "col-resize",
      touchAction: "none",
      [`&.${gridClasses2["columnSeparator--resizing"]}`]: {
        color: vars.colors.foreground.accent
      },
      // Always appear as draggable on touch devices
      "@media (hover: none)": {
        [`& .${gridClasses2.iconSeparator} rect`]: separatorIconDragStyles
      },
      "@media (hover: hover)": {
        "&:hover": {
          color: vars.colors.foreground.accent,
          [`& .${gridClasses2.iconSeparator} rect`]: separatorIconDragStyles
        }
      },
      "& svg": {
        pointerEvents: "none"
      }
    },
    [`& .${gridClasses2.iconSeparator}`]: {
      color: "inherit",
      transition: vars.transition(["color", "width"], {
        duration: vars.transitions.duration.short
      })
    },
    [`& .${gridClasses2.menuIcon}`]: {
      width: 0,
      visibility: "hidden",
      fontSize: 20,
      marginRight: -5,
      display: "flex",
      alignItems: "center"
    },
    [`.${gridClasses2.menuOpen}`]: {
      visibility: "visible",
      width: "auto"
    },
    [`& .${gridClasses2.headerFilterRow}`]: {
      [`& .${gridClasses2.columnHeader}`]: {
        boxSizing: "border-box",
        borderBottom: "1px solid var(--DataGrid-rowBorderColor)"
      }
    },
    /* Bottom border of the top-container */
    [`& .${gridClasses2["row--borderBottom"]} .${gridClasses2.columnHeader},
      & .${gridClasses2["row--borderBottom"]} .${gridClasses2.filler},
      & .${gridClasses2["row--borderBottom"]} .${gridClasses2.scrollbarFiller}`]: {
      borderBottom: `1px solid var(--DataGrid-rowBorderColor)`
    },
    [`& .${gridClasses2["row--borderBottom"]} .${gridClasses2.cell}`]: {
      borderBottom: `1px solid var(--rowBorderColor)`
    },
    /* Row styles */
    [`.${gridClasses2.row}`]: {
      display: "flex",
      width: "var(--DataGrid-rowWidth)",
      breakInside: "avoid",
      // Avoid the row to be broken in two different print pages.
      "--rowBorderColor": "var(--DataGrid-rowBorderColor)",
      [`&.${gridClasses2["row--firstVisible"]}`]: {
        "--rowBorderColor": "transparent"
      },
      "&:hover": {
        backgroundColor: hoverBackground,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      },
      [`&.${gridClasses2.rowSkeleton}:hover`]: {
        backgroundColor: "transparent"
      },
      "&.Mui-selected": selectedStyles
    },
    /* Cell styles */
    [`& .${gridClasses2.cell}`]: {
      flex: "0 0 auto",
      height: "var(--height)",
      width: "var(--width)",
      lineHeight: "calc(var(--height) - 1px)",
      // -1px for the border
      boxSizing: "border-box",
      borderTop: `1px solid var(--rowBorderColor)`,
      overflow: "hidden",
      whiteSpace: "nowrap",
      textOverflow: "ellipsis",
      "&.Mui-selected": selectedStyles
    },
    [`& .${gridClasses2["virtualScrollerContent--overflowed"]} .${gridClasses2["row--lastVisible"]} .${gridClasses2.cell}`]: {
      borderTopColor: "transparent"
    },
    [`& .${gridClasses2.pinnedRows} .${gridClasses2.row}, .${gridClasses2.aggregationRowOverlayWrapper} .${gridClasses2.row}`]: {
      backgroundColor: pinnedBackground,
      "&:hover": {
        backgroundColor: pinnedHoverBackground
      }
    },
    [`& .${gridClasses2["pinnedRows--top"]} :first-of-type`]: {
      [`& .${gridClasses2.cell}, .${gridClasses2.scrollbarFiller}`]: {
        borderTop: "none"
      }
    },
    [`&.${gridClasses2["root--disableUserSelection"]}`]: {
      userSelect: "none"
    },
    [`& .${gridClasses2["row--dynamicHeight"]} > .${gridClasses2.cell}`]: {
      whiteSpace: "initial",
      lineHeight: "inherit"
    },
    [`& .${gridClasses2.cellEmpty}`]: {
      flex: 1,
      padding: 0,
      height: "unset"
    },
    [`& .${gridClasses2.cell}.${gridClasses2["cell--selectionMode"]}`]: {
      cursor: "default"
    },
    [`& .${gridClasses2.cell}.${gridClasses2["cell--editing"]}`]: {
      padding: 1,
      display: "flex",
      boxShadow: vars.shadows.base,
      backgroundColor: vars.colors.background.overlay,
      "&:focus-within": {
        outline: `${focusOutlineWidth}px solid ${vars.colors.interactive.focus}`,
        outlineOffset: focusOutlineWidth * -1
      }
    },
    [`& .${gridClasses2["cell--editing"]}`]: {
      "& .MuiInputBase-root": {
        height: "100%"
      }
    },
    [`& .${gridClasses2["row--editing"]}`]: {
      boxShadow: vars.shadows.base
    },
    [`& .${gridClasses2["row--editing"]} .${gridClasses2.cell}`]: {
      boxShadow: "none",
      backgroundColor: vars.colors.background.overlay
    },
    [`& .${gridClasses2.editBooleanCell}`]: {
      display: "flex",
      height: "100%",
      width: "100%",
      alignItems: "center",
      justifyContent: "center"
    },
    [`& .${gridClasses2.booleanCell}[data-value="true"]`]: {
      color: vars.colors.foreground.muted
    },
    [`& .${gridClasses2.booleanCell}[data-value="false"]`]: {
      color: vars.colors.foreground.disabled
    },
    [`& .${gridClasses2.actionsCell}`]: {
      display: "inline-flex",
      alignItems: "center",
      gridGap: vars.spacing(1)
    },
    [`& .${gridClasses2.rowReorderCell}`]: {
      display: "inline-flex",
      flex: 1,
      alignItems: "center",
      justifyContent: "center",
      opacity: vars.colors.interactive.disabledOpacity
    },
    [`& .${gridClasses2["rowReorderCell--draggable"]}`]: {
      cursor: "grab",
      opacity: 1
    },
    [`& .${gridClasses2.rowReorderCellContainer}`]: {
      padding: 0,
      display: "flex",
      alignItems: "stretch"
    },
    [`.${gridClasses2.withBorderColor}`]: {
      borderColor: vars.colors.border.base
    },
    [`& .${gridClasses2["cell--withLeftBorder"]}, & .${gridClasses2["columnHeader--withLeftBorder"]}`]: {
      borderLeftColor: "var(--DataGrid-rowBorderColor)",
      borderLeftWidth: "1px",
      borderLeftStyle: "solid"
    },
    [`& .${gridClasses2["cell--withRightBorder"]}, & .${gridClasses2["columnHeader--withRightBorder"]}`]: {
      borderRightColor: "var(--DataGrid-rowBorderColor)",
      borderRightWidth: "1px",
      borderRightStyle: "solid"
    },
    [`& .${gridClasses2["cell--flex"]}`]: {
      display: "flex",
      alignItems: "center",
      lineHeight: "inherit"
    },
    [`& .${gridClasses2["cell--textLeft"]}`]: {
      textAlign: "left",
      justifyContent: "flex-start"
    },
    [`& .${gridClasses2["cell--textRight"]}`]: {
      textAlign: "right",
      justifyContent: "flex-end"
    },
    [`& .${gridClasses2["cell--textCenter"]}`]: {
      textAlign: "center",
      justifyContent: "center"
    },
    [`& .${gridClasses2["cell--pinnedLeft"]}, & .${gridClasses2["cell--pinnedRight"]}`]: {
      position: "sticky",
      zIndex: 30,
      background: vars.cell.background.pinned,
      "&.Mui-selected": {
        backgroundColor: pinnedSelectedBackground
      }
    },
    [`& .${gridClasses2.row}`]: {
      "&:hover": pinnedHoverStyles,
      "&.Mui-selected": pinnedSelectedStyles,
      "&.Mui-selected:hover": pinnedSelectedHoverStyles
    },
    [`& .${gridClasses2.cellOffsetLeft}`]: {
      flex: "0 0 auto",
      display: "inline-block"
    },
    [`& .${gridClasses2.cellSkeleton}`]: {
      flex: "0 0 auto",
      height: "100%",
      display: "inline-flex",
      alignItems: "center"
    },
    [`& .${gridClasses2.columnHeaderDraggableContainer}`]: {
      display: "flex",
      width: "100%",
      height: "100%"
    },
    [`& .${gridClasses2.rowReorderCellPlaceholder}`]: {
      display: "none"
    },
    [`& .${gridClasses2["columnHeader--dragging"]}`]: {
      background: vars.colors.background.overlay,
      padding: "0 12px",
      borderRadius: "var(--unstable_DataGrid-radius)",
      opacity: vars.colors.interactive.disabledOpacity
    },
    [`& .${gridClasses2["row--dragging"]}`]: {
      background: vars.colors.background.overlay,
      padding: "0 12px",
      borderRadius: "var(--unstable_DataGrid-radius)",
      border: "1px solid var(--DataGrid-rowBorderColor)",
      color: vars.colors.foreground.base,
      transform: "translateZ(0)",
      [`& .${gridClasses2.rowReorderCellPlaceholder}`]: {
        padding: "0 6px",
        display: "flex"
      }
    },
    [`& .${gridClasses2.treeDataGroupingCell}`]: {
      display: "flex",
      alignItems: "center",
      width: "100%"
    },
    [`& .${gridClasses2.treeDataGroupingCellToggle}`]: {
      flex: "0 0 28px",
      alignSelf: "stretch",
      marginRight: vars.spacing(2)
    },
    [`& .${gridClasses2.treeDataGroupingCellLoadingContainer}, .${gridClasses2.groupingCriteriaCellLoadingContainer}`]: {
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      height: "100%"
    },
    [`& .${gridClasses2.groupingCriteriaCell}`]: {
      display: "flex",
      alignItems: "center",
      width: "100%"
    },
    [`& .${gridClasses2.groupingCriteriaCellToggle}`]: {
      flex: "0 0 28px",
      alignSelf: "stretch",
      marginRight: vars.spacing(2)
    },
    /* ScrollbarFiller styles */
    [`& .${gridClasses2.columnHeaders} .${gridClasses2.scrollbarFiller}`]: {
      backgroundColor: headerBackground
    },
    [`.${gridClasses2.scrollbarFiller}`]: {
      minWidth: "calc(var(--DataGrid-hasScrollY) * var(--DataGrid-scrollbarSize))",
      alignSelf: "stretch",
      [`&.${gridClasses2["scrollbarFiller--borderTop"]}`]: {
        borderTop: "1px solid var(--DataGrid-rowBorderColor)"
      },
      [`&.${gridClasses2["scrollbarFiller--borderBottom"]}`]: {
        borderBottom: "1px solid var(--DataGrid-rowBorderColor)"
      },
      [`&.${gridClasses2["scrollbarFiller--pinnedRight"]}`]: {
        backgroundColor: vars.cell.background.pinned,
        position: "sticky",
        zIndex: 40,
        // Should be above the column separator
        right: 0
      }
    },
    [`& .${gridClasses2.filler}`]: {
      flex: "1 0 auto"
    },
    [`& .${gridClasses2["filler--borderBottom"]}`]: {
      borderBottom: "1px solid var(--DataGrid-rowBorderColor)"
    },
    [`& .${gridClasses2.columnHeaders} .${gridClasses2.filler}`]: {
      backgroundColor: headerBackground
    },
    /* Hide grid rows, row filler, and vertical scrollbar. Used when skeleton/no columns overlay is visible */
    [`& .${gridClasses2["main--hiddenContent"]}`]: {
      [`& .${gridClasses2.virtualScrollerContent}`]: {
        // We use visibility hidden so that the virtual scroller content retains its height.
        // Position fixed is used to remove the virtual scroller content from the flow.
        // https://github.com/mui/mui-x/issues/14061
        position: "fixed",
        visibility: "hidden"
      },
      [`& .${gridClasses2["scrollbar--vertical"]}, & .${gridClasses2.pinnedRows}, & .${gridClasses2.virtualScroller} > .${gridClasses2.filler}`]: {
        display: "none"
      }
    },
    [`& .${gridClasses2["row--dropAbove"]}`]: {
      position: "relative",
      "&::before": {
        pointerEvents: "none",
        content: '""',
        position: "absolute",
        top: 0,
        left: 0,
        width: "100%",
        height: "2px",
        backgroundColor: vars.colors.interactive.selected
      }
    },
    [`& .${gridClasses2["row--dropBelow"]}`]: {
      position: "relative",
      "&::after": {
        zIndex: 100,
        pointerEvents: "none",
        content: '""',
        position: "absolute",
        bottom: "-2px",
        left: 0,
        width: "100%",
        height: "2px",
        backgroundColor: vars.colors.interactive.selected
      },
      [`&.${gridClasses2["row--lastVisible"]}`]: {
        "&::after": {
          bottom: "calc(var(--DataGrid-hasScrollY) * 0px + (1 - var(--DataGrid-hasScrollY)) * -2px)"
        }
      }
    },
    [`& .${gridClasses2["row--beingDragged"]}`]: {
      color: vars.colors.foreground.disabled,
      "&:hover": {
        backgroundColor: "transparent"
      }
    }
  };
  return gridStyle;
});
function setOpacity2(color2, opacity) {
  return `rgba(from ${color2} r g b / ${opacity})`;
}
function removeOpacity2(color2) {
  return setOpacity2(color2, 1);
}
function mix(background, overlay, opacity) {
  return `color-mix(in srgb,${background}, ${overlay} calc(${opacity} * 100%))`;
}

// node_modules/@mui/x-data-grid/esm/hooks/utils/useIsSSR.js
var import_shim2 = __toESM(require_shim(), 1);
var emptySubscribe = () => () => {
};
var clientSnapshot = () => false;
var serverSnapshot = () => true;
var useIsSSR = () => (0, import_shim2.useSyncExternalStore)(emptySubscribe, clientSnapshot, serverSnapshot);

// node_modules/@mui/x-data-grid/esm/components/GridHeader.js
init_extends();
var React95 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/esm/components/panel/GridPreferencesPanel.js
init_extends();
var React94 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/esm/components/panel/GridPanelContext.js
var React93 = __toESM(require_react(), 1);
var import_jsx_runtime50 = __toESM(require_jsx_runtime(), 1);
var GridPanelContext = React93.createContext(void 0);
if (true) GridPanelContext.displayName = "GridPanelContext";
function useGridPanelContext() {
  const context = React93.useContext(GridPanelContext);
  if (context === void 0) {
    throw new Error("MUI X: Missing context.");
  }
  return context;
}
function GridPanelContextProvider({
  children
}) {
  const columnsPanelTriggerRef = React93.useRef(null);
  const filterPanelTriggerRef = React93.useRef(null);
  const aiAssistantPanelTriggerRef = React93.useRef(null);
  const value = React93.useMemo(() => ({
    columnsPanelTriggerRef,
    filterPanelTriggerRef,
    aiAssistantPanelTriggerRef
  }), []);
  return (0, import_jsx_runtime50.jsx)(GridPanelContext.Provider, {
    value,
    children
  });
}

// node_modules/@mui/x-data-grid/esm/components/panel/GridPreferencesPanel.js
var import_jsx_runtime51 = __toESM(require_jsx_runtime(), 1);
function GridPreferencesPanel() {
  var _a;
  const apiRef = useGridApiContext();
  const columns = useGridSelector(apiRef, gridColumnDefinitionsSelector);
  const rootProps = useGridRootProps();
  const preferencePanelState = useGridSelector(apiRef, gridPreferencePanelStateSelector);
  const {
    columnsPanelTriggerRef,
    filterPanelTriggerRef,
    aiAssistantPanelTriggerRef
  } = useGridPanelContext();
  const panelContent = apiRef.current.unstable_applyPipeProcessors("preferencePanel", null, preferencePanelState.openedPanelValue ?? GridPreferencePanelsValue.filters);
  let target = null;
  switch (preferencePanelState.openedPanelValue) {
    case GridPreferencePanelsValue.filters:
      target = filterPanelTriggerRef.current;
      break;
    case GridPreferencePanelsValue.columns:
      target = columnsPanelTriggerRef.current;
      break;
    case GridPreferencePanelsValue.aiAssistant:
      target = aiAssistantPanelTriggerRef.current;
      break;
    default:
  }
  return (0, import_jsx_runtime51.jsx)(rootProps.slots.panel, _extends({
    id: preferencePanelState.panelId,
    open: columns.length > 0 && preferencePanelState.open,
    "aria-labelledby": preferencePanelState.labelId,
    target,
    onClose: () => apiRef.current.hidePreferences()
  }, (_a = rootProps.slotProps) == null ? void 0 : _a.panel, {
    children: panelContent
  }));
}

// node_modules/@mui/x-data-grid/esm/components/GridHeader.js
var import_jsx_runtime52 = __toESM(require_jsx_runtime(), 1);
function GridHeader() {
  var _a;
  const rootProps = useGridRootProps();
  return (0, import_jsx_runtime52.jsxs)(React95.Fragment, {
    children: [(0, import_jsx_runtime52.jsx)(GridPreferencesPanel, {}), rootProps.showToolbar && (0, import_jsx_runtime52.jsx)(rootProps.slots.toolbar, _extends({}, (_a = rootProps.slotProps) == null ? void 0 : _a.toolbar))]
  });
}

// node_modules/@mui/x-data-grid/esm/components/containers/GridRoot.js
var import_jsx_runtime53 = __toESM(require_jsx_runtime(), 1);
var _excluded42 = ["className", "children", "sidePanel"];
var useUtilityClasses18 = (ownerState, density) => {
  const {
    autoHeight,
    classes: classes2,
    showCellVerticalBorder
  } = ownerState;
  const slots = {
    root: ["root", autoHeight && "autoHeight", `root--density${capitalize2(density)}`, ownerState.slots.toolbar === null && "root--noToolbar", "withBorderColor", showCellVerticalBorder && "withVerticalBorder"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var GridRoot = forwardRef2(function GridRoot2(props, ref) {
  const rootProps = useGridRootProps();
  const {
    className,
    children,
    sidePanel
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded42);
  const apiRef = useGridPrivateApiContext();
  const density = useGridSelector(apiRef, gridDensitySelector);
  const rootElementRef = apiRef.current.rootElementRef;
  const rootMountCallback = React96.useCallback((node) => {
    if (node === null) {
      return;
    }
    apiRef.current.publishEvent("rootMount", node);
  }, [apiRef]);
  const handleRef = useForkRef(rootElementRef, ref, rootMountCallback);
  const ownerState = rootProps;
  const classes2 = useUtilityClasses18(ownerState, density);
  const cssVariables = useCSSVariablesContext();
  const isSSR = useIsSSR();
  if (isSSR) {
    return null;
  }
  return (0, import_jsx_runtime53.jsxs)(GridRootStyles, _extends({
    className: clsx_default(classes2.root, className, cssVariables.className, sidePanel && gridClasses2.withSidePanel),
    ownerState
  }, other, {
    ref: handleRef,
    children: [(0, import_jsx_runtime53.jsxs)("div", {
      className: gridClasses2.mainContent,
      role: "presentation",
      children: [(0, import_jsx_runtime53.jsx)(GridHeader, {}), (0, import_jsx_runtime53.jsx)(GridVirtualScroller, {
        children
      }), (0, import_jsx_runtime53.jsx)(GridFooterPlaceholder, {})]
    }), sidePanel, cssVariables.tag]
  }));
});
if (true) GridRoot.displayName = "GridRoot";
true ? GridRoot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  sidePanel: import_prop_types38.default.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object])
} : void 0;
var MemoizedGridRoot = fastMemo(GridRoot);

// node_modules/@mui/x-data-grid/esm/components/containers/GridFooterContainer.js
init_extends();
init_objectWithoutPropertiesLoose();
var React97 = __toESM(require_react(), 1);
var import_prop_types39 = __toESM(require_prop_types(), 1);
init_clsx();
var import_jsx_runtime54 = __toESM(require_jsx_runtime(), 1);
var _excluded43 = ["className"];
var useUtilityClasses19 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["footerContainer", "withBorderColor"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var GridFooterContainerRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "FooterContainer"
})({
  display: "flex",
  justifyContent: "space-between",
  alignItems: "center",
  minHeight: 52,
  borderTop: "1px solid"
});
var GridFooterContainer = forwardRef2(function GridFooterContainer2(props, ref) {
  const {
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded43);
  const rootProps = useGridRootProps();
  const classes2 = useUtilityClasses19(rootProps);
  return (0, import_jsx_runtime54.jsx)(GridFooterContainerRoot, _extends({
    className: clsx_default(classes2.root, className),
    ownerState: rootProps
  }, other, {
    ref
  }));
});
if (true) GridFooterContainer.displayName = "GridFooterContainer";
true ? GridFooterContainer.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  sx: import_prop_types39.default.oneOfType([import_prop_types39.default.arrayOf(import_prop_types39.default.oneOfType([import_prop_types39.default.func, import_prop_types39.default.object, import_prop_types39.default.bool])), import_prop_types39.default.func, import_prop_types39.default.object])
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/containers/GridOverlay.js
init_extends();
init_objectWithoutPropertiesLoose();
var React98 = __toESM(require_react(), 1);
var import_prop_types40 = __toESM(require_prop_types(), 1);
init_clsx();
var import_jsx_runtime55 = __toESM(require_jsx_runtime(), 1);
var _excluded44 = ["className"];
var useUtilityClasses20 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["overlay"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var GridOverlayRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "Overlay"
})({
  width: "100%",
  height: "100%",
  display: "flex",
  gap: vars.spacing(1),
  flexDirection: "column",
  alignSelf: "center",
  alignItems: "center",
  justifyContent: "center",
  textAlign: "center",
  textWrap: "balance",
  backgroundColor: vars.colors.background.backdrop
});
var GridOverlay = forwardRef2(function GridOverlay2(props, ref) {
  const {
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded44);
  const rootProps = useGridRootProps();
  const classes2 = useUtilityClasses20(rootProps);
  return (0, import_jsx_runtime55.jsx)(GridOverlayRoot, _extends({
    className: clsx_default(classes2.root, className),
    ownerState: rootProps
  }, other, {
    ref
  }));
});
if (true) GridOverlay.displayName = "GridOverlay";
true ? GridOverlay.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  sx: import_prop_types40.default.oneOfType([import_prop_types40.default.arrayOf(import_prop_types40.default.oneOfType([import_prop_types40.default.func, import_prop_types40.default.object, import_prop_types40.default.bool])), import_prop_types40.default.func, import_prop_types40.default.object])
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/containers/GridToolbarContainer.js
init_extends();
init_objectWithoutPropertiesLoose();
var React103 = __toESM(require_react(), 1);
var import_prop_types43 = __toESM(require_prop_types(), 1);
init_clsx();

// node_modules/@mui/x-data-grid/esm/components/toolbarV8/Toolbar.js
init_extends();
init_objectWithoutPropertiesLoose();
var React101 = __toESM(require_react(), 1);
var import_prop_types41 = __toESM(require_prop_types(), 1);
init_clsx();

// node_modules/@mui/x-data-grid/node_modules/@mui/x-internals/esm/useComponentRenderer/useComponentRenderer.js
init_extends();
var React99 = __toESM(require_react(), 1);
function useComponentRenderer(defaultElement, render, props, state = {}) {
  if (typeof render === "function") {
    return render(props, state);
  }
  if (render) {
    if (render.props.className) {
      props.className = mergeClassNames(render.props.className, props.className);
    }
    if (render.props.style || props.style) {
      props.style = _extends({}, props.style, render.props.style);
    }
    return React99.cloneElement(render, props);
  }
  return React99.createElement(defaultElement, props);
}
function mergeClassNames(className, otherClassName) {
  if (!className || !otherClassName) {
    return className || otherClassName;
  }
  return `${className} ${otherClassName}`;
}

// node_modules/@mui/x-data-grid/esm/components/toolbarV8/ToolbarContext.js
var React100 = __toESM(require_react(), 1);
var ToolbarContext = React100.createContext(void 0);
if (true) ToolbarContext.displayName = "ToolbarContext";
function useToolbarContext() {
  const context = React100.useContext(ToolbarContext);
  if (context === void 0) {
    throw new Error("MUI X: Missing context. Toolbar subcomponents must be placed within a <Toolbar /> component.");
  }
  return context;
}

// node_modules/@mui/x-data-grid/esm/components/toolbarV8/utils.js
function sortByDocumentPosition(a, b) {
  if (!a.ref.current || !b.ref.current) {
    return 0;
  }
  const position2 = a.ref.current.compareDocumentPosition(b.ref.current);
  if (!position2) {
    return 0;
  }
  if (position2 & Node.DOCUMENT_POSITION_FOLLOWING || position2 & Node.DOCUMENT_POSITION_CONTAINED_BY) {
    return -1;
  }
  if (position2 & Node.DOCUMENT_POSITION_PRECEDING || position2 & Node.DOCUMENT_POSITION_CONTAINS) {
    return 1;
  }
  return 0;
}

// node_modules/@mui/x-data-grid/esm/components/toolbarV8/Toolbar.js
var import_jsx_runtime56 = __toESM(require_jsx_runtime(), 1);
var _excluded45 = ["render", "className"];
var useUtilityClasses21 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["toolbar"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var ToolbarRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "Toolbar"
})({
  flex: 0,
  display: "flex",
  alignItems: "center",
  justifyContent: "end",
  gap: vars.spacing(0.25),
  padding: vars.spacing(0.75),
  minHeight: 52,
  boxSizing: "border-box",
  borderBottom: `1px solid ${vars.colors.border.base}`
});
var Toolbar = forwardRef2(function Toolbar2(props, ref) {
  const {
    render,
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded45);
  const rootProps = useGridRootProps();
  const classes2 = useUtilityClasses21(rootProps);
  const [focusableItemId, setFocusableItemId] = React101.useState(null);
  const [items, setItems] = React101.useState([]);
  const getSortedItems = React101.useCallback(() => items.sort(sortByDocumentPosition), [items]);
  const findEnabledItem = React101.useCallback((startIndex, step, wrap2 = true) => {
    var _a, _b;
    let index = startIndex;
    const sortedItems = getSortedItems();
    const itemCount = sortedItems.length;
    for (let i = 0; i < itemCount; i += 1) {
      index += step;
      if (index >= itemCount) {
        if (!wrap2) {
          return -1;
        }
        index = 0;
      } else if (index < 0) {
        if (!wrap2) {
          return -1;
        }
        index = itemCount - 1;
      }
      if (!((_a = sortedItems[index].ref.current) == null ? void 0 : _a.disabled) && ((_b = sortedItems[index].ref.current) == null ? void 0 : _b.ariaDisabled) !== "true") {
        return index;
      }
    }
    return -1;
  }, [getSortedItems]);
  const registerItem = React101.useCallback((id, itemRef) => {
    setItems((prevItems) => [...prevItems, {
      id,
      ref: itemRef
    }]);
  }, []);
  const unregisterItem = React101.useCallback((id) => {
    setItems((prevItems) => prevItems.filter((i) => i.id !== id));
  }, []);
  const onItemKeyDown = React101.useCallback((event) => {
    var _a;
    if (!focusableItemId) {
      return;
    }
    const sortedItems = getSortedItems();
    const focusableItemIndex = sortedItems.findIndex((item) => item.id === focusableItemId);
    let newIndex = -1;
    if (event.key === "ArrowRight") {
      event.preventDefault();
      newIndex = findEnabledItem(focusableItemIndex, 1);
    } else if (event.key === "ArrowLeft") {
      event.preventDefault();
      newIndex = findEnabledItem(focusableItemIndex, -1);
    } else if (event.key === "Home") {
      event.preventDefault();
      newIndex = findEnabledItem(-1, 1, false);
    } else if (event.key === "End") {
      event.preventDefault();
      newIndex = findEnabledItem(sortedItems.length, -1, false);
    }
    if (newIndex >= 0 && newIndex < sortedItems.length) {
      const item = sortedItems[newIndex];
      setFocusableItemId(item.id);
      (_a = item.ref.current) == null ? void 0 : _a.focus();
    }
  }, [getSortedItems, focusableItemId, findEnabledItem]);
  const onItemFocus = React101.useCallback((id) => {
    if (focusableItemId !== id) {
      setFocusableItemId(id);
    }
  }, [focusableItemId, setFocusableItemId]);
  const onItemDisabled = React101.useCallback((id) => {
    var _a;
    const sortedItems = getSortedItems();
    const currentIndex = sortedItems.findIndex((item) => item.id === id);
    const newIndex = findEnabledItem(currentIndex, 1);
    if (newIndex >= 0 && newIndex < sortedItems.length) {
      const item = sortedItems[newIndex];
      setFocusableItemId(item.id);
      (_a = item.ref.current) == null ? void 0 : _a.focus();
    }
  }, [getSortedItems, findEnabledItem]);
  React101.useEffect(() => {
    var _a, _b;
    const sortedItems = getSortedItems();
    if (sortedItems.length > 0) {
      if (!focusableItemId) {
        setFocusableItemId(sortedItems[0].id);
        return;
      }
      const focusableItemIndex = sortedItems.findIndex((item) => item.id === focusableItemId);
      if (!sortedItems[focusableItemIndex]) {
        const item = sortedItems[sortedItems.length - 1];
        if (item) {
          setFocusableItemId(item.id);
          (_a = item.ref.current) == null ? void 0 : _a.focus();
        }
      } else if (focusableItemIndex === -1) {
        const item = sortedItems[focusableItemIndex];
        if (item) {
          setFocusableItemId(item.id);
          (_b = item.ref.current) == null ? void 0 : _b.focus();
        }
      }
    }
  }, [getSortedItems, findEnabledItem]);
  const contextValue = React101.useMemo(() => ({
    focusableItemId,
    registerItem,
    unregisterItem,
    onItemKeyDown,
    onItemFocus,
    onItemDisabled
  }), [focusableItemId, registerItem, unregisterItem, onItemKeyDown, onItemFocus, onItemDisabled]);
  const element = useComponentRenderer(ToolbarRoot, render, _extends({
    role: "toolbar",
    "aria-orientation": "horizontal",
    "aria-label": rootProps.label || void 0,
    className: clsx_default(classes2.root, className)
  }, other, {
    ref
  }));
  return (0, import_jsx_runtime56.jsx)(ToolbarContext.Provider, {
    value: contextValue,
    children: element
  });
});
if (true) Toolbar.displayName = "Toolbar";
true ? Toolbar.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * A function to customize rendering of the component.
   */
  render: import_prop_types41.default.oneOfType([import_prop_types41.default.element, import_prop_types41.default.func])
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/toolbarV8/ToolbarButton.js
init_extends();
init_objectWithoutPropertiesLoose();
var React102 = __toESM(require_react(), 1);
var import_prop_types42 = __toESM(require_prop_types(), 1);
var import_jsx_runtime57 = __toESM(require_jsx_runtime(), 1);
var _excluded46 = ["render", "onKeyDown", "onFocus", "disabled", "aria-disabled"];
var ToolbarButton = forwardRef2(function ToolbarButton2(props, ref) {
  var _a;
  const {
    render,
    onKeyDown,
    onFocus,
    disabled,
    "aria-disabled": ariaDisabled
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded46);
  const id = useId();
  const rootProps = useGridRootProps();
  const buttonRef = React102.useRef(null);
  const handleRef = useForkRef(buttonRef, ref);
  const {
    focusableItemId,
    registerItem,
    unregisterItem,
    onItemKeyDown,
    onItemFocus,
    onItemDisabled
  } = useToolbarContext();
  const handleKeyDown = (event) => {
    onItemKeyDown(event);
    onKeyDown == null ? void 0 : onKeyDown(event);
  };
  const handleFocus = (event) => {
    onItemFocus(id);
    onFocus == null ? void 0 : onFocus(event);
  };
  React102.useEffect(() => {
    registerItem(id, buttonRef);
    return () => unregisterItem(id);
  }, []);
  const previousDisabled = React102.useRef(disabled);
  React102.useEffect(() => {
    if (previousDisabled.current !== disabled && disabled === true) {
      onItemDisabled(id, disabled);
    }
    previousDisabled.current = disabled;
  }, [disabled, id, onItemDisabled]);
  const previousAriaDisabled = React102.useRef(ariaDisabled);
  React102.useEffect(() => {
    if (previousAriaDisabled.current !== ariaDisabled && ariaDisabled === true) {
      onItemDisabled(id, true);
    }
    previousAriaDisabled.current = ariaDisabled;
  }, [ariaDisabled, id, onItemDisabled]);
  const element = useComponentRenderer(rootProps.slots.baseIconButton, render, _extends({}, (_a = rootProps.slotProps) == null ? void 0 : _a.baseIconButton, {
    tabIndex: focusableItemId === id ? 0 : -1
  }, other, {
    disabled,
    "aria-disabled": ariaDisabled,
    onKeyDown: handleKeyDown,
    onFocus: handleFocus,
    ref: handleRef
  }));
  return (0, import_jsx_runtime57.jsx)(React102.Fragment, {
    children: element
  });
});
if (true) ToolbarButton.displayName = "ToolbarButton";
true ? ToolbarButton.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  className: import_prop_types42.default.string,
  color: import_prop_types42.default.oneOf(["default", "inherit", "primary"]),
  disabled: import_prop_types42.default.bool,
  edge: import_prop_types42.default.oneOf(["end", "start", false]),
  id: import_prop_types42.default.string,
  label: import_prop_types42.default.string,
  /**
   * A function to customize rendering of the component.
   */
  render: import_prop_types42.default.oneOfType([import_prop_types42.default.element, import_prop_types42.default.func]),
  role: import_prop_types42.default.string,
  size: import_prop_types42.default.oneOf(["large", "medium", "small"]),
  style: import_prop_types42.default.object,
  tabIndex: import_prop_types42.default.number,
  title: import_prop_types42.default.string,
  touchRippleRef: import_prop_types42.default.any
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/containers/GridToolbarContainer.js
var import_jsx_runtime58 = __toESM(require_jsx_runtime(), 1);
var _excluded47 = ["className", "children"];
var useUtilityClasses22 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["toolbarContainer"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var GridToolbarContainerRoot = styled_default2(Toolbar, {
  name: "MuiDataGrid",
  slot: "ToolbarContainer",
  shouldForwardProp: (prop) => prop !== "ownerState"
})({
  display: "flex",
  alignItems: "center",
  flexWrap: "wrap",
  gap: vars.spacing(1),
  padding: vars.spacing(0.5),
  minHeight: "auto"
});
var GridToolbarContainer = forwardRef2(function GridToolbarContainer2(props, ref) {
  const {
    className,
    children
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded47);
  const rootProps = useGridRootProps();
  const classes2 = useUtilityClasses22(rootProps);
  if (!children) {
    return null;
  }
  return (0, import_jsx_runtime58.jsx)(GridToolbarContainerRoot, _extends({
    className: clsx_default(classes2.root, className),
    ownerState: rootProps
  }, other, {
    ref,
    children
  }));
});
if (true) GridToolbarContainer.displayName = "GridToolbarContainer";
true ? GridToolbarContainer.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  sx: import_prop_types43.default.oneOfType([import_prop_types43.default.arrayOf(import_prop_types43.default.oneOfType([import_prop_types43.default.func, import_prop_types43.default.object, import_prop_types43.default.bool])), import_prop_types43.default.func, import_prop_types43.default.object])
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/columnHeaders/GridColumnHeaderItem.js
init_extends();
var React109 = __toESM(require_react(), 1);
var import_prop_types47 = __toESM(require_prop_types(), 1);
init_clsx();

// node_modules/@mui/x-data-grid/esm/components/columnHeaders/ColumnHeaderMenuIcon.js
init_extends();
var React104 = __toESM(require_react(), 1);
var import_jsx_runtime59 = __toESM(require_jsx_runtime(), 1);
var useUtilityClasses23 = (ownerState) => {
  const {
    classes: classes2,
    open
  } = ownerState;
  const slots = {
    root: ["menuIcon", open && "menuOpen"],
    button: ["menuIconButton"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var ColumnHeaderMenuIcon = React104.memo((props) => {
  var _a, _b;
  const {
    colDef,
    open,
    columnMenuId,
    columnMenuButtonId,
    iconButtonRef
  } = props;
  const apiRef = useGridApiContext();
  const rootProps = useGridRootProps();
  const ownerState = _extends({}, props, {
    classes: rootProps.classes
  });
  const classes2 = useUtilityClasses23(ownerState);
  const handleMenuIconClick = React104.useCallback((event) => {
    event.preventDefault();
    event.stopPropagation();
    apiRef.current.toggleColumnMenu(colDef.field);
  }, [apiRef, colDef.field]);
  const columnName = colDef.headerName ?? colDef.field;
  return (0, import_jsx_runtime59.jsx)("div", {
    className: classes2.root,
    children: (0, import_jsx_runtime59.jsx)(rootProps.slots.baseTooltip, _extends({
      title: apiRef.current.getLocaleText("columnMenuLabel"),
      enterDelay: 1e3
    }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseTooltip, {
      children: (0, import_jsx_runtime59.jsx)(rootProps.slots.baseIconButton, _extends({
        ref: iconButtonRef,
        tabIndex: -1,
        className: classes2.button,
        "aria-label": apiRef.current.getLocaleText("columnMenuAriaLabel")(columnName),
        size: "small",
        onClick: handleMenuIconClick,
        "aria-haspopup": "menu",
        "aria-expanded": open,
        "aria-controls": open ? columnMenuId : void 0,
        id: columnMenuButtonId
      }, (_b = rootProps.slotProps) == null ? void 0 : _b.baseIconButton, {
        children: (0, import_jsx_runtime59.jsx)(rootProps.slots.columnMenuIcon, {
          fontSize: "inherit"
        })
      }))
    }))
  });
});
if (true) ColumnHeaderMenuIcon.displayName = "ColumnHeaderMenuIcon";

// node_modules/@mui/x-data-grid/esm/components/menu/columnMenu/GridColumnHeaderMenu.js
init_extends();
var React105 = __toESM(require_react(), 1);
var import_prop_types44 = __toESM(require_prop_types(), 1);
var import_jsx_runtime60 = __toESM(require_jsx_runtime(), 1);
function GridColumnHeaderMenu({
  columnMenuId,
  columnMenuButtonId,
  ContentComponent,
  contentComponentProps,
  field,
  open,
  target,
  onExited
}) {
  const apiRef = useGridApiContext();
  const colDef = apiRef.current.getColumn(field);
  const hideMenu = useEventCallback_default((event) => {
    if (event) {
      event.stopPropagation();
      if (target == null ? void 0 : target.contains(event.target)) {
        return;
      }
    }
    apiRef.current.hideColumnMenu();
  });
  if (!target || !colDef) {
    return null;
  }
  return (0, import_jsx_runtime60.jsx)(GridMenu, {
    position: `bottom-${colDef.align === "right" ? "start" : "end"}`,
    open,
    target,
    onClose: hideMenu,
    onExited,
    children: (0, import_jsx_runtime60.jsx)(ContentComponent, _extends({
      colDef,
      hideMenu,
      open,
      id: columnMenuId,
      labelledby: columnMenuButtonId
    }, contentComponentProps))
  });
}
true ? GridColumnHeaderMenu.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  columnMenuButtonId: import_prop_types44.default.string,
  columnMenuId: import_prop_types44.default.string,
  ContentComponent: import_prop_types44.default.elementType.isRequired,
  contentComponentProps: import_prop_types44.default.any,
  field: import_prop_types44.default.string.isRequired,
  onExited: import_prop_types44.default.func,
  open: import_prop_types44.default.bool.isRequired,
  target: HTMLElementType
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/columnHeaders/GridGenericColumnHeaderItem.js
init_extends();
init_objectWithoutPropertiesLoose();
var React108 = __toESM(require_react(), 1);
init_clsx();

// node_modules/@mui/x-data-grid/esm/components/columnHeaders/GridColumnHeaderTitle.js
init_extends();
init_objectWithoutPropertiesLoose();
var React106 = __toESM(require_react(), 1);
var import_prop_types45 = __toESM(require_prop_types(), 1);
init_clsx();

// node_modules/@mui/x-data-grid/esm/utils/domUtils.js
function isOverflown(element) {
  return element.scrollHeight > element.clientHeight || element.scrollWidth > element.clientWidth;
}
function findParentElementFromClassName(elem, className) {
  return elem.closest(`.${className}`);
}
function escapeOperandAttributeSelector(operand) {
  return operand.replace(/["\\]/g, "\\$&");
}
function getGridColumnHeaderElement(root, field) {
  return root.querySelector(`[role="columnheader"][data-field="${escapeOperandAttributeSelector(field)}"]`);
}
function getGridRowElementSelector(id) {
  return `.${gridClasses2.row}[data-id="${escapeOperandAttributeSelector(String(id))}"]`;
}
function getGridRowElement(root, id) {
  return root.querySelector(getGridRowElementSelector(id));
}
function getGridCellElement(root, {
  id,
  field
}) {
  const rowSelector = getGridRowElementSelector(id);
  const cellSelector = `.${gridClasses2.cell}[data-field="${escapeOperandAttributeSelector(field)}"]`;
  const selector = `${rowSelector} ${cellSelector}`;
  return root.querySelector(selector);
}
function isEventTargetInPortal(event) {
  if (
    // The target is not an element when triggered by a Select inside the cell
    // See https://github.com/mui/material-ui/issues/10534
    event.target.nodeType === 1 && !event.currentTarget.contains(event.target)
  ) {
    return true;
  }
  return false;
}
function getFieldFromHeaderElem(colCellEl) {
  return colCellEl.getAttribute("data-field");
}
function findHeaderElementFromField(elem, field) {
  return elem.querySelector(`[data-field="${escapeOperandAttributeSelector(field)}"]`);
}
function getFieldsFromGroupHeaderElem(colCellEl) {
  return colCellEl.getAttribute("data-fields").slice(2, -2).split("-|-");
}
function findGroupHeaderElementsFromField(elem, field) {
  return Array.from(elem.querySelectorAll(`[data-fields*="|-${escapeOperandAttributeSelector(field)}-|"]`) ?? []);
}
function findGridCellElementsFromCol(col, api) {
  var _a;
  const root = findParentElementFromClassName(col, gridClasses2.root);
  if (!root) {
    throw new Error("MUI X: The root element is not found.");
  }
  const ariaColIndex = col.getAttribute("aria-colindex");
  if (!ariaColIndex) {
    return [];
  }
  const colIndex = Number(ariaColIndex) - 1;
  const cells = [];
  if (!((_a = api.virtualScrollerRef) == null ? void 0 : _a.current)) {
    return [];
  }
  queryRows(api).forEach((rowElement) => {
    const rowId = rowElement.getAttribute("data-id");
    if (!rowId) {
      return;
    }
    let columnIndex = colIndex;
    const cellColSpanInfo = api.unstable_getCellColSpanInfo(rowId, colIndex);
    if (cellColSpanInfo && cellColSpanInfo.spannedByColSpan) {
      columnIndex = cellColSpanInfo.leftVisibleCellIndex;
    }
    const cell = rowElement.querySelector(`[data-colindex="${columnIndex}"]`);
    if (cell) {
      cells.push(cell);
    }
  });
  return cells;
}
function findGridElement(api, klass) {
  return api.rootElementRef.current.querySelector(`.${gridClasses2[klass]}`);
}
var findPinnedCells = ({
  api,
  colIndex,
  position: position2,
  filterFn
}) => {
  if (colIndex === null) {
    return [];
  }
  const cells = [];
  queryRows(api).forEach((rowElement) => {
    const rowId = rowElement.getAttribute("data-id");
    if (!rowId) {
      return;
    }
    rowElement.querySelectorAll(`.${gridClasses2[position2 === "left" ? "cell--pinnedLeft" : "cell--pinnedRight"]}`).forEach((cell) => {
      const currentColIndex = parseCellColIndex(cell);
      if (currentColIndex !== null && filterFn(currentColIndex)) {
        cells.push(cell);
      }
    });
  });
  return cells;
};
function findLeftPinnedCellsAfterCol(api, col, isRtl) {
  const colIndex = parseCellColIndex(col);
  return findPinnedCells({
    api,
    colIndex,
    position: isRtl ? "right" : "left",
    filterFn: (index) => isRtl ? index < colIndex : index > colIndex
  });
}
function findRightPinnedCellsBeforeCol(api, col, isRtl) {
  const colIndex = parseCellColIndex(col);
  return findPinnedCells({
    api,
    colIndex,
    position: isRtl ? "left" : "right",
    filterFn: (index) => isRtl ? index > colIndex : index < colIndex
  });
}
var findPinnedHeaders = ({
  api,
  colIndex,
  position: position2,
  filterFn
}) => {
  var _a;
  if (!((_a = api.columnHeadersContainerRef) == null ? void 0 : _a.current)) {
    return [];
  }
  if (colIndex === null) {
    return [];
  }
  const elements = [];
  api.columnHeadersContainerRef.current.querySelectorAll(`.${gridClasses2[position2 === "left" ? "columnHeader--pinnedLeft" : "columnHeader--pinnedRight"]}`).forEach((element) => {
    const currentColIndex = parseCellColIndex(element);
    if (currentColIndex !== null && filterFn(currentColIndex, element)) {
      elements.push(element);
    }
  });
  return elements;
};
function findLeftPinnedHeadersAfterCol(api, col, isRtl) {
  const colIndex = parseCellColIndex(col);
  return findPinnedHeaders({
    api,
    position: isRtl ? "right" : "left",
    colIndex,
    filterFn: (index) => isRtl ? index < colIndex : index > colIndex
  });
}
function findRightPinnedHeadersBeforeCol(api, col, isRtl) {
  const colIndex = parseCellColIndex(col);
  return findPinnedHeaders({
    api,
    position: isRtl ? "left" : "right",
    colIndex,
    filterFn: (index, element) => {
      if (element.classList.contains(gridClasses2["columnHeader--last"])) {
        return false;
      }
      return isRtl ? index > colIndex : index < colIndex;
    }
  });
}
function findGridHeader(api, field) {
  const headers = api.columnHeadersContainerRef.current;
  return headers.querySelector(`:scope > div > [data-field="${escapeOperandAttributeSelector(field)}"][role="columnheader"]`);
}
function findGridCells(api, field) {
  const container = api.virtualScrollerRef.current;
  return Array.from(container.querySelectorAll(`:scope > div > div > div > [data-field="${escapeOperandAttributeSelector(field)}"][role="gridcell"]`));
}
function queryRows(api) {
  return api.virtualScrollerRef.current.querySelectorAll(
    // Use > to ignore rows from nested Data Grids (for example in detail panel)
    `:scope > div > div > .${gridClasses2.row}`
  );
}
function parseCellColIndex(col) {
  const ariaColIndex = col.getAttribute("aria-colindex");
  if (!ariaColIndex) {
    return null;
  }
  return Number(ariaColIndex) - 1;
}

// node_modules/@mui/x-data-grid/esm/components/columnHeaders/GridColumnHeaderTitle.js
var import_jsx_runtime61 = __toESM(require_jsx_runtime(), 1);
var _excluded48 = ["className", "aria-label"];
var useUtilityClasses24 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["columnHeaderTitle"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var GridColumnHeaderTitleRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "ColumnHeaderTitle"
})({
  textOverflow: "ellipsis",
  overflow: "hidden",
  whiteSpace: "nowrap",
  fontWeight: "var(--unstable_DataGrid-headWeight)",
  lineHeight: "normal"
});
var ColumnHeaderInnerTitle = forwardRef2(function ColumnHeaderInnerTitle2(props, ref) {
  const {
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded48);
  const rootProps = useGridRootProps();
  const classes2 = useUtilityClasses24(rootProps);
  return (0, import_jsx_runtime61.jsx)(GridColumnHeaderTitleRoot, _extends({
    className: clsx_default(classes2.root, className),
    ownerState: rootProps
  }, other, {
    ref
  }));
});
if (true) ColumnHeaderInnerTitle.displayName = "ColumnHeaderInnerTitle";
function GridColumnHeaderTitle(props) {
  var _a;
  const {
    label,
    description
  } = props;
  const rootProps = useGridRootProps();
  const titleRef = React106.useRef(null);
  const [tooltip, setTooltip] = React106.useState("");
  const handleMouseOver = React106.useCallback(() => {
    if (!description && (titleRef == null ? void 0 : titleRef.current)) {
      const isOver = isOverflown(titleRef.current);
      if (isOver) {
        setTooltip(label);
      } else {
        setTooltip("");
      }
    }
  }, [description, label]);
  return (0, import_jsx_runtime61.jsx)(rootProps.slots.baseTooltip, _extends({
    title: description || tooltip
  }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseTooltip, {
    children: (0, import_jsx_runtime61.jsx)(ColumnHeaderInnerTitle, {
      onMouseOver: handleMouseOver,
      ref: titleRef,
      children: label
    })
  }));
}
true ? GridColumnHeaderTitle.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  columnWidth: import_prop_types45.default.number.isRequired,
  description: import_prop_types45.default.node,
  label: import_prop_types45.default.string.isRequired
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/columnHeaders/GridColumnHeaderSeparator.js
init_extends();
init_objectWithoutPropertiesLoose();
var React107 = __toESM(require_react(), 1);
var import_prop_types46 = __toESM(require_prop_types(), 1);
var import_jsx_runtime62 = __toESM(require_jsx_runtime(), 1);
var _excluded49 = ["resizable", "resizing", "height", "side"];
var GridColumnHeaderSeparatorSides = function(GridColumnHeaderSeparatorSides2) {
  GridColumnHeaderSeparatorSides2["Left"] = "left";
  GridColumnHeaderSeparatorSides2["Right"] = "right";
  return GridColumnHeaderSeparatorSides2;
}(GridColumnHeaderSeparatorSides || {});
var useUtilityClasses25 = (ownerState) => {
  const {
    resizable,
    resizing,
    classes: classes2,
    side
  } = ownerState;
  const slots = {
    root: ["columnSeparator", resizable && "columnSeparator--resizable", resizing && "columnSeparator--resizing", side && `columnSeparator--side${capitalize2(side)}`],
    icon: ["iconSeparator"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
function GridColumnHeaderSeparatorRaw(props) {
  const {
    height: height2,
    side = GridColumnHeaderSeparatorSides.Right
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded49);
  const rootProps = useGridRootProps();
  const ownerState = _extends({}, props, {
    side,
    classes: rootProps.classes
  });
  const classes2 = useUtilityClasses25(ownerState);
  const stopClick = React107.useCallback((event) => {
    event.preventDefault();
    event.stopPropagation();
  }, []);
  return (
    // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions
    (0, import_jsx_runtime62.jsx)("div", _extends({
      className: classes2.root,
      style: {
        minHeight: height2
      }
    }, other, {
      onClick: stopClick,
      children: (0, import_jsx_runtime62.jsx)(rootProps.slots.columnResizeIcon, {
        className: classes2.icon
      })
    }))
  );
}
var GridColumnHeaderSeparator = React107.memo(GridColumnHeaderSeparatorRaw);
if (true) GridColumnHeaderSeparator.displayName = "GridColumnHeaderSeparator";
true ? GridColumnHeaderSeparatorRaw.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  height: import_prop_types46.default.number.isRequired,
  resizable: import_prop_types46.default.bool.isRequired,
  resizing: import_prop_types46.default.bool.isRequired,
  side: import_prop_types46.default.oneOf(["left", "right"])
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/columnHeaders/GridGenericColumnHeaderItem.js
var import_jsx_runtime63 = __toESM(require_jsx_runtime(), 1);
var _excluded50 = ["classes", "columnMenuOpen", "colIndex", "height", "isResizing", "sortDirection", "hasFocus", "tabIndex", "separatorSide", "isDraggable", "headerComponent", "description", "elementId", "width", "columnMenuIconButton", "columnMenu", "columnTitleIconButtons", "headerClassName", "label", "resizable", "draggableContainerProps", "columnHeaderSeparatorProps", "style"];
var GridGenericColumnHeaderItem = forwardRef2(function GridGenericColumnHeaderItem2(props, ref) {
  const {
    classes: classes2,
    colIndex,
    height: height2,
    isResizing,
    sortDirection,
    tabIndex,
    separatorSide,
    isDraggable,
    headerComponent,
    description,
    width: width2,
    columnMenuIconButton = null,
    columnMenu = null,
    columnTitleIconButtons = null,
    headerClassName,
    label,
    resizable,
    draggableContainerProps,
    columnHeaderSeparatorProps,
    style: style4
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded50);
  const rootProps = useGridRootProps();
  const headerCellRef = React108.useRef(null);
  const handleRef = useForkRef(headerCellRef, ref);
  let ariaSort = "none";
  if (sortDirection != null) {
    ariaSort = sortDirection === "asc" ? "ascending" : "descending";
  }
  return (0, import_jsx_runtime63.jsxs)("div", _extends({
    className: clsx_default(classes2.root, headerClassName),
    style: _extends({}, style4, {
      width: width2
    }),
    role: "columnheader",
    tabIndex,
    "aria-colindex": colIndex + 1,
    "aria-sort": ariaSort
  }, other, {
    ref: handleRef,
    children: [(0, import_jsx_runtime63.jsxs)("div", _extends({
      className: classes2.draggableContainer,
      draggable: isDraggable,
      role: "presentation"
    }, draggableContainerProps, {
      children: [(0, import_jsx_runtime63.jsxs)("div", {
        className: classes2.titleContainer,
        role: "presentation",
        children: [(0, import_jsx_runtime63.jsx)("div", {
          className: classes2.titleContainerContent,
          children: headerComponent !== void 0 ? headerComponent : (0, import_jsx_runtime63.jsx)(GridColumnHeaderTitle, {
            label,
            description,
            columnWidth: width2
          })
        }), columnTitleIconButtons]
      }), columnMenuIconButton]
    })), (0, import_jsx_runtime63.jsx)(GridColumnHeaderSeparator, _extends({
      resizable: !rootProps.disableColumnResize && !!resizable,
      resizing: isResizing,
      height: height2,
      side: separatorSide
    }, columnHeaderSeparatorProps)), columnMenu]
  }));
});
if (true) GridGenericColumnHeaderItem.displayName = "GridGenericColumnHeaderItem";

// node_modules/@mui/x-data-grid/esm/components/columnHeaders/GridColumnHeaderItem.js
var import_jsx_runtime64 = __toESM(require_jsx_runtime(), 1);
var useUtilityClasses26 = (ownerState) => {
  const {
    disableColumnSorting
  } = useGridRootProps();
  const {
    colDef,
    classes: classes2,
    isDragging,
    sortDirection,
    showRightBorder,
    showLeftBorder,
    filterItemsCounter,
    pinnedPosition,
    isLastUnpinned,
    isSiblingFocused
  } = ownerState;
  const isColumnSortable = colDef.sortable && !disableColumnSorting;
  const isColumnSorted = sortDirection != null;
  const isColumnFiltered = filterItemsCounter != null && filterItemsCounter > 0;
  const isColumnNumeric = colDef.type === "number";
  const slots = {
    root: [
      "columnHeader",
      colDef.headerAlign === "left" && "columnHeader--alignLeft",
      colDef.headerAlign === "center" && "columnHeader--alignCenter",
      colDef.headerAlign === "right" && "columnHeader--alignRight",
      isColumnSortable && "columnHeader--sortable",
      isDragging && "columnHeader--moving",
      isColumnSorted && "columnHeader--sorted",
      isColumnFiltered && "columnHeader--filtered",
      isColumnNumeric && "columnHeader--numeric",
      "withBorderColor",
      showRightBorder && "columnHeader--withRightBorder",
      showLeftBorder && "columnHeader--withLeftBorder",
      pinnedPosition === PinnedColumnPosition.LEFT && "columnHeader--pinnedLeft",
      pinnedPosition === PinnedColumnPosition.RIGHT && "columnHeader--pinnedRight",
      // TODO: Remove classes below and restore `:has` selectors when they are supported in jsdom
      // See https://github.com/mui/mui-x/pull/14559
      isLastUnpinned && "columnHeader--lastUnpinned",
      isSiblingFocused && "columnHeader--siblingFocused"
    ],
    draggableContainer: ["columnHeaderDraggableContainer"],
    titleContainer: ["columnHeaderTitleContainer"],
    titleContainerContent: ["columnHeaderTitleContainerContent"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
function GridColumnHeaderItem(props) {
  var _a, _b, _c;
  const {
    colDef,
    columnMenuOpen,
    colIndex,
    headerHeight,
    isResizing,
    isLast,
    sortDirection,
    sortIndex,
    filterItemsCounter,
    hasFocus,
    tabIndex,
    disableReorder,
    separatorSide,
    showLeftBorder,
    showRightBorder,
    pinnedPosition,
    pinnedOffset
  } = props;
  const apiRef = useGridPrivateApiContext();
  const rootProps = useGridRootProps();
  const isRtl = useRtl();
  const headerCellRef = React109.useRef(null);
  const columnMenuId = useId();
  const columnMenuButtonId = useId();
  const iconButtonRef = React109.useRef(null);
  const [showColumnMenuIcon, setShowColumnMenuIcon] = React109.useState(columnMenuOpen);
  const isDraggable = React109.useMemo(() => !rootProps.disableColumnReorder && !disableReorder && !colDef.disableReorder, [rootProps.disableColumnReorder, disableReorder, colDef.disableReorder]);
  let headerComponent;
  if (colDef.renderHeader) {
    headerComponent = colDef.renderHeader(apiRef.current.getColumnHeaderParams(colDef.field));
  }
  const ownerState = _extends({}, props, {
    classes: rootProps.classes,
    showRightBorder,
    showLeftBorder
  });
  const classes2 = useUtilityClasses26(ownerState);
  const publish = React109.useCallback((eventName) => (event) => {
    if (isEventTargetInPortal(event)) {
      return;
    }
    apiRef.current.publishEvent(eventName, apiRef.current.getColumnHeaderParams(colDef.field), event);
  }, [apiRef, colDef.field]);
  const mouseEventsHandlers = React109.useMemo(() => ({
    onClick: publish("columnHeaderClick"),
    onContextMenu: publish("columnHeaderContextMenu"),
    onDoubleClick: publish("columnHeaderDoubleClick"),
    onMouseOver: publish("columnHeaderOver"),
    // TODO remove as it's not used
    onMouseOut: publish("columnHeaderOut"),
    // TODO remove as it's not used
    onMouseEnter: publish("columnHeaderEnter"),
    // TODO remove as it's not used
    onMouseLeave: publish("columnHeaderLeave"),
    // TODO remove as it's not used
    onKeyDown: publish("columnHeaderKeyDown"),
    onFocus: publish("columnHeaderFocus"),
    onBlur: publish("columnHeaderBlur")
  }), [publish]);
  const draggableEventHandlers = React109.useMemo(() => isDraggable ? {
    onDragStart: publish("columnHeaderDragStart"),
    onDragEnter: publish("columnHeaderDragEnter"),
    onDragOver: publish("columnHeaderDragOver"),
    onDragEndCapture: publish("columnHeaderDragEnd")
  } : {}, [isDraggable, publish]);
  const columnHeaderSeparatorProps = React109.useMemo(() => ({
    onMouseDown: publish("columnSeparatorMouseDown"),
    onDoubleClick: publish("columnSeparatorDoubleClick")
  }), [publish]);
  React109.useEffect(() => {
    if (!showColumnMenuIcon) {
      setShowColumnMenuIcon(columnMenuOpen);
    }
  }, [showColumnMenuIcon, columnMenuOpen]);
  const handleExited = React109.useCallback(() => {
    setShowColumnMenuIcon(false);
  }, []);
  const columnMenuIconButton = !rootProps.disableColumnMenu && !colDef.disableColumnMenu && (0, import_jsx_runtime64.jsx)(ColumnHeaderMenuIcon, {
    colDef,
    columnMenuId,
    columnMenuButtonId,
    open: showColumnMenuIcon,
    iconButtonRef
  });
  const columnMenu = (0, import_jsx_runtime64.jsx)(GridColumnHeaderMenu, {
    columnMenuId,
    columnMenuButtonId,
    field: colDef.field,
    open: columnMenuOpen,
    target: iconButtonRef.current,
    ContentComponent: rootProps.slots.columnMenu,
    contentComponentProps: (_a = rootProps.slotProps) == null ? void 0 : _a.columnMenu,
    onExited: handleExited
  });
  const sortingOrder = colDef.sortingOrder ?? rootProps.sortingOrder;
  const showSortIcon = (colDef.sortable || sortDirection != null) && !colDef.hideSortIcons && !rootProps.disableColumnSorting;
  const columnTitleIconButtons = (0, import_jsx_runtime64.jsxs)(React109.Fragment, {
    children: [!rootProps.disableColumnFilter && (0, import_jsx_runtime64.jsx)(rootProps.slots.columnHeaderFilterIconButton, _extends({
      field: colDef.field,
      counter: filterItemsCounter
    }, (_b = rootProps.slotProps) == null ? void 0 : _b.columnHeaderFilterIconButton)), showSortIcon && (0, import_jsx_runtime64.jsx)(rootProps.slots.columnHeaderSortIcon, _extends({
      field: colDef.field,
      direction: sortDirection,
      index: sortIndex,
      sortingOrder,
      disabled: !colDef.sortable
    }, (_c = rootProps.slotProps) == null ? void 0 : _c.columnHeaderSortIcon))]
  });
  React109.useLayoutEffect(() => {
    const columnMenuState = apiRef.current.state.columnMenu;
    if (hasFocus && !columnMenuState.open) {
      const focusableElement = headerCellRef.current.querySelector('[tabindex="0"]');
      const elementToFocus = focusableElement || headerCellRef.current;
      if (!elementToFocus) {
        return;
      }
      if (doesSupportPreventScroll()) {
        elementToFocus.focus({
          preventScroll: true
        });
      } else {
        const scrollPosition = apiRef.current.getScrollPosition();
        elementToFocus.focus();
        apiRef.current.scroll(scrollPosition);
      }
    }
  }, [apiRef, hasFocus]);
  const headerClassName = typeof colDef.headerClassName === "function" ? colDef.headerClassName({
    field: colDef.field,
    colDef
  }) : colDef.headerClassName;
  const label = colDef.headerName ?? colDef.field;
  const style4 = React109.useMemo(() => attachPinnedStyle(_extends({}, props.style), isRtl, pinnedPosition, pinnedOffset), [pinnedPosition, pinnedOffset, props.style, isRtl]);
  return (0, import_jsx_runtime64.jsx)(GridGenericColumnHeaderItem, _extends({
    ref: headerCellRef,
    classes: classes2,
    columnMenuOpen,
    colIndex,
    height: headerHeight,
    isResizing,
    sortDirection,
    hasFocus,
    tabIndex,
    separatorSide,
    isDraggable,
    headerComponent,
    description: colDef.description,
    elementId: colDef.field,
    width: colDef.computedWidth,
    columnMenuIconButton,
    columnTitleIconButtons,
    headerClassName: clsx_default(headerClassName, isLast && gridClasses2["columnHeader--last"]),
    label,
    resizable: !rootProps.disableColumnResize && !!colDef.resizable,
    "data-field": colDef.field,
    columnMenu,
    draggableContainerProps: draggableEventHandlers,
    columnHeaderSeparatorProps,
    style: style4
  }, mouseEventsHandlers));
}
true ? GridColumnHeaderItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: import_prop_types47.default.object.isRequired,
  colIndex: import_prop_types47.default.number.isRequired,
  columnMenuOpen: import_prop_types47.default.bool.isRequired,
  disableReorder: import_prop_types47.default.bool,
  filterItemsCounter: import_prop_types47.default.number,
  hasFocus: import_prop_types47.default.bool,
  headerHeight: import_prop_types47.default.number.isRequired,
  isDragging: import_prop_types47.default.bool.isRequired,
  isLast: import_prop_types47.default.bool.isRequired,
  isLastUnpinned: import_prop_types47.default.bool.isRequired,
  isResizing: import_prop_types47.default.bool.isRequired,
  isSiblingFocused: import_prop_types47.default.bool.isRequired,
  pinnedOffset: import_prop_types47.default.number,
  pinnedPosition: import_prop_types47.default.oneOf([0, 1, 2, 3]),
  separatorSide: import_prop_types47.default.oneOf(["left", "right"]),
  showLeftBorder: import_prop_types47.default.bool.isRequired,
  showRightBorder: import_prop_types47.default.bool.isRequired,
  sortDirection: import_prop_types47.default.oneOf(["asc", "desc"]),
  sortIndex: import_prop_types47.default.number,
  style: import_prop_types47.default.object,
  tabIndex: import_prop_types47.default.oneOf([-1, 0]).isRequired
} : void 0;
var Memoized3 = fastMemo(GridColumnHeaderItem);

// node_modules/@mui/x-data-grid/esm/components/columnHeaders/GridColumnHeaderSortIcon.js
init_extends();
var React112 = __toESM(require_react(), 1);
var import_prop_types49 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-data-grid/esm/components/columnHeaders/GridIconButtonContainer.js
init_extends();
init_objectWithoutPropertiesLoose();
var React110 = __toESM(require_react(), 1);
init_clsx();
var import_jsx_runtime65 = __toESM(require_jsx_runtime(), 1);
var _excluded51 = ["className"];
var useUtilityClasses27 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["iconButtonContainer"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var GridIconButtonContainerRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "IconButtonContainer"
})(() => ({
  display: "flex",
  visibility: "hidden",
  width: 0
}));
var GridIconButtonContainer = forwardRef2(function GridIconButtonContainer2(props, ref) {
  const {
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded51);
  const rootProps = useGridRootProps();
  const classes2 = useUtilityClasses27(rootProps);
  return (0, import_jsx_runtime65.jsx)(GridIconButtonContainerRoot, _extends({
    className: clsx_default(classes2.root, className),
    ownerState: rootProps
  }, other, {
    ref
  }));
});
if (true) GridIconButtonContainer.displayName = "GridIconButtonContainer";

// node_modules/@mui/x-data-grid/esm/components/GridColumnSortButton.js
init_objectWithoutPropertiesLoose();
init_extends();
var React111 = __toESM(require_react(), 1);
var import_prop_types48 = __toESM(require_prop_types(), 1);
init_clsx();
var import_jsx_runtime66 = __toESM(require_jsx_runtime(), 1);
var _excluded52 = ["direction", "index", "sortingOrder", "disabled", "className"];
var useUtilityClasses28 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["sortButton"],
    icon: ["sortIcon"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var GridColumnSortButtonRoot = styled_default2(NotRendered, {
  name: "MuiDataGrid",
  slot: "SortButton"
})({
  transition: vars.transition(["opacity"], {
    duration: vars.transitions.duration.short,
    easing: vars.transitions.easing.easeInOut
  })
});
function getIcon(icons, direction, className, sortingOrder) {
  let Icon;
  const iconProps = {};
  if (direction === "asc") {
    Icon = icons.columnSortedAscendingIcon;
  } else if (direction === "desc") {
    Icon = icons.columnSortedDescendingIcon;
  } else {
    Icon = icons.columnUnsortedIcon;
    iconProps.sortingOrder = sortingOrder;
  }
  return Icon ? (0, import_jsx_runtime66.jsx)(Icon, _extends({
    fontSize: "small",
    className
  }, iconProps)) : null;
}
function GridColumnSortButton(props) {
  var _a;
  const {
    direction,
    index,
    sortingOrder,
    disabled,
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded52);
  const apiRef = useGridApiContext();
  const rootProps = useGridRootProps();
  const ownerState = _extends({}, props, {
    classes: rootProps.classes
  });
  const classes2 = useUtilityClasses28(ownerState);
  const iconElement = getIcon(rootProps.slots, direction, classes2.icon, sortingOrder);
  if (!iconElement) {
    return null;
  }
  const iconButton = (0, import_jsx_runtime66.jsx)(GridColumnSortButtonRoot, _extends({
    as: rootProps.slots.baseIconButton,
    ownerState,
    "aria-label": apiRef.current.getLocaleText("columnHeaderSortIconLabel"),
    title: apiRef.current.getLocaleText("columnHeaderSortIconLabel"),
    size: "small",
    disabled,
    className: clsx_default(classes2.root, className)
  }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseIconButton, other, {
    children: iconElement
  }));
  return (0, import_jsx_runtime66.jsxs)(React111.Fragment, {
    children: [index != null && (0, import_jsx_runtime66.jsx)(rootProps.slots.baseBadge, {
      badgeContent: index,
      color: "default",
      overlap: "circular",
      children: iconButton
    }), index == null && iconButton]
  });
}
true ? GridColumnSortButton.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  direction: import_prop_types48.default.oneOf(["asc", "desc"]),
  disabled: import_prop_types48.default.bool,
  field: import_prop_types48.default.string.isRequired,
  index: import_prop_types48.default.number,
  onClick: import_prop_types48.default.func,
  sortingOrder: import_prop_types48.default.arrayOf(import_prop_types48.default.oneOf(["asc", "desc"])).isRequired
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/columnHeaders/GridColumnHeaderSortIcon.js
var import_jsx_runtime67 = __toESM(require_jsx_runtime(), 1);
function GridColumnHeaderSortIconRaw(props) {
  return (0, import_jsx_runtime67.jsx)(GridIconButtonContainer, {
    children: (0, import_jsx_runtime67.jsx)(GridColumnSortButton, _extends({}, props, {
      tabIndex: -1
    }))
  });
}
var GridColumnHeaderSortIcon2 = React112.memo(GridColumnHeaderSortIconRaw);
if (true) GridColumnHeaderSortIcon2.displayName = "GridColumnHeaderSortIcon";
true ? GridColumnHeaderSortIconRaw.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  className: import_prop_types49.default.string,
  color: import_prop_types49.default.oneOf(["default", "inherit", "primary"]),
  direction: import_prop_types49.default.oneOf(["asc", "desc"]),
  disabled: import_prop_types49.default.bool,
  edge: import_prop_types49.default.oneOf(["end", "start", false]),
  field: import_prop_types49.default.string.isRequired,
  id: import_prop_types49.default.string,
  index: import_prop_types49.default.number,
  label: import_prop_types49.default.string,
  role: import_prop_types49.default.string,
  size: import_prop_types49.default.oneOf(["large", "medium", "small"]),
  sortingOrder: import_prop_types49.default.arrayOf(import_prop_types49.default.oneOf(["asc", "desc"])).isRequired,
  style: import_prop_types49.default.object,
  tabIndex: import_prop_types49.default.number,
  title: import_prop_types49.default.string,
  touchRippleRef: import_prop_types49.default.any
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/columnHeaders/GridColumnHeaderFilterIconButton.js
init_extends();
var React113 = __toESM(require_react(), 1);
var import_prop_types50 = __toESM(require_prop_types(), 1);
var import_jsx_runtime68 = __toESM(require_jsx_runtime(), 1);
var useUtilityClasses29 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    icon: ["filterIcon"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
function GridColumnHeaderFilterIconButtonWrapped(props) {
  if (!props.counter) {
    return null;
  }
  return (0, import_jsx_runtime68.jsx)(GridColumnHeaderFilterIconButton, _extends({}, props));
}
true ? GridColumnHeaderFilterIconButtonWrapped.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  counter: import_prop_types50.default.number,
  field: import_prop_types50.default.string.isRequired,
  onClick: import_prop_types50.default.func
} : void 0;
function GridColumnHeaderFilterIconButton(props) {
  var _a, _b;
  const {
    counter,
    field,
    onClick
  } = props;
  const apiRef = useGridApiContext();
  const rootProps = useGridRootProps();
  const ownerState = _extends({}, props, {
    classes: rootProps.classes
  });
  const classes2 = useUtilityClasses29(ownerState);
  const labelId = useId();
  const isOpen = useGridSelector(apiRef, gridPreferencePanelSelectorWithLabel, labelId);
  const panelId = useId();
  const toggleFilter = React113.useCallback((event) => {
    event.preventDefault();
    event.stopPropagation();
    const {
      open,
      openedPanelValue
    } = gridPreferencePanelStateSelector(apiRef);
    if (open && openedPanelValue === GridPreferencePanelsValue.filters) {
      apiRef.current.hideFilterPanel();
    } else {
      apiRef.current.showFilterPanel(void 0, panelId, labelId);
    }
    if (onClick) {
      onClick(apiRef.current.getColumnHeaderParams(field), event);
    }
  }, [apiRef, field, onClick, panelId, labelId]);
  if (!counter) {
    return null;
  }
  const iconButton = (0, import_jsx_runtime68.jsx)(rootProps.slots.baseIconButton, _extends({
    id: labelId,
    onClick: toggleFilter,
    "aria-label": apiRef.current.getLocaleText("columnHeaderFiltersLabel"),
    size: "small",
    tabIndex: -1,
    "aria-haspopup": "menu",
    "aria-expanded": isOpen,
    "aria-controls": isOpen ? panelId : void 0
  }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseIconButton, {
    children: (0, import_jsx_runtime68.jsx)(rootProps.slots.columnFilteredIcon, {
      className: classes2.icon,
      fontSize: "small"
    })
  }));
  return (0, import_jsx_runtime68.jsx)(rootProps.slots.baseTooltip, _extends({
    title: apiRef.current.getLocaleText("columnHeaderFiltersTooltipActive")(counter),
    enterDelay: 1e3
  }, (_b = rootProps.slotProps) == null ? void 0 : _b.baseTooltip, {
    children: (0, import_jsx_runtime68.jsxs)(GridIconButtonContainer, {
      children: [counter > 1 && (0, import_jsx_runtime68.jsx)(rootProps.slots.baseBadge, {
        badgeContent: counter,
        color: "default",
        children: iconButton
      }), counter === 1 && iconButton]
    })
  }));
}
true ? GridColumnHeaderFilterIconButton.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  counter: import_prop_types50.default.number,
  field: import_prop_types50.default.string.isRequired,
  onClick: import_prop_types50.default.func
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/menu/columnMenu/GridColumnMenuContainer.js
init_extends();
init_objectWithoutPropertiesLoose();
init_clsx();
var import_prop_types51 = __toESM(require_prop_types(), 1);
var React114 = __toESM(require_react(), 1);
var import_jsx_runtime69 = __toESM(require_jsx_runtime(), 1);
var _excluded53 = ["hideMenu", "colDef", "id", "labelledby", "className", "children", "open"];
var StyledMenuList = styled_default(NotRendered)(() => ({
  minWidth: 248
}));
function handleMenuScrollCapture(event) {
  if (!event.currentTarget.contains(event.target)) {
    return;
  }
  event.stopPropagation();
}
var GridColumnMenuContainer = forwardRef2(function GridColumnMenuContainer2(props, ref) {
  const {
    hideMenu,
    id,
    labelledby,
    className,
    children,
    open
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded53);
  const rootProps = useGridRootProps();
  const handleListKeyDown = React114.useCallback((event) => {
    if (event.key === "Tab") {
      event.preventDefault();
    }
    if (isHideMenuKey(event.key)) {
      hideMenu(event);
    }
  }, [hideMenu]);
  return (0, import_jsx_runtime69.jsx)(StyledMenuList, _extends({
    as: rootProps.slots.baseMenuList,
    id,
    className: clsx_default(gridClasses2.menuList, className),
    "aria-labelledby": labelledby,
    onKeyDown: handleListKeyDown,
    onWheel: handleMenuScrollCapture,
    onTouchMove: handleMenuScrollCapture,
    autoFocus: open
  }, other, {
    ref,
    children
  }));
});
if (true) GridColumnMenuContainer.displayName = "GridColumnMenuContainer";
true ? GridColumnMenuContainer.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: import_prop_types51.default.object.isRequired,
  hideMenu: import_prop_types51.default.func.isRequired,
  id: import_prop_types51.default.string,
  labelledby: import_prop_types51.default.string,
  open: import_prop_types51.default.bool.isRequired
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/menu/columnMenu/GridColumnMenu.js
init_extends();
init_objectWithoutPropertiesLoose();
var React121 = __toESM(require_react(), 1);
var import_prop_types57 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-data-grid/esm/hooks/features/columnMenu/useGridColumnMenuSlots.js
init_objectWithoutPropertiesLoose();
init_extends();
var React115 = __toESM(require_react(), 1);
var _excluded54 = ["displayOrder"];
var useGridColumnMenuSlots = (props) => {
  const apiRef = useGridPrivateApiContext();
  const rootProps = useGridRootProps();
  const {
    defaultSlots: defaultSlots2,
    defaultSlotProps,
    slots = {},
    slotProps = {},
    hideMenu,
    colDef,
    addDividers = true
  } = props;
  const processedComponents = React115.useMemo(() => _extends({}, defaultSlots2, slots), [defaultSlots2, slots]);
  const processedSlotProps = React115.useMemo(() => {
    if (!slotProps || Object.keys(slotProps).length === 0) {
      return defaultSlotProps;
    }
    const mergedProps = _extends({}, slotProps);
    Object.entries(defaultSlotProps).forEach(([key, currentSlotProps]) => {
      mergedProps[key] = _extends({}, currentSlotProps, slotProps[key] || {});
    });
    return mergedProps;
  }, [defaultSlotProps, slotProps]);
  const defaultItems = apiRef.current.unstable_applyPipeProcessors("columnMenu", [], props.colDef);
  const userItems = React115.useMemo(() => {
    const defaultComponentKeys = Object.keys(defaultSlots2);
    return Object.keys(slots).filter((key) => !defaultComponentKeys.includes(key));
  }, [slots, defaultSlots2]);
  return React115.useMemo(() => {
    const uniqueItems = Array.from(/* @__PURE__ */ new Set([...defaultItems, ...userItems]));
    const cleansedItems = uniqueItems.filter((key) => processedComponents[key] != null);
    const sorted = cleansedItems.sort((a, b) => {
      const leftItemProps = processedSlotProps[a];
      const rightItemProps = processedSlotProps[b];
      const leftDisplayOrder = Number.isFinite(leftItemProps == null ? void 0 : leftItemProps.displayOrder) ? leftItemProps.displayOrder : 100;
      const rightDisplayOrder = Number.isFinite(rightItemProps == null ? void 0 : rightItemProps.displayOrder) ? rightItemProps.displayOrder : 100;
      return leftDisplayOrder - rightDisplayOrder;
    });
    return sorted.reduce((acc, key, index) => {
      let itemProps = {
        colDef,
        onClick: hideMenu
      };
      const processedComponentProps = processedSlotProps[key];
      if (processedComponentProps) {
        const customProps = _objectWithoutPropertiesLoose(processedComponentProps, _excluded54);
        itemProps = _extends({}, itemProps, customProps);
      }
      return addDividers && index !== sorted.length - 1 ? [...acc, [processedComponents[key], itemProps], [rootProps.slots.baseDivider, {}]] : [...acc, [processedComponents[key], itemProps]];
    }, []);
  }, [addDividers, colDef, defaultItems, hideMenu, processedComponents, processedSlotProps, userItems, rootProps.slots.baseDivider]);
};

// node_modules/@mui/x-data-grid/esm/components/menu/columnMenu/menuItems/GridColumnMenuColumnsItem.js
init_extends();
var React118 = __toESM(require_react(), 1);
var import_prop_types54 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-data-grid/esm/components/menu/columnMenu/menuItems/GridColumnMenuHideItem.js
var React116 = __toESM(require_react(), 1);
var import_prop_types52 = __toESM(require_prop_types(), 1);
var import_jsx_runtime70 = __toESM(require_jsx_runtime(), 1);
function GridColumnMenuHideItem(props) {
  const {
    colDef,
    onClick
  } = props;
  const apiRef = useGridApiContext();
  const rootProps = useGridRootProps();
  const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);
  const columnsWithMenu = visibleColumns.filter((col) => col.disableColumnMenu !== true);
  const disabled = columnsWithMenu.length === 1;
  const toggleColumn = React116.useCallback((event) => {
    if (disabled) {
      return;
    }
    apiRef.current.setColumnVisibility(colDef.field, false);
    onClick(event);
  }, [apiRef, colDef.field, onClick, disabled]);
  if (rootProps.disableColumnSelector) {
    return null;
  }
  if (colDef.hideable === false) {
    return null;
  }
  return (0, import_jsx_runtime70.jsx)(rootProps.slots.baseMenuItem, {
    onClick: toggleColumn,
    disabled,
    iconStart: (0, import_jsx_runtime70.jsx)(rootProps.slots.columnMenuHideIcon, {
      fontSize: "small"
    }),
    children: apiRef.current.getLocaleText("columnMenuHideColumn")
  });
}
true ? GridColumnMenuHideItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: import_prop_types52.default.object.isRequired,
  onClick: import_prop_types52.default.func.isRequired
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/menu/columnMenu/menuItems/GridColumnMenuManageItem.js
var React117 = __toESM(require_react(), 1);
var import_prop_types53 = __toESM(require_prop_types(), 1);
var import_jsx_runtime71 = __toESM(require_jsx_runtime(), 1);
function GridColumnMenuManageItem(props) {
  const {
    onClick
  } = props;
  const apiRef = useGridApiContext();
  const rootProps = useGridRootProps();
  const showColumns = React117.useCallback((event) => {
    onClick(event);
    apiRef.current.showPreferences(GridPreferencePanelsValue.columns);
  }, [apiRef, onClick]);
  if (rootProps.disableColumnSelector) {
    return null;
  }
  return (0, import_jsx_runtime71.jsx)(rootProps.slots.baseMenuItem, {
    onClick: showColumns,
    iconStart: (0, import_jsx_runtime71.jsx)(rootProps.slots.columnMenuManageColumnsIcon, {
      fontSize: "small"
    }),
    children: apiRef.current.getLocaleText("columnMenuManageColumns")
  });
}
true ? GridColumnMenuManageItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: import_prop_types53.default.object.isRequired,
  onClick: import_prop_types53.default.func.isRequired
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/menu/columnMenu/menuItems/GridColumnMenuColumnsItem.js
var import_jsx_runtime72 = __toESM(require_jsx_runtime(), 1);
function GridColumnMenuColumnsItem(props) {
  return (0, import_jsx_runtime72.jsxs)(React118.Fragment, {
    children: [(0, import_jsx_runtime72.jsx)(GridColumnMenuHideItem, _extends({}, props)), (0, import_jsx_runtime72.jsx)(GridColumnMenuManageItem, _extends({}, props))]
  });
}
true ? GridColumnMenuColumnsItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: import_prop_types54.default.object.isRequired,
  onClick: import_prop_types54.default.func.isRequired
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/menu/columnMenu/menuItems/GridColumnMenuFilterItem.js
var React119 = __toESM(require_react(), 1);
var import_prop_types55 = __toESM(require_prop_types(), 1);
var import_jsx_runtime73 = __toESM(require_jsx_runtime(), 1);
function GridColumnMenuFilterItem(props) {
  const {
    colDef,
    onClick
  } = props;
  const apiRef = useGridApiContext();
  const rootProps = useGridRootProps();
  const showFilter = React119.useCallback((event) => {
    onClick(event);
    apiRef.current.showFilterPanel(colDef.field);
  }, [apiRef, colDef.field, onClick]);
  if (rootProps.disableColumnFilter || !colDef.filterable) {
    return null;
  }
  return (0, import_jsx_runtime73.jsx)(rootProps.slots.baseMenuItem, {
    onClick: showFilter,
    iconStart: (0, import_jsx_runtime73.jsx)(rootProps.slots.columnMenuFilterIcon, {
      fontSize: "small"
    }),
    children: apiRef.current.getLocaleText("columnMenuFilter")
  });
}
true ? GridColumnMenuFilterItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: import_prop_types55.default.object.isRequired,
  onClick: import_prop_types55.default.func.isRequired
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/menu/columnMenu/menuItems/GridColumnMenuSortItem.js
var React120 = __toESM(require_react(), 1);
var import_prop_types56 = __toESM(require_prop_types(), 1);
var import_jsx_runtime74 = __toESM(require_jsx_runtime(), 1);
function GridColumnMenuSortItem(props) {
  const {
    colDef,
    onClick
  } = props;
  const apiRef = useGridApiContext();
  const sortModel = useGridSelector(apiRef, gridSortModelSelector);
  const rootProps = useGridRootProps();
  const sortDirection = React120.useMemo(() => {
    if (!colDef) {
      return null;
    }
    const sortItem = sortModel.find((item) => item.field === colDef.field);
    return sortItem == null ? void 0 : sortItem.sort;
  }, [colDef, sortModel]);
  const sortingOrder = colDef.sortingOrder ?? rootProps.sortingOrder;
  const onSortMenuItemClick = React120.useCallback((event) => {
    onClick(event);
    const direction = event.currentTarget.getAttribute("data-value") || null;
    const allowMultipleSorting = rootProps.multipleColumnsSortingMode === "always";
    apiRef.current.sortColumn(colDef.field, direction === sortDirection ? null : direction, allowMultipleSorting);
  }, [apiRef, colDef, onClick, sortDirection, rootProps.multipleColumnsSortingMode]);
  if (rootProps.disableColumnSorting || !colDef || !colDef.sortable || !sortingOrder.some((item) => !!item)) {
    return null;
  }
  const getLabel = (key) => {
    const label = apiRef.current.getLocaleText(key);
    return typeof label === "function" ? label(colDef) : label;
  };
  return (0, import_jsx_runtime74.jsxs)(React120.Fragment, {
    children: [sortingOrder.includes("asc") && sortDirection !== "asc" ? (0, import_jsx_runtime74.jsx)(rootProps.slots.baseMenuItem, {
      onClick: onSortMenuItemClick,
      "data-value": "asc",
      iconStart: (0, import_jsx_runtime74.jsx)(rootProps.slots.columnMenuSortAscendingIcon, {
        fontSize: "small"
      }),
      children: getLabel("columnMenuSortAsc")
    }) : null, sortingOrder.includes("desc") && sortDirection !== "desc" ? (0, import_jsx_runtime74.jsx)(rootProps.slots.baseMenuItem, {
      onClick: onSortMenuItemClick,
      "data-value": "desc",
      iconStart: (0, import_jsx_runtime74.jsx)(rootProps.slots.columnMenuSortDescendingIcon, {
        fontSize: "small"
      }),
      children: getLabel("columnMenuSortDesc")
    }) : null, sortingOrder.includes(null) && sortDirection != null ? (0, import_jsx_runtime74.jsx)(rootProps.slots.baseMenuItem, {
      onClick: onSortMenuItemClick,
      iconStart: rootProps.slots.columnMenuUnsortIcon ? (0, import_jsx_runtime74.jsx)(rootProps.slots.columnMenuUnsortIcon, {
        fontSize: "small"
      }) : (0, import_jsx_runtime74.jsx)("span", {}),
      children: apiRef.current.getLocaleText("columnMenuUnsort")
    }) : null]
  });
}
true ? GridColumnMenuSortItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: import_prop_types56.default.object.isRequired,
  onClick: import_prop_types56.default.func.isRequired
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/menu/columnMenu/GridColumnMenu.js
var import_jsx_runtime75 = __toESM(require_jsx_runtime(), 1);
var _excluded55 = ["defaultSlots", "defaultSlotProps", "slots", "slotProps"];
var GRID_COLUMN_MENU_SLOTS = {
  columnMenuSortItem: GridColumnMenuSortItem,
  columnMenuFilterItem: GridColumnMenuFilterItem,
  columnMenuColumnsItem: GridColumnMenuColumnsItem
};
var GRID_COLUMN_MENU_SLOT_PROPS = {
  columnMenuSortItem: {
    displayOrder: 10
  },
  columnMenuFilterItem: {
    displayOrder: 20
  },
  columnMenuColumnsItem: {
    displayOrder: 30
  }
};
var GridGenericColumnMenu = forwardRef2(function GridGenericColumnMenu2(props, ref) {
  const {
    defaultSlots: defaultSlots2,
    defaultSlotProps,
    slots,
    slotProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded55);
  const orderedSlots = useGridColumnMenuSlots(_extends({}, other, {
    defaultSlots: defaultSlots2,
    defaultSlotProps,
    slots,
    slotProps
  }));
  return (0, import_jsx_runtime75.jsx)(GridColumnMenuContainer, _extends({}, other, {
    ref,
    children: orderedSlots.map(([Component, otherProps], index) => (0, import_jsx_runtime75.jsx)(Component, _extends({}, otherProps), index))
  }));
});
if (true) GridGenericColumnMenu.displayName = "GridGenericColumnMenu";
true ? GridGenericColumnMenu.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: import_prop_types57.default.object.isRequired,
  /**
   * Initial `slotProps` - it is internal, to be overrriden by Pro or Premium packages
   * @ignore - do not document.
   */
  defaultSlotProps: import_prop_types57.default.object.isRequired,
  /**
   * Initial `slots` - it is internal, to be overrriden by Pro or Premium packages
   * @ignore - do not document.
   */
  defaultSlots: import_prop_types57.default.object.isRequired,
  hideMenu: import_prop_types57.default.func.isRequired,
  id: import_prop_types57.default.string,
  labelledby: import_prop_types57.default.string,
  open: import_prop_types57.default.bool.isRequired,
  /**
   * Could be used to pass new props or override props specific to a column menu component
   * e.g. `displayOrder`
   */
  slotProps: import_prop_types57.default.object,
  /**
   * `slots` could be used to add new and (or) override default column menu items
   * If you register a nee component you must pass it's `displayOrder` in `slotProps`
   * or it will be placed in the end of the list
   */
  slots: import_prop_types57.default.object
} : void 0;
var GridColumnMenu = forwardRef2(function GridColumnMenu2(props, ref) {
  return (0, import_jsx_runtime75.jsx)(GridGenericColumnMenu, _extends({}, props, {
    ref,
    defaultSlots: GRID_COLUMN_MENU_SLOTS,
    defaultSlotProps: GRID_COLUMN_MENU_SLOT_PROPS
  }));
});
if (true) GridColumnMenu.displayName = "GridColumnMenu";
true ? GridColumnMenu.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: import_prop_types57.default.object.isRequired,
  hideMenu: import_prop_types57.default.func.isRequired,
  id: import_prop_types57.default.string,
  labelledby: import_prop_types57.default.string,
  open: import_prop_types57.default.bool.isRequired,
  /**
   * Could be used to pass new props or override props specific to a column menu component
   * e.g. `displayOrder`
   */
  slotProps: import_prop_types57.default.object,
  /**
   * `slots` could be used to add new and (or) override default column menu items
   * If you register a nee component you must pass it's `displayOrder` in `slotProps`
   * or it will be placed in the end of the list
   */
  slots: import_prop_types57.default.object
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/panel/GridColumnsPanel.js
init_extends();
var React123 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/esm/components/panel/GridPanelWrapper.js
init_extends();
init_objectWithoutPropertiesLoose();
var React122 = __toESM(require_react(), 1);
init_clsx();
var import_jsx_runtime76 = __toESM(require_jsx_runtime(), 1);
var _excluded56 = ["className"];
var useUtilityClasses30 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["panelWrapper"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var GridPanelWrapperRoot = styled_default("div", {
  name: "MuiDataGrid",
  slot: "PanelWrapper"
})({
  display: "flex",
  flexDirection: "column",
  flex: 1,
  "&:focus": {
    outline: 0
  }
});
var GridPanelWrapper = forwardRef2(function GridPanelWrapper2(props, ref) {
  const {
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded56);
  const rootProps = useGridRootProps();
  const classes2 = useUtilityClasses30(rootProps);
  return (0, import_jsx_runtime76.jsx)(GridPanelWrapperRoot, _extends({
    tabIndex: -1,
    className: clsx_default(classes2.root, className),
    ownerState: rootProps
  }, other, {
    ref
  }));
});
if (true) GridPanelWrapper.displayName = "GridPanelWrapper";

// node_modules/@mui/x-data-grid/esm/components/panel/GridColumnsPanel.js
var import_jsx_runtime77 = __toESM(require_jsx_runtime(), 1);
function GridColumnsPanel(props) {
  var _a;
  const rootProps = useGridRootProps();
  return (0, import_jsx_runtime77.jsx)(GridPanelWrapper, _extends({}, props, {
    children: (0, import_jsx_runtime77.jsx)(rootProps.slots.columnsManagement, _extends({}, (_a = rootProps.slotProps) == null ? void 0 : _a.columnsManagement))
  }));
}

// node_modules/@mui/x-data-grid/esm/components/panel/GridPanel.js
init_extends();
init_objectWithoutPropertiesLoose();
var React124 = __toESM(require_react(), 1);
var import_prop_types58 = __toESM(require_prop_types(), 1);
init_clsx();
var import_jsx_runtime78 = __toESM(require_jsx_runtime(), 1);
var _excluded57 = ["children", "className", "classes", "onClose"];
var gridPanelClasses = generateUtilityClasses2("MuiDataGrid", ["panel", "paper"]);
var GridPanelRoot = styled_default(NotRendered, {
  name: "MuiDataGrid",
  slot: "panel"
})({
  zIndex: vars.zIndex.panel
});
var GridPanelContent = styled_default("div", {
  name: "MuiDataGrid",
  slot: "panelContent"
})({
  backgroundColor: vars.colors.background.overlay,
  borderRadius: vars.radius.base,
  boxShadow: vars.shadows.overlay,
  display: "flex",
  maxWidth: `calc(100vw - ${vars.spacing(2)})`,
  overflow: "auto"
});
var GridPanel = forwardRef2((props, ref) => {
  var _a;
  const {
    children,
    className,
    onClose
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded57);
  const apiRef = useGridApiContext();
  const rootProps = useGridRootProps();
  const classes2 = gridPanelClasses;
  const [isPlaced, setIsPlaced] = React124.useState(false);
  const variablesClass = useCSSVariablesClass();
  const onDidShow = useEventCallback_default(() => setIsPlaced(true));
  const onDidHide = useEventCallback_default(() => setIsPlaced(false));
  const handleClickAway = useEventCallback_default(() => {
    onClose == null ? void 0 : onClose();
  });
  const handleKeyDown = useEventCallback_default((event) => {
    if (event.key === "Escape") {
      onClose == null ? void 0 : onClose();
    }
  });
  const [fallbackTarget, setFallbackTarget] = React124.useState(null);
  React124.useEffect(() => {
    var _a2, _b;
    const panelAnchor = (_b = (_a2 = apiRef.current.rootElementRef) == null ? void 0 : _a2.current) == null ? void 0 : _b.querySelector('[data-id="gridPanelAnchor"]');
    if (panelAnchor) {
      setFallbackTarget(panelAnchor);
    }
  }, [apiRef]);
  if (!fallbackTarget) {
    return null;
  }
  return (0, import_jsx_runtime78.jsx)(GridPanelRoot, _extends({
    as: rootProps.slots.basePopper,
    ownerState: rootProps,
    placement: "bottom-end",
    className: clsx_default(classes2.panel, className, variablesClass),
    flip: true,
    onDidShow,
    onDidHide,
    onClickAway: handleClickAway,
    clickAwayMouseEvent: "onPointerUp",
    clickAwayTouchEvent: false,
    focusTrap: true
  }, other, (_a = rootProps.slotProps) == null ? void 0 : _a.basePopper, {
    target: props.target ?? fallbackTarget,
    ref,
    children: (0, import_jsx_runtime78.jsx)(GridPanelContent, {
      className: classes2.paper,
      ownerState: rootProps,
      onKeyDown: handleKeyDown,
      children: isPlaced && children
    })
  }));
});
if (true) GridPanel.displayName = "GridPanel";
true ? GridPanel.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  children: import_prop_types58.default.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types58.default.object,
  className: import_prop_types58.default.string,
  flip: import_prop_types58.default.bool,
  id: import_prop_types58.default.string,
  onClose: import_prop_types58.default.func,
  open: import_prop_types58.default.bool.isRequired,
  target: import_prop_types58.default.any
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/panel/GridPanelContent.js
init_extends();
init_objectWithoutPropertiesLoose();
var React125 = __toESM(require_react(), 1);
var import_prop_types59 = __toESM(require_prop_types(), 1);
init_clsx();
var import_jsx_runtime79 = __toESM(require_jsx_runtime(), 1);
var _excluded58 = ["className"];
var useUtilityClasses31 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["panelContent"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var GridPanelContentRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "PanelContent"
})({
  display: "flex",
  flexDirection: "column",
  overflow: "auto",
  flex: "1 1",
  maxHeight: 400,
  padding: vars.spacing(2.5, 1.5, 2, 1),
  gap: vars.spacing(2.5)
});
function GridPanelContent2(props) {
  const {
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded58);
  const rootProps = useGridRootProps();
  const classes2 = useUtilityClasses31(rootProps);
  return (0, import_jsx_runtime79.jsx)(GridPanelContentRoot, _extends({
    className: clsx_default(classes2.root, className),
    ownerState: rootProps
  }, other));
}
true ? GridPanelContent2.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  sx: import_prop_types59.default.oneOfType([import_prop_types59.default.arrayOf(import_prop_types59.default.oneOfType([import_prop_types59.default.func, import_prop_types59.default.object, import_prop_types59.default.bool])), import_prop_types59.default.func, import_prop_types59.default.object])
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/panel/GridPanelFooter.js
init_extends();
init_objectWithoutPropertiesLoose();
var React126 = __toESM(require_react(), 1);
var import_prop_types60 = __toESM(require_prop_types(), 1);
init_clsx();
var import_jsx_runtime80 = __toESM(require_jsx_runtime(), 1);
var _excluded59 = ["className"];
var useUtilityClasses32 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["panelFooter"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var GridPanelFooterRoot = styled_default("div", {
  name: "MuiDataGrid",
  slot: "PanelFooter"
})({
  padding: vars.spacing(1),
  display: "flex",
  justifyContent: "space-between",
  borderTop: `1px solid ${vars.colors.border.base}`
});
function GridPanelFooter(props) {
  const {
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded59);
  const rootProps = useGridRootProps();
  const classes2 = useUtilityClasses32(rootProps);
  return (0, import_jsx_runtime80.jsx)(GridPanelFooterRoot, _extends({
    className: clsx_default(classes2.root, className),
    ownerState: rootProps
  }, other));
}
true ? GridPanelFooter.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  sx: import_prop_types60.default.oneOfType([import_prop_types60.default.arrayOf(import_prop_types60.default.oneOfType([import_prop_types60.default.func, import_prop_types60.default.object, import_prop_types60.default.bool])), import_prop_types60.default.func, import_prop_types60.default.object])
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/panel/GridPanelHeader.js
init_extends();
init_objectWithoutPropertiesLoose();
var React127 = __toESM(require_react(), 1);
var import_prop_types61 = __toESM(require_prop_types(), 1);
init_clsx();
var import_jsx_runtime81 = __toESM(require_jsx_runtime(), 1);
var _excluded60 = ["className"];
var useUtilityClasses33 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["panelHeader"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var GridPanelHeaderRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "PanelHeader"
})({
  padding: vars.spacing(1)
});
function GridPanelHeader(props) {
  const {
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded60);
  const rootProps = useGridRootProps();
  const classes2 = useUtilityClasses33(rootProps);
  return (0, import_jsx_runtime81.jsx)(GridPanelHeaderRoot, _extends({
    className: clsx_default(classes2.root, className),
    ownerState: rootProps
  }, other));
}
true ? GridPanelHeader.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  sx: import_prop_types61.default.oneOfType([import_prop_types61.default.arrayOf(import_prop_types61.default.oneOfType([import_prop_types61.default.func, import_prop_types61.default.object, import_prop_types61.default.bool])), import_prop_types61.default.func, import_prop_types61.default.object])
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/panel/filterPanel/GridFilterForm.js
init_extends();
init_objectWithoutPropertiesLoose();
var React128 = __toESM(require_react(), 1);
var import_prop_types62 = __toESM(require_prop_types(), 1);
init_clsx();
var import_jsx_runtime82 = __toESM(require_jsx_runtime(), 1);
var import_react6 = __toESM(require_react(), 1);
var _excluded61 = ["item", "hasMultipleFilters", "deleteFilter", "applyFilterChanges", "showMultiFilterOperators", "disableMultiFilterOperator", "applyMultiFilterOperatorChanges", "focusElementRef", "logicOperators", "columnsSort", "filterColumns", "deleteIconProps", "logicOperatorInputProps", "operatorInputProps", "columnInputProps", "valueInputProps", "readOnly", "children"];
var _excluded212 = ["InputComponentProps"];
var useUtilityClasses34 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["filterForm"],
    deleteIcon: ["filterFormDeleteIcon"],
    logicOperatorInput: ["filterFormLogicOperatorInput"],
    columnInput: ["filterFormColumnInput"],
    operatorInput: ["filterFormOperatorInput"],
    valueInput: ["filterFormValueInput"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var GridFilterFormRoot = styled_default("div", {
  name: "MuiDataGrid",
  slot: "FilterForm"
})({
  display: "flex",
  gap: vars.spacing(1.5)
});
var FilterFormDeleteIcon = styled_default("div", {
  name: "MuiDataGrid",
  slot: "FilterFormDeleteIcon"
})({
  flexShrink: 0,
  display: "flex",
  justifyContent: "center",
  alignItems: "center"
});
var FilterFormLogicOperatorInput = styled_default("div", {
  name: "MuiDataGrid",
  slot: "FilterFormLogicOperatorInput"
})({
  minWidth: 75,
  justifyContent: "end"
});
var FilterFormColumnInput = styled_default("div", {
  name: "MuiDataGrid",
  slot: "FilterFormColumnInput"
})({
  width: 150
});
var FilterFormOperatorInput = styled_default("div", {
  name: "MuiDataGrid",
  slot: "FilterFormOperatorInput"
})({
  width: 150
});
var FilterFormValueInput = styled_default("div", {
  name: "MuiDataGrid",
  slot: "FilterFormValueInput"
})({
  width: 190
});
var getLogicOperatorLocaleKey = (logicOperator) => {
  switch (logicOperator) {
    case GridLogicOperator.And:
      return "filterPanelOperatorAnd";
    case GridLogicOperator.Or:
      return "filterPanelOperatorOr";
    default:
      throw new Error("MUI X: Invalid `logicOperator` property in the `GridFilterPanel`.");
  }
};
var getColumnLabel = (col) => col.headerName || col.field;
var collator2 = new Intl.Collator();
var GridFilterForm = forwardRef2(function GridFilterForm2(props, ref) {
  var _a, _b, _c, _d, _e, _f, _g;
  const {
    item,
    hasMultipleFilters,
    deleteFilter,
    applyFilterChanges,
    showMultiFilterOperators,
    disableMultiFilterOperator,
    applyMultiFilterOperatorChanges,
    focusElementRef,
    logicOperators = [GridLogicOperator.And, GridLogicOperator.Or],
    columnsSort,
    filterColumns,
    deleteIconProps = {},
    logicOperatorInputProps = {},
    operatorInputProps = {},
    columnInputProps = {},
    valueInputProps = {},
    readOnly
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded61);
  const apiRef = useGridApiContext();
  const columnLookup = useGridSelector(apiRef, gridColumnLookupSelector);
  const filterableColumns = useGridSelector(apiRef, gridFilterableColumnDefinitionsSelector);
  const filterModel = useGridSelector(apiRef, gridFilterModelSelector);
  const columnSelectId = useId();
  const columnSelectLabelId = useId();
  const operatorSelectId = useId();
  const operatorSelectLabelId = useId();
  const rootProps = useGridRootProps();
  const classes2 = useUtilityClasses34(rootProps);
  const valueRef = React128.useRef(null);
  const filterSelectorRef = React128.useRef(null);
  const multiFilterOperator = filterModel.logicOperator ?? GridLogicOperator.And;
  const hasLogicOperatorColumn = hasMultipleFilters && logicOperators.length > 0;
  const baseSelectProps = ((_a = rootProps.slotProps) == null ? void 0 : _a.baseSelect) || {};
  const isBaseSelectNative = baseSelectProps.native ?? false;
  const baseSelectOptionProps = ((_b = rootProps.slotProps) == null ? void 0 : _b.baseSelectOption) || {};
  const {
    InputComponentProps
  } = valueInputProps, valueInputPropsOther = _objectWithoutPropertiesLoose(valueInputProps, _excluded212);
  const pivotActive = useGridSelector(apiRef, gridPivotActiveSelector);
  const initialColumns = useGridSelector(apiRef, gridPivotInitialColumnsSelector);
  const {
    filteredColumns,
    selectedField
  } = React128.useMemo(() => {
    let itemField = item.field;
    const selectedNonFilterableColumn = columnLookup[item.field].filterable === false ? columnLookup[item.field] : null;
    if (selectedNonFilterableColumn) {
      return {
        filteredColumns: [selectedNonFilterableColumn],
        selectedField: itemField
      };
    }
    if (pivotActive) {
      return {
        filteredColumns: filterableColumns.filter((column) => initialColumns.get(column.field) !== void 0),
        selectedField: itemField
      };
    }
    if (filterColumns === void 0 || typeof filterColumns !== "function") {
      return {
        filteredColumns: filterableColumns,
        selectedField: itemField
      };
    }
    const filteredFields = filterColumns({
      field: item.field,
      columns: filterableColumns,
      currentFilters: (filterModel == null ? void 0 : filterModel.items) || []
    });
    return {
      filteredColumns: filterableColumns.filter((column) => {
        const isFieldIncluded = filteredFields.includes(column.field);
        if (column.field === item.field && !isFieldIncluded) {
          itemField = void 0;
        }
        return isFieldIncluded;
      }),
      selectedField: itemField
    };
  }, [item.field, columnLookup, pivotActive, filterColumns, filterableColumns, filterModel == null ? void 0 : filterModel.items, initialColumns]);
  const sortedFilteredColumns = React128.useMemo(() => {
    switch (columnsSort) {
      case "asc":
        return filteredColumns.sort((a, b) => collator2.compare(getColumnLabel(a), getColumnLabel(b)));
      case "desc":
        return filteredColumns.sort((a, b) => -collator2.compare(getColumnLabel(a), getColumnLabel(b)));
      default:
        return filteredColumns;
    }
  }, [filteredColumns, columnsSort]);
  const currentColumn = item.field ? apiRef.current.getColumn(item.field) : null;
  const currentOperator = React128.useMemo(() => {
    var _a2;
    if (!item.operator || !currentColumn) {
      return null;
    }
    return (_a2 = currentColumn.filterOperators) == null ? void 0 : _a2.find((operator) => operator.value === item.operator);
  }, [item, currentColumn]);
  const changeColumn = React128.useCallback((event) => {
    const field = event.target.value;
    const column = apiRef.current.getColumn(field);
    if (column.field === currentColumn.field) {
      return;
    }
    const newOperator = column.filterOperators.find((operator) => operator.value === item.operator) || column.filterOperators[0];
    const eraseFilterValue = !newOperator.InputComponent || newOperator.InputComponent !== (currentOperator == null ? void 0 : currentOperator.InputComponent) || column.type !== currentColumn.type;
    let filterValue = eraseFilterValue ? void 0 : item.value;
    if (column.type === "singleSelect" && filterValue !== void 0) {
      const colDef = column;
      const valueOptions = getValueOptions(colDef);
      if (Array.isArray(filterValue)) {
        filterValue = filterValue.filter((val) => {
          return (
            // Only keep values that are in the new value options
            getValueFromValueOptions(val, valueOptions, colDef == null ? void 0 : colDef.getOptionValue) !== void 0
          );
        });
      } else if (getValueFromValueOptions(item.value, valueOptions, colDef == null ? void 0 : colDef.getOptionValue) === void 0) {
        filterValue = void 0;
      }
    }
    applyFilterChanges(_extends({}, item, {
      field,
      operator: newOperator.value,
      value: filterValue
    }));
  }, [apiRef, applyFilterChanges, item, currentColumn, currentOperator]);
  const changeOperator = React128.useCallback((event) => {
    const operator = event.target.value;
    const newOperator = currentColumn == null ? void 0 : currentColumn.filterOperators.find((op) => op.value === operator);
    const eraseItemValue = !(newOperator == null ? void 0 : newOperator.InputComponent) || (newOperator == null ? void 0 : newOperator.InputComponent) !== (currentOperator == null ? void 0 : currentOperator.InputComponent);
    applyFilterChanges(_extends({}, item, {
      operator,
      value: eraseItemValue ? void 0 : item.value
    }));
  }, [applyFilterChanges, item, currentColumn, currentOperator]);
  const changeLogicOperator = React128.useCallback((event) => {
    const logicOperator = event.target.value === GridLogicOperator.And.toString() ? GridLogicOperator.And : GridLogicOperator.Or;
    applyMultiFilterOperatorChanges(logicOperator);
  }, [applyMultiFilterOperatorChanges]);
  const handleDeleteFilter = () => {
    deleteFilter(item);
  };
  React128.useImperativeHandle(focusElementRef, () => ({
    focus: () => {
      var _a2;
      if (currentOperator == null ? void 0 : currentOperator.InputComponent) {
        (_a2 = valueRef == null ? void 0 : valueRef.current) == null ? void 0 : _a2.focus();
      } else {
        filterSelectorRef.current.focus();
      }
    }
  }), [currentOperator]);
  return (0, import_jsx_runtime82.jsxs)(GridFilterFormRoot, _extends({
    className: classes2.root,
    "data-id": item.id,
    ownerState: rootProps
  }, other, {
    ref,
    children: [(0, import_jsx_runtime82.jsx)(FilterFormDeleteIcon, _extends({}, deleteIconProps, {
      className: clsx_default(classes2.deleteIcon, deleteIconProps.className),
      ownerState: rootProps,
      children: (0, import_jsx_runtime82.jsx)(rootProps.slots.baseIconButton, _extends({
        "aria-label": apiRef.current.getLocaleText("filterPanelDeleteIconLabel"),
        title: apiRef.current.getLocaleText("filterPanelDeleteIconLabel"),
        onClick: handleDeleteFilter,
        size: "small",
        disabled: readOnly
      }, (_c = rootProps.slotProps) == null ? void 0 : _c.baseIconButton, {
        children: (0, import_jsx_runtime82.jsx)(rootProps.slots.filterPanelDeleteIcon, {
          fontSize: "small"
        })
      }))
    })), (0, import_jsx_runtime82.jsx)(FilterFormLogicOperatorInput, _extends({
      as: rootProps.slots.baseSelect,
      sx: [hasLogicOperatorColumn ? {
        display: "flex"
      } : {
        display: "none"
      }, showMultiFilterOperators ? {
        visibility: "visible"
      } : {
        visibility: "hidden"
      }, logicOperatorInputProps.sx],
      className: clsx_default(classes2.logicOperatorInput, logicOperatorInputProps.className),
      ownerState: rootProps
    }, logicOperatorInputProps, {
      size: "small",
      slotProps: {
        htmlInput: {
          "aria-label": apiRef.current.getLocaleText("filterPanelLogicOperator")
        }
      },
      value: multiFilterOperator ?? "",
      onChange: changeLogicOperator,
      disabled: !!disableMultiFilterOperator || logicOperators.length === 1,
      native: isBaseSelectNative
    }, (_d = rootProps.slotProps) == null ? void 0 : _d.baseSelect, {
      children: logicOperators.map((logicOperator) => (0, import_react6.createElement)(rootProps.slots.baseSelectOption, _extends({}, baseSelectOptionProps, {
        native: isBaseSelectNative,
        key: logicOperator.toString(),
        value: logicOperator.toString()
      }), apiRef.current.getLocaleText(getLogicOperatorLocaleKey(logicOperator))))
    })), (0, import_jsx_runtime82.jsx)(FilterFormColumnInput, _extends({
      as: rootProps.slots.baseSelect
    }, columnInputProps, {
      className: clsx_default(classes2.columnInput, columnInputProps.className),
      ownerState: rootProps,
      size: "small",
      labelId: columnSelectLabelId,
      id: columnSelectId,
      label: apiRef.current.getLocaleText("filterPanelColumns"),
      value: selectedField ?? "",
      onChange: changeColumn,
      native: isBaseSelectNative,
      disabled: readOnly
    }, (_e = rootProps.slotProps) == null ? void 0 : _e.baseSelect, {
      children: sortedFilteredColumns.map((col) => (0, import_react6.createElement)(rootProps.slots.baseSelectOption, _extends({}, baseSelectOptionProps, {
        native: isBaseSelectNative,
        key: col.field,
        value: col.field
      }), getColumnLabel(col)))
    })), (0, import_jsx_runtime82.jsx)(FilterFormOperatorInput, _extends({
      as: rootProps.slots.baseSelect,
      size: "small"
    }, operatorInputProps, {
      className: clsx_default(classes2.operatorInput, operatorInputProps.className),
      ownerState: rootProps,
      labelId: operatorSelectLabelId,
      label: apiRef.current.getLocaleText("filterPanelOperator"),
      id: operatorSelectId,
      value: item.operator,
      onChange: changeOperator,
      native: isBaseSelectNative,
      inputRef: filterSelectorRef,
      disabled: readOnly
    }, (_f = rootProps.slotProps) == null ? void 0 : _f.baseSelect, {
      children: (_g = currentColumn == null ? void 0 : currentColumn.filterOperators) == null ? void 0 : _g.map((operator) => (0, import_react6.createElement)(rootProps.slots.baseSelectOption, _extends({}, baseSelectOptionProps, {
        native: isBaseSelectNative,
        key: operator.value,
        value: operator.value
      }), operator.label || apiRef.current.getLocaleText(`filterOperator${capitalize2(operator.value)}`)))
    })), (0, import_jsx_runtime82.jsx)(FilterFormValueInput, _extends({}, valueInputPropsOther, {
      className: clsx_default(classes2.valueInput, valueInputPropsOther.className),
      ownerState: rootProps,
      children: (currentOperator == null ? void 0 : currentOperator.InputComponent) ? (0, import_jsx_runtime82.jsx)(currentOperator.InputComponent, _extends({
        apiRef,
        item,
        applyValue: applyFilterChanges,
        focusElementRef: valueRef,
        disabled: readOnly,
        slotProps: {
          root: {
            size: "small"
          }
        }
      }, currentOperator.InputComponentProps, InputComponentProps), item.field) : null
    }))]
  }));
});
if (true) GridFilterForm.displayName = "GridFilterForm";
true ? GridFilterForm.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Callback called when the operator, column field or value is changed.
   * @param {GridFilterItem} item The updated [[GridFilterItem]].
   */
  applyFilterChanges: import_prop_types62.default.func.isRequired,
  /**
   * Callback called when the logic operator is changed.
   * @param {GridLogicOperator} operator The new logic operator.
   */
  applyMultiFilterOperatorChanges: import_prop_types62.default.func.isRequired,
  /**
   * @ignore - do not document.
   */
  children: import_prop_types62.default.node,
  /**
   * Props passed to the column input component.
   * @default {}
   */
  columnInputProps: import_prop_types62.default.any,
  /**
   * Changes how the options in the columns selector should be ordered.
   * If not specified, the order is derived from the `columns` prop.
   */
  columnsSort: import_prop_types62.default.oneOf(["asc", "desc"]),
  /**
   * Callback called when the delete button is clicked.
   * @param {GridFilterItem} item The deleted [[GridFilterItem]].
   */
  deleteFilter: import_prop_types62.default.func.isRequired,
  /**
   * Props passed to the delete icon.
   * @default {}
   */
  deleteIconProps: import_prop_types62.default.any,
  /**
   * If `true`, disables the logic operator field but still renders it.
   */
  disableMultiFilterOperator: import_prop_types62.default.bool,
  /**
   * Allows to filter the columns displayed in the filter form.
   * @param {FilterColumnsArgs} args The columns of the grid and name of field.
   * @returns {GridColDef['field'][]} The filtered fields array.
   */
  filterColumns: import_prop_types62.default.func,
  /**
   * A ref allowing to set imperative focus.
   * It can be passed to the el
   */
  focusElementRef: import_prop_types62.default.oneOfType([import_prop_types62.default.func, import_prop_types62.default.object]),
  /**
   * If `true`, the logic operator field is rendered.
   * The field will be invisible if `showMultiFilterOperators` is also `true`.
   */
  hasMultipleFilters: import_prop_types62.default.bool.isRequired,
  /**
   * The [[GridFilterItem]] representing this form.
   */
  item: import_prop_types62.default.shape({
    field: import_prop_types62.default.string.isRequired,
    id: import_prop_types62.default.oneOfType([import_prop_types62.default.number, import_prop_types62.default.string]),
    operator: import_prop_types62.default.string.isRequired,
    value: import_prop_types62.default.any
  }).isRequired,
  /**
   * Props passed to the logic operator input component.
   * @default {}
   */
  logicOperatorInputProps: import_prop_types62.default.any,
  /**
   * Sets the available logic operators.
   * @default [GridLogicOperator.And, GridLogicOperator.Or]
   */
  logicOperators: import_prop_types62.default.arrayOf(import_prop_types62.default.oneOf(["and", "or"]).isRequired),
  /**
   * Props passed to the operator input component.
   * @default {}
   */
  operatorInputProps: import_prop_types62.default.any,
  /**
   * `true` if the filter is disabled/read only.
   * i.e. `colDef.fiterable = false` but passed in `filterModel`
   * @default false
   */
  readOnly: import_prop_types62.default.bool,
  /**
   * If `true`, the logic operator field is visible.
   */
  showMultiFilterOperators: import_prop_types62.default.bool,
  /**
   * Props passed to the value input component.
   * @default {}
   */
  valueInputProps: import_prop_types62.default.any
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/panel/filterPanel/GridFilterPanel.js
init_extends();
init_objectWithoutPropertiesLoose();
var React129 = __toESM(require_react(), 1);
var import_prop_types63 = __toESM(require_prop_types(), 1);
var import_jsx_runtime83 = __toESM(require_jsx_runtime(), 1);
var _excluded62 = ["logicOperators", "columnsSort", "filterFormProps", "getColumnForNewFilter", "children", "disableAddFilterButton", "disableRemoveAllButton"];
var getGridFilter = (col) => ({
  field: col.field,
  operator: col.filterOperators[0].value,
  id: Math.round(Math.random() * 1e5)
});
var GridFilterPanel = forwardRef2(function GridFilterPanel2(props, ref) {
  var _a, _b;
  const apiRef = useGridApiContext();
  const rootProps = useGridRootProps();
  const filterModel = useGridSelector(apiRef, gridFilterModelSelector);
  const filterableColumns = useGridSelector(apiRef, gridFilterableColumnDefinitionsSelector);
  const filterableColumnsLookup = useGridSelector(apiRef, gridFilterableColumnLookupSelector);
  const lastFilterRef = React129.useRef(null);
  const placeholderFilter = React129.useRef(null);
  const {
    logicOperators = [GridLogicOperator.And, GridLogicOperator.Or],
    columnsSort,
    filterFormProps,
    getColumnForNewFilter,
    disableAddFilterButton = false,
    disableRemoveAllButton = false
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded62);
  const applyFilter = apiRef.current.upsertFilterItem;
  const applyFilterLogicOperator = React129.useCallback((operator) => {
    apiRef.current.setFilterLogicOperator(operator);
  }, [apiRef]);
  const getDefaultFilter = React129.useCallback(() => {
    let nextColumnWithOperator;
    if (getColumnForNewFilter && typeof getColumnForNewFilter === "function") {
      const nextFieldName = getColumnForNewFilter({
        currentFilters: (filterModel == null ? void 0 : filterModel.items) || [],
        columns: filterableColumns
      });
      if (nextFieldName === null) {
        return null;
      }
      nextColumnWithOperator = filterableColumns.find(({
        field
      }) => field === nextFieldName);
    } else {
      nextColumnWithOperator = filterableColumns.find((colDef) => {
        var _a2;
        return (_a2 = colDef.filterOperators) == null ? void 0 : _a2.length;
      });
    }
    if (!nextColumnWithOperator) {
      return null;
    }
    return getGridFilter(nextColumnWithOperator);
  }, [filterModel == null ? void 0 : filterModel.items, filterableColumns, getColumnForNewFilter]);
  const getNewFilter = React129.useCallback(() => {
    if (getColumnForNewFilter === void 0 || typeof getColumnForNewFilter !== "function") {
      return getDefaultFilter();
    }
    const currentFilters = filterModel.items.length ? filterModel.items : [getDefaultFilter()].filter(Boolean);
    const nextColumnFieldName = getColumnForNewFilter({
      currentFilters,
      columns: filterableColumns
    });
    if (nextColumnFieldName === null) {
      return null;
    }
    const nextColumnWithOperator = filterableColumns.find(({
      field
    }) => field === nextColumnFieldName);
    if (!nextColumnWithOperator) {
      return null;
    }
    return getGridFilter(nextColumnWithOperator);
  }, [filterModel.items, filterableColumns, getColumnForNewFilter, getDefaultFilter]);
  const items = React129.useMemo(() => {
    if (filterModel.items.length) {
      return filterModel.items;
    }
    if (!placeholderFilter.current) {
      placeholderFilter.current = getDefaultFilter();
    }
    return placeholderFilter.current ? [placeholderFilter.current] : [];
  }, [filterModel.items, getDefaultFilter]);
  const hasMultipleFilters = items.length > 1;
  const {
    readOnlyFilters,
    validFilters
  } = React129.useMemo(() => items.reduce((acc, item) => {
    if (filterableColumnsLookup[item.field]) {
      acc.validFilters.push(item);
    } else {
      acc.readOnlyFilters.push(item);
    }
    return acc;
  }, {
    readOnlyFilters: [],
    validFilters: []
  }), [items, filterableColumnsLookup]);
  const addNewFilter = React129.useCallback(() => {
    const newFilter = getNewFilter();
    if (!newFilter) {
      return;
    }
    apiRef.current.upsertFilterItems([...items, newFilter]);
  }, [apiRef, getNewFilter, items]);
  const deleteFilter = React129.useCallback((item) => {
    const shouldCloseFilterPanel = validFilters.length === 1;
    apiRef.current.deleteFilterItem(item);
    if (shouldCloseFilterPanel) {
      apiRef.current.hideFilterPanel();
    }
  }, [apiRef, validFilters.length]);
  const handleRemoveAll = React129.useCallback(() => {
    if (validFilters.length === 1 && validFilters[0].value === void 0) {
      apiRef.current.deleteFilterItem(validFilters[0]);
      return apiRef.current.hideFilterPanel();
    }
    return apiRef.current.setFilterModel(_extends({}, filterModel, {
      items: readOnlyFilters
    }), "removeAllFilterItems");
  }, [apiRef, readOnlyFilters, filterModel, validFilters]);
  React129.useEffect(() => {
    if (logicOperators.length > 0 && filterModel.logicOperator && !logicOperators.includes(filterModel.logicOperator)) {
      applyFilterLogicOperator(logicOperators[0]);
    }
  }, [logicOperators, applyFilterLogicOperator, filterModel.logicOperator]);
  React129.useEffect(() => {
    if (validFilters.length > 0) {
      lastFilterRef.current.focus();
    }
  }, [validFilters.length]);
  return (0, import_jsx_runtime83.jsxs)(GridPanelWrapper, _extends({}, other, {
    ref,
    children: [(0, import_jsx_runtime83.jsxs)(GridPanelContent2, {
      children: [readOnlyFilters.map((item, index) => (0, import_jsx_runtime83.jsx)(GridFilterForm, _extends({
        item,
        applyFilterChanges: applyFilter,
        deleteFilter,
        hasMultipleFilters,
        showMultiFilterOperators: index > 0,
        disableMultiFilterOperator: index !== 1,
        applyMultiFilterOperatorChanges: applyFilterLogicOperator,
        focusElementRef: null,
        readOnly: true,
        logicOperators,
        columnsSort
      }, filterFormProps), item.id == null ? index : item.id)), validFilters.map((item, index) => (0, import_jsx_runtime83.jsx)(GridFilterForm, _extends({
        item,
        applyFilterChanges: applyFilter,
        deleteFilter,
        hasMultipleFilters,
        showMultiFilterOperators: readOnlyFilters.length + index > 0,
        disableMultiFilterOperator: readOnlyFilters.length + index !== 1,
        applyMultiFilterOperatorChanges: applyFilterLogicOperator,
        focusElementRef: index === validFilters.length - 1 ? lastFilterRef : null,
        logicOperators,
        columnsSort
      }, filterFormProps), item.id == null ? index + readOnlyFilters.length : item.id))]
    }), !rootProps.disableMultipleColumnsFiltering && !(disableAddFilterButton && disableRemoveAllButton) ? (0, import_jsx_runtime83.jsxs)(GridPanelFooter, {
      children: [!disableAddFilterButton ? (0, import_jsx_runtime83.jsx)(rootProps.slots.baseButton, _extends({
        onClick: addNewFilter,
        startIcon: (0, import_jsx_runtime83.jsx)(rootProps.slots.filterPanelAddIcon, {})
      }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseButton, {
        children: apiRef.current.getLocaleText("filterPanelAddFilter")
      })) : (0, import_jsx_runtime83.jsx)("span", {}), !disableRemoveAllButton && validFilters.length > 0 ? (0, import_jsx_runtime83.jsx)(rootProps.slots.baseButton, _extends({
        onClick: handleRemoveAll,
        startIcon: (0, import_jsx_runtime83.jsx)(rootProps.slots.filterPanelRemoveAllIcon, {})
      }, (_b = rootProps.slotProps) == null ? void 0 : _b.baseButton, {
        children: apiRef.current.getLocaleText("filterPanelRemoveAll")
      })) : null]
    }) : null]
  }));
});
if (true) GridFilterPanel.displayName = "GridFilterPanel";
true ? GridFilterPanel.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * @ignore - do not document.
   */
  children: import_prop_types63.default.node,
  /**
   * Changes how the options in the columns selector should be ordered.
   * If not specified, the order is derived from the `columns` prop.
   */
  columnsSort: import_prop_types63.default.oneOf(["asc", "desc"]),
  /**
   * If `true`, the `Add filter` button will not be displayed.
   * @default false
   */
  disableAddFilterButton: import_prop_types63.default.bool,
  /**
   * If `true`, the `Remove all` button will be disabled
   * @default false
   */
  disableRemoveAllButton: import_prop_types63.default.bool,
  /**
   * Props passed to each filter form.
   */
  filterFormProps: import_prop_types63.default.shape({
    columnInputProps: import_prop_types63.default.any,
    columnsSort: import_prop_types63.default.oneOf(["asc", "desc"]),
    deleteIconProps: import_prop_types63.default.any,
    filterColumns: import_prop_types63.default.func,
    logicOperatorInputProps: import_prop_types63.default.any,
    operatorInputProps: import_prop_types63.default.any,
    valueInputProps: import_prop_types63.default.any
  }),
  /**
   * Function that returns the next filter item to be picked as default filter.
   * @param {GetColumnForNewFilterArgs} args Currently configured filters and columns.
   * @returns {GridColDef['field']} The field to be used for the next filter or `null` to prevent adding a filter.
   */
  getColumnForNewFilter: import_prop_types63.default.func,
  /**
   * Sets the available logic operators.
   * @default [GridLogicOperator.And, GridLogicOperator.Or]
   */
  logicOperators: import_prop_types63.default.arrayOf(import_prop_types63.default.oneOf(["and", "or"]).isRequired),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object, import_prop_types63.default.bool])), import_prop_types63.default.func, import_prop_types63.default.object])
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/columnsManagement/GridColumnsManagement.js
init_extends();
var React131 = __toESM(require_react(), 1);
var import_prop_types65 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-data-grid/node_modules/@mui/utils/esm/debounce/debounce.js
function debounce(func, wait = 166) {
  let timeout;
  function debounced(...args) {
    const later = () => {
      func.apply(this, args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  }
  debounced.clear = () => {
    clearTimeout(timeout);
  };
  return debounced;
}

// node_modules/@mui/x-data-grid/esm/components/columnsManagement/utils.js
var checkColumnVisibilityModelsSame = (a, b) => {
  const aFalseValues = new Set(Object.keys(a).filter((key) => a[key] === false));
  const bFalseValues = new Set(Object.keys(b).filter((key) => b[key] === false));
  if (aFalseValues.size !== bFalseValues.size) {
    return false;
  }
  let result = true;
  aFalseValues.forEach((key) => {
    if (!bFalseValues.has(key)) {
      result = false;
    }
  });
  return result;
};
var defaultSearchPredicate = (column, searchValue) => (column.headerName || column.field).toLowerCase().indexOf(searchValue) > -1;

// node_modules/@mui/x-data-grid/esm/components/GridShadowScrollArea.js
init_extends();
init_objectWithoutPropertiesLoose();
var React130 = __toESM(require_react(), 1);
var import_prop_types64 = __toESM(require_prop_types(), 1);
var import_jsx_runtime84 = __toESM(require_jsx_runtime(), 1);
var _excluded63 = ["children"];
var reveal = keyframes({
  from: {
    opacity: 0
  },
  to: {
    opacity: 1
  }
});
var detectScroll = keyframes({
  "from, to": {
    "--scrollable": '" "'
  }
});
var ShadowScrollArea = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "ShadowScrollArea"
})`
  flex: 1;
  display: flex;
  flex-direction: column;
  animation: ${detectScroll};
  animation-timeline: --scroll-timeline;
  animation-fill-mode: none;
  box-sizing: border-box;
  overflow: auto;
  scrollbar-width: thin;
  scroll-timeline: --scroll-timeline block;

  &::before,
  &::after {
    content: '';
    flex-shrink: 0;
    display: block;
    position: sticky;
    left: 0;
    width: 100%;
    height: 4px;
    animation: ${reveal} linear both;
    animation-timeline: --scroll-timeline;

    // Custom property toggle trick:
    // - Detects if the element is scrollable
    // - https://css-tricks.com/the-css-custom-property-toggle-trick/
    --visibility-scrollable: var(--scrollable) visible;
    --visibility-not-scrollable: hidden;
    visibility: var(--visibility-scrollable, var(--visibility-not-scrollable));
  }

  &::before {
    top: 0;
    background: linear-gradient(to bottom, rgba(0, 0, 0, 0.05) 0, transparent 100%);
    animation-range: 0 4px;
  }

  &::after {
    bottom: 0;
    background: linear-gradient(to top, rgba(0, 0, 0, 0.05) 0, transparent 100%);
    animation-direction: reverse;
    animation-range: calc(100% - 4px) 100%;
  }
`;
var GridShadowScrollArea = forwardRef2(function GridShadowScrollArea2(props, ref) {
  const {
    children
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded63);
  return (0, import_jsx_runtime84.jsx)(ShadowScrollArea, _extends({}, other, {
    ref,
    children
  }));
});
if (true) GridShadowScrollArea.displayName = "GridShadowScrollArea";
true ? GridShadowScrollArea.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  children: import_prop_types64.default.node
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/columnsManagement/GridColumnsManagement.js
var import_jsx_runtime85 = __toESM(require_jsx_runtime(), 1);
var useUtilityClasses35 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["columnsManagement"],
    header: ["columnsManagementHeader"],
    searchInput: ["columnsManagementSearchInput"],
    footer: ["columnsManagementFooter"],
    row: ["columnsManagementRow"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var collator3 = new Intl.Collator();
function GridColumnsManagement(props) {
  var _a, _b, _c, _d;
  const apiRef = useGridApiContext();
  const searchInputRef = React131.useRef(null);
  const initialColumnVisibilityModel = useGridSelector(apiRef, gridInitialColumnVisibilityModelSelector);
  const columnVisibilityModel = useGridSelector(apiRef, gridColumnVisibilityModelSelector);
  const rootProps = useGridRootProps();
  const [searchValue, setSearchValue] = React131.useState("");
  const classes2 = useUtilityClasses35(rootProps);
  const columnDefinitions = useGridSelector(apiRef, gridColumnDefinitionsSelector);
  const pivotActive = useGridSelector(apiRef, gridPivotActiveSelector);
  const pivotInitialColumns = useGridSelector(apiRef, gridPivotInitialColumnsSelector);
  const columns = React131.useMemo(() => pivotActive ? Array.from(pivotInitialColumns.values()) : columnDefinitions, [pivotActive, pivotInitialColumns, columnDefinitions]);
  const {
    sort,
    searchPredicate = defaultSearchPredicate,
    autoFocusSearchField = true,
    disableShowHideToggle = false,
    disableResetButton = false,
    toggleAllMode = "all",
    getTogglableColumns,
    searchInputProps,
    searchDebounceMs = rootProps.columnFilterDebounceMs
  } = props;
  const debouncedFilter = React131.useMemo(() => debounce((value) => {
    setSearchValue(value);
  }, searchDebounceMs ?? 150), [searchDebounceMs]);
  const isResetDisabled = React131.useMemo(() => checkColumnVisibilityModelsSame(columnVisibilityModel, initialColumnVisibilityModel), [columnVisibilityModel, initialColumnVisibilityModel]);
  const sortedColumns = React131.useMemo(() => {
    switch (sort) {
      case "asc":
        return [...columns].sort((a, b) => collator3.compare(a.headerName || a.field, b.headerName || b.field));
      case "desc":
        return [...columns].sort((a, b) => -collator3.compare(a.headerName || a.field, b.headerName || b.field));
      default:
        return columns;
    }
  }, [columns, sort]);
  const toggleColumn = (event) => {
    const {
      name: field
    } = event.target;
    apiRef.current.setColumnVisibility(field, columnVisibilityModel[field] === false);
  };
  const currentColumns = React131.useMemo(() => {
    const togglableColumns = getTogglableColumns ? getTogglableColumns(sortedColumns) : null;
    const togglableSortedColumns = togglableColumns ? sortedColumns.filter(({
      field
    }) => togglableColumns.includes(field)) : sortedColumns;
    if (!searchValue) {
      return togglableSortedColumns;
    }
    return togglableSortedColumns.filter((column) => searchPredicate(column, searchValue.toLowerCase()));
  }, [sortedColumns, searchValue, searchPredicate, getTogglableColumns]);
  const toggleAllColumns = React131.useCallback((isVisible) => {
    const currentModel = gridColumnVisibilityModelSelector(apiRef);
    const newModel = _extends({}, currentModel);
    const togglableColumns = getTogglableColumns ? getTogglableColumns(columns) : null;
    (toggleAllMode === "filteredOnly" ? currentColumns : columns).forEach((col) => {
      if (col.hideable && (togglableColumns == null || togglableColumns.includes(col.field))) {
        if (isVisible) {
          delete newModel[col.field];
        } else {
          newModel[col.field] = false;
        }
      }
    });
    return apiRef.current.setColumnVisibilityModel(newModel);
  }, [apiRef, columns, getTogglableColumns, toggleAllMode, currentColumns]);
  const handleSearchValueChange = React131.useCallback((event) => {
    debouncedFilter(event.target.value);
  }, [debouncedFilter]);
  const hideableColumns = React131.useMemo(() => currentColumns.filter((col) => col.hideable), [currentColumns]);
  const allHideableColumnsVisible = React131.useMemo(() => hideableColumns.every((column) => columnVisibilityModel[column.field] == null || columnVisibilityModel[column.field] !== false), [columnVisibilityModel, hideableColumns]);
  const allHideableColumnsHidden = React131.useMemo(() => hideableColumns.every((column) => columnVisibilityModel[column.field] === false), [columnVisibilityModel, hideableColumns]);
  const firstSwitchRef = React131.useRef(null);
  React131.useEffect(() => {
    var _a2;
    if (autoFocusSearchField) {
      (_a2 = searchInputRef.current) == null ? void 0 : _a2.focus();
    } else if (firstSwitchRef.current && typeof firstSwitchRef.current.focus === "function") {
      firstSwitchRef.current.focus();
    }
  }, [autoFocusSearchField]);
  let firstHideableColumnFound = false;
  const isFirstHideableColumn = (column) => {
    if (firstHideableColumnFound === false && column.hideable !== false) {
      firstHideableColumnFound = true;
      return true;
    }
    return false;
  };
  const handleSearchReset = React131.useCallback(() => {
    setSearchValue("");
    if (searchInputRef.current) {
      searchInputRef.current.value = "";
      searchInputRef.current.focus();
    }
  }, []);
  return (0, import_jsx_runtime85.jsxs)(React131.Fragment, {
    children: [(0, import_jsx_runtime85.jsx)(GridColumnsManagementHeader, {
      className: classes2.header,
      ownerState: rootProps,
      children: (0, import_jsx_runtime85.jsx)(SearchInput, _extends({
        as: rootProps.slots.baseTextField,
        ownerState: rootProps,
        placeholder: apiRef.current.getLocaleText("columnsManagementSearchTitle"),
        inputRef: searchInputRef,
        className: classes2.searchInput,
        onChange: handleSearchValueChange,
        size: "small",
        type: "search",
        slotProps: {
          input: {
            startAdornment: (0, import_jsx_runtime85.jsx)(rootProps.slots.quickFilterIcon, {
              fontSize: "small"
            }),
            endAdornment: (0, import_jsx_runtime85.jsx)(rootProps.slots.baseIconButton, _extends({
              size: "small",
              "aria-label": apiRef.current.getLocaleText("columnsManagementDeleteIconLabel"),
              style: searchValue ? {
                visibility: "visible"
              } : {
                visibility: "hidden"
              },
              tabIndex: -1,
              onClick: handleSearchReset,
              edge: "end"
            }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseIconButton, {
              children: (0, import_jsx_runtime85.jsx)(rootProps.slots.quickFilterClearIcon, {
                fontSize: "small"
              })
            }))
          },
          htmlInput: {
            "aria-label": apiRef.current.getLocaleText("columnsManagementSearchTitle")
          }
        },
        autoComplete: "off",
        fullWidth: true
      }, (_b = rootProps.slotProps) == null ? void 0 : _b.baseTextField, searchInputProps))
    }), (0, import_jsx_runtime85.jsx)(GridColumnsManagementScrollArea, {
      ownerState: rootProps,
      children: (0, import_jsx_runtime85.jsxs)(GridColumnsManagementBody, {
        className: classes2.root,
        ownerState: rootProps,
        children: [currentColumns.map((column) => {
          var _a2;
          return (0, import_jsx_runtime85.jsx)(GridColumnsManagementRow, _extends({
            as: rootProps.slots.baseCheckbox,
            className: classes2.row,
            disabled: column.hideable === false || pivotActive,
            checked: columnVisibilityModel[column.field] !== false,
            onChange: toggleColumn,
            name: column.field,
            inputRef: isFirstHideableColumn(column) ? firstSwitchRef : void 0,
            label: column.headerName || column.field,
            density: "compact",
            fullWidth: true
          }, (_a2 = rootProps.slotProps) == null ? void 0 : _a2.baseCheckbox), column.field);
        }), currentColumns.length === 0 && (0, import_jsx_runtime85.jsx)(GridColumnsManagementEmptyText, {
          ownerState: rootProps,
          children: apiRef.current.getLocaleText("columnsManagementNoColumns")
        })]
      })
    }), !disableShowHideToggle || !disableResetButton ? (0, import_jsx_runtime85.jsxs)(GridColumnsManagementFooter, {
      ownerState: rootProps,
      className: classes2.footer,
      children: [!disableShowHideToggle ? (0, import_jsx_runtime85.jsx)(rootProps.slots.baseCheckbox, _extends({
        disabled: hideableColumns.length === 0 || pivotActive,
        checked: allHideableColumnsVisible,
        indeterminate: !allHideableColumnsVisible && !allHideableColumnsHidden,
        onChange: () => toggleAllColumns(!allHideableColumnsVisible),
        name: apiRef.current.getLocaleText("columnsManagementShowHideAllText"),
        label: apiRef.current.getLocaleText("columnsManagementShowHideAllText"),
        density: "compact"
      }, (_c = rootProps.slotProps) == null ? void 0 : _c.baseCheckbox)) : (0, import_jsx_runtime85.jsx)("span", {}), !disableResetButton ? (0, import_jsx_runtime85.jsx)(rootProps.slots.baseButton, _extends({
        onClick: () => apiRef.current.setColumnVisibilityModel(initialColumnVisibilityModel),
        disabled: isResetDisabled || pivotActive
      }, (_d = rootProps.slotProps) == null ? void 0 : _d.baseButton, {
        children: apiRef.current.getLocaleText("columnsManagementReset")
      })) : null]
    }) : null]
  });
}
true ? GridColumnsManagement.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * If `true`, the column search field will be focused automatically.
   * If `false`, the first column switch input will be focused automatically.
   * This helps to avoid input keyboard panel to popup automatically on touch devices.
   * @default true
   */
  autoFocusSearchField: import_prop_types65.default.bool,
  /**
   * If `true`, the `Reset` button will not be disabled
   * @default false
   */
  disableResetButton: import_prop_types65.default.bool,
  /**
   * If `true`, the `Show/Hide all` toggle checkbox will not be displayed.
   * @default false
   */
  disableShowHideToggle: import_prop_types65.default.bool,
  /**
   * Returns the list of togglable columns.
   * If used, only those columns will be displayed in the panel
   * which are passed as the return value of the function.
   * @param {GridColDef[]} columns The `ColDef` list of all columns.
   * @returns {GridColDef['field'][]} The list of togglable columns' field names.
   */
  getTogglableColumns: import_prop_types65.default.func,
  /**
   * The milliseconds delay to wait after a keystroke before triggering filtering in the columns menu.
   * @default 150
   */
  searchDebounceMs: import_prop_types65.default.number,
  searchInputProps: import_prop_types65.default.object,
  searchPredicate: import_prop_types65.default.func,
  sort: import_prop_types65.default.oneOf(["asc", "desc"]),
  /**
   * Changes the behavior of the `Show/Hide All` toggle when the search field is used:
   * - `all`: Will toggle all columns.
   * - `filteredOnly`: Will only toggle columns that match the search criteria.
   * @default 'all'
   */
  toggleAllMode: import_prop_types65.default.oneOf(["all", "filteredOnly"])
} : void 0;
var GridColumnsManagementBody = styled_default("div", {
  name: "MuiDataGrid",
  slot: "ColumnsManagement"
})({
  display: "flex",
  flexDirection: "column",
  padding: vars.spacing(0.5, 1.5)
});
var GridColumnsManagementScrollArea = styled_default(GridShadowScrollArea, {
  name: "MuiDataGrid",
  slot: "ColumnsManagementScrollArea"
})({
  maxHeight: 300
});
var GridColumnsManagementHeader = styled_default("div", {
  name: "MuiDataGrid",
  slot: "ColumnsManagementHeader"
})({
  padding: vars.spacing(1.5, 2),
  borderBottom: `1px solid ${vars.colors.border.base}`
});
var SearchInput = styled_default(NotRendered, {
  name: "MuiDataGrid",
  slot: "ColumnsManagementSearchInput"
})({
  [`& .${inputBaseClasses_default.input}::-webkit-search-decoration,
      & .${inputBaseClasses_default.input}::-webkit-search-cancel-button,
      & .${inputBaseClasses_default.input}::-webkit-search-results-button,
      & .${inputBaseClasses_default.input}::-webkit-search-results-decoration`]: {
    /* clears the 'X' icon from Chrome */
    display: "none"
  }
});
var GridColumnsManagementFooter = styled_default("div", {
  name: "MuiDataGrid",
  slot: "ColumnsManagementFooter"
})({
  padding: vars.spacing(1, 1, 1, 1.5),
  display: "flex",
  justifyContent: "space-between",
  borderTop: `1px solid ${vars.colors.border.base}`
});
var GridColumnsManagementEmptyText = styled_default("div", {
  name: "MuiDataGrid",
  slot: "ColumnsManagementEmptyText"
})({
  padding: vars.spacing(1, 0),
  alignSelf: "center",
  font: vars.typography.font.body
});
var GridColumnsManagementRow = styled_default(NotRendered, {
  name: "MuiDataGrid",
  slot: "ColumnsManagementRow"
})({});

// node_modules/@mui/x-data-grid/esm/components/toolbar/GridToolbar.js
init_extends();
init_objectWithoutPropertiesLoose();
var React148 = __toESM(require_react(), 1);
var import_prop_types81 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-data-grid/esm/components/toolbar/GridToolbarColumnsButton.js
init_extends();
var React132 = __toESM(require_react(), 1);
var import_prop_types66 = __toESM(require_prop_types(), 1);
var import_jsx_runtime86 = __toESM(require_jsx_runtime(), 1);
var GridToolbarColumnsButton = forwardRef2(function GridToolbarColumnsButton2(props, ref) {
  var _a, _b;
  const {
    slotProps = {}
  } = props;
  const buttonProps = slotProps.button || {};
  const tooltipProps = slotProps.tooltip || {};
  const columnButtonId = useId();
  const columnPanelId = useId();
  const apiRef = useGridApiContext();
  const rootProps = useGridRootProps();
  const {
    columnsPanelTriggerRef
  } = useGridPanelContext();
  const preferencePanel = useGridSelector(apiRef, gridPreferencePanelStateSelector);
  const handleRef = useForkRef(ref, columnsPanelTriggerRef);
  const showColumns = (event) => {
    var _a2;
    if (preferencePanel.open && preferencePanel.openedPanelValue === GridPreferencePanelsValue.columns) {
      apiRef.current.hidePreferences();
    } else {
      apiRef.current.showPreferences(GridPreferencePanelsValue.columns, columnPanelId, columnButtonId);
    }
    (_a2 = buttonProps.onClick) == null ? void 0 : _a2.call(buttonProps, event);
  };
  if (rootProps.disableColumnSelector) {
    return null;
  }
  const isOpen = preferencePanel.open && preferencePanel.panelId === columnPanelId;
  return (0, import_jsx_runtime86.jsx)(rootProps.slots.baseTooltip, _extends({
    title: apiRef.current.getLocaleText("toolbarColumnsLabel"),
    enterDelay: 1e3
  }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseTooltip, tooltipProps, {
    children: (0, import_jsx_runtime86.jsx)(rootProps.slots.baseButton, _extends({
      id: columnButtonId,
      size: "small",
      "aria-label": apiRef.current.getLocaleText("toolbarColumnsLabel"),
      "aria-haspopup": "menu",
      "aria-expanded": isOpen,
      "aria-controls": isOpen ? columnPanelId : void 0,
      startIcon: (0, import_jsx_runtime86.jsx)(rootProps.slots.columnSelectorIcon, {})
    }, (_b = rootProps.slotProps) == null ? void 0 : _b.baseButton, buttonProps, {
      onPointerUp: (event) => {
        var _a2;
        if (preferencePanel.open) {
          event.stopPropagation();
        }
        (_a2 = buttonProps.onPointerUp) == null ? void 0 : _a2.call(buttonProps, event);
      },
      onClick: showColumns,
      ref: handleRef,
      children: apiRef.current.getLocaleText("toolbarColumns")
    }))
  }));
});
if (true) GridToolbarColumnsButton.displayName = "GridToolbarColumnsButton";
true ? GridToolbarColumnsButton.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types66.default.object
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/toolbar/GridToolbarDensitySelector.js
init_extends();
var React133 = __toESM(require_react(), 1);
var import_prop_types67 = __toESM(require_prop_types(), 1);
var import_jsx_runtime87 = __toESM(require_jsx_runtime(), 1);
var GridToolbarDensitySelector = forwardRef2(function GridToolbarDensitySelector2(props, ref) {
  var _a, _b;
  const {
    slotProps = {}
  } = props;
  const buttonProps = slotProps.button || {};
  const tooltipProps = slotProps.tooltip || {};
  const apiRef = useGridApiContext();
  const rootProps = useGridRootProps();
  const density = useGridSelector(apiRef, gridDensitySelector);
  const densityButtonId = useId();
  const densityMenuId = useId();
  const [open, setOpen] = React133.useState(false);
  const buttonRef = React133.useRef(null);
  const handleRef = useForkRef(ref, buttonRef);
  const densityOptions = [{
    icon: (0, import_jsx_runtime87.jsx)(rootProps.slots.densityCompactIcon, {}),
    label: apiRef.current.getLocaleText("toolbarDensityCompact"),
    value: "compact"
  }, {
    icon: (0, import_jsx_runtime87.jsx)(rootProps.slots.densityStandardIcon, {}),
    label: apiRef.current.getLocaleText("toolbarDensityStandard"),
    value: "standard"
  }, {
    icon: (0, import_jsx_runtime87.jsx)(rootProps.slots.densityComfortableIcon, {}),
    label: apiRef.current.getLocaleText("toolbarDensityComfortable"),
    value: "comfortable"
  }];
  const startIcon = React133.useMemo(() => {
    switch (density) {
      case "compact":
        return (0, import_jsx_runtime87.jsx)(rootProps.slots.densityCompactIcon, {});
      case "comfortable":
        return (0, import_jsx_runtime87.jsx)(rootProps.slots.densityComfortableIcon, {});
      default:
        return (0, import_jsx_runtime87.jsx)(rootProps.slots.densityStandardIcon, {});
    }
  }, [density, rootProps]);
  const handleDensitySelectorOpen = (event) => {
    var _a2;
    setOpen((prevOpen) => !prevOpen);
    (_a2 = buttonProps.onClick) == null ? void 0 : _a2.call(buttonProps, event);
  };
  const handleDensitySelectorClose = () => {
    setOpen(false);
  };
  const handleDensityUpdate = (newDensity) => {
    apiRef.current.setDensity(newDensity);
    setOpen(false);
  };
  if (rootProps.disableDensitySelector) {
    return null;
  }
  const densityElements = densityOptions.map((option, index) => (0, import_jsx_runtime87.jsx)(rootProps.slots.baseMenuItem, {
    onClick: () => handleDensityUpdate(option.value),
    selected: option.value === density,
    iconStart: option.icon,
    children: option.label
  }, index));
  return (0, import_jsx_runtime87.jsxs)(React133.Fragment, {
    children: [(0, import_jsx_runtime87.jsx)(rootProps.slots.baseTooltip, _extends({
      title: apiRef.current.getLocaleText("toolbarDensityLabel"),
      enterDelay: 1e3
    }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseTooltip, tooltipProps, {
      children: (0, import_jsx_runtime87.jsx)(rootProps.slots.baseButton, _extends({
        size: "small",
        startIcon,
        "aria-label": apiRef.current.getLocaleText("toolbarDensityLabel"),
        "aria-haspopup": "menu",
        "aria-expanded": open,
        "aria-controls": open ? densityMenuId : void 0,
        id: densityButtonId
      }, (_b = rootProps.slotProps) == null ? void 0 : _b.baseButton, buttonProps, {
        onClick: handleDensitySelectorOpen,
        ref: handleRef,
        children: apiRef.current.getLocaleText("toolbarDensity")
      }))
    })), (0, import_jsx_runtime87.jsx)(GridMenu, {
      open,
      target: buttonRef.current,
      onClose: handleDensitySelectorClose,
      position: "bottom-end",
      children: (0, import_jsx_runtime87.jsx)(rootProps.slots.baseMenuList, {
        id: densityMenuId,
        className: gridClasses2.menuList,
        "aria-labelledby": densityButtonId,
        autoFocusItem: open,
        children: densityElements
      })
    })]
  });
});
if (true) GridToolbarDensitySelector.displayName = "GridToolbarDensitySelector";
true ? GridToolbarDensitySelector.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types67.default.object
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/toolbar/GridToolbarFilterButton.js
init_extends();
var React134 = __toESM(require_react(), 1);
var import_prop_types68 = __toESM(require_prop_types(), 1);
var import_jsx_runtime88 = __toESM(require_jsx_runtime(), 1);
var useUtilityClasses36 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["toolbarFilterList"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var GridToolbarFilterListRoot = styled_default("ul", {
  name: "MuiDataGrid",
  slot: "ToolbarFilterList"
})({
  margin: vars.spacing(1, 1, 0.5),
  padding: vars.spacing(0, 1)
});
var GridToolbarFilterButton = forwardRef2(function GridToolbarFilterButton2(props, ref) {
  var _a, _b, _c;
  const {
    slotProps = {}
  } = props;
  const buttonProps = slotProps.button || {};
  const tooltipProps = slotProps.tooltip || {};
  const badgeProps = slotProps.badge || {};
  const apiRef = useGridApiContext();
  const rootProps = useGridRootProps();
  const activeFilters = useGridSelector(apiRef, gridFilterActiveItemsSelector);
  const lookup = useGridSelector(apiRef, gridColumnLookupSelector);
  const preferencePanel = useGridSelector(apiRef, gridPreferencePanelStateSelector);
  const classes2 = useUtilityClasses36(rootProps);
  const filterButtonId = useId();
  const filterPanelId = useId();
  const {
    filterPanelTriggerRef
  } = useGridPanelContext();
  const handleRef = useForkRef(ref, filterPanelTriggerRef);
  const tooltipContentNode = React134.useMemo(() => {
    if (preferencePanel.open) {
      return apiRef.current.getLocaleText("toolbarFiltersTooltipHide");
    }
    if (activeFilters.length === 0) {
      return apiRef.current.getLocaleText("toolbarFiltersTooltipShow");
    }
    const getOperatorLabel = (item) => lookup[item.field].filterOperators.find((operator) => operator.value === item.operator).label || apiRef.current.getLocaleText(`filterOperator${capitalize2(item.operator)}`).toString();
    const getFilterItemValue = (item) => {
      const {
        getValueAsString
      } = lookup[item.field].filterOperators.find((operator) => operator.value === item.operator);
      return getValueAsString ? getValueAsString(item.value) : item.value;
    };
    return (0, import_jsx_runtime88.jsxs)("div", {
      children: [apiRef.current.getLocaleText("toolbarFiltersTooltipActive")(activeFilters.length), (0, import_jsx_runtime88.jsx)(GridToolbarFilterListRoot, {
        className: classes2.root,
        ownerState: rootProps,
        children: activeFilters.map((item, index) => _extends({}, lookup[item.field] && (0, import_jsx_runtime88.jsx)("li", {
          children: `${lookup[item.field].headerName || item.field}
                  ${getOperatorLabel(item)}
                  ${// implicit check for null and undefined
          item.value != null ? getFilterItemValue(item) : ""}`
        }, index)))
      })]
    });
  }, [apiRef, rootProps, preferencePanel.open, activeFilters, lookup, classes2]);
  const toggleFilter = (event) => {
    var _a2;
    const {
      open,
      openedPanelValue
    } = preferencePanel;
    if (open && openedPanelValue === GridPreferencePanelsValue.filters) {
      apiRef.current.hidePreferences();
    } else {
      apiRef.current.showPreferences(GridPreferencePanelsValue.filters, filterPanelId, filterButtonId);
    }
    (_a2 = buttonProps.onClick) == null ? void 0 : _a2.call(buttonProps, event);
  };
  if (rootProps.disableColumnFilter) {
    return null;
  }
  const isOpen = preferencePanel.open && preferencePanel.panelId === filterPanelId;
  return (0, import_jsx_runtime88.jsx)(rootProps.slots.baseTooltip, _extends({
    title: tooltipContentNode,
    enterDelay: 1e3
  }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseTooltip, tooltipProps, {
    children: (0, import_jsx_runtime88.jsx)(rootProps.slots.baseButton, _extends({
      id: filterButtonId,
      size: "small",
      "aria-label": apiRef.current.getLocaleText("toolbarFiltersLabel"),
      "aria-controls": isOpen ? filterPanelId : void 0,
      "aria-expanded": isOpen,
      "aria-haspopup": true,
      startIcon: (0, import_jsx_runtime88.jsx)(rootProps.slots.baseBadge, _extends({
        badgeContent: activeFilters.length,
        color: "primary"
      }, (_b = rootProps.slotProps) == null ? void 0 : _b.baseBadge, badgeProps, {
        children: (0, import_jsx_runtime88.jsx)(rootProps.slots.openFilterButtonIcon, {})
      }))
    }, (_c = rootProps.slotProps) == null ? void 0 : _c.baseButton, buttonProps, {
      onClick: toggleFilter,
      onPointerUp: (event) => {
        var _a2;
        if (preferencePanel.open) {
          event.stopPropagation();
        }
        (_a2 = buttonProps.onPointerUp) == null ? void 0 : _a2.call(buttonProps, event);
      },
      ref: handleRef,
      children: apiRef.current.getLocaleText("toolbarFilters")
    }))
  }));
});
if (true) GridToolbarFilterButton.displayName = "GridToolbarFilterButton";
true ? GridToolbarFilterButton.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types68.default.object
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/toolbar/GridToolbarExport.js
init_extends();
init_objectWithoutPropertiesLoose();
var React136 = __toESM(require_react(), 1);
var import_prop_types70 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-data-grid/esm/components/toolbar/GridToolbarExportContainer.js
init_extends();
var React135 = __toESM(require_react(), 1);
var import_prop_types69 = __toESM(require_prop_types(), 1);
var import_jsx_runtime89 = __toESM(require_jsx_runtime(), 1);
var GridToolbarExportContainer = forwardRef2(function GridToolbarExportContainer2(props, ref) {
  var _a, _b;
  const {
    children,
    slotProps = {}
  } = props;
  const buttonProps = slotProps.button || {};
  const tooltipProps = slotProps.tooltip || {};
  const apiRef = useGridApiContext();
  const rootProps = useGridRootProps();
  const exportButtonId = useId();
  const exportMenuId = useId();
  const [open, setOpen] = React135.useState(false);
  const buttonRef = React135.useRef(null);
  const handleRef = useForkRef(ref, buttonRef);
  const handleMenuOpen = (event) => {
    var _a2;
    setOpen((prevOpen) => !prevOpen);
    (_a2 = buttonProps.onClick) == null ? void 0 : _a2.call(buttonProps, event);
  };
  const handleMenuClose = () => setOpen(false);
  if (children == null) {
    return null;
  }
  return (0, import_jsx_runtime89.jsxs)(React135.Fragment, {
    children: [(0, import_jsx_runtime89.jsx)(rootProps.slots.baseTooltip, _extends({
      title: apiRef.current.getLocaleText("toolbarExportLabel"),
      enterDelay: 1e3
    }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseTooltip, tooltipProps, {
      children: (0, import_jsx_runtime89.jsx)(rootProps.slots.baseButton, _extends({
        size: "small",
        startIcon: (0, import_jsx_runtime89.jsx)(rootProps.slots.exportIcon, {}),
        "aria-expanded": open,
        "aria-label": apiRef.current.getLocaleText("toolbarExportLabel"),
        "aria-haspopup": "menu",
        "aria-controls": open ? exportMenuId : void 0,
        id: exportButtonId
      }, (_b = rootProps.slotProps) == null ? void 0 : _b.baseButton, buttonProps, {
        onClick: handleMenuOpen,
        ref: handleRef,
        children: apiRef.current.getLocaleText("toolbarExport")
      }))
    })), (0, import_jsx_runtime89.jsx)(GridMenu, {
      open,
      target: buttonRef.current,
      onClose: handleMenuClose,
      position: "bottom-end",
      children: (0, import_jsx_runtime89.jsx)(rootProps.slots.baseMenuList, {
        id: exportMenuId,
        className: gridClasses2.menuList,
        "aria-labelledby": exportButtonId,
        autoFocusItem: open,
        children: React135.Children.map(children, (child) => {
          if (!React135.isValidElement(child)) {
            return child;
          }
          return React135.cloneElement(child, {
            hideMenu: handleMenuClose
          });
        })
      })
    })]
  });
});
if (true) GridToolbarExportContainer.displayName = "GridToolbarExportContainer";
true ? GridToolbarExportContainer.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types69.default.object
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/toolbar/GridToolbarExport.js
var import_jsx_runtime90 = __toESM(require_jsx_runtime(), 1);
var _excluded64 = ["hideMenu", "options"];
var _excluded213 = ["hideMenu", "options"];
var _excluded310 = ["csvOptions", "printOptions", "excelOptions"];
function GridCsvExportMenuItem(props) {
  const apiRef = useGridApiContext();
  const rootProps = useGridRootProps();
  const {
    hideMenu,
    options
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded64);
  return (0, import_jsx_runtime90.jsx)(rootProps.slots.baseMenuItem, _extends({
    onClick: () => {
      apiRef.current.exportDataAsCsv(options);
      hideMenu == null ? void 0 : hideMenu();
    }
  }, other, {
    children: apiRef.current.getLocaleText("toolbarExportCSV")
  }));
}
true ? GridCsvExportMenuItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  hideMenu: import_prop_types70.default.func,
  options: import_prop_types70.default.shape({
    allColumns: import_prop_types70.default.bool,
    delimiter: import_prop_types70.default.string,
    disableToolbarButton: import_prop_types70.default.bool,
    escapeFormulas: import_prop_types70.default.bool,
    fields: import_prop_types70.default.arrayOf(import_prop_types70.default.string),
    fileName: import_prop_types70.default.string,
    getRowsToExport: import_prop_types70.default.func,
    includeColumnGroupsHeaders: import_prop_types70.default.bool,
    includeHeaders: import_prop_types70.default.bool,
    shouldAppendQuotes: import_prop_types70.default.bool,
    utf8WithBom: import_prop_types70.default.bool
  })
} : void 0;
function GridPrintExportMenuItem(props) {
  const apiRef = useGridApiContext();
  const rootProps = useGridRootProps();
  const {
    hideMenu,
    options
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded213);
  return (0, import_jsx_runtime90.jsx)(rootProps.slots.baseMenuItem, _extends({
    onClick: () => {
      apiRef.current.exportDataAsPrint(options);
      hideMenu == null ? void 0 : hideMenu();
    }
  }, other, {
    children: apiRef.current.getLocaleText("toolbarExportPrint")
  }));
}
true ? GridPrintExportMenuItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  hideMenu: import_prop_types70.default.func,
  options: import_prop_types70.default.shape({
    allColumns: import_prop_types70.default.bool,
    bodyClassName: import_prop_types70.default.string,
    copyStyles: import_prop_types70.default.bool,
    disableToolbarButton: import_prop_types70.default.bool,
    fields: import_prop_types70.default.arrayOf(import_prop_types70.default.string),
    fileName: import_prop_types70.default.string,
    getRowsToExport: import_prop_types70.default.func,
    hideFooter: import_prop_types70.default.bool,
    hideToolbar: import_prop_types70.default.bool,
    includeCheckboxes: import_prop_types70.default.bool,
    pageStyle: import_prop_types70.default.oneOfType([import_prop_types70.default.func, import_prop_types70.default.string])
  })
} : void 0;
var GridToolbarExport = forwardRef2(function GridToolbarExport2(props, ref) {
  const _ref = props, {
    csvOptions = {},
    printOptions = {},
    excelOptions
  } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded310);
  const apiRef = useGridApiContext();
  const preProcessedButtons = apiRef.current.unstable_applyPipeProcessors("exportMenu", [], {
    excelOptions,
    csvOptions,
    printOptions
  }).sort((a, b) => a.componentName > b.componentName ? 1 : -1);
  if (preProcessedButtons.length === 0) {
    return null;
  }
  return (0, import_jsx_runtime90.jsx)(GridToolbarExportContainer, _extends({}, other, {
    ref,
    children: preProcessedButtons.map((button, index) => React136.cloneElement(button.component, {
      key: index
    }))
  }));
});
if (true) GridToolbarExport.displayName = "GridToolbarExport";
true ? GridToolbarExport.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  csvOptions: import_prop_types70.default.object,
  printOptions: import_prop_types70.default.object,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types70.default.object
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/toolbar/GridToolbarQuickFilter.js
init_extends();
init_objectWithoutPropertiesLoose();
var React142 = __toESM(require_react(), 1);
var import_prop_types75 = __toESM(require_prop_types(), 1);
init_clsx();

// node_modules/@mui/x-data-grid/esm/components/quickFilter/QuickFilter.js
init_extends();
init_objectWithoutPropertiesLoose();
var React138 = __toESM(require_react(), 1);
var import_prop_types71 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-data-grid/node_modules/@mui/x-internals/esm/isDeepEqual/isDeepEqual.js
function isDeepEqual2(a, b) {
  if (a === b) {
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    if (a.constructor !== b.constructor) {
      return false;
    }
    if (Array.isArray(a)) {
      const length2 = a.length;
      if (length2 !== b.length) {
        return false;
      }
      for (let i = 0; i < length2; i += 1) {
        if (!isDeepEqual2(a[i], b[i])) {
          return false;
        }
      }
      return true;
    }
    if (a instanceof Map && b instanceof Map) {
      if (a.size !== b.size) {
        return false;
      }
      const entriesA = Array.from(a.entries());
      for (let i = 0; i < entriesA.length; i += 1) {
        if (!b.has(entriesA[i][0])) {
          return false;
        }
      }
      for (let i = 0; i < entriesA.length; i += 1) {
        const entryA = entriesA[i];
        if (!isDeepEqual2(entryA[1], b.get(entryA[0]))) {
          return false;
        }
      }
      return true;
    }
    if (a instanceof Set && b instanceof Set) {
      if (a.size !== b.size) {
        return false;
      }
      const entries = Array.from(a.entries());
      for (let i = 0; i < entries.length; i += 1) {
        if (!b.has(entries[i][0])) {
          return false;
        }
      }
      return true;
    }
    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
      const length2 = a.length;
      if (length2 !== b.length) {
        return false;
      }
      for (let i = 0; i < length2; i += 1) {
        if (a[i] !== b[i]) {
          return false;
        }
      }
      return true;
    }
    if (a.constructor === RegExp) {
      return a.source === b.source && a.flags === b.flags;
    }
    if (a.valueOf !== Object.prototype.valueOf) {
      return a.valueOf() === b.valueOf();
    }
    if (a.toString !== Object.prototype.toString) {
      return a.toString() === b.toString();
    }
    const keys2 = Object.keys(a);
    const length = keys2.length;
    if (length !== Object.keys(b).length) {
      return false;
    }
    for (let i = 0; i < length; i += 1) {
      if (!Object.prototype.hasOwnProperty.call(b, keys2[i])) {
        return false;
      }
    }
    for (let i = 0; i < length; i += 1) {
      const key = keys2[i];
      if (!isDeepEqual2(a[key], b[key])) {
        return false;
      }
    }
    return true;
  }
  return a !== a && b !== b;
}

// node_modules/@mui/x-data-grid/esm/components/quickFilter/QuickFilterContext.js
var React137 = __toESM(require_react(), 1);
var QuickFilterContext = React137.createContext(void 0);
if (true) QuickFilterContext.displayName = "QuickFilterContext";
function useQuickFilterContext() {
  const context = React137.useContext(QuickFilterContext);
  if (context === void 0) {
    throw new Error("MUI X: Missing context. Quick Filter subcomponents must be placed within a <QuickFilter /> component.");
  }
  return context;
}

// node_modules/@mui/x-data-grid/esm/components/quickFilter/QuickFilter.js
var import_jsx_runtime91 = __toESM(require_jsx_runtime(), 1);
var _excluded65 = ["render", "className", "parser", "formatter", "debounceMs", "defaultExpanded", "expanded", "onExpandedChange"];
var DEFAULT_PARSER = (searchText) => searchText.split(" ").filter((word) => word !== "");
var DEFAULT_FORMATTER = (values3) => values3.join(" ");
function QuickFilter(props) {
  const rootProps = useGridRootProps();
  const {
    render,
    className,
    parser = DEFAULT_PARSER,
    formatter = DEFAULT_FORMATTER,
    debounceMs = rootProps.filterDebounceMs,
    defaultExpanded,
    expanded,
    onExpandedChange
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded65);
  const apiRef = useGridApiContext();
  const controlRef = React138.useRef(null);
  const triggerRef = React138.useRef(null);
  const quickFilterValues = useGridSelector(apiRef, gridQuickFilterValuesSelector);
  const [value, setValue] = React138.useState(formatter(quickFilterValues ?? []));
  const [internalExpanded, setInternalExpanded] = React138.useState(defaultExpanded ?? value.length > 0);
  const expandedValue = expanded ?? internalExpanded;
  const state = React138.useMemo(() => ({
    value,
    expanded: expandedValue
  }), [value, expandedValue]);
  const resolvedClassName = typeof className === "function" ? className(state) : className;
  const ref = React138.useRef(null);
  const controlId = useId();
  const handleExpandedChange = React138.useCallback((newExpanded) => {
    if (onExpandedChange) {
      onExpandedChange(newExpanded);
    }
    if (expanded === void 0) {
      setInternalExpanded(newExpanded);
    }
  }, [onExpandedChange, expanded]);
  const prevQuickFilterValuesRef = React138.useRef(quickFilterValues);
  React138.useEffect(() => {
    if (!isDeepEqual2(prevQuickFilterValuesRef.current, quickFilterValues)) {
      prevQuickFilterValuesRef.current = quickFilterValues;
      setValue((prevSearchValue) => isDeepEqual2(parser(prevSearchValue), quickFilterValues) ? prevSearchValue : formatter(quickFilterValues ?? []));
    }
  }, [quickFilterValues, formatter, parser]);
  const isFirstRender = React138.useRef(true);
  const previousExpandedValue = React138.useRef(expandedValue);
  React138.useEffect(() => {
    var _a;
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return;
    }
    if (previousExpandedValue.current !== expandedValue) {
      if (expandedValue) {
        requestAnimationFrame(() => {
          var _a2;
          (_a2 = controlRef.current) == null ? void 0 : _a2.focus({
            preventScroll: true
          });
        });
      } else {
        (_a = triggerRef.current) == null ? void 0 : _a.focus({
          preventScroll: true
        });
      }
      previousExpandedValue.current = expandedValue;
    }
  }, [expandedValue]);
  const setQuickFilterValueDebounced = React138.useMemo(() => debounce((newValue) => {
    const newQuickFilterValues = parser(newValue);
    prevQuickFilterValuesRef.current = newQuickFilterValues;
    apiRef.current.setQuickFilterValues(newQuickFilterValues);
  }, debounceMs), [apiRef, debounceMs, parser]);
  React138.useEffect(() => setQuickFilterValueDebounced.clear, [setQuickFilterValueDebounced]);
  const handleValueChange = React138.useCallback((event) => {
    const newValue = event.target.value;
    setValue(newValue);
    setQuickFilterValueDebounced(newValue);
  }, [setQuickFilterValueDebounced]);
  const handleClearValue = React138.useCallback(() => {
    var _a;
    setValue("");
    apiRef.current.setQuickFilterValues([]);
    (_a = controlRef.current) == null ? void 0 : _a.focus();
  }, [apiRef, controlRef]);
  const contextValue = React138.useMemo(() => ({
    controlRef,
    triggerRef,
    state,
    controlId,
    clearValue: handleClearValue,
    onValueChange: handleValueChange,
    onExpandedChange: handleExpandedChange
  }), [controlId, state, handleValueChange, handleClearValue, handleExpandedChange]);
  useEnhancedEffect_default(() => {
    var _a;
    if (ref.current && triggerRef.current) {
      ref.current.style.setProperty("--trigger-width", `${(_a = triggerRef.current) == null ? void 0 : _a.offsetWidth}px`);
    }
  }, []);
  const element = useComponentRenderer("div", render, _extends({
    className: resolvedClassName
  }, other, {
    ref
  }), state);
  return (0, import_jsx_runtime91.jsx)(QuickFilterContext.Provider, {
    value: contextValue,
    children: element
  });
}
true ? QuickFilter.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  className: import_prop_types71.default.oneOfType([import_prop_types71.default.func, import_prop_types71.default.string]),
  /**
   * The debounce time in milliseconds.
   * @default 150
   */
  debounceMs: import_prop_types71.default.number,
  /**
   * The default expanded state of the quick filter control.
   * @default false
   */
  defaultExpanded: import_prop_types71.default.bool,
  /**
   * The expanded state of the quick filter control.
   */
  expanded: import_prop_types71.default.bool,
  /**
   * Function responsible for formatting values of quick filter in a string when the model is modified
   * @param {any[]} values The new values passed to the quick filter model
   * @returns {string} The string to display in the text field
   * @default (values: string[]) => values.join(' ')
   */
  formatter: import_prop_types71.default.func,
  /**
   * Callback function that is called when the quick filter input is expanded or collapsed.
   * @param {boolean} expanded The new expanded state of the quick filter control
   */
  onExpandedChange: import_prop_types71.default.func,
  /**
   * Function responsible for parsing text input in an array of independent values for quick filtering.
   * @param {string} input The value entered by the user
   * @returns {any[]} The array of value on which quick filter is applied
   * @default (searchText: string) => searchText.split(' ').filter((word) => word !== '')
   */
  parser: import_prop_types71.default.func,
  /**
   * A function to customize rendering of the component.
   */
  render: import_prop_types71.default.oneOfType([import_prop_types71.default.element, import_prop_types71.default.func])
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/quickFilter/QuickFilterControl.js
init_extends();
init_objectWithoutPropertiesLoose();
var React139 = __toESM(require_react(), 1);
var import_prop_types72 = __toESM(require_prop_types(), 1);
var import_jsx_runtime92 = __toESM(require_jsx_runtime(), 1);
var _excluded66 = ["render", "className", "slotProps", "onKeyDown", "onChange"];
var QuickFilterControl = forwardRef2(function QuickFilterControl2(props, ref) {
  var _a;
  const {
    render,
    className,
    slotProps,
    onKeyDown,
    onChange
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded66);
  const rootProps = useGridRootProps();
  const {
    state,
    controlId,
    controlRef,
    onValueChange,
    onExpandedChange,
    clearValue
  } = useQuickFilterContext();
  const resolvedClassName = typeof className === "function" ? className(state) : className;
  const handleRef = useForkRef(controlRef, ref);
  const handleKeyDown = (event) => {
    if (event.key === "Escape") {
      if (state.value === "") {
        onExpandedChange(false);
      } else {
        clearValue();
      }
    }
    onKeyDown == null ? void 0 : onKeyDown(event);
  };
  const handleBlur = (event) => {
    var _a2, _b;
    if (state.value === "") {
      onExpandedChange(false);
    }
    (_b = (_a2 = slotProps == null ? void 0 : slotProps.htmlInput) == null ? void 0 : _a2.onBlur) == null ? void 0 : _b.call(_a2, event);
  };
  const handleChange = (event) => {
    if (!state.expanded) {
      onExpandedChange(true);
    }
    onValueChange(event);
    onChange == null ? void 0 : onChange(event);
  };
  const element = useComponentRenderer(rootProps.slots.baseTextField, render, _extends({}, (_a = rootProps.slotProps) == null ? void 0 : _a.baseTextField, {
    slotProps: _extends({
      htmlInput: _extends({
        role: "searchbox",
        id: controlId,
        tabIndex: state.expanded ? void 0 : -1
      }, slotProps == null ? void 0 : slotProps.htmlInput, {
        onBlur: handleBlur
      })
    }, slotProps),
    value: state.value,
    className: resolvedClassName
  }, other, {
    onChange: handleChange,
    onKeyDown: handleKeyDown,
    ref: handleRef
  }), state);
  return (0, import_jsx_runtime92.jsx)(React139.Fragment, {
    children: element
  });
});
if (true) QuickFilterControl.displayName = "QuickFilterControl";
true ? QuickFilterControl.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  autoComplete: import_prop_types72.default.string,
  autoFocus: import_prop_types72.default.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  className: import_prop_types72.default.oneOfType([import_prop_types72.default.func, import_prop_types72.default.string]),
  color: import_prop_types72.default.oneOf(["error", "primary"]),
  disabled: import_prop_types72.default.bool,
  error: import_prop_types72.default.bool,
  fullWidth: import_prop_types72.default.bool,
  helperText: import_prop_types72.default.string,
  id: import_prop_types72.default.string,
  inputRef: import_prop_types72.default.oneOfType([import_prop_types72.default.func, import_prop_types72.default.shape({
    current: import_prop_types72.default.object
  })]),
  label: import_prop_types72.default.node,
  multiline: import_prop_types72.default.bool,
  placeholder: import_prop_types72.default.string,
  /**
   * A function to customize rendering of the component.
   */
  render: import_prop_types72.default.oneOfType([import_prop_types72.default.element, import_prop_types72.default.func]),
  role: import_prop_types72.default.string,
  size: import_prop_types72.default.oneOf(["medium", "small"]),
  slotProps: import_prop_types72.default.object,
  style: import_prop_types72.default.object,
  tabIndex: import_prop_types72.default.number,
  type: import_prop_types72.default.string,
  value: import_prop_types72.default.string
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/quickFilter/QuickFilterClear.js
init_extends();
init_objectWithoutPropertiesLoose();
var React140 = __toESM(require_react(), 1);
var import_prop_types73 = __toESM(require_prop_types(), 1);
var import_jsx_runtime93 = __toESM(require_jsx_runtime(), 1);
var _excluded67 = ["render", "className", "onClick"];
var QuickFilterClear = forwardRef2(function QuickFilterClear2(props, ref) {
  var _a;
  const {
    render,
    className,
    onClick
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded67);
  const rootProps = useGridRootProps();
  const {
    state,
    clearValue
  } = useQuickFilterContext();
  const resolvedClassName = typeof className === "function" ? className(state) : className;
  const handleClick = (event) => {
    clearValue();
    onClick == null ? void 0 : onClick(event);
  };
  const element = useComponentRenderer(rootProps.slots.baseIconButton, render, _extends({}, (_a = rootProps.slotProps) == null ? void 0 : _a.baseIconButton, {
    className: resolvedClassName,
    tabIndex: -1
  }, other, {
    onClick: handleClick,
    ref
  }), state);
  return (0, import_jsx_runtime93.jsx)(React140.Fragment, {
    children: element
  });
});
if (true) QuickFilterClear.displayName = "QuickFilterClear";
true ? QuickFilterClear.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  className: import_prop_types73.default.oneOfType([import_prop_types73.default.func, import_prop_types73.default.string]),
  color: import_prop_types73.default.oneOf(["default", "inherit", "primary"]),
  disabled: import_prop_types73.default.bool,
  edge: import_prop_types73.default.oneOf(["end", "start", false]),
  id: import_prop_types73.default.string,
  label: import_prop_types73.default.string,
  /**
   * A function to customize rendering of the component.
   */
  render: import_prop_types73.default.oneOfType([import_prop_types73.default.element, import_prop_types73.default.func]),
  role: import_prop_types73.default.string,
  size: import_prop_types73.default.oneOf(["large", "medium", "small"]),
  style: import_prop_types73.default.object,
  tabIndex: import_prop_types73.default.number,
  title: import_prop_types73.default.string,
  touchRippleRef: import_prop_types73.default.any
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/quickFilter/QuickFilterTrigger.js
init_extends();
init_objectWithoutPropertiesLoose();
var React141 = __toESM(require_react(), 1);
var import_prop_types74 = __toESM(require_prop_types(), 1);
var import_jsx_runtime94 = __toESM(require_jsx_runtime(), 1);
var _excluded68 = ["render", "className", "onClick"];
var QuickFilterTrigger = forwardRef2(function QuickFilterTrigger2(props, ref) {
  var _a;
  const {
    render,
    className,
    onClick
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded68);
  const rootProps = useGridRootProps();
  const {
    state,
    controlId,
    onExpandedChange,
    triggerRef
  } = useQuickFilterContext();
  const resolvedClassName = typeof className === "function" ? className(state) : className;
  const handleRef = useForkRef(triggerRef, ref);
  const handleClick = (event) => {
    onExpandedChange(!state.expanded);
    onClick == null ? void 0 : onClick(event);
  };
  const element = useComponentRenderer(rootProps.slots.baseButton, render, _extends({}, (_a = rootProps.slotProps) == null ? void 0 : _a.baseButton, {
    className: resolvedClassName,
    "aria-controls": controlId,
    "aria-expanded": state.expanded
  }, other, {
    onClick: handleClick,
    ref: handleRef
  }), state);
  return (0, import_jsx_runtime94.jsx)(React141.Fragment, {
    children: element
  });
});
if (true) QuickFilterTrigger.displayName = "QuickFilterTrigger";
true ? QuickFilterTrigger.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  className: import_prop_types74.default.oneOfType([import_prop_types74.default.func, import_prop_types74.default.string]),
  disabled: import_prop_types74.default.bool,
  id: import_prop_types74.default.string,
  /**
   * A function to customize rendering of the component.
   */
  render: import_prop_types74.default.oneOfType([import_prop_types74.default.element, import_prop_types74.default.func]),
  role: import_prop_types74.default.string,
  size: import_prop_types74.default.oneOf(["large", "medium", "small"]),
  startIcon: import_prop_types74.default.node,
  style: import_prop_types74.default.object,
  tabIndex: import_prop_types74.default.number,
  title: import_prop_types74.default.string,
  touchRippleRef: import_prop_types74.default.any
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/toolbar/GridToolbarQuickFilter.js
var import_jsx_runtime95 = __toESM(require_jsx_runtime(), 1);
var _excluded69 = ["quickFilterParser", "quickFilterFormatter", "debounceMs", "className", "slotProps"];
var _excluded214 = ["ref", "slotProps"];
var useUtilityClasses37 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["toolbarQuickFilter"],
    trigger: ["toolbarQuickFilterTrigger"],
    control: ["toolbarQuickFilterControl"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var GridQuickFilterRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "ToolbarQuickFilter"
})({
  display: "grid",
  alignItems: "center"
});
var GridQuickFilterTrigger = styled_default2(ToolbarButton, {
  name: "MuiDataGrid",
  slot: "ToolbarQuickFilterTrigger"
})(({
  ownerState
}) => ({
  gridArea: "1 / 1",
  width: "min-content",
  height: "min-content",
  zIndex: 1,
  opacity: ownerState.expanded ? 0 : 1,
  pointerEvents: ownerState.expanded ? "none" : "auto",
  transition: vars.transition(["opacity"])
}));
var GridQuickFilterTextField = styled_default2((_props) => {
  throw new Error("Failed assertion: should not be rendered");
}, {
  name: "MuiDataGrid",
  slot: "ToolbarQuickFilterControl"
})(({
  ownerState
}) => ({
  gridArea: "1 / 1",
  overflowX: "clip",
  width: ownerState.expanded ? 260 : "var(--trigger-width)",
  opacity: ownerState.expanded ? 1 : 0,
  transition: vars.transition(["width", "opacity"])
}));
function GridToolbarQuickFilter(props) {
  const apiRef = useGridApiContext();
  const rootProps = useGridRootProps();
  const ownerState = {
    classes: rootProps.classes,
    expanded: false
  };
  const classes2 = useUtilityClasses37(ownerState);
  const {
    quickFilterParser,
    quickFilterFormatter,
    debounceMs,
    className,
    slotProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded69);
  return (0, import_jsx_runtime95.jsx)(QuickFilter, {
    parser: quickFilterParser,
    formatter: quickFilterFormatter,
    debounceMs,
    render: (quickFilterProps, state) => {
      const currentOwnerState = _extends({}, ownerState, {
        expanded: state.expanded
      });
      return (0, import_jsx_runtime95.jsxs)(GridQuickFilterRoot, _extends({}, quickFilterProps, {
        className: clsx_default(classes2.root, className),
        children: [(0, import_jsx_runtime95.jsx)(QuickFilterTrigger, {
          render: (triggerProps) => (0, import_jsx_runtime95.jsx)(rootProps.slots.baseTooltip, {
            title: apiRef.current.getLocaleText("toolbarQuickFilterLabel"),
            enterDelay: 0,
            children: (0, import_jsx_runtime95.jsx)(GridQuickFilterTrigger, _extends({
              className: classes2.trigger
            }, triggerProps, {
              ownerState: currentOwnerState,
              color: "default",
              "aria-disabled": state.expanded,
              children: (0, import_jsx_runtime95.jsx)(rootProps.slots.quickFilterIcon, {
                fontSize: "small"
              })
            }))
          })
        }), (0, import_jsx_runtime95.jsx)(QuickFilterControl, {
          render: (_ref) => {
            var _a;
            let {
              ref,
              slotProps: controlSlotProps
            } = _ref, controlProps = _objectWithoutPropertiesLoose(_ref, _excluded214);
            return (0, import_jsx_runtime95.jsx)(GridQuickFilterTextField, _extends({
              as: rootProps.slots.baseTextField,
              className: classes2.control,
              ownerState: currentOwnerState,
              inputRef: ref,
              "aria-label": apiRef.current.getLocaleText("toolbarQuickFilterLabel"),
              placeholder: apiRef.current.getLocaleText("toolbarQuickFilterPlaceholder"),
              size: "small",
              slotProps: _extends({
                input: _extends({
                  startAdornment: (0, import_jsx_runtime95.jsx)(rootProps.slots.quickFilterIcon, {
                    fontSize: "small"
                  }),
                  endAdornment: controlProps.value ? (0, import_jsx_runtime95.jsx)(QuickFilterClear, {
                    render: (0, import_jsx_runtime95.jsx)(rootProps.slots.baseIconButton, {
                      size: "small",
                      edge: "end",
                      "aria-label": apiRef.current.getLocaleText("toolbarQuickFilterDeleteIconLabel"),
                      children: (0, import_jsx_runtime95.jsx)(rootProps.slots.quickFilterClearIcon, {
                        fontSize: "small"
                      })
                    })
                  }) : null
                }, controlSlotProps == null ? void 0 : controlSlotProps.input)
              }, controlSlotProps)
            }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseTextField, controlProps, slotProps == null ? void 0 : slotProps.root, other));
          }
        })]
      }));
    }
  });
}
true ? GridToolbarQuickFilter.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  className: import_prop_types75.default.string,
  /**
   * The debounce time in milliseconds.
   * @default 150
   */
  debounceMs: import_prop_types75.default.number,
  /**
   * Function responsible for formatting values of quick filter in a string when the model is modified
   * @param {any[]} values The new values passed to the quick filter model
   * @returns {string} The string to display in the text field
   * @default (values: string[]) => values.join(' ')
   */
  quickFilterFormatter: import_prop_types75.default.func,
  /**
   * Function responsible for parsing text input in an array of independent values for quick filtering.
   * @param {string} input The value entered by the user
   * @returns {any[]} The array of value on which quick filter is applied
   * @default (searchText: string) => searchText
   *   .split(' ')
   *   .filter((word) => word !== '')
   */
  quickFilterParser: import_prop_types75.default.func,
  slotProps: import_prop_types75.default.object
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/toolbarV8/GridToolbar.js
init_extends();
init_objectWithoutPropertiesLoose();
var React147 = __toESM(require_react(), 1);
var import_prop_types80 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-data-grid/esm/components/filterPanel/FilterPanelTrigger.js
init_extends();
init_objectWithoutPropertiesLoose();
var React143 = __toESM(require_react(), 1);
var import_prop_types76 = __toESM(require_prop_types(), 1);
var import_jsx_runtime96 = __toESM(require_jsx_runtime(), 1);
var _excluded70 = ["render", "className", "onClick", "onPointerUp"];
var FilterPanelTrigger = forwardRef2(function FilterPanelTrigger2(props, ref) {
  var _a;
  const {
    render,
    className,
    onClick,
    onPointerUp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded70);
  const rootProps = useGridRootProps();
  const buttonId = useId();
  const panelId = useId();
  const apiRef = useGridApiContext();
  const panelState = useGridSelector(apiRef, gridPreferencePanelStateSelector);
  const open = panelState.open && panelState.openedPanelValue === GridPreferencePanelsValue.filters;
  const activeFilters = useGridSelector(apiRef, gridFilterActiveItemsSelector);
  const filterCount = activeFilters.length;
  const state = {
    open,
    filterCount
  };
  const resolvedClassName = typeof className === "function" ? className(state) : className;
  const {
    filterPanelTriggerRef
  } = useGridPanelContext();
  const handleRef = useForkRef(ref, filterPanelTriggerRef);
  const handleClick = (event) => {
    if (open) {
      apiRef.current.hidePreferences();
    } else {
      apiRef.current.showPreferences(GridPreferencePanelsValue.filters, panelId, buttonId);
    }
    onClick == null ? void 0 : onClick(event);
  };
  const handlePointerUp = (event) => {
    if (open) {
      event.stopPropagation();
    }
    onPointerUp == null ? void 0 : onPointerUp(event);
  };
  const element = useComponentRenderer(rootProps.slots.baseButton, render, _extends({}, (_a = rootProps.slotProps) == null ? void 0 : _a.baseButton, {
    id: buttonId,
    "aria-haspopup": "true",
    "aria-expanded": open ? "true" : void 0,
    "aria-controls": open ? panelId : void 0,
    onClick: handleClick,
    onPointerUp: handlePointerUp,
    className: resolvedClassName
  }, other, {
    ref: handleRef
  }), state);
  return (0, import_jsx_runtime96.jsx)(React143.Fragment, {
    children: element
  });
});
if (true) FilterPanelTrigger.displayName = "FilterPanelTrigger";
true ? FilterPanelTrigger.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * A function to customize rendering of the component.
   */
  className: import_prop_types76.default.oneOfType([import_prop_types76.default.func, import_prop_types76.default.string]),
  disabled: import_prop_types76.default.bool,
  id: import_prop_types76.default.string,
  /**
   * A function to customize rendering of the component.
   */
  render: import_prop_types76.default.oneOfType([import_prop_types76.default.element, import_prop_types76.default.func]),
  role: import_prop_types76.default.string,
  size: import_prop_types76.default.oneOf(["large", "medium", "small"]),
  startIcon: import_prop_types76.default.node,
  style: import_prop_types76.default.object,
  tabIndex: import_prop_types76.default.number,
  title: import_prop_types76.default.string,
  touchRippleRef: import_prop_types76.default.any
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/columnsPanel/ColumnsPanelTrigger.js
init_extends();
init_objectWithoutPropertiesLoose();
var React144 = __toESM(require_react(), 1);
var import_prop_types77 = __toESM(require_prop_types(), 1);
var import_jsx_runtime97 = __toESM(require_jsx_runtime(), 1);
var _excluded71 = ["render", "className", "onClick", "onPointerUp"];
var ColumnsPanelTrigger = forwardRef2(function ColumnsPanelTrigger2(props, ref) {
  var _a;
  const {
    render,
    className,
    onClick,
    onPointerUp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded71);
  const rootProps = useGridRootProps();
  const buttonId = useId();
  const panelId = useId();
  const apiRef = useGridApiContext();
  const panelState = useGridSelector(apiRef, gridPreferencePanelStateSelector);
  const open = panelState.open && panelState.openedPanelValue === GridPreferencePanelsValue.columns;
  const state = {
    open
  };
  const resolvedClassName = typeof className === "function" ? className(state) : className;
  const {
    columnsPanelTriggerRef
  } = useGridPanelContext();
  const handleRef = useForkRef(ref, columnsPanelTriggerRef);
  const handleClick = (event) => {
    if (open) {
      apiRef.current.hidePreferences();
    } else {
      apiRef.current.showPreferences(GridPreferencePanelsValue.columns, panelId, buttonId);
    }
    onClick == null ? void 0 : onClick(event);
  };
  const handlePointerUp = (event) => {
    if (open) {
      event.stopPropagation();
    }
    onPointerUp == null ? void 0 : onPointerUp(event);
  };
  const element = useComponentRenderer(rootProps.slots.baseButton, render, _extends({}, (_a = rootProps.slotProps) == null ? void 0 : _a.baseButton, {
    id: buttonId,
    "aria-haspopup": "true",
    "aria-expanded": open ? "true" : void 0,
    "aria-controls": open ? panelId : void 0,
    className: resolvedClassName
  }, other, {
    onPointerUp: handlePointerUp,
    onClick: handleClick,
    ref: handleRef
  }), state);
  return (0, import_jsx_runtime97.jsx)(React144.Fragment, {
    children: element
  });
});
if (true) ColumnsPanelTrigger.displayName = "ColumnsPanelTrigger";
true ? ColumnsPanelTrigger.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  className: import_prop_types77.default.oneOfType([import_prop_types77.default.func, import_prop_types77.default.string]),
  disabled: import_prop_types77.default.bool,
  id: import_prop_types77.default.string,
  /**
   * A function to customize rendering of the component.
   */
  render: import_prop_types77.default.oneOfType([import_prop_types77.default.element, import_prop_types77.default.func]),
  role: import_prop_types77.default.string,
  size: import_prop_types77.default.oneOf(["large", "medium", "small"]),
  startIcon: import_prop_types77.default.node,
  style: import_prop_types77.default.object,
  tabIndex: import_prop_types77.default.number,
  title: import_prop_types77.default.string,
  touchRippleRef: import_prop_types77.default.any
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/export/ExportCsv.js
init_extends();
init_objectWithoutPropertiesLoose();
var React145 = __toESM(require_react(), 1);
var import_prop_types78 = __toESM(require_prop_types(), 1);
var import_jsx_runtime98 = __toESM(require_jsx_runtime(), 1);
var _excluded72 = ["render", "options", "onClick"];
var ExportCsv = forwardRef2(function ExportCsv2(props, ref) {
  var _a;
  const {
    render,
    options,
    onClick
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded72);
  const rootProps = useGridRootProps();
  const apiRef = useGridApiContext();
  const handleClick = (event) => {
    apiRef.current.exportDataAsCsv(options);
    onClick == null ? void 0 : onClick(event);
  };
  const element = useComponentRenderer(rootProps.slots.baseButton, render, _extends({}, (_a = rootProps.slotProps) == null ? void 0 : _a.baseButton, {
    onClick: handleClick
  }, other, {
    ref
  }));
  return (0, import_jsx_runtime98.jsx)(React145.Fragment, {
    children: element
  });
});
if (true) ExportCsv.displayName = "ExportCsv";
true ? ExportCsv.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  className: import_prop_types78.default.string,
  disabled: import_prop_types78.default.bool,
  id: import_prop_types78.default.string,
  /**
   * The options to apply on the CSV export.
   * @demos
   *   - [CSV export](/x/react-data-grid/export/#csv-export)
   */
  options: import_prop_types78.default.shape({
    allColumns: import_prop_types78.default.bool,
    delimiter: import_prop_types78.default.string,
    escapeFormulas: import_prop_types78.default.bool,
    fields: import_prop_types78.default.arrayOf(import_prop_types78.default.string),
    fileName: import_prop_types78.default.string,
    getRowsToExport: import_prop_types78.default.func,
    includeColumnGroupsHeaders: import_prop_types78.default.bool,
    includeHeaders: import_prop_types78.default.bool,
    shouldAppendQuotes: import_prop_types78.default.bool,
    utf8WithBom: import_prop_types78.default.bool
  }),
  /**
   * A function to customize rendering of the component.
   */
  render: import_prop_types78.default.oneOfType([import_prop_types78.default.element, import_prop_types78.default.func]),
  role: import_prop_types78.default.string,
  size: import_prop_types78.default.oneOf(["large", "medium", "small"]),
  startIcon: import_prop_types78.default.node,
  style: import_prop_types78.default.object,
  tabIndex: import_prop_types78.default.number,
  title: import_prop_types78.default.string,
  touchRippleRef: import_prop_types78.default.any
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/export/ExportPrint.js
init_extends();
init_objectWithoutPropertiesLoose();
var React146 = __toESM(require_react(), 1);
var import_prop_types79 = __toESM(require_prop_types(), 1);
var import_jsx_runtime99 = __toESM(require_jsx_runtime(), 1);
var _excluded73 = ["render", "options", "onClick"];
var ExportPrint = forwardRef2(function ExportPrint2(props, ref) {
  var _a;
  const {
    render,
    options,
    onClick
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded73);
  const rootProps = useGridRootProps();
  const apiRef = useGridApiContext();
  const handleClick = (event) => {
    apiRef.current.exportDataAsPrint(options);
    onClick == null ? void 0 : onClick(event);
  };
  const element = useComponentRenderer(rootProps.slots.baseButton, render, _extends({}, (_a = rootProps.slotProps) == null ? void 0 : _a.baseButton, {
    onClick: handleClick
  }, other, {
    ref
  }));
  return (0, import_jsx_runtime99.jsx)(React146.Fragment, {
    children: element
  });
});
if (true) ExportPrint.displayName = "ExportPrint";
true ? ExportPrint.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  className: import_prop_types79.default.string,
  disabled: import_prop_types79.default.bool,
  id: import_prop_types79.default.string,
  /**
   * The options to apply on the Print export.
   * @demos
   *   - [Print export](/x/react-data-grid/export/#print-export)
   */
  options: import_prop_types79.default.shape({
    allColumns: import_prop_types79.default.bool,
    bodyClassName: import_prop_types79.default.string,
    copyStyles: import_prop_types79.default.bool,
    fields: import_prop_types79.default.arrayOf(import_prop_types79.default.string),
    fileName: import_prop_types79.default.string,
    getRowsToExport: import_prop_types79.default.func,
    hideFooter: import_prop_types79.default.bool,
    hideToolbar: import_prop_types79.default.bool,
    includeCheckboxes: import_prop_types79.default.bool,
    pageStyle: import_prop_types79.default.oneOfType([import_prop_types79.default.func, import_prop_types79.default.string])
  }),
  /**
   * A function to customize rendering of the component.
   */
  render: import_prop_types79.default.oneOfType([import_prop_types79.default.element, import_prop_types79.default.func]),
  role: import_prop_types79.default.string,
  size: import_prop_types79.default.oneOf(["large", "medium", "small"]),
  startIcon: import_prop_types79.default.node,
  style: import_prop_types79.default.object,
  tabIndex: import_prop_types79.default.number,
  title: import_prop_types79.default.string,
  touchRippleRef: import_prop_types79.default.any
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/toolbarV8/GridToolbar.js
var import_jsx_runtime100 = __toESM(require_jsx_runtime(), 1);
var _excluded74 = ["className"];
var _excluded215 = ["className"];
var useUtilityClasses38 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    divider: ["toolbarDivider"],
    label: ["toolbarLabel"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var Divider = styled_default2(NotRendered, {
  name: "MuiDataGrid",
  slot: "ToolbarDivider"
})({
  height: "50%",
  margin: vars.spacing(0, 0.5)
});
var Label = styled_default2("span", {
  name: "MuiDataGrid",
  slot: "ToolbarLabel"
})({
  flex: 1,
  font: vars.typography.font.large,
  fontWeight: vars.typography.fontWeight.medium,
  margin: vars.spacing(0, 0.5),
  textOverflow: "ellipsis",
  overflow: "hidden",
  whiteSpace: "nowrap"
});
function GridToolbarDivider(props) {
  const other = _objectWithoutPropertiesLoose(props, _excluded74);
  const rootProps = useGridRootProps();
  const classes2 = useUtilityClasses38(rootProps);
  return (0, import_jsx_runtime100.jsx)(Divider, _extends({
    as: rootProps.slots.baseDivider,
    orientation: "vertical",
    className: classes2.divider
  }, other));
}
true ? GridToolbarDivider.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  className: import_prop_types80.default.string,
  orientation: import_prop_types80.default.oneOf(["horizontal", "vertical"])
} : void 0;
function GridToolbarLabel(props) {
  const other = _objectWithoutPropertiesLoose(props, _excluded215);
  const rootProps = useGridRootProps();
  const classes2 = useUtilityClasses38(rootProps);
  return (0, import_jsx_runtime100.jsx)(Label, _extends({
    className: classes2.label
  }, other));
}
function GridToolbar(props) {
  var _a, _b, _c;
  const {
    showQuickFilter = true,
    quickFilterProps,
    csvOptions,
    printOptions,
    additionalItems,
    additionalExportMenuItems
  } = props;
  const apiRef = useGridApiContext();
  const rootProps = useGridRootProps();
  const [exportMenuOpen, setExportMenuOpen] = React147.useState(false);
  const exportMenuTriggerRef = React147.useRef(null);
  const exportMenuId = useId();
  const exportMenuTriggerId = useId();
  const showExportMenu = !(csvOptions == null ? void 0 : csvOptions.disableToolbarButton) || !(printOptions == null ? void 0 : printOptions.disableToolbarButton) || additionalExportMenuItems;
  const closeExportMenu = () => setExportMenuOpen(false);
  return (0, import_jsx_runtime100.jsxs)(Toolbar, {
    children: [rootProps.label && (0, import_jsx_runtime100.jsx)(GridToolbarLabel, {
      children: rootProps.label
    }), !rootProps.disableColumnSelector && (0, import_jsx_runtime100.jsx)(rootProps.slots.baseTooltip, {
      title: apiRef.current.getLocaleText("toolbarColumns"),
      children: (0, import_jsx_runtime100.jsx)(ColumnsPanelTrigger, {
        render: (0, import_jsx_runtime100.jsx)(ToolbarButton, {}),
        children: (0, import_jsx_runtime100.jsx)(rootProps.slots.columnSelectorIcon, {
          fontSize: "small"
        })
      })
    }), !rootProps.disableColumnFilter && (0, import_jsx_runtime100.jsx)(rootProps.slots.baseTooltip, {
      title: apiRef.current.getLocaleText("toolbarFilters"),
      children: (0, import_jsx_runtime100.jsx)(FilterPanelTrigger, {
        render: (triggerProps, state) => (0, import_jsx_runtime100.jsx)(ToolbarButton, _extends({}, triggerProps, {
          color: state.filterCount > 0 ? "primary" : "default",
          children: (0, import_jsx_runtime100.jsx)(rootProps.slots.baseBadge, {
            badgeContent: state.filterCount,
            color: "primary",
            variant: "dot",
            children: (0, import_jsx_runtime100.jsx)(rootProps.slots.openFilterButtonIcon, {
              fontSize: "small"
            })
          })
        }))
      })
    }), additionalItems, showExportMenu && (!rootProps.disableColumnFilter || !rootProps.disableColumnSelector) && (0, import_jsx_runtime100.jsx)(GridToolbarDivider, {}), showExportMenu && (0, import_jsx_runtime100.jsxs)(React147.Fragment, {
      children: [(0, import_jsx_runtime100.jsx)(rootProps.slots.baseTooltip, {
        title: apiRef.current.getLocaleText("toolbarExport"),
        disableInteractive: exportMenuOpen,
        children: (0, import_jsx_runtime100.jsx)(ToolbarButton, {
          ref: exportMenuTriggerRef,
          id: exportMenuTriggerId,
          "aria-controls": exportMenuId,
          "aria-haspopup": "true",
          "aria-expanded": exportMenuOpen ? "true" : void 0,
          onClick: () => setExportMenuOpen(!exportMenuOpen),
          children: (0, import_jsx_runtime100.jsx)(rootProps.slots.exportIcon, {
            fontSize: "small"
          })
        })
      }), (0, import_jsx_runtime100.jsx)(GridMenu, {
        target: exportMenuTriggerRef.current,
        open: exportMenuOpen,
        onClose: closeExportMenu,
        position: "bottom-end",
        children: (0, import_jsx_runtime100.jsxs)(rootProps.slots.baseMenuList, _extends({
          id: exportMenuId,
          "aria-labelledby": exportMenuTriggerId,
          autoFocusItem: true
        }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseMenuList, {
          children: [!(printOptions == null ? void 0 : printOptions.disableToolbarButton) && (0, import_jsx_runtime100.jsx)(ExportPrint, {
            render: (0, import_jsx_runtime100.jsx)(rootProps.slots.baseMenuItem, _extends({}, (_b = rootProps.slotProps) == null ? void 0 : _b.baseMenuItem)),
            options: printOptions,
            onClick: closeExportMenu,
            children: apiRef.current.getLocaleText("toolbarExportPrint")
          }), !(csvOptions == null ? void 0 : csvOptions.disableToolbarButton) && (0, import_jsx_runtime100.jsx)(ExportCsv, {
            render: (0, import_jsx_runtime100.jsx)(rootProps.slots.baseMenuItem, _extends({}, (_c = rootProps.slotProps) == null ? void 0 : _c.baseMenuItem)),
            options: csvOptions,
            onClick: closeExportMenu,
            children: apiRef.current.getLocaleText("toolbarExportCSV")
          }), additionalExportMenuItems == null ? void 0 : additionalExportMenuItems(closeExportMenu)]
        }))
      })]
    }), showQuickFilter && (0, import_jsx_runtime100.jsxs)(React147.Fragment, {
      children: [(0, import_jsx_runtime100.jsx)(GridToolbarDivider, {}), (0, import_jsx_runtime100.jsx)(GridToolbarQuickFilter, _extends({}, quickFilterProps))]
    })]
  });
}
true ? GridToolbar.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  additionalExportMenuItems: import_prop_types80.default.func,
  additionalItems: import_prop_types80.default.node,
  csvOptions: import_prop_types80.default.object,
  printOptions: import_prop_types80.default.object,
  /**
   * Props passed to the quick filter component.
   */
  quickFilterProps: import_prop_types80.default.shape({
    className: import_prop_types80.default.string,
    debounceMs: import_prop_types80.default.number,
    quickFilterFormatter: import_prop_types80.default.func,
    quickFilterParser: import_prop_types80.default.func,
    slotProps: import_prop_types80.default.object
  }),
  /**
   * Show the quick filter component.
   * @default true
   */
  showQuickFilter: import_prop_types80.default.bool,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types80.default.object,
  sx: import_prop_types80.default.oneOfType([import_prop_types80.default.arrayOf(import_prop_types80.default.oneOfType([import_prop_types80.default.func, import_prop_types80.default.object, import_prop_types80.default.bool])), import_prop_types80.default.func, import_prop_types80.default.object])
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/toolbar/GridToolbar.js
var import_jsx_runtime101 = __toESM(require_jsx_runtime(), 1);
var _excluded75 = ["className", "csvOptions", "printOptions", "excelOptions", "showQuickFilter", "quickFilterProps"];
var GridToolbar2 = forwardRef2(function GridToolbar3(props, ref) {
  const _ref = props, {
    csvOptions,
    printOptions,
    excelOptions,
    showQuickFilter = true,
    quickFilterProps = {}
  } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded75);
  const rootProps = useGridRootProps();
  if (rootProps.disableColumnFilter && rootProps.disableColumnSelector && rootProps.disableDensitySelector && !showQuickFilter) {
    return null;
  }
  return (0, import_jsx_runtime101.jsxs)(GridToolbarContainer, _extends({}, other, {
    ref,
    children: [rootProps.label && (0, import_jsx_runtime101.jsx)(GridToolbarLabel, {
      children: rootProps.label
    }), (0, import_jsx_runtime101.jsx)(GridToolbarColumnsButton, {}), (0, import_jsx_runtime101.jsx)(GridToolbarFilterButton, {}), (0, import_jsx_runtime101.jsx)(GridToolbarDensitySelector, {}), (0, import_jsx_runtime101.jsx)(GridToolbarExport, {
      csvOptions,
      printOptions,
      excelOptions
    }), (0, import_jsx_runtime101.jsx)("div", {
      style: {
        flex: 1
      }
    }), showQuickFilter && (0, import_jsx_runtime101.jsx)(GridToolbarQuickFilter, _extends({}, quickFilterProps))]
  }));
});
if (true) GridToolbar2.displayName = "GridToolbar";
true ? GridToolbar2.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  csvOptions: import_prop_types81.default.object,
  printOptions: import_prop_types81.default.object,
  /**
   * Props passed to the quick filter component.
   */
  quickFilterProps: import_prop_types81.default.shape({
    className: import_prop_types81.default.string,
    debounceMs: import_prop_types81.default.number,
    quickFilterFormatter: import_prop_types81.default.func,
    quickFilterParser: import_prop_types81.default.func,
    slotProps: import_prop_types81.default.object
  }),
  /**
   * Show the quick filter component.
   * @default true
   */
  showQuickFilter: import_prop_types81.default.bool,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types81.default.object,
  sx: import_prop_types81.default.oneOfType([import_prop_types81.default.arrayOf(import_prop_types81.default.oneOfType([import_prop_types81.default.func, import_prop_types81.default.object, import_prop_types81.default.bool])), import_prop_types81.default.func, import_prop_types81.default.object])
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/GridFooter.js
init_extends();
var React150 = __toESM(require_react(), 1);
var import_prop_types83 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-data-grid/esm/components/GridSelectedRowCount.js
init_extends();
init_objectWithoutPropertiesLoose();
var React149 = __toESM(require_react(), 1);
var import_prop_types82 = __toESM(require_prop_types(), 1);
init_clsx();
var import_jsx_runtime102 = __toESM(require_jsx_runtime(), 1);
var _excluded76 = ["className", "selectedRowCount"];
var useUtilityClasses39 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["selectedRowCount"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var GridSelectedRowCountRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "SelectedRowCount"
})({
  alignItems: "center",
  display: "flex",
  margin: vars.spacing(0, 2),
  visibility: "hidden",
  width: 0,
  height: 0,
  [vars.breakpoints.up("sm")]: {
    visibility: "visible",
    width: "auto",
    height: "auto"
  }
});
var GridSelectedRowCount = forwardRef2(function GridSelectedRowCount2(props, ref) {
  const {
    className,
    selectedRowCount
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded76);
  const apiRef = useGridApiContext();
  const ownerState = useGridRootProps();
  const classes2 = useUtilityClasses39(ownerState);
  const rowSelectedText = apiRef.current.getLocaleText("footerRowSelected")(selectedRowCount);
  return (0, import_jsx_runtime102.jsx)(GridSelectedRowCountRoot, _extends({
    className: clsx_default(classes2.root, className),
    ownerState
  }, other, {
    ref,
    children: rowSelectedText
  }));
});
if (true) GridSelectedRowCount.displayName = "GridSelectedRowCount";
true ? GridSelectedRowCount.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  selectedRowCount: import_prop_types82.default.number.isRequired,
  sx: import_prop_types82.default.oneOfType([import_prop_types82.default.arrayOf(import_prop_types82.default.oneOfType([import_prop_types82.default.func, import_prop_types82.default.object, import_prop_types82.default.bool])), import_prop_types82.default.func, import_prop_types82.default.object])
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/GridFooter.js
var import_jsx_runtime103 = __toESM(require_jsx_runtime(), 1);
var GridFooter = forwardRef2(function GridFooter2(props, ref) {
  var _a, _b;
  const apiRef = useGridApiContext();
  const rootProps = useGridRootProps();
  const totalTopLevelRowCount = useGridSelector(apiRef, gridTopLevelRowCountSelector);
  const selectedRowCount = useGridSelector(apiRef, gridRowSelectionCountSelector);
  const visibleTopLevelRowCount = useGridSelector(apiRef, gridFilteredTopLevelRowCountSelector);
  const selectedRowCountElement = !rootProps.hideFooterSelectedRowCount && selectedRowCount > 0 ? (0, import_jsx_runtime103.jsx)(GridSelectedRowCount, {
    selectedRowCount
  }) : (0, import_jsx_runtime103.jsx)("div", {});
  const rowCountElement = !rootProps.hideFooterRowCount && !rootProps.pagination ? (0, import_jsx_runtime103.jsx)(rootProps.slots.footerRowCount, _extends({}, (_a = rootProps.slotProps) == null ? void 0 : _a.footerRowCount, {
    rowCount: totalTopLevelRowCount,
    visibleRowCount: visibleTopLevelRowCount
  })) : null;
  const paginationElement = rootProps.pagination && !rootProps.hideFooterPagination && rootProps.slots.pagination && (0, import_jsx_runtime103.jsx)(rootProps.slots.pagination, _extends({}, (_b = rootProps.slotProps) == null ? void 0 : _b.pagination));
  return (0, import_jsx_runtime103.jsxs)(GridFooterContainer, _extends({}, props, {
    ref,
    children: [selectedRowCountElement, rowCountElement, paginationElement]
  }));
});
if (true) GridFooter.displayName = "GridFooter";
true ? GridFooter.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  sx: import_prop_types83.default.oneOfType([import_prop_types83.default.arrayOf(import_prop_types83.default.oneOfType([import_prop_types83.default.func, import_prop_types83.default.object, import_prop_types83.default.bool])), import_prop_types83.default.func, import_prop_types83.default.object])
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/GridLoadingOverlay.js
init_extends();
init_objectWithoutPropertiesLoose();
var React153 = __toESM(require_react(), 1);
var import_prop_types84 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-data-grid/esm/components/GridSkeletonLoadingOverlay.js
init_extends();
init_objectWithoutPropertiesLoose();
var React152 = __toESM(require_react(), 1);
init_clsx();

// node_modules/@mui/x-data-grid/esm/internals/utils/getPinnedCellOffset.js
var getPinnedCellOffset = (pinnedPosition, computedWidth, columnIndex, columnPositions, columnsTotalWidth, scrollbarWidth) => {
  let pinnedOffset;
  switch (pinnedPosition) {
    case PinnedColumnPosition.LEFT:
      pinnedOffset = columnPositions[columnIndex];
      break;
    case PinnedColumnPosition.RIGHT:
      pinnedOffset = columnsTotalWidth - columnPositions[columnIndex] - computedWidth + scrollbarWidth;
      break;
    default:
      pinnedOffset = void 0;
      break;
  }
  if (Number.isNaN(pinnedOffset)) {
    pinnedOffset = void 0;
  }
  return pinnedOffset;
};

// node_modules/@mui/x-data-grid/esm/utils/cellBorderUtils.js
var shouldCellShowRightBorder = (pinnedPosition, indexInSection, sectionLength, showCellVerticalBorderRootProp, gridHasFiller) => {
  const isSectionLastCell = indexInSection === sectionLength - 1;
  if (pinnedPosition === PinnedColumnPosition.LEFT && isSectionLastCell) {
    return true;
  }
  if (showCellVerticalBorderRootProp) {
    if (pinnedPosition === PinnedColumnPosition.LEFT) {
      return true;
    }
    if (pinnedPosition === PinnedColumnPosition.RIGHT) {
      return !isSectionLastCell;
    }
    return !isSectionLastCell || gridHasFiller;
  }
  return false;
};
var shouldCellShowLeftBorder = (pinnedPosition, indexInSection) => {
  return pinnedPosition === PinnedColumnPosition.RIGHT && indexInSection === 0;
};

// node_modules/@mui/x-data-grid/esm/components/GridScrollbarFillerCell.js
var React151 = __toESM(require_react(), 1);
init_clsx();
var import_jsx_runtime104 = __toESM(require_jsx_runtime(), 1);
var classes = {
  root: gridClasses2.scrollbarFiller,
  header: gridClasses2["scrollbarFiller--header"],
  borderTop: gridClasses2["scrollbarFiller--borderTop"],
  borderBottom: gridClasses2["scrollbarFiller--borderBottom"],
  pinnedRight: gridClasses2["scrollbarFiller--pinnedRight"]
};
function GridScrollbarFillerCell({
  header,
  borderTop: borderTop2 = true,
  borderBottom: borderBottom2,
  pinnedRight
}) {
  return (0, import_jsx_runtime104.jsx)("div", {
    role: "presentation",
    className: clsx_default(classes.root, header && classes.header, borderTop2 && classes.borderTop, borderBottom2 && classes.borderBottom, pinnedRight && classes.pinnedRight)
  });
}

// node_modules/@mui/x-data-grid/esm/components/GridSkeletonLoadingOverlay.js
var import_jsx_runtime105 = __toESM(require_jsx_runtime(), 1);
var _excluded77 = ["skeletonRowsCount", "visibleColumns", "showFirstRowBorder"];
var SkeletonOverlay = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "SkeletonLoadingOverlay"
})({
  minWidth: "100%",
  width: "max-content",
  // prevents overflow: clip; cutting off the x axis
  height: "100%",
  overflow: "clip"
  // y axis is hidden while the x axis is allowed to overflow
});
var useUtilityClasses40 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["skeletonLoadingOverlay"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var getColIndex = (el) => parseInt(el.getAttribute("data-colindex"), 10);
var GridSkeletonLoadingOverlayInner = forwardRef2(function GridSkeletonLoadingOverlayInner2(props, forwardedRef) {
  const rootProps = useGridRootProps();
  const {
    slots
  } = rootProps;
  const isRtl = useRtl();
  const classes2 = useUtilityClasses40({
    classes: rootProps.classes
  });
  const ref = React152.useRef(null);
  const handleRef = useForkRef(ref, forwardedRef);
  const apiRef = useGridApiContext();
  const dimensions = useGridSelector(apiRef, gridDimensionsSelector);
  const totalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);
  const positions = useGridSelector(apiRef, gridColumnPositionsSelector);
  const inViewportCount = React152.useMemo(() => positions.filter((value) => value <= totalWidth).length, [totalWidth, positions]);
  const {
    skeletonRowsCount,
    visibleColumns,
    showFirstRowBorder
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded77);
  const allVisibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);
  const columns = React152.useMemo(() => allVisibleColumns.slice(0, inViewportCount), [allVisibleColumns, inViewportCount]);
  const pinnedColumns = useGridSelector(apiRef, gridVisiblePinnedColumnDefinitionsSelector);
  const getPinnedPosition = React152.useCallback((field) => {
    if (pinnedColumns.left.findIndex((col) => col.field === field) !== -1) {
      return PinnedColumnPosition.LEFT;
    }
    if (pinnedColumns.right.findIndex((col) => col.field === field) !== -1) {
      return PinnedColumnPosition.RIGHT;
    }
    return void 0;
  }, [pinnedColumns.left, pinnedColumns.right]);
  const children = React152.useMemo(() => {
    const array = [];
    for (let i = 0; i < skeletonRowsCount; i += 1) {
      const rowCells = [];
      for (let colIndex = 0; colIndex < columns.length; colIndex += 1) {
        const column = columns[colIndex];
        const pinnedPosition = getPinnedPosition(column.field);
        const isPinnedLeft = pinnedPosition === PinnedColumnPosition.LEFT;
        const isPinnedRight = pinnedPosition === PinnedColumnPosition.RIGHT;
        const pinnedSide = rtlFlipSide(pinnedPosition, isRtl);
        const sectionLength = pinnedSide ? pinnedColumns[pinnedSide].length : columns.length - pinnedColumns.left.length - pinnedColumns.right.length;
        const sectionIndex = pinnedSide ? pinnedColumns[pinnedSide].findIndex((col) => col.field === column.field) : colIndex - pinnedColumns.left.length;
        const scrollbarWidth = dimensions.hasScrollY ? dimensions.scrollbarSize : 0;
        const pinnedStyle = attachPinnedStyle({}, isRtl, pinnedPosition, getPinnedCellOffset(pinnedPosition, column.computedWidth, colIndex, positions, dimensions.columnsTotalWidth, scrollbarWidth));
        const gridHasFiller = dimensions.columnsTotalWidth < dimensions.viewportOuterSize.width;
        const showRightBorder = shouldCellShowRightBorder(pinnedPosition, sectionIndex, sectionLength, rootProps.showCellVerticalBorder, gridHasFiller);
        const showLeftBorder = shouldCellShowLeftBorder(pinnedPosition, sectionIndex);
        const isLastColumn = colIndex === columns.length - 1;
        const isFirstPinnedRight = isPinnedRight && sectionIndex === 0;
        const hasFillerBefore = isFirstPinnedRight && gridHasFiller;
        const hasFillerAfter = isLastColumn && !isFirstPinnedRight && gridHasFiller;
        const expandedWidth = dimensions.viewportOuterSize.width - dimensions.columnsTotalWidth;
        const emptyCellWidth = Math.max(0, expandedWidth);
        const emptyCell = (0, import_jsx_runtime105.jsx)(slots.skeletonCell, {
          width: emptyCellWidth,
          empty: true
        }, `skeleton-filler-column-${i}`);
        const hasScrollbarFiller = isLastColumn && scrollbarWidth !== 0;
        if (hasFillerBefore) {
          rowCells.push(emptyCell);
        }
        rowCells.push((0, import_jsx_runtime105.jsx)(slots.skeletonCell, {
          field: column.field,
          type: column.type,
          align: column.align,
          width: "var(--width)",
          height: dimensions.rowHeight,
          "data-colindex": colIndex,
          empty: visibleColumns && !visibleColumns.has(column.field),
          className: clsx_default(isPinnedLeft && gridClasses2["cell--pinnedLeft"], isPinnedRight && gridClasses2["cell--pinnedRight"], showRightBorder && gridClasses2["cell--withRightBorder"], showLeftBorder && gridClasses2["cell--withLeftBorder"]),
          style: _extends({
            "--width": `${column.computedWidth}px`
          }, pinnedStyle)
        }, `skeleton-column-${i}-${column.field}`));
        if (hasFillerAfter) {
          rowCells.push(emptyCell);
        }
        if (hasScrollbarFiller) {
          rowCells.push((0, import_jsx_runtime105.jsx)(GridScrollbarFillerCell, {
            pinnedRight: pinnedColumns.right.length > 0
          }, `skeleton-scrollbar-filler-${i}`));
        }
      }
      array.push((0, import_jsx_runtime105.jsx)("div", {
        className: clsx_default(gridClasses2.row, gridClasses2.rowSkeleton, i === 0 && !showFirstRowBorder && gridClasses2["row--firstVisible"]),
        children: rowCells
      }, `skeleton-row-${i}`));
    }
    return array;
  }, [skeletonRowsCount, columns, getPinnedPosition, isRtl, pinnedColumns, dimensions.hasScrollY, dimensions.scrollbarSize, dimensions.columnsTotalWidth, dimensions.viewportOuterSize.width, dimensions.rowHeight, positions, rootProps.showCellVerticalBorder, slots, visibleColumns, showFirstRowBorder]);
  const handleColumnResize = (params) => {
    var _a, _b, _c;
    const {
      colDef,
      width: width2
    } = params;
    const cells = (_a = ref.current) == null ? void 0 : _a.querySelectorAll(`[data-field="${escapeOperandAttributeSelector(colDef.field)}"]`);
    if (!cells) {
      throw new Error("MUI X: Expected skeleton cells to be defined with `data-field` attribute.");
    }
    const resizedColIndex = columns.findIndex((col) => col.field === colDef.field);
    const pinnedPosition = getPinnedPosition(colDef.field);
    const isPinnedLeft = pinnedPosition === PinnedColumnPosition.LEFT;
    const isPinnedRight = pinnedPosition === PinnedColumnPosition.RIGHT;
    const currentWidth = getComputedStyle(cells[0]).getPropertyValue("--width");
    const delta = parseInt(currentWidth, 10) - width2;
    if (cells) {
      cells.forEach((element) => {
        element.style.setProperty("--width", `${width2}px`);
      });
    }
    if (isPinnedLeft) {
      const pinnedCells = (_b = ref.current) == null ? void 0 : _b.querySelectorAll(`.${gridClasses2["cell--pinnedLeft"]}`);
      pinnedCells == null ? void 0 : pinnedCells.forEach((element) => {
        const colIndex = getColIndex(element);
        if (colIndex > resizedColIndex) {
          element.style.left = `${parseInt(getComputedStyle(element).left, 10) - delta}px`;
        }
      });
    }
    if (isPinnedRight) {
      const pinnedCells = (_c = ref.current) == null ? void 0 : _c.querySelectorAll(`.${gridClasses2["cell--pinnedRight"]}`);
      pinnedCells == null ? void 0 : pinnedCells.forEach((element) => {
        const colIndex = getColIndex(element);
        if (colIndex < resizedColIndex) {
          element.style.right = `${parseInt(getComputedStyle(element).right, 10) + delta}px`;
        }
      });
    }
  };
  useGridEvent(apiRef, "columnResize", handleColumnResize);
  return (0, import_jsx_runtime105.jsx)(SkeletonOverlay, _extends({
    className: classes2.root
  }, other, {
    ref: handleRef,
    children
  }));
});
if (true) GridSkeletonLoadingOverlayInner.displayName = "GridSkeletonLoadingOverlayInner";
var GridSkeletonLoadingOverlay = forwardRef2(function GridSkeletonLoadingOverlay2(props, forwardedRef) {
  const apiRef = useGridApiContext();
  const dimensions = useGridSelector(apiRef, gridDimensionsSelector);
  const viewportHeight = (dimensions == null ? void 0 : dimensions.viewportInnerSize.height) ?? 0;
  const skeletonRowsCount = Math.ceil(viewportHeight / dimensions.rowHeight);
  return (0, import_jsx_runtime105.jsx)(GridSkeletonLoadingOverlayInner, _extends({}, props, {
    skeletonRowsCount,
    ref: forwardedRef
  }));
});
if (true) GridSkeletonLoadingOverlay.displayName = "GridSkeletonLoadingOverlay";

// node_modules/@mui/x-data-grid/esm/components/GridLoadingOverlay.js
var import_jsx_runtime106 = __toESM(require_jsx_runtime(), 1);
var _excluded78 = ["variant", "noRowsVariant", "style"];
var LOADING_VARIANTS = {
  "circular-progress": {
    component: (rootProps) => rootProps.slots.baseCircularProgress,
    style: {}
  },
  "linear-progress": {
    component: (rootProps) => rootProps.slots.baseLinearProgress,
    style: {
      display: "block"
    }
  },
  skeleton: {
    component: () => GridSkeletonLoadingOverlay,
    style: {
      display: "block"
    }
  }
};
var GridLoadingOverlay = forwardRef2(function GridLoadingOverlay2(props, ref) {
  const {
    variant = "linear-progress",
    noRowsVariant = "skeleton",
    style: style4
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded78);
  const apiRef = useGridApiContext();
  const rootProps = useGridRootProps();
  const rowsCount = useGridSelector(apiRef, gridRowCountSelector);
  const activeVariant = LOADING_VARIANTS[rowsCount === 0 ? noRowsVariant : variant];
  const Component = activeVariant.component(rootProps);
  return (0, import_jsx_runtime106.jsx)(GridOverlay, _extends({
    style: _extends({}, activeVariant.style, style4)
  }, other, {
    ref,
    children: (0, import_jsx_runtime106.jsx)(Component, {})
  }));
});
if (true) GridLoadingOverlay.displayName = "GridLoadingOverlay";
true ? GridLoadingOverlay.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The variant of the overlay when no rows are displayed.
   * @default 'skeleton'
   */
  noRowsVariant: import_prop_types84.default.oneOf(["circular-progress", "linear-progress", "skeleton"]),
  sx: import_prop_types84.default.oneOfType([import_prop_types84.default.arrayOf(import_prop_types84.default.oneOfType([import_prop_types84.default.func, import_prop_types84.default.object, import_prop_types84.default.bool])), import_prop_types84.default.func, import_prop_types84.default.object]),
  /**
   * The variant of the overlay.
   * @default 'linear-progress'
   */
  variant: import_prop_types84.default.oneOf(["circular-progress", "linear-progress", "skeleton"])
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/GridNoRowsOverlay.js
init_extends();
var React154 = __toESM(require_react(), 1);
var import_prop_types85 = __toESM(require_prop_types(), 1);
var import_jsx_runtime107 = __toESM(require_jsx_runtime(), 1);
var GridNoRowsOverlay = forwardRef2(function GridNoRowsOverlay2(props, ref) {
  const apiRef = useGridApiContext();
  const noRowsLabel = apiRef.current.getLocaleText("noRowsLabel");
  return (0, import_jsx_runtime107.jsx)(GridOverlay, _extends({}, props, {
    ref,
    children: noRowsLabel
  }));
});
if (true) GridNoRowsOverlay.displayName = "GridNoRowsOverlay";
true ? GridNoRowsOverlay.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  sx: import_prop_types85.default.oneOfType([import_prop_types85.default.arrayOf(import_prop_types85.default.oneOfType([import_prop_types85.default.func, import_prop_types85.default.object, import_prop_types85.default.bool])), import_prop_types85.default.func, import_prop_types85.default.object])
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/GridNoColumnsOverlay.js
init_extends();
var React155 = __toESM(require_react(), 1);
var import_prop_types86 = __toESM(require_prop_types(), 1);
var import_jsx_runtime108 = __toESM(require_jsx_runtime(), 1);
var GridNoColumnsOverlay = forwardRef2(function GridNoColumnsOverlay2(props, ref) {
  var _a;
  const rootProps = useGridRootProps();
  const apiRef = useGridApiContext();
  const columns = useGridSelector(apiRef, gridColumnFieldsSelector);
  const handleOpenManageColumns = () => {
    apiRef.current.showPreferences(GridPreferencePanelsValue.columns);
  };
  const showManageColumnsButton = !rootProps.disableColumnSelector && columns.length > 0;
  return (0, import_jsx_runtime108.jsxs)(GridOverlay, _extends({}, props, {
    ref,
    children: [apiRef.current.getLocaleText("noColumnsOverlayLabel"), showManageColumnsButton && (0, import_jsx_runtime108.jsx)(rootProps.slots.baseButton, _extends({
      size: "small"
    }, (_a = rootProps.slotProps) == null ? void 0 : _a.baseButton, {
      onClick: handleOpenManageColumns,
      children: apiRef.current.getLocaleText("noColumnsOverlayManageColumns")
    }))]
  }));
});
if (true) GridNoColumnsOverlay.displayName = "GridNoColumnsOverlay";
true ? GridNoColumnsOverlay.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  sx: import_prop_types86.default.oneOfType([import_prop_types86.default.arrayOf(import_prop_types86.default.oneOfType([import_prop_types86.default.func, import_prop_types86.default.object, import_prop_types86.default.bool])), import_prop_types86.default.func, import_prop_types86.default.object])
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/GridPagination.js
init_extends();
var React156 = __toESM(require_react(), 1);
var import_prop_types87 = __toESM(require_prop_types(), 1);
var import_jsx_runtime109 = __toESM(require_jsx_runtime(), 1);
var GridPaginationRoot = styled_default(NotRendered)({
  maxHeight: "calc(100% + 1px)",
  // border width
  flexGrow: 1
});
function GridPagination() {
  var _a, _b;
  const apiRef = useGridApiContext();
  const rootProps = useGridRootProps();
  const paginationModel = useGridSelector(apiRef, gridPaginationModelSelector);
  const rowCount = useGridSelector(apiRef, gridPaginationRowCountSelector);
  const pageCount = useGridSelector(apiRef, gridPageCountSelector);
  const {
    paginationMode,
    loading
  } = rootProps;
  const disabled = rowCount === -1 && paginationMode === "server" && loading;
  const lastPage = React156.useMemo(() => Math.max(0, pageCount - 1), [pageCount]);
  const computedPage = React156.useMemo(() => {
    if (rowCount === -1) {
      return paginationModel.page;
    }
    return paginationModel.page <= lastPage ? paginationModel.page : lastPage;
  }, [lastPage, paginationModel.page, rowCount]);
  const handlePageSizeChange = React156.useCallback((pageSize) => {
    apiRef.current.setPageSize(pageSize);
  }, [apiRef]);
  const handlePageChange = React156.useCallback((_, page) => {
    apiRef.current.setPage(page);
  }, [apiRef]);
  const isPageSizeIncludedInPageSizeOptions = (pageSize) => {
    for (let i = 0; i < rootProps.pageSizeOptions.length; i += 1) {
      const option = rootProps.pageSizeOptions[i];
      if (typeof option === "number") {
        if (option === pageSize) {
          return true;
        }
      } else if (option.value === pageSize) {
        return true;
      }
    }
    return false;
  };
  if (true) {
    const warnedOnceMissingInPageSizeOptions = React156.useRef(false);
    const pageSize = ((_a = rootProps.paginationModel) == null ? void 0 : _a.pageSize) ?? paginationModel.pageSize;
    if (!warnedOnceMissingInPageSizeOptions.current && !rootProps.autoPageSize && !isPageSizeIncludedInPageSizeOptions(pageSize)) {
      console.warn([`MUI X: The page size \`${paginationModel.pageSize}\` is not present in the \`pageSizeOptions\`.`, `Add it to show the pagination select.`].join("\n"));
      warnedOnceMissingInPageSizeOptions.current = true;
    }
  }
  const pageSizeOptions = isPageSizeIncludedInPageSizeOptions(paginationModel.pageSize) ? rootProps.pageSizeOptions : [];
  return (0, import_jsx_runtime109.jsx)(GridPaginationRoot, _extends({
    as: rootProps.slots.basePagination,
    count: rowCount,
    page: computedPage,
    rowsPerPageOptions: pageSizeOptions,
    rowsPerPage: paginationModel.pageSize,
    onPageChange: handlePageChange,
    onRowsPerPageChange: handlePageSizeChange,
    disabled
  }, (_b = rootProps.slotProps) == null ? void 0 : _b.basePagination));
}
true ? GridPagination.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  component: import_prop_types87.default.elementType
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/GridRowCount.js
init_extends();
init_objectWithoutPropertiesLoose();
var React157 = __toESM(require_react(), 1);
var import_prop_types88 = __toESM(require_prop_types(), 1);
init_clsx();
var import_jsx_runtime110 = __toESM(require_jsx_runtime(), 1);
var _excluded79 = ["className", "rowCount", "visibleRowCount"];
var useUtilityClasses41 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["rowCount"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var GridRowCountRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "RowCount"
})({
  alignItems: "center",
  display: "flex",
  margin: vars.spacing(0, 2)
});
var GridRowCount = forwardRef2(function GridRowCount2(props, ref) {
  const {
    className,
    rowCount,
    visibleRowCount
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded79);
  const apiRef = useGridApiContext();
  const ownerState = useGridRootProps();
  const classes2 = useUtilityClasses41(ownerState);
  if (rowCount === 0) {
    return null;
  }
  const text = visibleRowCount < rowCount ? apiRef.current.getLocaleText("footerTotalVisibleRows")(visibleRowCount, rowCount) : rowCount.toLocaleString();
  return (0, import_jsx_runtime110.jsxs)(GridRowCountRoot, _extends({
    className: clsx_default(classes2.root, className),
    ownerState
  }, other, {
    ref,
    children: [apiRef.current.getLocaleText("footerTotalRows"), " ", text]
  }));
});
if (true) GridRowCount.displayName = "GridRowCount";
true ? GridRowCount.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  rowCount: import_prop_types88.default.number.isRequired,
  sx: import_prop_types88.default.oneOfType([import_prop_types88.default.arrayOf(import_prop_types88.default.oneOfType([import_prop_types88.default.func, import_prop_types88.default.object, import_prop_types88.default.bool])), import_prop_types88.default.func, import_prop_types88.default.object]),
  visibleRowCount: import_prop_types88.default.number.isRequired
} : void 0;

// node_modules/@mui/x-data-grid/esm/components/GridRow.js
init_extends();
init_objectWithoutPropertiesLoose();
var React158 = __toESM(require_react(), 1);
var import_prop_types89 = __toESM(require_prop_types(), 1);
init_clsx();

// node_modules/@mui/x-data-grid/esm/utils/composeGridClasses.js
function composeGridClasses(classes2, slots) {
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
}

// node_modules/@mui/x-data-grid/esm/hooks/utils/useGridVisibleRows.js
var getVisibleRows = (apiRef, props) => {
  return gridVisibleRowsSelector(apiRef);
};
var useGridVisibleRows = (apiRef, props) => {
  return useGridSelector(apiRef, gridVisibleRowsSelector);
};

// node_modules/@mui/x-data-grid/esm/hooks/features/rowReorder/gridRowReorderSelector.js
var gridRowReorderStateSelector = createRootSelector((state) => state.rowReorder);
var gridIsRowDragActiveSelector = createSelector3(gridRowReorderStateSelector, (rowReorder) => (rowReorder == null ? void 0 : rowReorder.isActive) ?? false);

// node_modules/@mui/x-data-grid/esm/components/GridRow.js
var import_jsx_runtime111 = __toESM(require_jsx_runtime(), 1);
var _excluded80 = ["selected", "rowId", "row", "index", "style", "rowHeight", "className", "visibleColumns", "pinnedColumns", "offsetLeft", "columnsTotalWidth", "firstColumnIndex", "lastColumnIndex", "focusedColumnIndex", "isFirstVisible", "isLastVisible", "isNotVisible", "showBottomBorder", "scrollbarWidth", "gridHasFiller", "onClick", "onDoubleClick", "onMouseEnter", "onMouseLeave", "onMouseOut", "onMouseOver"];
var isRowReorderingEnabledSelector = createSelector3(gridEditRowsStateSelector, (editRows, {
  rowReordering,
  treeData
}) => {
  if (!rowReordering || treeData) {
    return false;
  }
  const isEditingRows = !isObjectEmpty3(editRows);
  return !isEditingRows;
});
var GridRow = forwardRef2(function GridRow2(props, refProp) {
  var _a;
  const {
    selected,
    rowId,
    row,
    index,
    style: styleProp,
    rowHeight,
    className,
    visibleColumns,
    pinnedColumns,
    offsetLeft,
    columnsTotalWidth,
    firstColumnIndex,
    lastColumnIndex,
    focusedColumnIndex,
    isFirstVisible,
    isLastVisible,
    isNotVisible,
    showBottomBorder,
    scrollbarWidth,
    gridHasFiller,
    onClick,
    onDoubleClick,
    onMouseEnter,
    onMouseLeave,
    onMouseOut,
    onMouseOver
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded80);
  const apiRef = useGridPrivateApiContext();
  const configuration2 = useGridConfiguration();
  const ref = React158.useRef(null);
  const rootProps = useGridRootProps();
  const currentPage = useGridVisibleRows(apiRef, rootProps);
  const sortModel = useGridSelector(apiRef, gridSortModelSelector);
  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);
  const rowReordering = rootProps.rowReordering;
  const treeData = rootProps.treeData;
  const isRowReorderingEnabled = useGridSelector(apiRef, isRowReorderingEnabledSelector, {
    rowReordering,
    treeData
  });
  const isRowDragActive = useGridSelector(apiRef, gridIsRowDragActiveSelector);
  const handleRef = useForkRef(ref, refProp);
  const rowNode = gridRowNodeSelector(apiRef, rowId);
  const editing = useGridSelector(apiRef, gridRowIsEditingSelector, {
    rowId,
    editMode: rootProps.editMode
  });
  const editable = rootProps.editMode === GridEditModes.Row;
  const hasFocusCell = focusedColumnIndex !== void 0;
  const hasVirtualFocusCellLeft = hasFocusCell && focusedColumnIndex >= pinnedColumns.left.length && focusedColumnIndex < firstColumnIndex;
  const hasVirtualFocusCellRight = hasFocusCell && focusedColumnIndex < visibleColumns.length - pinnedColumns.right.length && focusedColumnIndex >= lastColumnIndex;
  const classes2 = composeGridClasses(rootProps.classes, {
    root: ["row", selected && "selected", editable && "row--editable", editing && "row--editing", isFirstVisible && "row--firstVisible", isLastVisible && "row--lastVisible", showBottomBorder && "row--borderBottom", rowHeight === "auto" && "row--dynamicHeight"]
  });
  const getRowAriaAttributes = configuration2.hooks.useGridRowAriaAttributes();
  React158.useLayoutEffect(() => {
    if (currentPage.range) {
      const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(rowId);
      if (rowIndex !== void 0) {
        apiRef.current.unstable_setLastMeasuredRowIndex(rowIndex);
      }
    }
    if (ref.current && rowHeight === "auto") {
      return apiRef.current.observeRowHeight(ref.current, rowId);
    }
    return void 0;
  }, [apiRef, currentPage.range, rowHeight, rowId]);
  const publish = React158.useCallback((eventName, propHandler) => (event) => {
    if (isEventTargetInPortal(event)) {
      return;
    }
    if (!apiRef.current.getRow(rowId)) {
      return;
    }
    apiRef.current.publishEvent(eventName, apiRef.current.getRowParams(rowId), event);
    if (propHandler) {
      propHandler(event);
    }
  }, [apiRef, rowId]);
  const publishClick = React158.useCallback((event) => {
    const cell = findParentElementFromClassName(event.target, gridClasses2.cell);
    const field = cell == null ? void 0 : cell.getAttribute("data-field");
    if (field) {
      if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {
        return;
      }
      if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {
        return;
      }
      if (field === "__reorder__") {
        return;
      }
      if (apiRef.current.getCellMode(rowId, field) === GridCellModes.Edit) {
        return;
      }
      const column = apiRef.current.getColumn(field);
      if ((column == null ? void 0 : column.type) === GRID_ACTIONS_COLUMN_TYPE) {
        return;
      }
    }
    publish("rowClick", onClick)(event);
  }, [apiRef, onClick, publish, rowId]);
  const {
    slots,
    slotProps,
    disableColumnReorder
  } = rootProps;
  const heightEntry = useGridSelector(apiRef, () => _extends({}, apiRef.current.getRowHeightEntry(rowId)), void 0, objectShallowCompare);
  const style4 = React158.useMemo(() => {
    if (isNotVisible) {
      return {
        opacity: 0,
        width: 0,
        height: 0
      };
    }
    const rowStyle = _extends({}, styleProp, {
      maxHeight: rowHeight === "auto" ? "none" : rowHeight,
      // max-height doesn't support "auto"
      minHeight: rowHeight,
      "--height": typeof rowHeight === "number" ? `${rowHeight}px` : rowHeight
    });
    if (heightEntry.spacingTop) {
      const property = rootProps.rowSpacingType === "border" ? "borderTopWidth" : "marginTop";
      rowStyle[property] = heightEntry.spacingTop;
    }
    if (heightEntry.spacingBottom) {
      const property = rootProps.rowSpacingType === "border" ? "borderBottomWidth" : "marginBottom";
      let propertyValue = rowStyle[property];
      if (typeof propertyValue !== "number") {
        propertyValue = parseInt(propertyValue || "0", 10);
      }
      propertyValue += heightEntry.spacingBottom;
      rowStyle[property] = propertyValue;
    }
    return rowStyle;
  }, [isNotVisible, rowHeight, styleProp, heightEntry, rootProps.rowSpacingType]);
  if (!rowNode) {
    return null;
  }
  const rowClassNames = apiRef.current.unstable_applyPipeProcessors("rowClassName", [], rowId);
  const ariaAttributes = getRowAriaAttributes(rowNode, index);
  if (typeof rootProps.getRowClassName === "function") {
    const indexRelativeToCurrentPage = index - (((_a = currentPage.range) == null ? void 0 : _a.firstRowIndex) || 0);
    const rowParams = _extends({}, apiRef.current.getRowParams(rowId), {
      isFirstVisible: indexRelativeToCurrentPage === 0,
      isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,
      indexRelativeToCurrentPage
    });
    rowClassNames.push(rootProps.getRowClassName(rowParams));
  }
  const getCell = (column, indexInSection, indexRelativeToAllColumns, sectionLength, pinnedPosition = PinnedColumnPosition.NONE) => {
    const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, indexRelativeToAllColumns);
    if (cellColSpanInfo == null ? void 0 : cellColSpanInfo.spannedByColSpan) {
      return null;
    }
    const width2 = (cellColSpanInfo == null ? void 0 : cellColSpanInfo.cellProps.width) ?? column.computedWidth;
    const colSpan = (cellColSpanInfo == null ? void 0 : cellColSpanInfo.cellProps.colSpan) ?? 1;
    const pinnedOffset = getPinnedCellOffset(pinnedPosition, column.computedWidth, indexRelativeToAllColumns, columnPositions, columnsTotalWidth, scrollbarWidth);
    if (rowNode.type === "skeletonRow") {
      return (0, import_jsx_runtime111.jsx)(slots.skeletonCell, {
        type: column.type,
        width: width2,
        height: rowHeight,
        field: column.field,
        align: column.align
      }, column.field);
    }
    const isReorderCell = column.field === "__reorder__";
    const canReorderColumn = !(disableColumnReorder || column.disableReorder);
    const canReorderRow = isRowReorderingEnabled && !sortModel.length;
    const disableDragEvents = !(canReorderColumn || isReorderCell && canReorderRow || isRowDragActive);
    const cellIsNotVisible = pinnedPosition === PinnedColumnPosition.VIRTUAL;
    const showLeftBorder = shouldCellShowLeftBorder(pinnedPosition, indexInSection);
    const showRightBorder = shouldCellShowRightBorder(pinnedPosition, indexInSection, sectionLength, rootProps.showCellVerticalBorder, gridHasFiller);
    return (0, import_jsx_runtime111.jsx)(slots.cell, _extends({
      column,
      width: width2,
      rowId,
      align: column.align || "left",
      colIndex: indexRelativeToAllColumns,
      colSpan,
      disableDragEvents,
      isNotVisible: cellIsNotVisible,
      pinnedOffset,
      pinnedPosition,
      showLeftBorder,
      showRightBorder,
      row,
      rowNode
    }, slotProps == null ? void 0 : slotProps.cell), column.field);
  };
  if (true) getCell.displayName = "getCell";
  const leftCells = pinnedColumns.left.map((column, i) => {
    const indexRelativeToAllColumns = i;
    return getCell(column, i, indexRelativeToAllColumns, pinnedColumns.left.length, PinnedColumnPosition.LEFT);
  });
  const rightCells = pinnedColumns.right.map((column, i) => {
    const indexRelativeToAllColumns = visibleColumns.length - pinnedColumns.right.length + i;
    return getCell(column, i, indexRelativeToAllColumns, pinnedColumns.right.length, PinnedColumnPosition.RIGHT);
  });
  const middleColumnsLength = visibleColumns.length - pinnedColumns.left.length - pinnedColumns.right.length;
  const cells = [];
  if (hasVirtualFocusCellLeft) {
    cells.push(getCell(visibleColumns[focusedColumnIndex], focusedColumnIndex - pinnedColumns.left.length, focusedColumnIndex, middleColumnsLength, PinnedColumnPosition.VIRTUAL));
  }
  for (let i = firstColumnIndex; i < lastColumnIndex; i += 1) {
    const column = visibleColumns[i];
    const indexInSection = i - pinnedColumns.left.length;
    if (!column) {
      continue;
    }
    cells.push(getCell(column, indexInSection, i, middleColumnsLength));
  }
  if (hasVirtualFocusCellRight) {
    cells.push(getCell(visibleColumns[focusedColumnIndex], focusedColumnIndex - pinnedColumns.left.length, focusedColumnIndex, middleColumnsLength, PinnedColumnPosition.VIRTUAL));
  }
  const eventHandlers = row ? {
    onClick: publishClick,
    onDoubleClick: publish("rowDoubleClick", onDoubleClick),
    onMouseEnter: publish("rowMouseEnter", onMouseEnter),
    onMouseLeave: publish("rowMouseLeave", onMouseLeave),
    onMouseOut: publish("rowMouseOut", onMouseOut),
    onMouseOver: publish("rowMouseOver", onMouseOver)
  } : null;
  return (0, import_jsx_runtime111.jsxs)("div", _extends({
    "data-id": rowId,
    "data-rowindex": index,
    role: "row",
    className: clsx_default(...rowClassNames, classes2.root, className),
    style: style4
  }, ariaAttributes, eventHandlers, other, {
    ref: handleRef,
    children: [leftCells, (0, import_jsx_runtime111.jsx)("div", {
      role: "presentation",
      className: gridClasses2.cellOffsetLeft,
      style: {
        width: offsetLeft
      }
    }), cells, (0, import_jsx_runtime111.jsx)("div", {
      role: "presentation",
      className: clsx_default(gridClasses2.cell, gridClasses2.cellEmpty)
    }), rightCells, scrollbarWidth !== 0 && (0, import_jsx_runtime111.jsx)(GridScrollbarFillerCell, {
      pinnedRight: pinnedColumns.right.length > 0,
      borderTop: !isFirstVisible
    })]
  }));
});
if (true) GridRow.displayName = "GridRow";
true ? GridRow.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  columnsTotalWidth: import_prop_types89.default.number.isRequired,
  firstColumnIndex: import_prop_types89.default.number.isRequired,
  /**
   * Determines which cell has focus.
   * If `null`, no cell in this row has focus.
   */
  focusedColumnIndex: import_prop_types89.default.number,
  gridHasFiller: import_prop_types89.default.bool.isRequired,
  /**
   * Index of the row in the whole sorted and filtered dataset.
   * If some rows above have expanded children, this index also take those children into account.
   */
  index: import_prop_types89.default.number.isRequired,
  isFirstVisible: import_prop_types89.default.bool.isRequired,
  isLastVisible: import_prop_types89.default.bool.isRequired,
  isNotVisible: import_prop_types89.default.bool.isRequired,
  lastColumnIndex: import_prop_types89.default.number.isRequired,
  offsetLeft: import_prop_types89.default.number.isRequired,
  onClick: import_prop_types89.default.func,
  onDoubleClick: import_prop_types89.default.func,
  onMouseEnter: import_prop_types89.default.func,
  onMouseLeave: import_prop_types89.default.func,
  pinnedColumns: import_prop_types89.default.object.isRequired,
  row: import_prop_types89.default.object.isRequired,
  rowHeight: import_prop_types89.default.oneOfType([import_prop_types89.default.oneOf(["auto"]), import_prop_types89.default.number]).isRequired,
  rowId: import_prop_types89.default.oneOfType([import_prop_types89.default.number, import_prop_types89.default.string]).isRequired,
  scrollbarWidth: import_prop_types89.default.number.isRequired,
  selected: import_prop_types89.default.bool.isRequired,
  showBottomBorder: import_prop_types89.default.bool.isRequired,
  visibleColumns: import_prop_types89.default.arrayOf(import_prop_types89.default.object).isRequired
} : void 0;
var MemoizedGridRow = fastMemo(GridRow);

// node_modules/@mui/x-data-grid/esm/hooks/utils/useGridAriaAttributes.js
var useGridAriaAttributes = () => {
  const apiRef = useGridPrivateApiContext();
  const rootProps = useGridRootProps();
  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);
  const accessibleRowCount = useGridSelector(apiRef, gridExpandedRowCountSelector);
  const headerGroupingMaxDepth = useGridSelector(apiRef, gridColumnGroupsHeaderMaxDepthSelector);
  const pinnedRowsCount = useGridSelector(apiRef, gridPinnedRowsCountSelector);
  const ariaLabel = rootProps["aria-label"];
  const ariaLabelledby = rootProps["aria-labelledby"];
  const shouldUseLabelAsAriaLabel = !ariaLabel && !ariaLabelledby && rootProps.label;
  return {
    role: "grid",
    "aria-label": shouldUseLabelAsAriaLabel ? rootProps.label : ariaLabel,
    "aria-labelledby": ariaLabelledby,
    "aria-colcount": visibleColumns.length,
    "aria-rowcount": headerGroupingMaxDepth + 1 + pinnedRowsCount + accessibleRowCount,
    "aria-multiselectable": isMultipleRowSelectionEnabled(rootProps)
  };
};

// node_modules/@mui/x-data-grid/esm/hooks/features/rows/useGridRowAriaAttributes.js
var React159 = __toESM(require_react(), 1);
var useGridRowAriaAttributes = () => {
  const apiRef = useGridPrivateApiContext();
  const headerGroupingMaxDepth = useGridSelector(apiRef, gridColumnGroupsHeaderMaxDepthSelector);
  return React159.useCallback((rowNode, index) => {
    const ariaAttributes = {};
    const ariaRowIndex = index + headerGroupingMaxDepth + 2;
    ariaAttributes["aria-rowindex"] = ariaRowIndex;
    if (rowNode && apiRef.current.isRowSelectable(rowNode.id)) {
      ariaAttributes["aria-selected"] = apiRef.current.isRowSelected(rowNode.id);
    }
    return ariaAttributes;
  }, [apiRef, headerGroupingMaxDepth]);
};

// node_modules/@mui/x-data-grid/esm/hooks/features/rows/useGridRowsOverridableMethods.js
init_extends();
var React160 = __toESM(require_react(), 1);
var useGridRowsOverridableMethods = (apiRef) => {
  const setRowIndex = React160.useCallback((rowId, targetIndex) => {
    const node = gridRowNodeSelector(apiRef, rowId);
    if (!node) {
      throw new Error(`MUI X: No row with id #${rowId} found.`);
    }
    if (node.parent !== GRID_ROOT_GROUP_ID) {
      throw new Error(`MUI X: The row reordering do not support reordering of grouped rows yet.`);
    }
    if (node.type !== "leaf") {
      throw new Error(`MUI X: The row reordering do not support reordering of footer or grouping rows.`);
    }
    apiRef.current.setState((state) => {
      const group = gridRowTreeSelector(apiRef)[GRID_ROOT_GROUP_ID];
      const allRows = group.children;
      const oldIndex = allRows.findIndex((row) => row === rowId);
      if (oldIndex === -1 || oldIndex === targetIndex) {
        return state;
      }
      const updatedRows = [...allRows];
      updatedRows.splice(targetIndex, 0, updatedRows.splice(oldIndex, 1)[0]);
      return _extends({}, state, {
        rows: _extends({}, state.rows, {
          tree: _extends({}, state.rows.tree, {
            [GRID_ROOT_GROUP_ID]: _extends({}, group, {
              children: updatedRows
            })
          })
        })
      });
    });
    apiRef.current.publishEvent("rowsSet");
  }, [apiRef]);
  return {
    setRowIndex
  };
};

// node_modules/@mui/x-data-grid/esm/context/GridContextProvider.js
var React161 = __toESM(require_react(), 1);
var import_jsx_runtime112 = __toESM(require_jsx_runtime(), 1);
function GridContextProvider({
  privateApiRef,
  configuration: configuration2,
  props,
  children
}) {
  const apiRef = React161.useRef(privateApiRef.current.getPublicApi());
  return (0, import_jsx_runtime112.jsx)(GridConfigurationContext.Provider, {
    value: configuration2,
    children: (0, import_jsx_runtime112.jsx)(GridRootPropsContext.Provider, {
      value: props,
      children: (0, import_jsx_runtime112.jsx)(GridPrivateApiContext.Provider, {
        value: privateApiRef,
        children: (0, import_jsx_runtime112.jsx)(GridApiContext.Provider, {
          value: apiRef,
          children: (0, import_jsx_runtime112.jsx)(GridPanelContextProvider, {
            children: (0, import_jsx_runtime112.jsx)(GridCSSVariablesContext, {
              children
            })
          })
        })
      })
    })
  });
}

// node_modules/@mui/x-data-grid/esm/DataGrid/useDataGridComponent.js
var React205 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/esm/hooks/core/useGridRefs.js
var React162 = __toESM(require_react(), 1);
var useGridRefs = (apiRef) => {
  const rootElementRef = React162.useRef(null);
  const mainElementRef = React162.useRef(null);
  const virtualScrollerRef = React162.useRef(null);
  const virtualScrollbarVerticalRef = React162.useRef(null);
  const virtualScrollbarHorizontalRef = React162.useRef(null);
  const columnHeadersContainerRef = React162.useRef(null);
  apiRef.current.register("public", {
    rootElementRef
  });
  apiRef.current.register("private", {
    mainElementRef,
    virtualScrollerRef,
    virtualScrollbarVerticalRef,
    virtualScrollbarHorizontalRef,
    columnHeadersContainerRef
  });
};

// node_modules/@mui/x-data-grid/esm/hooks/core/useGridIsRtl.js
init_extends();
var React163 = __toESM(require_react(), 1);
var useGridIsRtl = (apiRef) => {
  const isRtl = useRtl();
  if (apiRef.current.state.isRtl === void 0) {
    apiRef.current.state.isRtl = isRtl;
  }
  const isFirstEffect = React163.useRef(true);
  React163.useEffect(() => {
    if (isFirstEffect.current) {
      isFirstEffect.current = false;
    } else {
      apiRef.current.setState((state) => _extends({}, state, {
        isRtl
      }));
    }
  }, [apiRef, isRtl]);
};

// node_modules/@mui/x-data-grid/esm/hooks/core/useGridLoggerFactory.js
var React164 = __toESM(require_react(), 1);
var forceDebug = localStorageAvailable() && window.localStorage.getItem("DEBUG") != null;
var noop5 = () => {
};
var noopLogger = {
  debug: noop5,
  info: noop5,
  warn: noop5,
  error: noop5
};
var LOG_LEVELS = ["debug", "info", "warn", "error"];
function getAppender(name, logLevel, appender = console) {
  const minLogLevelIdx = LOG_LEVELS.indexOf(logLevel);
  if (minLogLevelIdx === -1) {
    throw new Error(`MUI X: Log level ${logLevel} not recognized.`);
  }
  const logger = LOG_LEVELS.reduce((loggerObj, method, idx) => {
    if (idx >= minLogLevelIdx) {
      loggerObj[method] = (...args) => {
        const [message, ...other] = args;
        appender[method](`MUI X: ${name} - ${message}`, ...other);
      };
    } else {
      loggerObj[method] = noop5;
    }
    return loggerObj;
  }, {});
  return logger;
}
var useGridLoggerFactory = (apiRef, props) => {
  const getLogger = React164.useCallback((name) => {
    if (forceDebug) {
      return getAppender(name, "debug", props.logger);
    }
    if (!props.logLevel) {
      return noopLogger;
    }
    return getAppender(name, props.logLevel.toString(), props.logger);
  }, [props.logLevel, props.logger]);
  useGridApiMethod(apiRef, {
    getLogger
  }, "private");
};

// node_modules/@mui/x-data-grid/esm/hooks/core/useGridLocaleText.js
var React165 = __toESM(require_react(), 1);
var useGridLocaleText = (apiRef, props) => {
  const getLocaleText = React165.useCallback((key) => {
    if (props.localeText[key] == null) {
      throw new Error(`Missing translation for key ${key}.`);
    }
    return props.localeText[key];
  }, [props.localeText]);
  apiRef.current.register("public", {
    getLocaleText
  });
};

// node_modules/@mui/x-data-grid/esm/hooks/core/pipeProcessing/useGridPipeProcessing.js
init_objectWithoutPropertiesLoose();
var React166 = __toESM(require_react(), 1);
var useGridPipeProcessing = (apiRef) => {
  const cache = React166.useRef({});
  const isRunning = React166.useRef(false);
  const runAppliers = React166.useCallback((groupCache) => {
    if (isRunning.current || !groupCache) {
      return;
    }
    isRunning.current = true;
    Object.values(groupCache.appliers).forEach((callback) => {
      callback();
    });
    isRunning.current = false;
  }, []);
  const registerPipeProcessor = React166.useCallback((group, id, processor) => {
    if (!cache.current[group]) {
      cache.current[group] = {
        processors: /* @__PURE__ */ new Map(),
        processorsAsArray: [],
        appliers: {},
        processorsUpdated: false
      };
    }
    const groupCache = cache.current[group];
    const oldProcessor = groupCache.processors.get(id);
    if (oldProcessor !== processor) {
      groupCache.processors.set(id, processor);
      groupCache.processorsAsArray = Array.from(cache.current[group].processors.values()).filter((processorValue) => processorValue !== null);
      groupCache.processorsUpdated = true;
    }
    return () => {
      cache.current[group].processors.set(id, null);
      cache.current[group].processorsAsArray = Array.from(cache.current[group].processors.values()).filter((processorValue) => processorValue !== null);
    };
  }, []);
  const registerPipeApplier = React166.useCallback((group, id, applier) => {
    if (!cache.current[group]) {
      cache.current[group] = {
        processors: /* @__PURE__ */ new Map(),
        processorsAsArray: [],
        appliers: {},
        processorsUpdated: false
      };
    }
    cache.current[group].appliers[id] = applier;
    return () => {
      const _appliers = cache.current[group].appliers, otherAppliers = _objectWithoutPropertiesLoose(_appliers, [id].map(toPropertyKey));
      cache.current[group].appliers = otherAppliers;
    };
  }, []);
  const requestPipeProcessorsApplication = React166.useCallback((group) => {
    runAppliers(cache.current[group]);
  }, [runAppliers]);
  const runAppliersForPendingProcessors = React166.useCallback(() => {
    for (const group in cache.current) {
      if (!Object.prototype.hasOwnProperty.call(cache.current, group)) {
        continue;
      }
      const groupCache = cache.current[group];
      if (groupCache.processorsUpdated) {
        groupCache.processorsUpdated = false;
        runAppliers(groupCache);
      }
    }
  }, [runAppliers]);
  const applyPipeProcessors = React166.useCallback((...args) => {
    const [group, value, context] = args;
    if (!cache.current[group]) {
      return value;
    }
    const processors = cache.current[group].processorsAsArray;
    let result = value;
    for (let i = 0; i < processors.length; i += 1) {
      result = processors[i](result, context);
    }
    return result;
  }, []);
  const preProcessingPrivateApi = {
    registerPipeProcessor,
    registerPipeApplier,
    requestPipeProcessorsApplication,
    runAppliersForPendingProcessors
  };
  const preProcessingPublicApi = {
    unstable_applyPipeProcessors: applyPipeProcessors
  };
  useGridApiMethod(apiRef, preProcessingPrivateApi, "private");
  useGridApiMethod(apiRef, preProcessingPublicApi, "public");
};

// node_modules/@mui/x-data-grid/esm/hooks/core/pipeProcessing/useGridRegisterPipeProcessor.js
var React167 = __toESM(require_react(), 1);
var useGridRegisterPipeProcessor = (apiRef, group, callback, enabled = true) => {
  const cleanup = React167.useRef(null);
  const id = React167.useRef(`mui-${Math.round(Math.random() * 1e9)}`);
  const registerPreProcessor = React167.useCallback(() => {
    cleanup.current = apiRef.current.registerPipeProcessor(group, id.current, callback);
  }, [apiRef, callback, group]);
  useFirstRender(() => {
    if (enabled) {
      registerPreProcessor();
    }
  });
  const isFirstRender = React167.useRef(true);
  React167.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
    } else if (enabled) {
      registerPreProcessor();
    }
    return () => {
      if (cleanup.current) {
        cleanup.current();
        cleanup.current = null;
      }
    };
  }, [registerPreProcessor, enabled]);
};

// node_modules/@mui/x-data-grid/esm/hooks/core/pipeProcessing/useGridRegisterPipeApplier.js
var React168 = __toESM(require_react(), 1);
var useGridRegisterPipeApplier = (apiRef, group, callback) => {
  const cleanup = React168.useRef(null);
  const id = React168.useRef(`mui-${Math.round(Math.random() * 1e9)}`);
  const registerPreProcessor = React168.useCallback(() => {
    cleanup.current = apiRef.current.registerPipeApplier(group, id.current, callback);
  }, [apiRef, callback, group]);
  useFirstRender(() => {
    registerPreProcessor();
  });
  const isFirstRender = React168.useRef(true);
  React168.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
    } else {
      registerPreProcessor();
    }
    return () => {
      if (cleanup.current) {
        cleanup.current();
        cleanup.current = null;
      }
    };
  }, [registerPreProcessor]);
};

// node_modules/@mui/x-data-grid/esm/hooks/core/strategyProcessing/gridStrategyProcessingApi.js
var GridStrategyGroup = function(GridStrategyGroup2) {
  GridStrategyGroup2["DataSource"] = "dataSource";
  GridStrategyGroup2["RowTree"] = "rowTree";
  return GridStrategyGroup2;
}({});

// node_modules/@mui/x-data-grid/esm/hooks/core/strategyProcessing/useGridRegisterStrategyProcessor.js
var React169 = __toESM(require_react(), 1);
var useGridRegisterStrategyProcessor = (apiRef, strategyName, group, processor) => {
  const registerPreProcessor = React169.useCallback(() => {
    apiRef.current.registerStrategyProcessor(strategyName, group, processor);
  }, [apiRef, processor, group, strategyName]);
  useFirstRender(() => {
    registerPreProcessor();
  });
  const isFirstRender = React169.useRef(true);
  React169.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
    } else {
      registerPreProcessor();
    }
  }, [registerPreProcessor]);
};

// node_modules/@mui/x-data-grid/esm/hooks/core/strategyProcessing/useGridStrategyProcessing.js
init_objectWithoutPropertiesLoose();
var React170 = __toESM(require_react(), 1);
var GRID_DEFAULT_STRATEGY = "none";
var GRID_STRATEGIES_PROCESSORS = {
  dataSourceRowsUpdate: GridStrategyGroup.DataSource,
  rowTreeCreation: GridStrategyGroup.RowTree,
  filtering: GridStrategyGroup.RowTree,
  sorting: GridStrategyGroup.RowTree,
  visibleRowsLookupCreation: GridStrategyGroup.RowTree
};
var useGridStrategyProcessing = (apiRef) => {
  const availableStrategies = React170.useRef(/* @__PURE__ */ new Map());
  const strategiesCache = React170.useRef({});
  const registerStrategyProcessor = React170.useCallback((strategyName, processorName, processor) => {
    const cleanup = () => {
      const _ref = strategiesCache.current[processorName], otherProcessors = _objectWithoutPropertiesLoose(_ref, [strategyName].map(toPropertyKey));
      strategiesCache.current[processorName] = otherProcessors;
    };
    if (!strategiesCache.current[processorName]) {
      strategiesCache.current[processorName] = {};
    }
    const groupPreProcessors = strategiesCache.current[processorName];
    const previousProcessor = groupPreProcessors[strategyName];
    groupPreProcessors[strategyName] = processor;
    if (!previousProcessor || previousProcessor === processor) {
      return cleanup;
    }
    if (strategyName === apiRef.current.getActiveStrategy(GRID_STRATEGIES_PROCESSORS[processorName])) {
      apiRef.current.publishEvent("activeStrategyProcessorChange", processorName);
    }
    return cleanup;
  }, [apiRef]);
  const applyStrategyProcessor = React170.useCallback((processorName, params) => {
    const activeStrategy = apiRef.current.getActiveStrategy(GRID_STRATEGIES_PROCESSORS[processorName]);
    if (activeStrategy == null) {
      throw new Error("Can't apply a strategy processor before defining an active strategy");
    }
    const groupCache = strategiesCache.current[processorName];
    if (!groupCache || !groupCache[activeStrategy]) {
      throw new Error(`No processor found for processor "${processorName}" on strategy "${activeStrategy}"`);
    }
    const processor = groupCache[activeStrategy];
    return processor(params);
  }, [apiRef]);
  const getActiveStrategy = React170.useCallback((strategyGroup) => {
    const strategyEntries = Array.from(availableStrategies.current.entries());
    const availableStrategyEntry = strategyEntries.find(([, strategy]) => {
      if (strategy.group !== strategyGroup) {
        return false;
      }
      return strategy.isAvailable();
    });
    return (availableStrategyEntry == null ? void 0 : availableStrategyEntry[0]) ?? GRID_DEFAULT_STRATEGY;
  }, []);
  const setStrategyAvailability = React170.useCallback((strategyGroup, strategyName, isAvailable) => {
    availableStrategies.current.set(strategyName, {
      group: strategyGroup,
      isAvailable
    });
    apiRef.current.publishEvent("strategyAvailabilityChange");
  }, [apiRef]);
  const strategyProcessingApi = {
    registerStrategyProcessor,
    applyStrategyProcessor,
    getActiveStrategy,
    setStrategyAvailability
  };
  useGridApiMethod(apiRef, strategyProcessingApi, "private");
};

// node_modules/@mui/x-data-grid/esm/hooks/core/useGridStateInitialization.js
init_extends();
var React171 = __toESM(require_react(), 1);
var useGridStateInitialization = (apiRef) => {
  const controlStateMapRef = React171.useRef({});
  const registerControlState = React171.useCallback((controlStateItem) => {
    controlStateMapRef.current[controlStateItem.stateId] = controlStateItem;
  }, []);
  const setState = React171.useCallback((state, reason) => {
    let newState;
    if (isFunction(state)) {
      newState = state(apiRef.current.state);
    } else {
      newState = state;
    }
    if (apiRef.current.state === newState) {
      return false;
    }
    const apiRefWithNewState = {
      current: {
        state: newState
      }
    };
    let ignoreSetState = false;
    const updatedControlStateIds = [];
    Object.keys(controlStateMapRef.current).forEach((stateId) => {
      const controlState = controlStateMapRef.current[stateId];
      const oldSubState = controlState.stateSelector(apiRef);
      const newSubState = controlState.stateSelector(apiRefWithNewState);
      if (newSubState === oldSubState) {
        return;
      }
      updatedControlStateIds.push({
        stateId: controlState.stateId,
        hasPropChanged: newSubState !== controlState.propModel
      });
      if (controlState.propModel !== void 0 && newSubState !== controlState.propModel) {
        ignoreSetState = true;
      }
    });
    if (updatedControlStateIds.length > 1) {
      throw new Error(`You're not allowed to update several sub-state in one transaction. You already updated ${updatedControlStateIds[0].stateId}, therefore, you're not allowed to update ${updatedControlStateIds.map((el) => el.stateId).join(", ")} in the same transaction.`);
    }
    if (!ignoreSetState) {
      apiRef.current.state = newState;
      apiRef.current.publishEvent("stateChange", newState);
      apiRef.current.store.update(newState);
    }
    if (updatedControlStateIds.length === 1) {
      const {
        stateId,
        hasPropChanged
      } = updatedControlStateIds[0];
      const controlState = controlStateMapRef.current[stateId];
      const model = controlState.stateSelector(apiRefWithNewState);
      if (controlState.propOnChange && hasPropChanged) {
        controlState.propOnChange(model, {
          reason,
          api: apiRef.current
        });
      }
      if (!ignoreSetState) {
        apiRef.current.publishEvent(controlState.changeEvent, model, {
          reason
        });
      }
    }
    return !ignoreSetState;
  }, [apiRef]);
  const updateControlState = React171.useCallback((key, state, reason) => {
    return apiRef.current.setState((previousState) => {
      return _extends({}, previousState, {
        [key]: state(previousState[key])
      });
    }, reason);
  }, [apiRef]);
  const publicStateApi = {
    setState
  };
  const privateStateApi = {
    updateControlState,
    registerControlState
  };
  useGridApiMethod(apiRef, publicStateApi, "public");
  useGridApiMethod(apiRef, privateStateApi, "private");
};

// node_modules/@mui/x-data-grid/esm/hooks/core/useGridProps.js
init_extends();
var React172 = __toESM(require_react(), 1);
var propsStateInitializer = (state, props) => {
  return _extends({}, state, {
    props: {
      listView: props.listView,
      getRowId: props.getRowId
    }
  });
};
var useGridProps = (apiRef, props) => {
  React172.useEffect(() => {
    apiRef.current.setState((state) => _extends({}, state, {
      props: {
        listView: props.listView,
        getRowId: props.getRowId
      }
    }));
  }, [apiRef, props.listView, props.getRowId]);
};

// node_modules/@mui/x-data-grid/esm/hooks/core/useGridInitialization.js
var useGridInitialization = (privateApiRef, props) => {
  useGridRefs(privateApiRef);
  useGridProps(privateApiRef, props);
  useGridIsRtl(privateApiRef);
  useGridLoggerFactory(privateApiRef, props);
  useGridStateInitialization(privateApiRef);
  useGridPipeProcessing(privateApiRef);
  useGridStrategyProcessing(privateApiRef);
  useGridLocaleText(privateApiRef, props);
  privateApiRef.current.register("private", {
    rootProps: props
  });
};

// node_modules/@mui/x-data-grid/esm/hooks/core/useGridVirtualizer.js
init_extends();
var React173 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/node_modules/@mui/x-internals/esm/math/index.js
function roundToDecimalPlaces2(value, decimals) {
  return Math.round(value * 10 ** decimals) / 10 ** decimals;
}

// node_modules/@mui/x-data-grid/esm/hooks/features/virtualization/gridFocusedVirtualCellSelector.js
init_extends();
var gridIsFocusedCellOutOfContext = createSelector3(gridFocusCellSelector, gridRenderContextSelector, gridVisibleRowsSelector, gridVisibleColumnDefinitionsSelector, (focusedCell, renderContext, currentPage, visibleColumns) => {
  if (!focusedCell) {
    return false;
  }
  const rowIndex = currentPage.rowIdToIndexMap.get(focusedCell.id);
  const columnIndex = visibleColumns.slice(renderContext.firstColumnIndex, renderContext.lastColumnIndex).findIndex((column) => column.field === focusedCell.field);
  const isInRenderContext = rowIndex !== void 0 && columnIndex !== -1 && rowIndex >= renderContext.firstRowIndex && rowIndex <= renderContext.lastRowIndex;
  return !isInRenderContext;
});
var gridFocusedVirtualCellSelector = createSelectorMemoized2(gridIsFocusedCellOutOfContext, gridVisibleColumnDefinitionsSelector, gridVisibleRowsSelector, gridFocusCellSelector, (isFocusedCellOutOfRenderContext, visibleColumns, currentPage, focusedCell) => {
  if (!isFocusedCellOutOfRenderContext) {
    return null;
  }
  const rowIndex = currentPage.rowIdToIndexMap.get(focusedCell.id);
  if (rowIndex === void 0) {
    return null;
  }
  const columnIndex = visibleColumns.findIndex((column) => column.field === focusedCell.field);
  if (columnIndex === -1) {
    return null;
  }
  return _extends({}, focusedCell, {
    rowIndex,
    columnIndex
  });
});

// node_modules/@mui/x-data-grid/esm/constants/dataGridPropsDefaultValues.js
var DATA_GRID_PROPS_DEFAULT_VALUES = {
  autoHeight: false,
  autoPageSize: false,
  autosizeOnMount: false,
  checkboxSelection: false,
  checkboxSelectionVisibleOnly: false,
  clipboardCopyCellDelimiter: "	",
  columnBufferPx: 150,
  columnFilterDebounceMs: 150,
  columnHeaderHeight: 56,
  disableAutosize: false,
  disableColumnFilter: false,
  disableColumnMenu: false,
  disableColumnReorder: false,
  disableColumnResize: false,
  disableColumnSelector: false,
  disableColumnSorting: false,
  disableDensitySelector: false,
  disableEval: false,
  disableMultipleColumnsFiltering: false,
  disableMultipleColumnsSorting: false,
  disableMultipleRowSelection: false,
  disableRowSelectionOnClick: false,
  disableRowSelectionExcludeModel: false,
  disableVirtualization: false,
  editMode: GridEditModes.Cell,
  filterDebounceMs: 150,
  filterMode: "client",
  hideFooter: false,
  hideFooterPagination: false,
  hideFooterRowCount: false,
  hideFooterSelectedRowCount: false,
  ignoreDiacritics: false,
  ignoreValueFormatterDuringExport: false,
  keepColumnPositionIfDraggedOutside: false,
  keepNonExistentRowsSelected: false,
  loading: false,
  logger: console,
  logLevel: false ? "error" : "warn",
  pageSizeOptions: [25, 50, 100],
  pagination: false,
  paginationMode: "client",
  resizeThrottleMs: 60,
  rowBufferPx: 150,
  rowHeight: 52,
  rows: [],
  rowSelection: true,
  rowSpacingType: "margin",
  rowSpanning: false,
  showCellVerticalBorder: false,
  showColumnVerticalBorder: false,
  showToolbar: false,
  sortingMode: "client",
  sortingOrder: ["asc", "desc", null],
  throttleRowsMs: 0,
  virtualizeColumnsWithAutoRowHeight: false
};

// node_modules/@mui/x-data-grid/esm/hooks/core/useGridVirtualizer.js
var import_jsx_runtime113 = __toESM(require_jsx_runtime(), 1);
function identity(x) {
  return x;
}
var columnsTotalWidthSelector = createSelector3(gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector, (visibleColumns, positions) => {
  const colCount = visibleColumns.length;
  if (colCount === 0) {
    return 0;
  }
  return roundToDecimalPlaces2(positions[colCount - 1] + visibleColumns[colCount - 1].computedWidth, 1);
});
var addGridDimensionsCreator = () => lruMemoize((dimensions, headerHeight, groupHeaderHeight, headerFilterHeight, headersTotalHeight) => {
  return _extends({}, dimensions, {
    headerHeight,
    groupHeaderHeight,
    headerFilterHeight,
    headersTotalHeight
  });
}, {
  maxSize: 1
});
function useGridVirtualizer(apiRef, rootProps) {
  var _a;
  const isRtl = useRtl();
  const {
    listView
  } = rootProps;
  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);
  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);
  const pinnedColumns = gridVisiblePinnedColumnDefinitionsSelector(apiRef);
  const rowSelectionManager = useGridSelector(apiRef, gridRowSelectionManagerSelector);
  const isRowSelected = (id) => rowSelectionManager.has(id) && apiRef.current.isRowSelectable(id);
  const currentPage = useGridVisibleRows(apiRef);
  const hasColSpan = useGridSelector(apiRef, gridHasColSpanSelector);
  const verticalScrollbarWidth = useGridSelector(apiRef, gridVerticalScrollbarWidthSelector);
  const hasFiller = useGridSelector(apiRef, gridHasFillerSelector);
  const {
    autoHeight
  } = rootProps;
  const scrollReset = listView;
  const density = useGridSelector(apiRef, gridDensityFactorSelector);
  const baseRowHeight = getValidRowHeight(rootProps.rowHeight, DATA_GRID_PROPS_DEFAULT_VALUES.rowHeight, rowHeightWarning);
  const rowHeight = Math.floor(baseRowHeight * density);
  const headerHeight = Math.floor(rootProps.columnHeaderHeight * density);
  const groupHeaderHeight = Math.floor((rootProps.columnGroupHeaderHeight ?? rootProps.columnHeaderHeight) * density);
  const headerFilterHeight = Math.floor((rootProps.headerFilterHeight ?? rootProps.columnHeaderHeight) * density);
  const columnsTotalWidth = useGridSelector(apiRef, columnsTotalWidthSelector);
  const headersTotalHeight = getTotalHeaderHeight(apiRef, rootProps);
  const leftPinnedWidth = pinnedColumns.left.reduce((w, col) => w + col.computedWidth, 0);
  const rightPinnedWidth = pinnedColumns.right.reduce((w, col) => w + col.computedWidth, 0);
  const dimensionsParams = {
    rowHeight,
    headerHeight,
    columnsTotalWidth,
    leftPinnedWidth,
    rightPinnedWidth,
    topPinnedHeight: headersTotalHeight,
    bottomPinnedHeight: 0,
    scrollbarSize: rootProps.scrollbarSize
  };
  const addGridDimensions = useLazyRef(addGridDimensionsCreator).current;
  const dataRowCount = useGridSelector(apiRef, gridRowCountSelector);
  const pagination = useGridSelector(apiRef, gridPaginationSelector);
  const rowCount = Math.min(pagination.enabled ? pagination.paginationModel.pageSize : dataRowCount, dataRowCount);
  const {
    getRowHeight,
    getEstimatedRowHeight,
    getRowSpacing
  } = rootProps;
  const focusedVirtualCell = useGridSelector(apiRef, gridFocusedVirtualCellSelector);
  const virtualizer = useVirtualizer({
    refs: {
      container: apiRef.current.mainElementRef,
      scroller: apiRef.current.virtualScrollerRef,
      scrollbarVertical: apiRef.current.virtualScrollbarVerticalRef,
      scrollbarHorizontal: apiRef.current.virtualScrollbarHorizontalRef
    },
    dimensions: dimensionsParams,
    virtualization: {
      isRtl,
      rowBufferPx: rootProps.rowBufferPx,
      columnBufferPx: rootProps.columnBufferPx
    },
    colspan: {
      enabled: hasColSpan,
      getColspan: (rowId, column) => {
        if (typeof column.colSpan === "function") {
          const row = apiRef.current.getRow(rowId);
          const value = apiRef.current.getRowValue(row, column);
          return column.colSpan(value, row, column, apiRef) ?? 0;
        }
        return column.colSpan ?? 1;
      }
    },
    initialState: {
      scroll: (_a = rootProps.initialState) == null ? void 0 : _a.scroll,
      rowSpanning: apiRef.current.state.rowSpanning,
      virtualization: apiRef.current.state.virtualization
    },
    rows: currentPage.rows,
    range: currentPage.range,
    rowCount,
    columns: visibleColumns,
    pinnedRows,
    pinnedColumns,
    autoHeight,
    minimalContentHeight,
    getRowHeight: React173.useMemo(() => {
      if (!getRowHeight) {
        return void 0;
      }
      return (rowEntry) => getRowHeight(_extends({}, rowEntry, {
        densityFactor: density
      }));
    }, [getRowHeight, density]),
    getEstimatedRowHeight: React173.useMemo(() => getEstimatedRowHeight ? (rowEntry) => getEstimatedRowHeight(_extends({}, rowEntry, {
      densityFactor: density
    })) : void 0, [getEstimatedRowHeight, density]),
    getRowSpacing: React173.useMemo(() => getRowSpacing ? (rowEntry) => {
      const indexRelativeToCurrentPage = currentPage.rowIdToIndexMap.get(rowEntry.id) ?? -1;
      const visibility2 = {
        isFirstVisible: indexRelativeToCurrentPage === 0,
        isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,
        indexRelativeToCurrentPage
      };
      return getRowSpacing(_extends({}, rowEntry, visibility2, {
        indexRelativeToCurrentPage: apiRef.current.getRowIndexRelativeToVisibleRows(rowEntry.id)
      }));
    } : void 0, [apiRef, getRowSpacing, currentPage.rows, currentPage.rowIdToIndexMap]),
    applyRowHeight: useEventCallback_default((entry, row) => apiRef.current.unstable_applyPipeProcessors("rowHeight", entry, row)),
    virtualizeColumnsWithAutoRowHeight: rootProps.virtualizeColumnsWithAutoRowHeight,
    focusedVirtualCell: useEventCallback_default(() => focusedVirtualCell),
    resizeThrottleMs: rootProps.resizeThrottleMs,
    onResize: useEventCallback_default((size) => apiRef.current.publishEvent("resize", size)),
    onWheel: useEventCallback_default((event) => {
      apiRef.current.publishEvent("virtualScrollerWheel", {}, event);
    }),
    onTouchMove: useEventCallback_default((event) => {
      apiRef.current.publishEvent("virtualScrollerTouchMove", {}, event);
    }),
    onRenderContextChange: useEventCallback_default((nextRenderContext) => {
      apiRef.current.publishEvent("renderedRowsIntervalChange", nextRenderContext);
    }),
    onScrollChange: (scrollPosition, nextRenderContext) => {
      apiRef.current.publishEvent("scrollPositionChange", {
        top: scrollPosition.top,
        left: scrollPosition.left,
        renderContext: nextRenderContext
      });
    },
    scrollReset,
    renderRow: (params) => {
      var _a2;
      return (0, import_jsx_runtime113.jsx)(rootProps.slots.row, _extends({
        row: params.model,
        rowId: params.id,
        index: params.rowIndex,
        selected: isRowSelected(params.id),
        offsetLeft: params.offsetLeft,
        columnsTotalWidth,
        rowHeight: params.baseRowHeight,
        pinnedColumns,
        visibleColumns,
        firstColumnIndex: params.firstColumnIndex,
        lastColumnIndex: params.lastColumnIndex,
        focusedColumnIndex: params.focusedColumnIndex,
        isFirstVisible: params.isFirstVisible,
        isLastVisible: params.isLastVisible,
        isNotVisible: params.isVirtualFocusRow,
        showBottomBorder: params.showBottomBorder,
        scrollbarWidth: verticalScrollbarWidth,
        gridHasFiller: hasFiller
      }, (_a2 = rootProps.slotProps) == null ? void 0 : _a2.row), params.id);
    },
    renderInfiniteLoadingTrigger: (id) => {
      var _a2, _b;
      return (_b = (_a2 = apiRef.current).getInfiniteLoadingTriggerElement) == null ? void 0 : _b.call(_a2, {
        lastRowId: id
      });
    }
  });
  useFirstRender(() => {
    apiRef.current.store.state.dimensions = addGridDimensions(virtualizer.store.state.dimensions, headerHeight, groupHeaderHeight, headerFilterHeight, headersTotalHeight);
    apiRef.current.store.state.rowsMeta = virtualizer.store.state.rowsMeta;
    apiRef.current.store.state.virtualization = virtualizer.store.state.virtualization;
  });
  useStoreEffect(virtualizer.store, Dimensions.selectors.dimensions, (_, dimensions) => {
    apiRef.current.setState((gridState) => _extends({}, gridState, {
      dimensions: addGridDimensions(dimensions, headerHeight, groupHeaderHeight, headerFilterHeight, headersTotalHeight)
    }));
  });
  useStoreEffect(virtualizer.store, identity, (_, state) => {
    if (state.rowsMeta !== apiRef.current.state.rowsMeta) {
      apiRef.current.setState((gridState) => _extends({}, gridState, {
        rowsMeta: state.rowsMeta
      }));
    }
    if (state.virtualization !== apiRef.current.state.virtualization) {
      apiRef.current.setState((gridState) => _extends({}, gridState, {
        virtualization: state.virtualization
      }));
    }
  });
  apiRef.current.register("private", {
    virtualizer
  });
}

// node_modules/@mui/x-data-grid/esm/hooks/utils/useGridInitializeState.js
var React174 = __toESM(require_react(), 1);
var useGridInitializeState = (initializer, privateApiRef, props, key) => {
  const previousKey = React174.useRef(key);
  const isInitialized = React174.useRef(false);
  if (key !== previousKey.current) {
    isInitialized.current = false;
    previousKey.current = key;
  }
  if (!isInitialized.current) {
    privateApiRef.current.state = initializer(privateApiRef.current.state, props, privateApiRef);
    isInitialized.current = true;
  }
};

// node_modules/@mui/x-data-grid/esm/hooks/features/clipboard/useGridClipboard.js
var React175 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/esm/hooks/features/export/serializers/csvSerializer.js
function sanitizeCellValue(value, csvOptions) {
  if (value === null || value === void 0) {
    return "";
  }
  const valueStr = typeof value === "string" ? value : `${value}`;
  if (csvOptions.shouldAppendQuotes || csvOptions.escapeFormulas) {
    const escapedValue = valueStr.replace(/"/g, '""');
    if (csvOptions.escapeFormulas) {
      if (["=", "+", "-", "@", "	", "\r"].includes(escapedValue[0])) {
        return `"'${escapedValue}"`;
      }
    }
    if ([csvOptions.delimiter, "\n", "\r", '"'].some((delimiter) => valueStr.includes(delimiter))) {
      return `"${escapedValue}"`;
    }
    return escapedValue;
  }
  return valueStr;
}
var serializeCellValue = (cellParams, options) => {
  var _a, _b;
  const {
    csvOptions,
    ignoreValueFormatter
  } = options;
  let value;
  if (ignoreValueFormatter) {
    const columnType = cellParams.colDef.type;
    if (columnType === "number") {
      value = String(cellParams.value);
    } else if (columnType === "date" || columnType === "dateTime") {
      value = (_a = cellParams.value) == null ? void 0 : _a.toISOString();
    } else if (typeof ((_b = cellParams.value) == null ? void 0 : _b.toString) === "function") {
      value = cellParams.value.toString();
    } else {
      value = cellParams.value;
    }
  } else {
    value = cellParams.formattedValue;
  }
  return sanitizeCellValue(value, csvOptions);
};
var CSVRow = class {
  constructor(options) {
    __publicField(this, "rowString", "");
    __publicField(this, "isEmpty", true);
    this.options = options;
  }
  addValue(value) {
    if (!this.isEmpty) {
      this.rowString += this.options.csvOptions.delimiter;
    }
    if (typeof this.options.sanitizeCellValue === "function") {
      this.rowString += this.options.sanitizeCellValue(value, this.options.csvOptions);
    } else {
      this.rowString += value;
    }
    this.isEmpty = false;
  }
  getRowString() {
    return this.rowString;
  }
};
var serializeRow = ({
  id,
  columns,
  getCellParams,
  csvOptions,
  ignoreValueFormatter
}) => {
  const row = new CSVRow({
    csvOptions
  });
  columns.forEach((column) => {
    const cellParams = getCellParams(id, column.field);
    if (true) {
      if (String(cellParams.formattedValue) === "[object Object]") {
        warnOnce(["MUI X: When the value of a field is an object or a `renderCell` is provided, the CSV export might not display the value correctly.", "You can provide a `valueFormatter` with a string representation to be used."]);
      }
    }
    row.addValue(serializeCellValue(cellParams, {
      ignoreValueFormatter,
      csvOptions
    }));
  });
  return row.getRowString();
};
function buildCSV(options) {
  const {
    columns,
    rowIds,
    csvOptions,
    ignoreValueFormatter,
    apiRef
  } = options;
  const CSVBody = rowIds.reduce((acc, id) => `${acc}${serializeRow({
    id,
    columns,
    getCellParams: apiRef.current.getCellParams,
    ignoreValueFormatter,
    csvOptions
  })}\r
`, "").trim();
  if (!csvOptions.includeHeaders) {
    return CSVBody;
  }
  const filteredColumns = columns.filter((column) => column.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field);
  const headerRows = [];
  if (csvOptions.includeColumnGroupsHeaders) {
    const columnGroupLookup = apiRef.current.getAllGroupDetails();
    let maxColumnGroupsDepth = 0;
    const columnGroupPathsLookup = filteredColumns.reduce((acc, column) => {
      const columnGroupPath = apiRef.current.getColumnGroupPath(column.field);
      acc[column.field] = columnGroupPath;
      maxColumnGroupsDepth = Math.max(maxColumnGroupsDepth, columnGroupPath.length);
      return acc;
    }, {});
    for (let i = 0; i < maxColumnGroupsDepth; i += 1) {
      const headerGroupRow = new CSVRow({
        csvOptions,
        sanitizeCellValue
      });
      headerRows.push(headerGroupRow);
      filteredColumns.forEach((column) => {
        const columnGroupId = (columnGroupPathsLookup[column.field] || [])[i];
        const columnGroup = columnGroupLookup[columnGroupId];
        headerGroupRow.addValue(columnGroup ? columnGroup.headerName || columnGroup.groupId : "");
      });
    }
  }
  const mainHeaderRow = new CSVRow({
    csvOptions,
    sanitizeCellValue
  });
  filteredColumns.forEach((column) => {
    mainHeaderRow.addValue(column.headerName || column.field);
  });
  headerRows.push(mainHeaderRow);
  const CSVHead = `${headerRows.map((row) => row.getRowString()).join("\r\n")}\r
`;
  return `${CSVHead}${CSVBody}`.trim();
}

// node_modules/@mui/x-data-grid/esm/hooks/features/clipboard/useGridClipboard.js
function writeToClipboardPolyfill(data) {
  const span = document.createElement("span");
  span.style.whiteSpace = "pre";
  span.style.userSelect = "all";
  span.style.opacity = "0px";
  span.textContent = data;
  document.body.appendChild(span);
  const range = document.createRange();
  range.selectNode(span);
  const selection = window.getSelection();
  selection.removeAllRanges();
  selection.addRange(range);
  try {
    document.execCommand("copy");
  } finally {
    document.body.removeChild(span);
  }
}
function copyToClipboard(data) {
  if (navigator.clipboard) {
    navigator.clipboard.writeText(data).catch(() => {
      writeToClipboardPolyfill(data);
    });
  } else {
    writeToClipboardPolyfill(data);
  }
}
function hasNativeSelection(element) {
  var _a;
  if ((_a = window.getSelection()) == null ? void 0 : _a.toString()) {
    return true;
  }
  if (element && (element.selectionEnd || 0) - (element.selectionStart || 0) > 0) {
    return true;
  }
  return false;
}
var useGridClipboard = (apiRef, props) => {
  const ignoreValueFormatterProp = props.ignoreValueFormatterDuringExport;
  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === "object" ? ignoreValueFormatterProp == null ? void 0 : ignoreValueFormatterProp.clipboardExport : ignoreValueFormatterProp) || false;
  const clipboardCopyCellDelimiter = props.clipboardCopyCellDelimiter;
  const handleCopy = React175.useCallback((event) => {
    if (!isCopyShortcut(event)) {
      return;
    }
    if (hasNativeSelection(event.target)) {
      return;
    }
    let textToCopy = "";
    const selectedRowsCount = gridRowSelectionCountSelector(apiRef);
    if (selectedRowsCount > 0) {
      textToCopy = apiRef.current.getDataAsCsv({
        includeHeaders: false,
        delimiter: clipboardCopyCellDelimiter,
        shouldAppendQuotes: false,
        escapeFormulas: false
      });
    } else {
      const focusedCell = gridFocusCellSelector(apiRef);
      if (focusedCell) {
        const cellParams = apiRef.current.getCellParams(focusedCell.id, focusedCell.field);
        textToCopy = serializeCellValue(cellParams, {
          csvOptions: {
            delimiter: clipboardCopyCellDelimiter,
            shouldAppendQuotes: false,
            escapeFormulas: false
          },
          ignoreValueFormatter
        });
      }
    }
    textToCopy = apiRef.current.unstable_applyPipeProcessors("clipboardCopy", textToCopy);
    if (textToCopy) {
      copyToClipboard(textToCopy);
      apiRef.current.publishEvent("clipboardCopy", textToCopy);
    }
  }, [apiRef, ignoreValueFormatter, clipboardCopyCellDelimiter]);
  useGridNativeEventListener(apiRef, () => apiRef.current.rootElementRef.current, "keydown", handleCopy);
  useGridEventPriority(apiRef, "clipboardCopy", props.onClipboardCopy);
};

// node_modules/@mui/x-data-grid/esm/hooks/features/columnMenu/useGridColumnMenu.js
init_extends();
var React176 = __toESM(require_react(), 1);
var columnMenuStateInitializer = (state) => _extends({}, state, {
  columnMenu: {
    open: false
  }
});
var useGridColumnMenu = (apiRef) => {
  const logger = useGridLogger(apiRef, "useGridColumnMenu");
  const showColumnMenu = React176.useCallback((field) => {
    const columnMenuState = gridColumnMenuSelector(apiRef);
    const newState = {
      open: true,
      field
    };
    const shouldUpdate = newState.open !== columnMenuState.open || newState.field !== columnMenuState.field;
    if (shouldUpdate) {
      apiRef.current.setState((state) => {
        if (state.columnMenu.open && state.columnMenu.field === field) {
          return state;
        }
        logger.debug("Opening Column Menu");
        return _extends({}, state, {
          columnMenu: {
            open: true,
            field
          }
        });
      });
      apiRef.current.hidePreferences();
    }
  }, [apiRef, logger]);
  const hideColumnMenu = React176.useCallback(() => {
    const columnMenuState = gridColumnMenuSelector(apiRef);
    if (columnMenuState.field) {
      const columnLookup = gridColumnLookupSelector(apiRef);
      const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);
      const orderedFields = gridColumnFieldsSelector(apiRef);
      let fieldToFocus = columnMenuState.field;
      if (!columnLookup[fieldToFocus]) {
        fieldToFocus = orderedFields[0];
      }
      if (columnVisibilityModel[fieldToFocus] === false) {
        const visibleOrderedFields = orderedFields.filter((field) => {
          if (field === fieldToFocus) {
            return true;
          }
          return columnVisibilityModel[field] !== false;
        });
        const fieldIndex = visibleOrderedFields.indexOf(fieldToFocus);
        fieldToFocus = visibleOrderedFields[fieldIndex + 1] || visibleOrderedFields[fieldIndex - 1];
      }
      apiRef.current.setColumnHeaderFocus(fieldToFocus);
    }
    const newState = {
      open: false,
      field: void 0
    };
    const shouldUpdate = newState.open !== columnMenuState.open || newState.field !== columnMenuState.field;
    if (shouldUpdate) {
      apiRef.current.setState((state) => {
        logger.debug("Hiding Column Menu");
        return _extends({}, state, {
          columnMenu: newState
        });
      });
    }
  }, [apiRef, logger]);
  const toggleColumnMenu = React176.useCallback((field) => {
    logger.debug("Toggle Column Menu");
    const columnMenu = gridColumnMenuSelector(apiRef);
    if (!columnMenu.open || columnMenu.field !== field) {
      showColumnMenu(field);
    } else {
      hideColumnMenu();
    }
  }, [apiRef, logger, showColumnMenu, hideColumnMenu]);
  const columnMenuApi = {
    showColumnMenu,
    hideColumnMenu,
    toggleColumnMenu
  };
  useGridApiMethod(apiRef, columnMenuApi, "public");
  useGridEvent(apiRef, "columnResizeStart", hideColumnMenu);
  useGridEvent(apiRef, "virtualScrollerWheel", apiRef.current.hideColumnMenu);
  useGridEvent(apiRef, "virtualScrollerTouchMove", apiRef.current.hideColumnMenu);
};

// node_modules/@mui/x-data-grid/esm/hooks/features/columns/useGridColumns.js
init_extends();
var React177 = __toESM(require_react(), 1);
var import_jsx_runtime114 = __toESM(require_jsx_runtime(), 1);
var columnsStateInitializer = (state, props, apiRef) => {
  var _a, _b, _c;
  apiRef.current.caches.columns = {
    lastColumnsProp: props.columns
  };
  const columnsState = createColumnsState({
    apiRef,
    columnsToUpsert: props.columns,
    initialState: (_a = props.initialState) == null ? void 0 : _a.columns,
    columnVisibilityModel: props.columnVisibilityModel ?? ((_c = (_b = props.initialState) == null ? void 0 : _b.columns) == null ? void 0 : _c.columnVisibilityModel) ?? {},
    keepOnlyColumnsToUpsert: true
  });
  return _extends({}, state, {
    columns: columnsState,
    // In pro/premium, this part of the state is defined. We give it an empty but defined value
    // for the community version.
    pinnedColumns: state.pinnedColumns ?? EMPTY_PINNED_COLUMN_FIELDS
  });
};
function useGridColumns(apiRef, props) {
  var _a, _b;
  const logger = useGridLogger(apiRef, "useGridColumns");
  apiRef.current.registerControlState({
    stateId: "visibleColumns",
    propModel: props.columnVisibilityModel,
    propOnChange: props.onColumnVisibilityModelChange,
    stateSelector: gridColumnVisibilityModelSelector,
    changeEvent: "columnVisibilityModelChange"
  });
  const setGridColumnsState = React177.useCallback((columnsState) => {
    logger.debug("Updating columns state.");
    apiRef.current.setState(mergeColumnsState(columnsState));
    apiRef.current.publishEvent("columnsChange", columnsState.orderedFields);
  }, [logger, apiRef]);
  const getColumn = React177.useCallback((field) => gridColumnLookupSelector(apiRef)[field], [apiRef]);
  const getAllColumns = React177.useCallback(() => gridColumnDefinitionsSelector(apiRef), [apiRef]);
  const getVisibleColumns = React177.useCallback(() => gridVisibleColumnDefinitionsSelector(apiRef), [apiRef]);
  const getColumnIndex = React177.useCallback((field, useVisibleColumns = true) => {
    const columns = useVisibleColumns ? gridVisibleColumnDefinitionsSelector(apiRef) : gridColumnDefinitionsSelector(apiRef);
    return columns.findIndex((col) => col.field === field);
  }, [apiRef]);
  const getColumnPosition = React177.useCallback((field) => {
    const index = getColumnIndex(field);
    return gridColumnPositionsSelector(apiRef)[index];
  }, [apiRef, getColumnIndex]);
  const setColumnVisibilityModel = React177.useCallback((model) => {
    var _a2, _b2;
    const currentModel = gridColumnVisibilityModelSelector(apiRef);
    if (currentModel !== model) {
      apiRef.current.setState((state) => _extends({}, state, {
        columns: createColumnsState({
          apiRef,
          columnsToUpsert: [],
          initialState: void 0,
          columnVisibilityModel: model,
          keepOnlyColumnsToUpsert: false
        })
      }));
      (_b2 = (_a2 = apiRef.current).updateRenderContext) == null ? void 0 : _b2.call(_a2);
    }
  }, [apiRef]);
  const updateColumns = React177.useCallback((columns) => {
    let columnsToUpdate = columns;
    if (gridPivotActiveSelector(apiRef)) {
      const nonPivotColumns = [];
      const pivotColumns = [];
      const pivotInitialColumns = gridPivotInitialColumnsSelector(apiRef);
      columns.forEach((column) => {
        const isNonPivotColumn = pivotInitialColumns.has(column.field);
        if (isNonPivotColumn) {
          nonPivotColumns.push(column);
        } else {
          pivotColumns.push(column);
        }
      });
      if (nonPivotColumns.length > 0) {
        apiRef.current.updateNonPivotColumns(nonPivotColumns);
      }
      if (pivotColumns.length === 0) {
        return;
      }
      columnsToUpdate = pivotColumns;
    }
    const columnsState = createColumnsState({
      apiRef,
      columnsToUpsert: columnsToUpdate,
      initialState: void 0,
      keepOnlyColumnsToUpsert: false,
      updateInitialVisibilityModel: true
    });
    setGridColumnsState(columnsState);
  }, [apiRef, setGridColumnsState]);
  const setColumnVisibility = React177.useCallback((field, isVisible) => {
    const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);
    const isCurrentlyVisible = columnVisibilityModel[field] ?? true;
    if (isVisible !== isCurrentlyVisible) {
      const newModel = _extends({}, columnVisibilityModel, {
        [field]: isVisible
      });
      apiRef.current.setColumnVisibilityModel(newModel);
    }
  }, [apiRef]);
  const getColumnIndexRelativeToVisibleColumns = React177.useCallback((field) => {
    const allColumns = gridColumnFieldsSelector(apiRef);
    return allColumns.findIndex((col) => col === field);
  }, [apiRef]);
  const setColumnIndex = React177.useCallback((field, targetIndexPosition) => {
    const allColumns = gridColumnFieldsSelector(apiRef);
    const oldIndexPosition = getColumnIndexRelativeToVisibleColumns(field);
    if (oldIndexPosition === targetIndexPosition) {
      return;
    }
    logger.debug(`Moving column ${field} to index ${targetIndexPosition}`);
    const updatedColumns = [...allColumns];
    const fieldRemoved = updatedColumns.splice(oldIndexPosition, 1)[0];
    updatedColumns.splice(targetIndexPosition, 0, fieldRemoved);
    setGridColumnsState(_extends({}, gridColumnsStateSelector(apiRef), {
      orderedFields: updatedColumns
    }));
    const params = {
      column: apiRef.current.getColumn(field),
      targetIndex: apiRef.current.getColumnIndexRelativeToVisibleColumns(field),
      oldIndex: oldIndexPosition
    };
    apiRef.current.publishEvent("columnIndexChange", params);
  }, [apiRef, logger, setGridColumnsState, getColumnIndexRelativeToVisibleColumns]);
  const setColumnWidth = React177.useCallback((field, width2) => {
    logger.debug(`Updating column ${field} width to ${width2}`);
    const columnsState = gridColumnsStateSelector(apiRef);
    const column = columnsState.lookup[field];
    const newColumn = _extends({}, column, {
      width: width2,
      hasBeenResized: true
    });
    setGridColumnsState(hydrateColumnsWidth(_extends({}, columnsState, {
      lookup: _extends({}, columnsState.lookup, {
        [field]: newColumn
      })
    }), apiRef.current.getRootDimensions()));
    apiRef.current.publishEvent("columnWidthChange", {
      element: apiRef.current.getColumnHeaderElement(field),
      colDef: newColumn,
      width: width2
    });
  }, [apiRef, logger, setGridColumnsState]);
  const columnApi = {
    getColumn,
    getAllColumns,
    getColumnIndex,
    getColumnPosition,
    getVisibleColumns,
    getColumnIndexRelativeToVisibleColumns,
    updateColumns,
    setColumnVisibilityModel,
    setColumnVisibility,
    setColumnWidth
  };
  const columnReorderApi = {
    setColumnIndex
  };
  useGridApiMethod(apiRef, columnApi, "public");
  useGridApiMethod(apiRef, columnReorderApi, props.signature === GridSignature.DataGrid ? "private" : "public");
  const stateExportPreProcessing = React177.useCallback((prevState, context) => {
    var _a2, _b2;
    const columnsStateToExport = {};
    const columnVisibilityModelToExport = gridColumnVisibilityModelSelector(apiRef);
    const shouldExportColumnVisibilityModel = (
      // Always export if the `exportOnlyDirtyModels` property is not activated
      !context.exportOnlyDirtyModels || // Always export if the model is controlled
      props.columnVisibilityModel != null || // Always export if the model has been initialized
      // TODO v6 Do a nullish check instead to export even if the initial model equals "{}"
      Object.keys(((_b2 = (_a2 = props.initialState) == null ? void 0 : _a2.columns) == null ? void 0 : _b2.columnVisibilityModel) ?? {}).length > 0 || // Always export if the model is not empty
      Object.keys(columnVisibilityModelToExport).length > 0
    );
    if (shouldExportColumnVisibilityModel) {
      columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;
    }
    columnsStateToExport.orderedFields = gridColumnFieldsSelector(apiRef);
    const columns = gridColumnDefinitionsSelector(apiRef);
    const dimensions = {};
    columns.forEach((colDef) => {
      if (colDef.hasBeenResized) {
        const colDefDimensions = {};
        COLUMNS_DIMENSION_PROPERTIES.forEach((propertyName) => {
          let propertyValue = colDef[propertyName];
          if (propertyValue === Infinity) {
            propertyValue = -1;
          }
          colDefDimensions[propertyName] = propertyValue;
        });
        dimensions[colDef.field] = colDefDimensions;
      }
    });
    if (Object.keys(dimensions).length > 0) {
      columnsStateToExport.dimensions = dimensions;
    }
    return _extends({}, prevState, {
      columns: columnsStateToExport
    });
  }, [apiRef, props.columnVisibilityModel, (_a = props.initialState) == null ? void 0 : _a.columns]);
  const stateRestorePreProcessing = React177.useCallback((params, context) => {
    const initialState = context.stateToRestore.columns;
    const columnVisibilityModelToImport = initialState == null ? void 0 : initialState.columnVisibilityModel;
    if (initialState == null) {
      return params;
    }
    const columnsState = createColumnsState({
      apiRef,
      columnsToUpsert: [],
      initialState,
      columnVisibilityModel: columnVisibilityModelToImport,
      keepOnlyColumnsToUpsert: false
    });
    if (initialState != null) {
      apiRef.current.setState((prevState) => _extends({}, prevState, {
        columns: _extends({}, prevState.columns, {
          lookup: columnsState.lookup,
          orderedFields: columnsState.orderedFields,
          initialColumnVisibilityModel: columnsState.initialColumnVisibilityModel
        })
      }));
    }
    if (columnVisibilityModelToImport != null) {
      apiRef.current.setState((prevState) => _extends({}, prevState, {
        columns: _extends({}, prevState.columns, {
          columnVisibilityModel: columnVisibilityModelToImport
        })
      }));
    }
    if (initialState != null) {
      apiRef.current.publishEvent("columnsChange", columnsState.orderedFields);
    }
    return params;
  }, [apiRef]);
  const preferencePanelPreProcessing = React177.useCallback((initialValue, value) => {
    var _a2;
    if (value === GridPreferencePanelsValue.columns) {
      const ColumnsPanel = props.slots.columnsPanel;
      return (0, import_jsx_runtime114.jsx)(ColumnsPanel, _extends({}, (_a2 = props.slotProps) == null ? void 0 : _a2.columnsPanel));
    }
    return initialValue;
  }, [props.slots.columnsPanel, (_b = props.slotProps) == null ? void 0 : _b.columnsPanel]);
  const addColumnMenuItems = React177.useCallback((columnMenuItems) => {
    const isPivotActive = gridPivotActiveSelector(apiRef);
    if (props.disableColumnSelector || isPivotActive) {
      return columnMenuItems;
    }
    return [...columnMenuItems, "columnMenuColumnsItem"];
  }, [props.disableColumnSelector, apiRef]);
  useGridRegisterPipeProcessor(apiRef, "columnMenu", addColumnMenuItems);
  useGridRegisterPipeProcessor(apiRef, "exportState", stateExportPreProcessing);
  useGridRegisterPipeProcessor(apiRef, "restoreState", stateRestorePreProcessing);
  useGridRegisterPipeProcessor(apiRef, "preferencePanel", preferencePanelPreProcessing);
  const prevInnerWidth = React177.useRef(null);
  const handleGridSizeChange = (size) => {
    if (prevInnerWidth.current !== size.width) {
      prevInnerWidth.current = size.width;
      const hasFlexColumns = gridVisibleColumnDefinitionsSelector(apiRef).some((col) => col.flex && col.flex > 0);
      if (!hasFlexColumns) {
        return;
      }
      setGridColumnsState(hydrateColumnsWidth(gridColumnsStateSelector(apiRef), apiRef.current.getRootDimensions()));
    }
  };
  useGridEvent(apiRef, "viewportInnerSizeChange", handleGridSizeChange);
  const hydrateColumns = React177.useCallback(() => {
    logger.info(`Columns pipe processing have changed, regenerating the columns`);
    const columnsState = createColumnsState({
      apiRef,
      columnsToUpsert: [],
      initialState: void 0,
      keepOnlyColumnsToUpsert: false
    });
    setGridColumnsState(columnsState);
  }, [apiRef, logger, setGridColumnsState]);
  useGridRegisterPipeApplier(apiRef, "hydrateColumns", hydrateColumns);
  React177.useEffect(() => {
    if (apiRef.current.caches.columns.lastColumnsProp === props.columns) {
      return;
    }
    apiRef.current.caches.columns.lastColumnsProp = props.columns;
    logger.info(`GridColumns have changed, new length ${props.columns.length}`);
    const columnsState = createColumnsState({
      apiRef,
      initialState: void 0,
      // If the user provides a model, we don't want to set it in the state here because it has it's dedicated `useEffect` which calls `setColumnVisibilityModel`
      columnsToUpsert: props.columns,
      keepOnlyColumnsToUpsert: true,
      updateInitialVisibilityModel: true,
      columnVisibilityModel: props.columnVisibilityModel
    });
    setGridColumnsState(columnsState);
  }, [logger, apiRef, setGridColumnsState, props.columns, props.columnVisibilityModel]);
  React177.useEffect(() => {
    if (props.columnVisibilityModel !== void 0) {
      apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel);
    }
  }, [apiRef, logger, props.columnVisibilityModel]);
}
function mergeColumnsState(columnsState) {
  return (state) => _extends({}, state, {
    columns: columnsState
  });
}

// node_modules/@mui/x-data-grid/esm/hooks/features/density/useGridDensity.js
init_extends();
var React178 = __toESM(require_react(), 1);
var densityStateInitializer = (state, props) => {
  var _a;
  return _extends({}, state, {
    density: ((_a = props.initialState) == null ? void 0 : _a.density) ?? props.density ?? "standard"
  });
};
var useGridDensity = (apiRef, props) => {
  var _a;
  const logger = useGridLogger(apiRef, "useDensity");
  apiRef.current.registerControlState({
    stateId: "density",
    propModel: props.density,
    propOnChange: props.onDensityChange,
    stateSelector: gridDensitySelector,
    changeEvent: "densityChange"
  });
  const setDensity = useEventCallback_default((newDensity) => {
    const currentDensity = gridDensitySelector(apiRef);
    if (currentDensity === newDensity) {
      return;
    }
    logger.debug(`Set grid density to ${newDensity}`);
    apiRef.current.setState((state) => _extends({}, state, {
      density: newDensity
    }));
  });
  const densityApi = {
    setDensity
  };
  useGridApiMethod(apiRef, densityApi, "public");
  const stateExportPreProcessing = React178.useCallback((prevState, context) => {
    var _a2;
    const exportedDensity = gridDensitySelector(apiRef);
    const shouldExportRowCount = (
      // Always export if the `exportOnlyDirtyModels` property is not activated
      !context.exportOnlyDirtyModels || // Always export if the `density` is controlled
      props.density != null || // Always export if the `density` has been initialized
      ((_a2 = props.initialState) == null ? void 0 : _a2.density) != null
    );
    if (!shouldExportRowCount) {
      return prevState;
    }
    return _extends({}, prevState, {
      density: exportedDensity
    });
  }, [apiRef, props.density, (_a = props.initialState) == null ? void 0 : _a.density]);
  const stateRestorePreProcessing = React178.useCallback((params, context) => {
    var _a2;
    const restoredDensity = ((_a2 = context.stateToRestore) == null ? void 0 : _a2.density) ? context.stateToRestore.density : gridDensitySelector(apiRef);
    apiRef.current.setState((state) => _extends({}, state, {
      density: restoredDensity
    }));
    return params;
  }, [apiRef]);
  useGridRegisterPipeProcessor(apiRef, "exportState", stateExportPreProcessing);
  useGridRegisterPipeProcessor(apiRef, "restoreState", stateRestorePreProcessing);
  React178.useEffect(() => {
    if (props.density) {
      apiRef.current.setDensity(props.density);
    }
  }, [apiRef, props.density]);
};

// node_modules/@mui/x-data-grid/esm/hooks/features/export/useGridCsvExport.js
var React179 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/esm/utils/exportAs.js
function exportAs(blob, extension = "csv", filename = document.title || "untitled") {
  const fullName = `${filename}.${extension}`;
  if ("download" in HTMLAnchorElement.prototype) {
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = fullName;
    a.click();
    setTimeout(() => {
      URL.revokeObjectURL(url);
    });
    return;
  }
  throw new Error("MUI X: exportAs not supported.");
}

// node_modules/@mui/x-data-grid/esm/hooks/features/export/utils.js
var getColumnsToExport = ({
  apiRef,
  options
}) => {
  const columns = gridColumnDefinitionsSelector(apiRef);
  if (options.fields) {
    return options.fields.reduce((currentColumns, field) => {
      const column = columns.find((col) => col.field === field);
      if (column) {
        currentColumns.push(column);
      }
      return currentColumns;
    }, []);
  }
  const validColumns = options.allColumns ? columns : gridVisibleColumnDefinitionsSelector(apiRef);
  return validColumns.filter((column) => column.disableExport !== true);
};
var defaultGetRowsToExport = ({
  apiRef
}) => {
  var _a, _b;
  const filteredSortedRowIds = gridFilteredSortedRowIdsSelector(apiRef);
  const rowTree = gridRowTreeSelector(apiRef);
  const selectedRowsCount = gridRowSelectionCountSelector(apiRef);
  const bodyRows = filteredSortedRowIds.filter((id) => rowTree[id].type !== "footer");
  const pinnedRows = gridPinnedRowsSelector(apiRef);
  const topPinnedRowsIds = ((_a = pinnedRows == null ? void 0 : pinnedRows.top) == null ? void 0 : _a.map((row) => row.id)) || [];
  const bottomPinnedRowsIds = ((_b = pinnedRows == null ? void 0 : pinnedRows.bottom) == null ? void 0 : _b.map((row) => row.id)) || [];
  bodyRows.unshift(...topPinnedRowsIds);
  bodyRows.push(...bottomPinnedRowsIds);
  if (selectedRowsCount > 0) {
    const selectedRows = gridRowSelectionIdsSelector(apiRef);
    return bodyRows.filter((id) => selectedRows.has(id));
  }
  return bodyRows;
};

// node_modules/@mui/x-data-grid/esm/hooks/features/export/useGridCsvExport.js
var import_jsx_runtime115 = __toESM(require_jsx_runtime(), 1);
var useGridCsvExport = (apiRef, props) => {
  const logger = useGridLogger(apiRef, "useGridCsvExport");
  const ignoreValueFormatterProp = props.ignoreValueFormatterDuringExport;
  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === "object" ? ignoreValueFormatterProp == null ? void 0 : ignoreValueFormatterProp.csvExport : ignoreValueFormatterProp) || false;
  const getDataAsCsv = React179.useCallback((options = {}) => {
    logger.debug(`Get data as CSV`);
    const exportedColumns = getColumnsToExport({
      apiRef,
      options
    });
    const getRowsToExport = options.getRowsToExport ?? defaultGetRowsToExport;
    const exportedRowIds = getRowsToExport({
      apiRef
    });
    return buildCSV({
      columns: exportedColumns,
      rowIds: exportedRowIds,
      csvOptions: {
        delimiter: options.delimiter || ",",
        shouldAppendQuotes: options.shouldAppendQuotes ?? true,
        includeHeaders: options.includeHeaders ?? true,
        includeColumnGroupsHeaders: options.includeColumnGroupsHeaders ?? true,
        escapeFormulas: options.escapeFormulas ?? true
      },
      ignoreValueFormatter,
      apiRef
    });
  }, [logger, apiRef, ignoreValueFormatter]);
  const exportDataAsCsv = React179.useCallback((options) => {
    logger.debug(`Export data as CSV`);
    const csv = getDataAsCsv(options);
    const blob = new Blob([(options == null ? void 0 : options.utf8WithBom) ? new Uint8Array([239, 187, 191]) : "", csv], {
      type: "text/csv"
    });
    exportAs(blob, "csv", options == null ? void 0 : options.fileName);
  }, [logger, getDataAsCsv]);
  const csvExportApi = {
    getDataAsCsv,
    exportDataAsCsv
  };
  useGridApiMethod(apiRef, csvExportApi, "public");
  const addExportMenuButtons = React179.useCallback((initialValue, options) => {
    var _a;
    if ((_a = options.csvOptions) == null ? void 0 : _a.disableToolbarButton) {
      return initialValue;
    }
    return [...initialValue, {
      component: (0, import_jsx_runtime115.jsx)(GridCsvExportMenuItem, {
        options: options.csvOptions
      }),
      componentName: "csvExport"
    }];
  }, []);
  useGridRegisterPipeProcessor(apiRef, "exportMenu", addExportMenuButtons);
};

// node_modules/@mui/x-data-grid/esm/hooks/features/export/useGridPrintExport.js
init_extends();
var React181 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/node_modules/@mui/x-internals/esm/export/loadStyleSheets.js
function loadStyleSheets(document2, root) {
  const stylesheetLoadPromises = [];
  const headStyleElements = root.querySelectorAll("style, link[rel='stylesheet']");
  for (let i = 0; i < headStyleElements.length; i += 1) {
    const node = headStyleElements[i];
    if (node.tagName === "STYLE") {
      const newHeadStyleElements = document2.createElement(node.tagName);
      const sheet = node.sheet;
      if (sheet) {
        let styleCSS = "";
        for (let j = 0; j < sheet.cssRules.length; j += 1) {
          if (typeof sheet.cssRules[j].cssText === "string") {
            styleCSS += `${sheet.cssRules[j].cssText}\r
`;
          }
        }
        newHeadStyleElements.appendChild(document2.createTextNode(styleCSS));
        document2.head.appendChild(newHeadStyleElements);
      }
    } else if (node.getAttribute("href")) {
      const newHeadStyleElements = document2.createElement(node.tagName);
      for (let j = 0; j < node.attributes.length; j += 1) {
        const attr = node.attributes[j];
        if (attr) {
          newHeadStyleElements.setAttribute(attr.nodeName, attr.nodeValue || "");
        }
      }
      stylesheetLoadPromises.push(new Promise((resolve) => {
        newHeadStyleElements.addEventListener("load", () => resolve());
      }));
      document2.head.appendChild(newHeadStyleElements);
    }
  }
  return stylesheetLoadPromises;
}

// node_modules/@mui/x-data-grid/esm/hooks/features/pagination/useGridPaginationModel.js
init_extends();
var React180 = __toESM(require_react(), 1);
var getDerivedPaginationModel = (paginationState, signature, paginationModelProp) => {
  let paginationModel = paginationState.paginationModel;
  const rowCount = paginationState.rowCount;
  const pageSize = (paginationModelProp == null ? void 0 : paginationModelProp.pageSize) ?? paginationModel.pageSize;
  const page = (paginationModelProp == null ? void 0 : paginationModelProp.page) ?? paginationModel.page;
  const pageCount = getPageCount(rowCount, pageSize, page);
  if (paginationModelProp && ((paginationModelProp == null ? void 0 : paginationModelProp.page) !== paginationModel.page || (paginationModelProp == null ? void 0 : paginationModelProp.pageSize) !== paginationModel.pageSize)) {
    paginationModel = paginationModelProp;
  }
  const validPage = pageSize === -1 ? 0 : getValidPage(paginationModel.page, pageCount);
  if (validPage !== paginationModel.page) {
    paginationModel = _extends({}, paginationModel, {
      page: validPage
    });
  }
  throwIfPageSizeExceedsTheLimit(paginationModel.pageSize, signature);
  return paginationModel;
};
var useGridPaginationModel = (apiRef, props) => {
  var _a, _b;
  const logger = useGridLogger(apiRef, "useGridPaginationModel");
  const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);
  const previousFilterModel = React180.useRef(gridFilterModelSelector(apiRef));
  const rowHeight = Math.floor(props.rowHeight * densityFactor);
  apiRef.current.registerControlState({
    stateId: "paginationModel",
    propModel: props.paginationModel,
    propOnChange: props.onPaginationModelChange,
    stateSelector: gridPaginationModelSelector,
    changeEvent: "paginationModelChange"
  });
  const setPage = React180.useCallback((page) => {
    const currentModel = gridPaginationModelSelector(apiRef);
    if (page === currentModel.page) {
      return;
    }
    logger.debug(`Setting page to ${page}`);
    apiRef.current.setPaginationModel({
      page,
      pageSize: currentModel.pageSize
    });
  }, [apiRef, logger]);
  const setPageSize = React180.useCallback((pageSize) => {
    const currentModel = gridPaginationModelSelector(apiRef);
    if (pageSize === currentModel.pageSize) {
      return;
    }
    logger.debug(`Setting page size to ${pageSize}`);
    apiRef.current.setPaginationModel({
      pageSize,
      page: currentModel.page
    });
  }, [apiRef, logger]);
  const setPaginationModel = React180.useCallback((paginationModel) => {
    const currentModel = gridPaginationModelSelector(apiRef);
    if (paginationModel === currentModel) {
      return;
    }
    logger.debug("Setting 'paginationModel' to", paginationModel);
    apiRef.current.setState((state) => _extends({}, state, {
      pagination: _extends({}, state.pagination, {
        paginationModel: getDerivedPaginationModel(state.pagination, props.signature, paginationModel)
      })
    }), "setPaginationModel");
  }, [apiRef, logger, props.signature]);
  const paginationModelApi = {
    setPage,
    setPageSize,
    setPaginationModel
  };
  useGridApiMethod(apiRef, paginationModelApi, "public");
  const stateExportPreProcessing = React180.useCallback((prevState, context) => {
    var _a2, _b2;
    const paginationModel = gridPaginationModelSelector(apiRef);
    const shouldExportPaginationModel = (
      // Always export if the `exportOnlyDirtyModels` property is not activated
      !context.exportOnlyDirtyModels || // Always export if the `paginationModel` is controlled
      props.paginationModel != null || // Always export if the `paginationModel` has been initialized
      ((_b2 = (_a2 = props.initialState) == null ? void 0 : _a2.pagination) == null ? void 0 : _b2.paginationModel) != null || // Export if `page` or `pageSize` is not equal to the default value
      paginationModel.page !== 0 && paginationModel.pageSize !== defaultPageSize(props.autoPageSize)
    );
    if (!shouldExportPaginationModel) {
      return prevState;
    }
    return _extends({}, prevState, {
      pagination: _extends({}, prevState.pagination, {
        paginationModel
      })
    });
  }, [apiRef, props.paginationModel, (_b = (_a = props.initialState) == null ? void 0 : _a.pagination) == null ? void 0 : _b.paginationModel, props.autoPageSize]);
  const stateRestorePreProcessing = React180.useCallback((params, context) => {
    var _a2, _b2;
    const paginationModel = ((_a2 = context.stateToRestore.pagination) == null ? void 0 : _a2.paginationModel) ? _extends({}, getDefaultGridPaginationModel(props.autoPageSize), (_b2 = context.stateToRestore.pagination) == null ? void 0 : _b2.paginationModel) : gridPaginationModelSelector(apiRef);
    apiRef.current.setState((state) => _extends({}, state, {
      pagination: _extends({}, state.pagination, {
        paginationModel: getDerivedPaginationModel(state.pagination, props.signature, paginationModel)
      })
    }), "stateRestorePreProcessing");
    return params;
  }, [apiRef, props.autoPageSize, props.signature]);
  useGridRegisterPipeProcessor(apiRef, "exportState", stateExportPreProcessing);
  useGridRegisterPipeProcessor(apiRef, "restoreState", stateRestorePreProcessing);
  const handlePaginationModelChange = () => {
    var _a2;
    const paginationModel = gridPaginationModelSelector(apiRef);
    if ((_a2 = apiRef.current.virtualScrollerRef) == null ? void 0 : _a2.current) {
      apiRef.current.scrollToIndexes({
        rowIndex: paginationModel.page * paginationModel.pageSize
      });
    }
  };
  const handleUpdateAutoPageSize = React180.useCallback(() => {
    if (!props.autoPageSize) {
      return;
    }
    const dimensions = apiRef.current.getRootDimensions();
    const maximumPageSizeWithoutScrollBar = Math.max(1, Math.floor(dimensions.viewportInnerSize.height / rowHeight));
    apiRef.current.setPageSize(maximumPageSizeWithoutScrollBar);
  }, [apiRef, props.autoPageSize, rowHeight]);
  const handleRowCountChange = React180.useCallback((newRowCount) => {
    if (newRowCount == null) {
      return;
    }
    const paginationModel = gridPaginationModelSelector(apiRef);
    if (paginationModel.page === 0) {
      return;
    }
    const pageCount = gridPageCountSelector(apiRef);
    if (paginationModel.page > pageCount - 1) {
      apiRef.current.setPage(Math.max(0, pageCount - 1));
    }
  }, [apiRef]);
  const navigateToStart = React180.useCallback(() => {
    const paginationModel = gridPaginationModelSelector(apiRef);
    if (paginationModel.page !== 0) {
      apiRef.current.setPage(0);
    }
    const scrollPosition = apiRef.current.getScrollPosition();
    if (scrollPosition.top !== 0) {
      apiRef.current.scroll({
        top: 0
      });
    }
  }, [apiRef]);
  const handleFilterModelChange = React180.useCallback((filterModel) => {
    const currentActiveFilters = _extends({}, filterModel, {
      // replace items with the active items
      items: gridFilterActiveItemsSelector(apiRef)
    });
    if (isDeepEqual2(currentActiveFilters, previousFilterModel.current)) {
      return;
    }
    previousFilterModel.current = currentActiveFilters;
    navigateToStart();
  }, [apiRef, navigateToStart]);
  useGridEvent(apiRef, "viewportInnerSizeChange", handleUpdateAutoPageSize);
  useGridEvent(apiRef, "paginationModelChange", handlePaginationModelChange);
  useGridEvent(apiRef, "rowCountChange", handleRowCountChange);
  useGridEvent(apiRef, "sortModelChange", navigateToStart);
  useGridEvent(apiRef, "filterModelChange", handleFilterModelChange);
  const isFirstRender = React180.useRef(true);
  React180.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return;
    }
    if (!props.pagination) {
      return;
    }
    apiRef.current.setState((state) => _extends({}, state, {
      pagination: _extends({}, state.pagination, {
        paginationModel: getDerivedPaginationModel(state.pagination, props.signature, props.paginationModel)
      })
    }));
  }, [apiRef, props.paginationModel, props.signature, props.pagination]);
  React180.useEffect(() => {
    apiRef.current.setState((state) => {
      const isEnabled = props.pagination === true;
      if (state.pagination.paginationMode === props.paginationMode && state.pagination.enabled === isEnabled) {
        return state;
      }
      return _extends({}, state, {
        pagination: _extends({}, state.pagination, {
          paginationMode: props.paginationMode,
          enabled: isEnabled
        })
      });
    });
  }, [apiRef, props.paginationMode, props.pagination]);
  React180.useEffect(handleUpdateAutoPageSize, [handleUpdateAutoPageSize]);
};

// node_modules/@mui/x-data-grid/esm/hooks/features/export/useGridPrintExport.js
var import_jsx_runtime116 = __toESM(require_jsx_runtime(), 1);
function raf() {
  return new Promise((resolve) => {
    requestAnimationFrame(() => {
      resolve();
    });
  });
}
function buildPrintWindow(title) {
  const iframeEl = document.createElement("iframe");
  iframeEl.style.position = "absolute";
  iframeEl.style.width = "0px";
  iframeEl.style.height = "0px";
  iframeEl.title = title || document.title;
  return iframeEl;
}
var useGridPrintExport = (apiRef, props) => {
  const hasRootReference = apiRef.current.rootElementRef.current !== null;
  const logger = useGridLogger(apiRef, "useGridPrintExport");
  const doc = React181.useRef(null);
  const previousGridState = React181.useRef(null);
  const previousColumnVisibility = React181.useRef({});
  const previousRows = React181.useRef([]);
  const previousVirtualizationState = React181.useRef(null);
  React181.useEffect(() => {
    doc.current = ownerDocument2(apiRef.current.rootElementRef.current);
  }, [apiRef, hasRootReference]);
  const updateGridColumnsForPrint = React181.useCallback((fields, allColumns, includeCheckboxes) => new Promise((resolve) => {
    const exportedColumnFields = getColumnsToExport({
      apiRef,
      options: {
        fields,
        allColumns
      }
    }).map((column) => column.field);
    const columns = gridColumnDefinitionsSelector(apiRef);
    const newColumnVisibilityModel = {};
    columns.forEach((column) => {
      newColumnVisibilityModel[column.field] = exportedColumnFields.includes(column.field);
    });
    if (includeCheckboxes) {
      newColumnVisibilityModel[GRID_CHECKBOX_SELECTION_COL_DEF.field] = true;
    }
    apiRef.current.setColumnVisibilityModel(newColumnVisibilityModel);
    resolve();
  }), [apiRef]);
  const updateGridRowsForPrint = React181.useCallback((getRowsToExport) => {
    const rowsToExportIds = getRowsToExport({
      apiRef
    });
    const newRows = rowsToExportIds.reduce((acc, id) => {
      const row = apiRef.current.getRow(id);
      if (!row[GRID_ID_AUTOGENERATED]) {
        acc.push(row);
      }
      return acc;
    }, []);
    apiRef.current.setRows(newRows);
  }, [apiRef]);
  const handlePrintWindowLoad = React181.useCallback((printWindow, options) => {
    var _a, _b, _c;
    const normalizeOptions = _extends({
      copyStyles: true,
      hideToolbar: false,
      hideFooter: false,
      includeCheckboxes: false
    }, options);
    const printDoc = printWindow.contentDocument;
    if (!printDoc) {
      return;
    }
    const rowsMeta = gridRowsMetaSelector(apiRef);
    const gridRootElement = apiRef.current.rootElementRef.current;
    const gridClone = gridRootElement.cloneNode(true);
    const gridMain = gridClone.querySelector(`.${gridClasses2.main}`);
    gridMain.style.overflow = "visible";
    gridClone.style.contain = "size";
    let gridToolbarElementHeight = ((_a = gridRootElement.querySelector(`.${gridClasses2.toolbar}`)) == null ? void 0 : _a.offsetHeight) || 0;
    let gridFooterElementHeight = ((_b = gridRootElement.querySelector(`.${gridClasses2.footerContainer}`)) == null ? void 0 : _b.offsetHeight) || 0;
    const gridFooterElement = gridClone.querySelector(`.${gridClasses2.footerContainer}`);
    if (normalizeOptions.hideToolbar) {
      (_c = gridClone.querySelector(`.${gridClasses2.toolbar}`)) == null ? void 0 : _c.remove();
      gridToolbarElementHeight = 0;
    }
    if (normalizeOptions.hideFooter && gridFooterElement) {
      gridFooterElement.remove();
      gridFooterElementHeight = 0;
    }
    const computedTotalHeight = rowsMeta.currentPageTotalHeight + getTotalHeaderHeight(apiRef, props) + gridToolbarElementHeight + gridFooterElementHeight;
    gridClone.style.height = `${computedTotalHeight}px`;
    gridClone.style.boxSizing = "content-box";
    if (!normalizeOptions.hideFooter && gridFooterElement) {
      gridFooterElement.style.position = "absolute";
      gridFooterElement.style.width = "100%";
      gridFooterElement.style.top = `${computedTotalHeight - gridFooterElementHeight}px`;
    }
    const container = document.createElement("div");
    container.appendChild(gridClone);
    printDoc.body.style.marginTop = "0px";
    printDoc.body.innerHTML = container.innerHTML;
    const defaultPageStyle = typeof normalizeOptions.pageStyle === "function" ? normalizeOptions.pageStyle() : normalizeOptions.pageStyle;
    if (typeof defaultPageStyle === "string") {
      const styleElement = printDoc.createElement("style");
      styleElement.appendChild(printDoc.createTextNode(defaultPageStyle));
      printDoc.head.appendChild(styleElement);
    }
    if (normalizeOptions.bodyClassName) {
      printDoc.body.classList.add(...normalizeOptions.bodyClassName.split(" "));
    }
    let stylesheetLoadPromises = [];
    if (normalizeOptions.copyStyles) {
      const rootCandidate = gridRootElement.getRootNode();
      const root = rootCandidate.constructor.name === "ShadowRoot" ? rootCandidate : doc.current;
      stylesheetLoadPromises = loadStyleSheets(printDoc, root);
    }
    if (true) {
      Promise.all(stylesheetLoadPromises).then(() => {
        printWindow.contentWindow.print();
      });
    }
  }, [apiRef, doc, props]);
  const handlePrintWindowAfterPrint = React181.useCallback((printWindow) => {
    var _a, _b;
    doc.current.body.removeChild(printWindow);
    apiRef.current.restoreState(previousGridState.current || {});
    if (!((_b = (_a = previousGridState.current) == null ? void 0 : _a.columns) == null ? void 0 : _b.columnVisibilityModel)) {
      apiRef.current.setColumnVisibilityModel(previousColumnVisibility.current);
    }
    apiRef.current.setState((state) => _extends({}, state, {
      virtualization: previousVirtualizationState.current
    }));
    apiRef.current.setRows(previousRows.current);
    previousGridState.current = null;
    previousColumnVisibility.current = {};
    previousRows.current = [];
  }, [apiRef]);
  const exportDataAsPrint = React181.useCallback(async (options) => {
    logger.debug(`Export data as Print`);
    if (!apiRef.current.rootElementRef.current) {
      throw new Error("MUI X: No grid root element available.");
    }
    previousGridState.current = apiRef.current.exportState();
    previousColumnVisibility.current = gridColumnVisibilityModelSelector(apiRef);
    previousRows.current = apiRef.current.getSortedRows().filter((row) => !row[GRID_ID_AUTOGENERATED]);
    if (props.pagination) {
      const visibleRowCount = gridExpandedRowCountSelector(apiRef);
      const paginationModel = {
        page: 0,
        pageSize: visibleRowCount
      };
      apiRef.current.setState((state) => _extends({}, state, {
        pagination: _extends({}, state.pagination, {
          paginationModel: getDerivedPaginationModel(
            state.pagination,
            // Using signature `DataGridPro` to allow more than 100 rows in the print export
            "DataGridPro",
            paginationModel
          )
        })
      }));
    }
    previousVirtualizationState.current = apiRef.current.state.virtualization;
    apiRef.current.unstable_setVirtualization(false);
    await updateGridColumnsForPrint(options == null ? void 0 : options.fields, options == null ? void 0 : options.allColumns, options == null ? void 0 : options.includeCheckboxes);
    updateGridRowsForPrint((options == null ? void 0 : options.getRowsToExport) ?? defaultGetRowsToExport);
    await raf();
    const printWindow = buildPrintWindow(options == null ? void 0 : options.fileName);
    if (false) {
      doc.current.body.appendChild(printWindow);
      handlePrintWindowLoad(printWindow, options);
      handlePrintWindowAfterPrint(printWindow);
    } else {
      printWindow.onload = () => {
        handlePrintWindowLoad(printWindow, options);
        const mediaQueryList = printWindow.contentWindow.matchMedia("print");
        mediaQueryList.addEventListener("change", (mql) => {
          const isAfterPrint = mql.matches === false;
          if (isAfterPrint) {
            handlePrintWindowAfterPrint(printWindow);
          }
        });
      };
      doc.current.body.appendChild(printWindow);
    }
  }, [props, logger, apiRef, handlePrintWindowLoad, handlePrintWindowAfterPrint, updateGridColumnsForPrint, updateGridRowsForPrint]);
  const printExportApi = {
    exportDataAsPrint
  };
  useGridApiMethod(apiRef, printExportApi, "public");
  const addExportMenuButtons = React181.useCallback((initialValue, options) => {
    var _a;
    if ((_a = options.printOptions) == null ? void 0 : _a.disableToolbarButton) {
      return initialValue;
    }
    return [...initialValue, {
      component: (0, import_jsx_runtime116.jsx)(GridPrintExportMenuItem, {
        options: options.printOptions
      }),
      componentName: "printExport"
    }];
  }, []);
  useGridRegisterPipeProcessor(apiRef, "exportMenu", addExportMenuButtons);
};

// node_modules/@mui/x-data-grid/esm/hooks/features/filter/useGridFilter.js
init_extends();
var React182 = __toESM(require_react(), 1);
var import_jsx_runtime117 = __toESM(require_jsx_runtime(), 1);
var filterStateInitializer = (state, props, apiRef) => {
  var _a, _b;
  const filterModel = props.filterModel ?? ((_b = (_a = props.initialState) == null ? void 0 : _a.filter) == null ? void 0 : _b.filterModel) ?? getDefaultGridFilterModel();
  return _extends({}, state, {
    filter: _extends({
      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef)
    }, defaultGridFilterLookup),
    visibleRowsLookup: {}
  });
};
var getVisibleRowsLookup = (params) => {
  return params.filteredRowsLookup;
};
function getVisibleRowsLookupState(apiRef, state) {
  return apiRef.current.applyStrategyProcessor("visibleRowsLookupCreation", {
    tree: state.rows.tree,
    filteredRowsLookup: state.filter.filteredRowsLookup
  });
}
function createMemoizedValues() {
  return lruMemoize(Object.values);
}
var useGridFilter = (apiRef, props, configuration2) => {
  var _a, _b, _c;
  const logger = useGridLogger(apiRef, "useGridFilter");
  apiRef.current.registerControlState({
    stateId: "filter",
    propModel: props.filterModel,
    propOnChange: props.onFilterModelChange,
    stateSelector: gridFilterModelSelector,
    changeEvent: "filterModelChange"
  });
  const updateFilteredRows = React182.useCallback(() => {
    apiRef.current.setState((state) => {
      const filterModel = gridFilterModelSelector(apiRef);
      const filterState = apiRef.current.getFilterState(filterModel);
      const newState = _extends({}, state, {
        filter: _extends({}, state.filter, filterState)
      });
      const visibleRowsLookupState = getVisibleRowsLookupState(apiRef, newState);
      return _extends({}, newState, {
        visibleRowsLookup: visibleRowsLookupState
      });
    });
    apiRef.current.publishEvent("filteredRowsSet");
  }, [apiRef]);
  const addColumnMenuItem = React182.useCallback((columnMenuItems, colDef) => {
    if (colDef == null || colDef.filterable === false || props.disableColumnFilter) {
      return columnMenuItems;
    }
    return [...columnMenuItems, "columnMenuFilterItem"];
  }, [props.disableColumnFilter]);
  const upsertFilterItem = React182.useCallback((item) => {
    const filterModel = gridFilterModelSelector(apiRef);
    const items = [...filterModel.items];
    const itemIndex = items.findIndex((filterItem) => filterItem.id === item.id);
    if (itemIndex === -1) {
      items.push(item);
    } else {
      items[itemIndex] = item;
    }
    apiRef.current.setFilterModel(_extends({}, filterModel, {
      items
    }), "upsertFilterItem");
  }, [apiRef]);
  const upsertFilterItems = React182.useCallback((items) => {
    const filterModel = gridFilterModelSelector(apiRef);
    const existingItems = [...filterModel.items];
    items.forEach((item) => {
      const itemIndex = existingItems.findIndex((filterItem) => filterItem.id === item.id);
      if (itemIndex === -1) {
        existingItems.push(item);
      } else {
        existingItems[itemIndex] = item;
      }
    });
    apiRef.current.setFilterModel(_extends({}, filterModel, {
      items: existingItems
    }), "upsertFilterItems");
  }, [apiRef]);
  const deleteFilterItem = React182.useCallback((itemToDelete) => {
    const filterModel = gridFilterModelSelector(apiRef);
    const items = filterModel.items.filter((item) => item.id !== itemToDelete.id);
    if (items.length === filterModel.items.length) {
      return;
    }
    apiRef.current.setFilterModel(_extends({}, filterModel, {
      items
    }), "deleteFilterItem");
  }, [apiRef]);
  const showFilterPanel = React182.useCallback((targetColumnField, panelId, labelId) => {
    logger.debug("Displaying filter panel");
    if (targetColumnField) {
      const filterModel = gridFilterModelSelector(apiRef);
      const filterItemsWithValue = filterModel.items.filter((item) => {
        var _a2;
        if (item.value !== void 0) {
          if (Array.isArray(item.value) && item.value.length === 0) {
            return false;
          }
          return true;
        }
        const column = apiRef.current.getColumn(item.field);
        const filterOperator = (_a2 = column.filterOperators) == null ? void 0 : _a2.find((operator) => operator.value === item.operator);
        const requiresFilterValue = typeof (filterOperator == null ? void 0 : filterOperator.requiresFilterValue) === "undefined" ? true : filterOperator == null ? void 0 : filterOperator.requiresFilterValue;
        if (requiresFilterValue) {
          return false;
        }
        return true;
      });
      let newFilterItems;
      const filterItemOnTarget = filterItemsWithValue.find((item) => item.field === targetColumnField);
      const targetColumn = apiRef.current.getColumn(targetColumnField);
      if (filterItemOnTarget) {
        newFilterItems = filterItemsWithValue;
      } else if (props.disableMultipleColumnsFiltering) {
        newFilterItems = [cleanFilterItem({
          field: targetColumnField,
          operator: targetColumn.filterOperators[0].value
        }, apiRef)];
      } else {
        newFilterItems = [...filterItemsWithValue, cleanFilterItem({
          field: targetColumnField,
          operator: targetColumn.filterOperators[0].value
        }, apiRef)];
      }
      apiRef.current.setFilterModel(_extends({}, filterModel, {
        items: newFilterItems
      }));
    }
    apiRef.current.showPreferences(GridPreferencePanelsValue.filters, panelId, labelId);
  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);
  const hideFilterPanel = React182.useCallback(() => {
    logger.debug("Hiding filter panel");
    apiRef.current.hidePreferences();
  }, [apiRef, logger]);
  const setFilterLogicOperator = React182.useCallback((logicOperator) => {
    const filterModel = gridFilterModelSelector(apiRef);
    if (filterModel.logicOperator === logicOperator) {
      return;
    }
    apiRef.current.setFilterModel(_extends({}, filterModel, {
      logicOperator
    }), "changeLogicOperator");
  }, [apiRef]);
  const setQuickFilterValues = React182.useCallback((values3) => {
    const filterModel = gridFilterModelSelector(apiRef);
    if (isDeepEqual2(filterModel.quickFilterValues, values3)) {
      return;
    }
    apiRef.current.setFilterModel(_extends({}, filterModel, {
      quickFilterValues: [...values3]
    }));
  }, [apiRef]);
  const setFilterModel = React182.useCallback((model, reason) => {
    const currentModel = gridFilterModelSelector(apiRef);
    if (currentModel !== model) {
      logger.debug("Setting filter model");
      apiRef.current.updateControlState("filter", mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef), reason);
      apiRef.current.unstable_applyFilters();
    }
  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);
  const getFilterState = React182.useCallback((inputFilterModel) => {
    const filterModel = sanitizeFilterModel(inputFilterModel, props.disableMultipleColumnsFiltering, apiRef);
    const filterValueGetter = configuration2.hooks.useFilterValueGetter(apiRef, props);
    const isRowMatchingFilters = props.filterMode === "client" ? buildAggregatedFilterApplier(filterModel, filterValueGetter, apiRef, props.disableEval) : null;
    const filterResult = apiRef.current.applyStrategyProcessor("filtering", {
      isRowMatchingFilters,
      filterModel: filterModel ?? getDefaultGridFilterModel(),
      filterValueGetter
    });
    return _extends({}, filterResult, {
      filterModel
    });
  }, [apiRef, configuration2.hooks, props]);
  const filterApi = {
    setFilterLogicOperator,
    unstable_applyFilters: updateFilteredRows,
    deleteFilterItem,
    upsertFilterItem,
    upsertFilterItems,
    setFilterModel,
    showFilterPanel,
    hideFilterPanel,
    setQuickFilterValues,
    ignoreDiacritics: props.ignoreDiacritics,
    getFilterState
  };
  useGridApiMethod(apiRef, filterApi, "public");
  const stateExportPreProcessing = React182.useCallback((prevState, context) => {
    var _a2, _b2;
    const filterModelToExport = gridFilterModelSelector(apiRef);
    filterModelToExport.items.forEach((item) => {
      delete item.fromInput;
    });
    const shouldExportFilterModel = (
      // Always export if the `exportOnlyDirtyModels` property is not activated
      !context.exportOnlyDirtyModels || // Always export if the model is controlled
      props.filterModel != null || // Always export if the model has been initialized
      ((_b2 = (_a2 = props.initialState) == null ? void 0 : _a2.filter) == null ? void 0 : _b2.filterModel) != null || // Export if the model is not equal to the default value
      !isDeepEqual2(filterModelToExport, getDefaultGridFilterModel())
    );
    if (!shouldExportFilterModel) {
      return prevState;
    }
    return _extends({}, prevState, {
      filter: {
        filterModel: filterModelToExport
      }
    });
  }, [apiRef, props.filterModel, (_b = (_a = props.initialState) == null ? void 0 : _a.filter) == null ? void 0 : _b.filterModel]);
  const stateRestorePreProcessing = React182.useCallback((params, context) => {
    var _a2;
    const filterModel = (_a2 = context.stateToRestore.filter) == null ? void 0 : _a2.filterModel;
    if (filterModel == null) {
      return params;
    }
    apiRef.current.updateControlState("filter", mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef), "restoreState");
    return _extends({}, params, {
      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]
    });
  }, [apiRef, props.disableMultipleColumnsFiltering]);
  const preferencePanelPreProcessing = React182.useCallback((initialValue, value) => {
    var _a2;
    if (value === GridPreferencePanelsValue.filters) {
      const FilterPanel = props.slots.filterPanel;
      return (0, import_jsx_runtime117.jsx)(FilterPanel, _extends({}, (_a2 = props.slotProps) == null ? void 0 : _a2.filterPanel));
    }
    return initialValue;
  }, [props.slots.filterPanel, (_c = props.slotProps) == null ? void 0 : _c.filterPanel]);
  const {
    getRowId
  } = props;
  const getRowsRef = useLazyRef(createMemoizedValues);
  const flatFilteringMethod = React182.useCallback((params) => {
    var _a2;
    if (props.filterMode !== "client" || !params.isRowMatchingFilters || !params.filterModel.items.length && !((_a2 = params.filterModel.quickFilterValues) == null ? void 0 : _a2.length)) {
      return defaultGridFilterLookup;
    }
    const dataRowIdToModelLookup = gridRowsLookupSelector(apiRef);
    const filteredRowsLookup = {};
    const {
      isRowMatchingFilters
    } = params;
    const filterCache = {};
    const result = {
      passingFilterItems: null,
      passingQuickFilterValues: null
    };
    const rows = getRowsRef.current(apiRef.current.state.rows.dataRowIdToModelLookup);
    for (let i = 0; i < rows.length; i += 1) {
      const row = rows[i];
      const id = getRowId ? getRowId(row) : row.id;
      isRowMatchingFilters(row, void 0, result);
      const isRowPassing = passFilterLogic([result.passingFilterItems], [result.passingQuickFilterValues], params.filterModel, params.filterValueGetter, apiRef, filterCache);
      if (!isRowPassing) {
        filteredRowsLookup[id] = isRowPassing;
      }
    }
    const footerId = "auto-generated-group-footer-root";
    const footer = dataRowIdToModelLookup[footerId];
    if (footer) {
      filteredRowsLookup[footerId] = true;
    }
    return {
      filteredRowsLookup,
      filteredChildrenCountLookup: {},
      filteredDescendantCountLookup: {}
    };
  }, [apiRef, props.filterMode, getRowId, getRowsRef]);
  useGridRegisterPipeProcessor(apiRef, "columnMenu", addColumnMenuItem);
  useGridRegisterPipeProcessor(apiRef, "exportState", stateExportPreProcessing);
  useGridRegisterPipeProcessor(apiRef, "restoreState", stateRestorePreProcessing);
  useGridRegisterPipeProcessor(apiRef, "preferencePanel", preferencePanelPreProcessing);
  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, "filtering", flatFilteringMethod);
  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, "visibleRowsLookupCreation", getVisibleRowsLookup);
  const handleColumnsChange = React182.useCallback(() => {
    logger.debug("onColUpdated - GridColumns changed, applying filters");
    const filterModel = gridFilterModelSelector(apiRef);
    const columnsLookup = gridColumnLookupSelector(apiRef);
    const newFilterItems = filterModel.items.filter((item) => item.field && columnsLookup[item.field]);
    if (newFilterItems.length < filterModel.items.length) {
      apiRef.current.setFilterModel(_extends({}, filterModel, {
        items: newFilterItems
      }));
    }
  }, [apiRef, logger]);
  const handleStrategyProcessorChange = React182.useCallback((methodName) => {
    if (methodName === "filtering") {
      apiRef.current.unstable_applyFilters();
    }
  }, [apiRef]);
  const updateVisibleRowsLookupState = React182.useCallback(() => {
    apiRef.current.setState((state) => {
      return _extends({}, state, {
        visibleRowsLookup: getVisibleRowsLookupState(apiRef, state)
      });
    });
  }, [apiRef]);
  useGridEvent(apiRef, "rowsSet", updateFilteredRows);
  useGridEvent(apiRef, "columnsChange", handleColumnsChange);
  useGridEvent(apiRef, "activeStrategyProcessorChange", handleStrategyProcessorChange);
  useGridEvent(apiRef, "rowExpansionChange", updateVisibleRowsLookupState);
  useGridEvent(apiRef, "columnVisibilityModelChange", () => {
    var _a2;
    const filterModel = gridFilterModelSelector(apiRef);
    if (((_a2 = filterModel.quickFilterValues) == null ? void 0 : _a2.length) && shouldQuickFilterExcludeHiddenColumns(filterModel)) {
      updateFilteredRows();
    }
  });
  useFirstRender(() => {
    updateFilteredRows();
  });
  useEnhancedEffect_default(() => {
    if (props.filterModel !== void 0) {
      apiRef.current.setFilterModel(props.filterModel);
    }
  }, [apiRef, logger, props.filterModel]);
};

// node_modules/@mui/x-data-grid/esm/hooks/features/focus/useGridFocus.js
init_extends();
var React183 = __toESM(require_react(), 1);
var focusStateInitializer = (state) => _extends({}, state, {
  focus: {
    cell: null,
    columnHeader: null,
    columnHeaderFilter: null,
    columnGroupHeader: null
  },
  tabIndex: {
    cell: null,
    columnHeader: null,
    columnHeaderFilter: null,
    columnGroupHeader: null
  }
});
var useGridFocus = (apiRef, props) => {
  const logger = useGridLogger(apiRef, "useGridFocus");
  const lastClickedCell = React183.useRef(null);
  const hasRootReference = apiRef.current.rootElementRef.current !== null;
  const publishCellFocusOut = React183.useCallback((cell, event) => {
    if (cell) {
      if (apiRef.current.getRow(cell.id)) {
        apiRef.current.publishEvent("cellFocusOut", apiRef.current.getCellParams(cell.id, cell.field), event);
      }
    }
  }, [apiRef]);
  const setCellFocus = React183.useCallback((id, field) => {
    const focusedCell = gridFocusCellSelector(apiRef);
    if ((focusedCell == null ? void 0 : focusedCell.id) === id && (focusedCell == null ? void 0 : focusedCell.field) === field) {
      return;
    }
    apiRef.current.setState((state) => {
      logger.debug(`Focusing on cell with id=${id} and field=${field}`);
      return _extends({}, state, {
        tabIndex: {
          cell: {
            id,
            field
          },
          columnHeader: null,
          columnHeaderFilter: null,
          columnGroupHeader: null
        },
        focus: {
          cell: {
            id,
            field
          },
          columnHeader: null,
          columnHeaderFilter: null,
          columnGroupHeader: null
        }
      });
    });
    if (!apiRef.current.getRow(id)) {
      return;
    }
    if (focusedCell) {
      publishCellFocusOut(focusedCell, {});
    }
    apiRef.current.publishEvent("cellFocusIn", apiRef.current.getCellParams(id, field));
  }, [apiRef, logger, publishCellFocusOut]);
  const setColumnHeaderFocus = React183.useCallback((field, event = {}) => {
    const cell = gridFocusCellSelector(apiRef);
    publishCellFocusOut(cell, event);
    apiRef.current.setState((state) => {
      logger.debug(`Focusing on column header with colIndex=${field}`);
      return _extends({}, state, {
        tabIndex: {
          columnHeader: {
            field
          },
          columnHeaderFilter: null,
          cell: null,
          columnGroupHeader: null
        },
        focus: {
          columnHeader: {
            field
          },
          columnHeaderFilter: null,
          cell: null,
          columnGroupHeader: null
        }
      });
    });
  }, [apiRef, logger, publishCellFocusOut]);
  const setColumnHeaderFilterFocus = React183.useCallback((field, event = {}) => {
    const cell = gridFocusCellSelector(apiRef);
    publishCellFocusOut(cell, event);
    apiRef.current.setState((state) => {
      logger.debug(`Focusing on column header filter with colIndex=${field}`);
      return _extends({}, state, {
        tabIndex: {
          columnHeader: null,
          columnHeaderFilter: {
            field
          },
          cell: null,
          columnGroupHeader: null
        },
        focus: {
          columnHeader: null,
          columnHeaderFilter: {
            field
          },
          cell: null,
          columnGroupHeader: null
        }
      });
    });
  }, [apiRef, logger, publishCellFocusOut]);
  const setColumnGroupHeaderFocus = React183.useCallback((field, depth, event = {}) => {
    const cell = gridFocusCellSelector(apiRef);
    if (cell) {
      apiRef.current.publishEvent("cellFocusOut", apiRef.current.getCellParams(cell.id, cell.field), event);
    }
    apiRef.current.setState((state) => {
      return _extends({}, state, {
        tabIndex: {
          columnGroupHeader: {
            field,
            depth
          },
          columnHeader: null,
          columnHeaderFilter: null,
          cell: null
        },
        focus: {
          columnGroupHeader: {
            field,
            depth
          },
          columnHeader: null,
          columnHeaderFilter: null,
          cell: null
        }
      });
    });
  }, [apiRef]);
  const getColumnGroupHeaderFocus = React183.useCallback(() => gridFocusColumnGroupHeaderSelector(apiRef), [apiRef]);
  const moveFocusToRelativeCell = React183.useCallback((id, field, direction) => {
    let columnIndexToFocus = apiRef.current.getColumnIndex(field);
    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);
    const currentPage = getVisibleRows(apiRef, {
      pagination: props.pagination,
      paginationMode: props.paginationMode
    });
    const pinnedRows = gridPinnedRowsSelector(apiRef);
    const currentPageRows = [].concat(pinnedRows.top || [], currentPage.rows, pinnedRows.bottom || []);
    let rowIndexToFocus = currentPageRows.findIndex((row) => row.id === id);
    if (direction === "right") {
      columnIndexToFocus += 1;
    } else if (direction === "left") {
      columnIndexToFocus -= 1;
    } else {
      rowIndexToFocus += 1;
    }
    if (columnIndexToFocus >= visibleColumns.length) {
      rowIndexToFocus += 1;
      if (rowIndexToFocus < currentPageRows.length) {
        columnIndexToFocus = 0;
      }
    } else if (columnIndexToFocus < 0) {
      rowIndexToFocus -= 1;
      if (rowIndexToFocus >= 0) {
        columnIndexToFocus = visibleColumns.length - 1;
      }
    }
    rowIndexToFocus = clamp(rowIndexToFocus, 0, currentPageRows.length - 1);
    const rowToFocus = currentPageRows[rowIndexToFocus];
    if (!rowToFocus) {
      return;
    }
    const colSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowToFocus.id, columnIndexToFocus);
    if (colSpanInfo && colSpanInfo.spannedByColSpan) {
      if (direction === "left" || direction === "below") {
        columnIndexToFocus = colSpanInfo.leftVisibleCellIndex;
      } else if (direction === "right") {
        columnIndexToFocus = colSpanInfo.rightVisibleCellIndex;
      }
    }
    columnIndexToFocus = clamp(columnIndexToFocus, 0, visibleColumns.length - 1);
    const columnToFocus = visibleColumns[columnIndexToFocus];
    apiRef.current.setCellFocus(rowToFocus.id, columnToFocus.field);
  }, [apiRef, props.pagination, props.paginationMode]);
  const handleCellDoubleClick = React183.useCallback(({
    id,
    field
  }) => {
    apiRef.current.setCellFocus(id, field);
  }, [apiRef]);
  const handleCellKeyDown = React183.useCallback((params, event) => {
    if (event.key === "Enter" || event.key === "Tab" || event.key === "Shift" || isNavigationKey(event.key)) {
      return;
    }
    apiRef.current.setCellFocus(params.id, params.field);
  }, [apiRef]);
  const handleColumnHeaderFocus = React183.useCallback(({
    field
  }, event) => {
    if (event.target !== event.currentTarget) {
      return;
    }
    apiRef.current.setColumnHeaderFocus(field, event);
  }, [apiRef]);
  const handleColumnGroupHeaderFocus = React183.useCallback(({
    fields,
    depth
  }, event) => {
    if (event.target !== event.currentTarget) {
      return;
    }
    const focusedColumnGroup = gridFocusColumnGroupHeaderSelector(apiRef);
    if (focusedColumnGroup !== null && focusedColumnGroup.depth === depth && fields.includes(focusedColumnGroup.field)) {
      return;
    }
    apiRef.current.setColumnGroupHeaderFocus(fields[0], depth, event);
  }, [apiRef]);
  const handleBlur = React183.useCallback((_, event) => {
    var _a, _b;
    if ((_b = (_a = event.relatedTarget) == null ? void 0 : _a.getAttribute("class")) == null ? void 0 : _b.includes(gridClasses2.columnHeader)) {
      return;
    }
    logger.debug(`Clearing focus`);
    apiRef.current.setState((state) => _extends({}, state, {
      focus: {
        cell: null,
        columnHeader: null,
        columnHeaderFilter: null,
        columnGroupHeader: null
      }
    }));
  }, [logger, apiRef]);
  const handleCellMouseDown = React183.useCallback((params) => {
    lastClickedCell.current = params;
  }, []);
  const handleDocumentClick = React183.useCallback((event) => {
    const cellParams = lastClickedCell.current;
    lastClickedCell.current = null;
    const focusedCell = gridFocusCellSelector(apiRef);
    const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors("canUpdateFocus", true, {
      event,
      cell: cellParams
    });
    if (!canUpdateFocus) {
      return;
    }
    if (!focusedCell) {
      if (cellParams) {
        apiRef.current.setCellFocus(cellParams.id, cellParams.field);
      }
      return;
    }
    if ((cellParams == null ? void 0 : cellParams.id) === focusedCell.id && (cellParams == null ? void 0 : cellParams.field) === focusedCell.field) {
      return;
    }
    const cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);
    if (cellElement == null ? void 0 : cellElement.contains(event.target)) {
      return;
    }
    if (cellParams) {
      apiRef.current.setCellFocus(cellParams.id, cellParams.field);
    } else {
      apiRef.current.setState((state) => _extends({}, state, {
        focus: {
          cell: null,
          columnHeader: null,
          columnHeaderFilter: null,
          columnGroupHeader: null
        }
      }));
      publishCellFocusOut(focusedCell, event);
    }
  }, [apiRef, publishCellFocusOut]);
  const handleCellModeChange = React183.useCallback((params) => {
    if (params.cellMode === "view") {
      return;
    }
    const cell = gridFocusCellSelector(apiRef);
    if ((cell == null ? void 0 : cell.id) !== params.id || (cell == null ? void 0 : cell.field) !== params.field) {
      apiRef.current.setCellFocus(params.id, params.field);
    }
  }, [apiRef]);
  const handleRowSet = React183.useCallback(() => {
    const cell = gridFocusCellSelector(apiRef);
    if (cell && !apiRef.current.getRow(cell.id)) {
      const lastFocusedRowId = cell.id;
      let nextRowId = null;
      if (typeof lastFocusedRowId !== "undefined") {
        const rowEl = apiRef.current.getRowElement(lastFocusedRowId);
        const lastFocusedRowIndex = (rowEl == null ? void 0 : rowEl.dataset.rowindex) ? Number(rowEl == null ? void 0 : rowEl.dataset.rowindex) : 0;
        const currentPage = getVisibleRows(apiRef, {
          pagination: props.pagination,
          paginationMode: props.paginationMode
        });
        const nextRow = currentPage.rows[clamp(lastFocusedRowIndex, 0, currentPage.rows.length - 1)];
        nextRowId = (nextRow == null ? void 0 : nextRow.id) ?? null;
      }
      apiRef.current.setState((state) => _extends({}, state, {
        focus: {
          cell: nextRowId === null ? null : {
            id: nextRowId,
            field: cell.field
          },
          columnHeader: null,
          columnHeaderFilter: null,
          columnGroupHeader: null
        }
      }));
    }
  }, [apiRef, props.pagination, props.paginationMode]);
  const handlePaginationModelChange = useEventCallback_default(() => {
    const currentFocusedCell = gridFocusCellSelector(apiRef);
    if (!currentFocusedCell) {
      return;
    }
    const currentPage = getVisibleRows(apiRef, {
      pagination: props.pagination,
      paginationMode: props.paginationMode
    });
    const rowIsInCurrentPage = currentPage.rows.find((row) => row.id === currentFocusedCell.id);
    if (rowIsInCurrentPage || currentPage.rows.length === 0) {
      return;
    }
    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);
    apiRef.current.setState((state) => {
      return _extends({}, state, {
        tabIndex: {
          cell: {
            id: currentPage.rows[0].id,
            field: visibleColumns[0].field
          },
          columnGroupHeader: null,
          columnHeader: null,
          columnHeaderFilter: null
        }
      });
    });
  });
  const focusApi = {
    setCellFocus,
    setColumnHeaderFocus,
    setColumnHeaderFilterFocus
  };
  const focusPrivateApi = {
    moveFocusToRelativeCell,
    setColumnGroupHeaderFocus,
    getColumnGroupHeaderFocus
  };
  useGridApiMethod(apiRef, focusApi, "public");
  useGridApiMethod(apiRef, focusPrivateApi, "private");
  React183.useEffect(() => {
    const doc = ownerDocument2(apiRef.current.rootElementRef.current);
    doc.addEventListener("mouseup", handleDocumentClick);
    return () => {
      doc.removeEventListener("mouseup", handleDocumentClick);
    };
  }, [apiRef, hasRootReference, handleDocumentClick]);
  useGridEvent(apiRef, "columnHeaderBlur", handleBlur);
  useGridEvent(apiRef, "cellDoubleClick", handleCellDoubleClick);
  useGridEvent(apiRef, "cellMouseDown", handleCellMouseDown);
  useGridEvent(apiRef, "cellKeyDown", handleCellKeyDown);
  useGridEvent(apiRef, "cellModeChange", handleCellModeChange);
  useGridEvent(apiRef, "columnHeaderFocus", handleColumnHeaderFocus);
  useGridEvent(apiRef, "columnGroupHeaderFocus", handleColumnGroupHeaderFocus);
  useGridEvent(apiRef, "rowsSet", handleRowSet);
  useGridEvent(apiRef, "paginationModelChange", handlePaginationModelChange);
};

// node_modules/@mui/x-data-grid/esm/hooks/features/keyboardNavigation/useGridKeyboardNavigation.js
var React184 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/esm/hooks/features/keyboardNavigation/utils.js
var getLeftColumnIndex = ({
  currentColIndex,
  firstColIndex,
  lastColIndex,
  isRtl
}) => {
  if (isRtl) {
    if (currentColIndex < lastColIndex) {
      return currentColIndex + 1;
    }
  } else if (!isRtl) {
    if (currentColIndex > firstColIndex) {
      return currentColIndex - 1;
    }
  }
  return null;
};
var getRightColumnIndex = ({
  currentColIndex,
  firstColIndex,
  lastColIndex,
  isRtl
}) => {
  if (isRtl) {
    if (currentColIndex > firstColIndex) {
      return currentColIndex - 1;
    }
  } else if (!isRtl) {
    if (currentColIndex < lastColIndex) {
      return currentColIndex + 1;
    }
  }
  return null;
};
function findNonRowSpannedCell(apiRef, rowId, colIndex, rowSpanScanDirection) {
  var _a, _b;
  const rowSpanHiddenCells = Rowspan.selectors.hiddenCells(apiRef.current.virtualizer.store.state);
  if (!((_a = rowSpanHiddenCells[rowId]) == null ? void 0 : _a[colIndex])) {
    return rowId;
  }
  const filteredSortedRowIds = gridFilteredSortedRowIdsSelector(apiRef);
  let nextRowIndex = filteredSortedRowIds.indexOf(rowId) + (rowSpanScanDirection === "down" ? 1 : -1);
  while (nextRowIndex >= 0 && nextRowIndex < filteredSortedRowIds.length) {
    const nextRowId = filteredSortedRowIds[nextRowIndex];
    if (!((_b = rowSpanHiddenCells[nextRowId]) == null ? void 0 : _b[colIndex])) {
      return nextRowId;
    }
    nextRowIndex += rowSpanScanDirection === "down" ? 1 : -1;
  }
  return rowId;
}

// node_modules/@mui/x-data-grid/esm/hooks/features/keyboardNavigation/useGridKeyboardNavigation.js
var gridVisibleRowsWithPinnedRowsSelector = createSelectorMemoized2(gridVisibleRowsSelector, gridPinnedRowsSelector, (visibleRows, pinnedRows) => {
  return (pinnedRows.top || []).concat(visibleRows.rows, pinnedRows.bottom || []);
});
var useGridKeyboardNavigation = (apiRef, props) => {
  const logger = useGridLogger(apiRef, "useGridKeyboardNavigation");
  const isRtl = useRtl();
  const getCurrentPageRows = React184.useCallback(() => {
    return gridVisibleRowsWithPinnedRowsSelector(apiRef);
  }, [apiRef]);
  const headerFilteringEnabled = props.signature !== "DataGrid" && props.headerFilters;
  const goToCell = React184.useCallback((colIndex, rowId, closestColumnToUse = "left", rowSpanScanDirection = "up") => {
    const visibleSortedRows = gridExpandedSortedRowEntriesSelector(apiRef);
    const nextCellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, colIndex);
    if (nextCellColSpanInfo && nextCellColSpanInfo.spannedByColSpan) {
      if (closestColumnToUse === "left") {
        colIndex = nextCellColSpanInfo.leftVisibleCellIndex;
      } else if (closestColumnToUse === "right") {
        colIndex = nextCellColSpanInfo.rightVisibleCellIndex;
      }
    }
    const field = gridVisibleColumnFieldsSelector(apiRef)[colIndex];
    const nonRowSpannedRowId = findNonRowSpannedCell(apiRef, rowId, colIndex, rowSpanScanDirection);
    const rowIndexRelativeToAllRows = visibleSortedRows.findIndex((row) => row.id === nonRowSpannedRowId);
    logger.debug(`Navigating to cell row ${rowIndexRelativeToAllRows}, col ${colIndex}`);
    apiRef.current.scrollToIndexes({
      colIndex,
      rowIndex: rowIndexRelativeToAllRows
    });
    apiRef.current.setCellFocus(nonRowSpannedRowId, field);
  }, [apiRef, logger]);
  const goToHeader = React184.useCallback((colIndex, event) => {
    logger.debug(`Navigating to header col ${colIndex}`);
    apiRef.current.scrollToIndexes({
      colIndex
    });
    const field = apiRef.current.getVisibleColumns()[colIndex].field;
    apiRef.current.setColumnHeaderFocus(field, event);
  }, [apiRef, logger]);
  const goToHeaderFilter = React184.useCallback((colIndex, event) => {
    logger.debug(`Navigating to header filter col ${colIndex}`);
    apiRef.current.scrollToIndexes({
      colIndex
    });
    const field = apiRef.current.getVisibleColumns()[colIndex].field;
    apiRef.current.setColumnHeaderFilterFocus(field, event);
  }, [apiRef, logger]);
  const goToGroupHeader = React184.useCallback((colIndex, depth, event) => {
    logger.debug(`Navigating to header col ${colIndex}`);
    apiRef.current.scrollToIndexes({
      colIndex
    });
    const {
      field
    } = apiRef.current.getVisibleColumns()[colIndex];
    apiRef.current.setColumnGroupHeaderFocus(field, depth, event);
  }, [apiRef, logger]);
  const getRowIdFromIndex = React184.useCallback((rowIndex) => {
    var _a;
    return (_a = getCurrentPageRows()[rowIndex]) == null ? void 0 : _a.id;
  }, [getCurrentPageRows]);
  const handleColumnHeaderKeyDown = React184.useCallback((params, event) => {
    const headerTitleNode = event.currentTarget.querySelector(`.${gridClasses2.columnHeaderTitleContainerContent}`);
    const isFromInsideContent = !!headerTitleNode && headerTitleNode.contains(event.target);
    if (isFromInsideContent && params.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field) {
      return;
    }
    const currentPageRows = getCurrentPageRows();
    const viewportPageSize = apiRef.current.getViewportPageSize();
    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;
    const firstRowIndexInPage = currentPageRows.length > 0 ? 0 : null;
    const lastRowIndexInPage = currentPageRows.length - 1;
    const firstColIndex = 0;
    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;
    const columnGroupMaxDepth = gridColumnGroupsHeaderMaxDepthSelector(apiRef);
    let shouldPreventDefault = true;
    switch (event.key) {
      case "ArrowDown": {
        if (headerFilteringEnabled) {
          goToHeaderFilter(colIndexBefore, event);
        } else if (firstRowIndexInPage !== null) {
          goToCell(colIndexBefore, getRowIdFromIndex(firstRowIndexInPage));
        }
        break;
      }
      case "ArrowRight": {
        const rightColIndex = getRightColumnIndex({
          currentColIndex: colIndexBefore,
          firstColIndex,
          lastColIndex,
          isRtl
        });
        if (rightColIndex !== null) {
          goToHeader(rightColIndex, event);
        }
        break;
      }
      case "ArrowLeft": {
        const leftColIndex = getLeftColumnIndex({
          currentColIndex: colIndexBefore,
          firstColIndex,
          lastColIndex,
          isRtl
        });
        if (leftColIndex !== null) {
          goToHeader(leftColIndex, event);
        }
        break;
      }
      case "ArrowUp": {
        if (columnGroupMaxDepth > 0) {
          goToGroupHeader(colIndexBefore, columnGroupMaxDepth - 1, event);
        }
        break;
      }
      case "PageDown": {
        if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {
          goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));
        }
        break;
      }
      case "Home": {
        goToHeader(firstColIndex, event);
        break;
      }
      case "End": {
        goToHeader(lastColIndex, event);
        break;
      }
      case "Enter": {
        if (event.ctrlKey || event.metaKey) {
          apiRef.current.toggleColumnMenu(params.field);
        }
        break;
      }
      case " ": {
        break;
      }
      default: {
        shouldPreventDefault = false;
      }
    }
    if (shouldPreventDefault) {
      event.preventDefault();
    }
  }, [apiRef, getCurrentPageRows, headerFilteringEnabled, goToHeaderFilter, goToCell, getRowIdFromIndex, isRtl, goToHeader, goToGroupHeader]);
  const handleHeaderFilterKeyDown = React184.useCallback((params, event) => {
    const isEditing = gridHeaderFilteringEditFieldSelector(apiRef) === params.field;
    const isHeaderMenuOpen = gridHeaderFilteringMenuSelector(apiRef) === params.field;
    if (isEditing || isHeaderMenuOpen || !isNavigationKey(event.key)) {
      return;
    }
    const currentPageRows = getCurrentPageRows();
    const viewportPageSize = apiRef.current.getViewportPageSize();
    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;
    const firstRowIndexInPage = 0;
    const lastRowIndexInPage = currentPageRows.length - 1;
    const firstColIndex = 0;
    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;
    let shouldPreventDefault = true;
    switch (event.key) {
      case "ArrowDown": {
        const rowId = getRowIdFromIndex(firstRowIndexInPage);
        if (firstRowIndexInPage !== null && rowId != null) {
          goToCell(colIndexBefore, rowId);
        }
        break;
      }
      case "ArrowRight": {
        const rightColIndex = getRightColumnIndex({
          currentColIndex: colIndexBefore,
          firstColIndex,
          lastColIndex,
          isRtl
        });
        if (rightColIndex !== null) {
          goToHeaderFilter(rightColIndex, event);
        }
        break;
      }
      case "ArrowLeft": {
        const leftColIndex = getLeftColumnIndex({
          currentColIndex: colIndexBefore,
          firstColIndex,
          lastColIndex,
          isRtl
        });
        if (leftColIndex !== null) {
          goToHeaderFilter(leftColIndex, event);
        } else {
          apiRef.current.setColumnHeaderFilterFocus(params.field, event);
        }
        break;
      }
      case "ArrowUp": {
        goToHeader(colIndexBefore, event);
        break;
      }
      case "PageDown": {
        if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {
          goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));
        }
        break;
      }
      case "Home": {
        goToHeaderFilter(firstColIndex, event);
        break;
      }
      case "End": {
        goToHeaderFilter(lastColIndex, event);
        break;
      }
      case " ": {
        break;
      }
      default: {
        shouldPreventDefault = false;
      }
    }
    if (shouldPreventDefault) {
      event.preventDefault();
    }
  }, [apiRef, getCurrentPageRows, goToHeaderFilter, isRtl, goToHeader, goToCell, getRowIdFromIndex]);
  const handleColumnGroupHeaderKeyDown = React184.useCallback((params, event) => {
    const focusedColumnGroup = gridFocusColumnGroupHeaderSelector(apiRef);
    if (focusedColumnGroup === null) {
      return;
    }
    const {
      field: currentField,
      depth: currentDepth
    } = focusedColumnGroup;
    const {
      fields,
      depth,
      maxDepth
    } = params;
    const currentPageRows = getCurrentPageRows();
    const viewportPageSize = apiRef.current.getViewportPageSize();
    const currentColIndex = apiRef.current.getColumnIndex(currentField);
    const colIndexBefore = currentField ? apiRef.current.getColumnIndex(currentField) : 0;
    const firstRowIndexInPage = 0;
    const lastRowIndexInPage = currentPageRows.length - 1;
    const firstColIndex = 0;
    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;
    let shouldPreventDefault = true;
    switch (event.key) {
      case "ArrowDown": {
        if (depth === maxDepth - 1) {
          goToHeader(currentColIndex, event);
        } else {
          goToGroupHeader(currentColIndex, currentDepth + 1, event);
        }
        break;
      }
      case "ArrowUp": {
        if (depth > 0) {
          goToGroupHeader(currentColIndex, currentDepth - 1, event);
        }
        break;
      }
      case "ArrowRight": {
        const remainingRightColumns = fields.length - fields.indexOf(currentField) - 1;
        if (currentColIndex + remainingRightColumns + 1 <= lastColIndex) {
          goToGroupHeader(currentColIndex + remainingRightColumns + 1, currentDepth, event);
        }
        break;
      }
      case "ArrowLeft": {
        const remainingLeftColumns = fields.indexOf(currentField);
        if (currentColIndex - remainingLeftColumns - 1 >= firstColIndex) {
          goToGroupHeader(currentColIndex - remainingLeftColumns - 1, currentDepth, event);
        }
        break;
      }
      case "PageDown": {
        if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {
          goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));
        }
        break;
      }
      case "Home": {
        goToGroupHeader(firstColIndex, currentDepth, event);
        break;
      }
      case "End": {
        goToGroupHeader(lastColIndex, currentDepth, event);
        break;
      }
      case " ": {
        break;
      }
      default: {
        shouldPreventDefault = false;
      }
    }
    if (shouldPreventDefault) {
      event.preventDefault();
    }
  }, [apiRef, getCurrentPageRows, goToHeader, goToGroupHeader, goToCell, getRowIdFromIndex]);
  const handleCellKeyDown = React184.useCallback((params, event) => {
    if (isEventTargetInPortal(event)) {
      return;
    }
    const cellParams = apiRef.current.getCellParams(params.id, params.field);
    if (cellParams.cellMode === GridCellModes.Edit || !isNavigationKey(event.key)) {
      return;
    }
    const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors("canUpdateFocus", true, {
      event,
      cell: cellParams
    });
    if (!canUpdateFocus) {
      return;
    }
    const currentPageRows = getCurrentPageRows();
    if (currentPageRows.length === 0) {
      return;
    }
    const viewportPageSize = apiRef.current.getViewportPageSize();
    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;
    const rowIndexBefore = currentPageRows.findIndex((row) => row.id === params.id);
    const firstRowIndexInPage = 0;
    const lastRowIndexInPage = currentPageRows.length - 1;
    const firstColIndex = 0;
    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;
    let shouldPreventDefault = true;
    switch (event.key) {
      case "ArrowDown": {
        if (rowIndexBefore < lastRowIndexInPage) {
          goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore + 1), isRtl ? "right" : "left", "down");
        }
        break;
      }
      case "ArrowUp": {
        if (rowIndexBefore > firstRowIndexInPage) {
          goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore - 1));
        } else if (headerFilteringEnabled) {
          goToHeaderFilter(colIndexBefore, event);
        } else {
          goToHeader(colIndexBefore, event);
        }
        break;
      }
      case "ArrowRight": {
        const rightColIndex = getRightColumnIndex({
          currentColIndex: colIndexBefore,
          firstColIndex,
          lastColIndex,
          isRtl
        });
        if (rightColIndex !== null) {
          goToCell(rightColIndex, getRowIdFromIndex(rowIndexBefore), isRtl ? "left" : "right");
        }
        break;
      }
      case "ArrowLeft": {
        const leftColIndex = getLeftColumnIndex({
          currentColIndex: colIndexBefore,
          firstColIndex,
          lastColIndex,
          isRtl
        });
        if (leftColIndex !== null) {
          goToCell(leftColIndex, getRowIdFromIndex(rowIndexBefore), isRtl ? "right" : "left");
        }
        break;
      }
      case "Tab": {
        if (event.shiftKey && colIndexBefore > firstColIndex) {
          goToCell(colIndexBefore - 1, getRowIdFromIndex(rowIndexBefore), "left");
        } else if (!event.shiftKey && colIndexBefore < lastColIndex) {
          goToCell(colIndexBefore + 1, getRowIdFromIndex(rowIndexBefore), "right");
        }
        break;
      }
      case " ": {
        const field = params.field;
        if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {
          break;
        }
        const colDef = params.colDef;
        if (colDef && (colDef.field === GRID_TREE_DATA_GROUPING_FIELD || isGroupingColumn(colDef.field))) {
          break;
        }
        if (!event.shiftKey && rowIndexBefore < lastRowIndexInPage) {
          goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));
        }
        break;
      }
      case "PageDown": {
        if (rowIndexBefore < lastRowIndexInPage) {
          goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));
        }
        break;
      }
      case "PageUp": {
        const nextRowIndex = Math.max(rowIndexBefore - viewportPageSize, firstRowIndexInPage);
        if (nextRowIndex !== rowIndexBefore && nextRowIndex >= firstRowIndexInPage) {
          goToCell(colIndexBefore, getRowIdFromIndex(nextRowIndex));
        } else {
          goToHeader(colIndexBefore, event);
        }
        break;
      }
      case "Home": {
        if (event.ctrlKey || event.metaKey || event.shiftKey) {
          goToCell(firstColIndex, getRowIdFromIndex(firstRowIndexInPage));
        } else {
          goToCell(firstColIndex, getRowIdFromIndex(rowIndexBefore));
        }
        break;
      }
      case "End": {
        if (event.ctrlKey || event.metaKey || event.shiftKey) {
          goToCell(lastColIndex, getRowIdFromIndex(lastRowIndexInPage));
        } else {
          goToCell(lastColIndex, getRowIdFromIndex(rowIndexBefore));
        }
        break;
      }
      default: {
        shouldPreventDefault = false;
      }
    }
    if (shouldPreventDefault) {
      event.preventDefault();
    }
  }, [apiRef, getCurrentPageRows, isRtl, goToCell, getRowIdFromIndex, headerFilteringEnabled, goToHeaderFilter, goToHeader]);
  const checkIfCanStartEditing = React184.useCallback((initialValue, {
    event
  }) => {
    if (event.key === " ") {
      return false;
    }
    return initialValue;
  }, []);
  useGridRegisterPipeProcessor(apiRef, "canStartEditing", checkIfCanStartEditing);
  useGridEvent(apiRef, "columnHeaderKeyDown", handleColumnHeaderKeyDown);
  useGridEvent(apiRef, "headerFilterKeyDown", handleHeaderFilterKeyDown);
  useGridEvent(apiRef, "columnGroupHeaderKeyDown", handleColumnGroupHeaderKeyDown);
  useGridEvent(apiRef, "cellKeyDown", handleCellKeyDown);
};

// node_modules/@mui/x-data-grid/esm/hooks/features/pagination/useGridPagination.js
init_extends();

// node_modules/@mui/x-data-grid/esm/hooks/features/pagination/useGridRowCount.js
init_extends();
var React185 = __toESM(require_react(), 1);
var useGridRowCount = (apiRef, props) => {
  var _a, _b;
  const logger = useGridLogger(apiRef, "useGridRowCount");
  const visibleTopLevelRowCount = useGridSelector(apiRef, gridFilteredTopLevelRowCountSelector);
  const rowCountState = useGridSelector(apiRef, gridPaginationRowCountSelector);
  const paginationMeta = useGridSelector(apiRef, gridPaginationMetaSelector);
  const paginationModel = useGridSelector(apiRef, gridPaginationModelSelector);
  const previousPageSize = useLazyRef(() => gridPaginationModelSelector(apiRef).pageSize);
  apiRef.current.registerControlState({
    stateId: "paginationRowCount",
    propModel: props.rowCount,
    propOnChange: props.onRowCountChange,
    stateSelector: gridPaginationRowCountSelector,
    changeEvent: "rowCountChange"
  });
  const setRowCount = React185.useCallback((newRowCount) => {
    if (rowCountState === newRowCount) {
      return;
    }
    logger.debug("Setting 'rowCount' to", newRowCount);
    apiRef.current.setState((state) => _extends({}, state, {
      pagination: _extends({}, state.pagination, {
        rowCount: newRowCount
      })
    }));
  }, [apiRef, logger, rowCountState]);
  const paginationRowCountApi = {
    setRowCount
  };
  useGridApiMethod(apiRef, paginationRowCountApi, "public");
  const stateExportPreProcessing = React185.useCallback((prevState, context) => {
    var _a2, _b2;
    const exportedRowCount = gridPaginationRowCountSelector(apiRef);
    const shouldExportRowCount = (
      // Always export if the `exportOnlyDirtyModels` property is not activated
      !context.exportOnlyDirtyModels || // Always export if the `rowCount` is controlled
      props.rowCount != null || // Always export if the `rowCount` has been initialized
      ((_b2 = (_a2 = props.initialState) == null ? void 0 : _a2.pagination) == null ? void 0 : _b2.rowCount) != null
    );
    if (!shouldExportRowCount) {
      return prevState;
    }
    return _extends({}, prevState, {
      pagination: _extends({}, prevState.pagination, {
        rowCount: exportedRowCount
      })
    });
  }, [apiRef, props.rowCount, (_b = (_a = props.initialState) == null ? void 0 : _a.pagination) == null ? void 0 : _b.rowCount]);
  const stateRestorePreProcessing = React185.useCallback((params, context) => {
    var _a2;
    const restoredRowCount = ((_a2 = context.stateToRestore.pagination) == null ? void 0 : _a2.rowCount) ? context.stateToRestore.pagination.rowCount : gridPaginationRowCountSelector(apiRef);
    apiRef.current.setState((state) => _extends({}, state, {
      pagination: _extends({}, state.pagination, {
        rowCount: restoredRowCount
      })
    }));
    return params;
  }, [apiRef]);
  useGridRegisterPipeProcessor(apiRef, "exportState", stateExportPreProcessing);
  useGridRegisterPipeProcessor(apiRef, "restoreState", stateRestorePreProcessing);
  const handlePaginationModelChange = React185.useCallback((model) => {
    if (props.paginationMode === "client" || !previousPageSize.current) {
      return;
    }
    if (model.pageSize !== previousPageSize.current) {
      previousPageSize.current = model.pageSize;
      if (rowCountState === -1) {
        apiRef.current.setPage(0);
      }
    }
  }, [props.paginationMode, previousPageSize, rowCountState, apiRef]);
  useGridEvent(apiRef, "paginationModelChange", handlePaginationModelChange);
  React185.useEffect(() => {
    if (props.paginationMode === "client") {
      apiRef.current.setRowCount(visibleTopLevelRowCount);
    } else if (props.rowCount != null) {
      apiRef.current.setRowCount(props.rowCount);
    }
  }, [apiRef, props.paginationMode, visibleTopLevelRowCount, props.rowCount]);
  const isLastPage = paginationMeta.hasNextPage === false;
  React185.useEffect(() => {
    if (isLastPage && rowCountState === -1) {
      apiRef.current.setRowCount(paginationModel.pageSize * paginationModel.page + visibleTopLevelRowCount);
    }
  }, [apiRef, visibleTopLevelRowCount, isLastPage, rowCountState, paginationModel]);
};

// node_modules/@mui/x-data-grid/esm/hooks/features/pagination/useGridPaginationMeta.js
init_extends();
var React186 = __toESM(require_react(), 1);
var useGridPaginationMeta = (apiRef, props) => {
  var _a, _b;
  const logger = useGridLogger(apiRef, "useGridPaginationMeta");
  const paginationMeta = useGridSelector(apiRef, gridPaginationMetaSelector);
  apiRef.current.registerControlState({
    stateId: "paginationMeta",
    propModel: props.paginationMeta,
    propOnChange: props.onPaginationMetaChange,
    stateSelector: gridPaginationMetaSelector,
    changeEvent: "paginationMetaChange"
  });
  const setPaginationMeta = React186.useCallback((newPaginationMeta) => {
    if (paginationMeta === newPaginationMeta) {
      return;
    }
    logger.debug("Setting 'paginationMeta' to", newPaginationMeta);
    apiRef.current.setState((state) => _extends({}, state, {
      pagination: _extends({}, state.pagination, {
        meta: newPaginationMeta
      })
    }));
  }, [apiRef, logger, paginationMeta]);
  const paginationMetaApi = {
    setPaginationMeta
  };
  useGridApiMethod(apiRef, paginationMetaApi, "public");
  const stateExportPreProcessing = React186.useCallback((prevState, context) => {
    var _a2, _b2;
    const exportedPaginationMeta = gridPaginationMetaSelector(apiRef);
    const shouldExportRowCount = (
      // Always export if the `exportOnlyDirtyModels` property is not activated
      !context.exportOnlyDirtyModels || // Always export if the `paginationMeta` is controlled
      props.paginationMeta != null || // Always export if the `paginationMeta` has been initialized
      ((_b2 = (_a2 = props.initialState) == null ? void 0 : _a2.pagination) == null ? void 0 : _b2.meta) != null
    );
    if (!shouldExportRowCount) {
      return prevState;
    }
    return _extends({}, prevState, {
      pagination: _extends({}, prevState.pagination, {
        meta: exportedPaginationMeta
      })
    });
  }, [apiRef, props.paginationMeta, (_b = (_a = props.initialState) == null ? void 0 : _a.pagination) == null ? void 0 : _b.meta]);
  const stateRestorePreProcessing = React186.useCallback((params, context) => {
    var _a2;
    const restoredPaginationMeta = ((_a2 = context.stateToRestore.pagination) == null ? void 0 : _a2.meta) ? context.stateToRestore.pagination.meta : gridPaginationMetaSelector(apiRef);
    apiRef.current.setState((state) => _extends({}, state, {
      pagination: _extends({}, state.pagination, {
        meta: restoredPaginationMeta
      })
    }));
    return params;
  }, [apiRef]);
  useGridRegisterPipeProcessor(apiRef, "exportState", stateExportPreProcessing);
  useGridRegisterPipeProcessor(apiRef, "restoreState", stateRestorePreProcessing);
  React186.useEffect(() => {
    if (props.paginationMeta) {
      apiRef.current.setPaginationMeta(props.paginationMeta);
    }
  }, [apiRef, props.paginationMeta]);
};

// node_modules/@mui/x-data-grid/esm/hooks/features/pagination/useGridPagination.js
var paginationStateInitializer = (state, props) => {
  var _a, _b, _c, _d, _e, _f, _g;
  const paginationModel = _extends({}, getDefaultGridPaginationModel(props.autoPageSize), props.paginationModel ?? ((_b = (_a = props.initialState) == null ? void 0 : _a.pagination) == null ? void 0 : _b.paginationModel));
  throwIfPageSizeExceedsTheLimit(paginationModel.pageSize, props.signature);
  const rowCount = props.rowCount ?? ((_d = (_c = props.initialState) == null ? void 0 : _c.pagination) == null ? void 0 : _d.rowCount) ?? (props.paginationMode === "client" ? (_e = state.rows) == null ? void 0 : _e.totalRowCount : void 0);
  const meta = props.paginationMeta ?? ((_g = (_f = props.initialState) == null ? void 0 : _f.pagination) == null ? void 0 : _g.meta) ?? {};
  return _extends({}, state, {
    pagination: _extends({}, state.pagination, {
      paginationModel,
      rowCount,
      meta,
      enabled: props.pagination === true,
      paginationMode: props.paginationMode
    })
  });
};
var useGridPagination = (apiRef, props) => {
  useGridPaginationMeta(apiRef, props);
  useGridPaginationModel(apiRef, props);
  useGridRowCount(apiRef, props);
};

// node_modules/@mui/x-data-grid/esm/hooks/features/preferencesPanel/useGridPreferencesPanel.js
init_extends();
var React187 = __toESM(require_react(), 1);
var preferencePanelStateInitializer = (state, props) => {
  var _a;
  return _extends({}, state, {
    preferencePanel: ((_a = props.initialState) == null ? void 0 : _a.preferencePanel) ?? {
      open: false
    }
  });
};
var useGridPreferencesPanel = (apiRef, props) => {
  var _a;
  const logger = useGridLogger(apiRef, "useGridPreferencesPanel");
  const hidePreferences = React187.useCallback(() => {
    apiRef.current.setState((state) => {
      if (!state.preferencePanel.open) {
        return state;
      }
      logger.debug("Hiding Preferences Panel");
      const preferencePanelState = gridPreferencePanelStateSelector(apiRef);
      apiRef.current.publishEvent("preferencePanelClose", {
        openedPanelValue: preferencePanelState.openedPanelValue
      });
      return _extends({}, state, {
        preferencePanel: {
          open: false
        }
      });
    });
  }, [apiRef, logger]);
  const showPreferences = React187.useCallback((newValue, panelId, labelId) => {
    logger.debug("Opening Preferences Panel");
    apiRef.current.setState((state) => _extends({}, state, {
      preferencePanel: _extends({}, state.preferencePanel, {
        open: true,
        openedPanelValue: newValue,
        panelId,
        labelId
      })
    }));
    apiRef.current.publishEvent("preferencePanelOpen", {
      openedPanelValue: newValue
    });
  }, [logger, apiRef]);
  useGridApiMethod(apiRef, {
    showPreferences,
    hidePreferences
  }, "public");
  const stateExportPreProcessing = React187.useCallback((prevState, context) => {
    var _a2;
    const preferencePanelToExport = gridPreferencePanelStateSelector(apiRef);
    const shouldExportPreferencePanel = (
      // Always export if the `exportOnlyDirtyModels` property is not activated
      !context.exportOnlyDirtyModels || // Always export if the panel was initialized
      ((_a2 = props.initialState) == null ? void 0 : _a2.preferencePanel) != null || // Always export if the panel is opened
      preferencePanelToExport.open
    );
    if (!shouldExportPreferencePanel) {
      return prevState;
    }
    return _extends({}, prevState, {
      preferencePanel: preferencePanelToExport
    });
  }, [apiRef, (_a = props.initialState) == null ? void 0 : _a.preferencePanel]);
  const stateRestorePreProcessing = React187.useCallback((params, context) => {
    const preferencePanel = context.stateToRestore.preferencePanel;
    if (preferencePanel != null) {
      apiRef.current.setState((state) => _extends({}, state, {
        preferencePanel
      }));
    }
    return params;
  }, [apiRef]);
  useGridRegisterPipeProcessor(apiRef, "exportState", stateExportPreProcessing);
  useGridRegisterPipeProcessor(apiRef, "restoreState", stateRestorePreProcessing);
};

// node_modules/@mui/x-data-grid/esm/hooks/features/editing/useGridEditing.js
init_extends();
var React190 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/esm/hooks/features/editing/useGridCellEditing.js
init_objectWithoutPropertiesLoose();
init_extends();
var React188 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/esm/hooks/features/editing/utils.js
var getDefaultCellValue = (colDef) => {
  switch (colDef.type) {
    case "boolean":
      return false;
    case "date":
    case "dateTime":
    case "number":
      return void 0;
    case "singleSelect":
      return null;
    case "string":
    default:
      return "";
  }
};

// node_modules/@mui/x-data-grid/esm/hooks/features/editing/useGridCellEditing.js
var _excluded81 = ["id", "field"];
var _excluded216 = ["id", "field"];
var useGridCellEditing = (apiRef, props) => {
  const [cellModesModel, setCellModesModel] = React188.useState({});
  const cellModesModelRef = React188.useRef(cellModesModel);
  const prevCellModesModel = React188.useRef({});
  const {
    processRowUpdate,
    onProcessRowUpdateError,
    cellModesModel: cellModesModelProp,
    onCellModesModelChange
  } = props;
  const runIfEditModeIsCell = (callback) => (...args) => {
    if (props.editMode === GridEditModes.Cell) {
      callback(...args);
    }
  };
  const throwIfNotEditable = React188.useCallback((id, field) => {
    const params = apiRef.current.getCellParams(id, field);
    if (!apiRef.current.isCellEditable(params)) {
      throw new Error(`MUI X: The cell with id=${id} and field=${field} is not editable.`);
    }
  }, [apiRef]);
  const throwIfNotInMode = React188.useCallback((id, field, mode) => {
    if (apiRef.current.getCellMode(id, field) !== mode) {
      throw new Error(`MUI X: The cell with id=${id} and field=${field} is not in ${mode} mode.`);
    }
  }, [apiRef]);
  const handleCellDoubleClick = React188.useCallback((params, event) => {
    if (!params.isEditable) {
      return;
    }
    if (params.cellMode === GridCellModes.Edit) {
      return;
    }
    const newParams = _extends({}, params, {
      reason: GridCellEditStartReasons.cellDoubleClick
    });
    apiRef.current.publishEvent("cellEditStart", newParams, event);
  }, [apiRef]);
  const handleCellFocusOut = React188.useCallback((params, event) => {
    if (params.cellMode === GridCellModes.View) {
      return;
    }
    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.View) {
      return;
    }
    const newParams = _extends({}, params, {
      reason: GridCellEditStopReasons.cellFocusOut
    });
    apiRef.current.publishEvent("cellEditStop", newParams, event);
  }, [apiRef]);
  const handleCellKeyDown = React188.useCallback((params, event) => {
    if (params.cellMode === GridCellModes.Edit) {
      if (event.which === 229) {
        return;
      }
      let reason;
      if (event.key === "Escape") {
        reason = GridCellEditStopReasons.escapeKeyDown;
      } else if (event.key === "Enter") {
        reason = GridCellEditStopReasons.enterKeyDown;
      } else if (event.key === "Tab") {
        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;
        event.preventDefault();
      }
      if (reason) {
        const newParams = _extends({}, params, {
          reason
        });
        apiRef.current.publishEvent("cellEditStop", newParams, event);
      }
    } else if (params.isEditable) {
      let reason;
      const canStartEditing = apiRef.current.unstable_applyPipeProcessors("canStartEditing", true, {
        event,
        cellParams: params,
        editMode: "cell"
      });
      if (!canStartEditing) {
        return;
      }
      if (isPrintableKey(event)) {
        reason = GridCellEditStartReasons.printableKeyDown;
      } else if (isPasteShortcut(event)) {
        reason = GridCellEditStartReasons.pasteKeyDown;
      } else if (event.key === "Enter") {
        reason = GridCellEditStartReasons.enterKeyDown;
      } else if (event.key === "Backspace" || event.key === "Delete") {
        reason = GridCellEditStartReasons.deleteKeyDown;
      }
      if (reason) {
        const newParams = _extends({}, params, {
          reason,
          key: event.key
        });
        apiRef.current.publishEvent("cellEditStart", newParams, event);
      }
    }
  }, [apiRef]);
  const handleCellEditStart = React188.useCallback((params) => {
    const {
      id,
      field,
      reason
    } = params;
    const startCellEditModeParams = {
      id,
      field
    };
    if (reason === GridCellEditStartReasons.printableKeyDown || reason === GridCellEditStartReasons.deleteKeyDown || reason === GridCellEditStartReasons.pasteKeyDown) {
      startCellEditModeParams.deleteValue = true;
    }
    apiRef.current.startCellEditMode(startCellEditModeParams);
  }, [apiRef]);
  const handleCellEditStop = React188.useCallback((params) => {
    const {
      id,
      field,
      reason
    } = params;
    apiRef.current.runPendingEditCellValueMutation(id, field);
    let cellToFocusAfter;
    if (reason === GridCellEditStopReasons.enterKeyDown) {
      cellToFocusAfter = "below";
    } else if (reason === GridCellEditStopReasons.tabKeyDown) {
      cellToFocusAfter = "right";
    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {
      cellToFocusAfter = "left";
    }
    const ignoreModifications = reason === "escapeKeyDown";
    apiRef.current.stopCellEditMode({
      id,
      field,
      ignoreModifications,
      cellToFocusAfter
    });
  }, [apiRef]);
  const runIfNoFieldErrors = (callback) => async (...args) => {
    var _a;
    if (callback) {
      const {
        id,
        field
      } = args[0];
      const editRowsState = apiRef.current.state.editRows;
      const hasFieldErrors = (_a = editRowsState[id][field]) == null ? void 0 : _a.error;
      if (!hasFieldErrors) {
        callback(...args);
      }
    }
  };
  useGridEvent(apiRef, "cellDoubleClick", runIfEditModeIsCell(handleCellDoubleClick));
  useGridEvent(apiRef, "cellFocusOut", runIfEditModeIsCell(handleCellFocusOut));
  useGridEvent(apiRef, "cellKeyDown", runIfEditModeIsCell(handleCellKeyDown));
  useGridEvent(apiRef, "cellEditStart", runIfEditModeIsCell(handleCellEditStart));
  useGridEvent(apiRef, "cellEditStop", runIfEditModeIsCell(handleCellEditStop));
  useGridEventPriority(apiRef, "cellEditStart", props.onCellEditStart);
  useGridEventPriority(apiRef, "cellEditStop", runIfNoFieldErrors(props.onCellEditStop));
  const getCellMode = React188.useCallback((id, field) => {
    const editingState = gridEditRowsStateSelector(apiRef);
    const isEditing = editingState[id] && editingState[id][field];
    return isEditing ? GridCellModes.Edit : GridCellModes.View;
  }, [apiRef]);
  const updateCellModesModel = useEventCallback_default((newModel) => {
    const isNewModelDifferentFromProp = newModel !== props.cellModesModel;
    if (onCellModesModelChange && isNewModelDifferentFromProp) {
      onCellModesModelChange(newModel, {
        api: apiRef.current
      });
    }
    if (props.cellModesModel && isNewModelDifferentFromProp) {
      return;
    }
    setCellModesModel(newModel);
    cellModesModelRef.current = newModel;
    apiRef.current.publishEvent("cellModesModelChange", newModel);
  });
  const updateFieldInCellModesModel = React188.useCallback((id, field, newProps) => {
    const newModel = _extends({}, cellModesModelRef.current);
    if (newProps !== null) {
      newModel[id] = _extends({}, newModel[id], {
        [field]: _extends({}, newProps)
      });
    } else {
      const _newModel$id = newModel[id], otherFields = _objectWithoutPropertiesLoose(_newModel$id, [field].map(toPropertyKey));
      newModel[id] = otherFields;
      if (Object.keys(newModel[id]).length === 0) {
        delete newModel[id];
      }
    }
    updateCellModesModel(newModel);
  }, [updateCellModesModel]);
  const updateOrDeleteFieldState = React188.useCallback((id, field, newProps) => {
    apiRef.current.setState((state) => {
      const newEditingState = _extends({}, state.editRows);
      if (newProps !== null) {
        newEditingState[id] = _extends({}, newEditingState[id], {
          [field]: _extends({}, newProps)
        });
      } else {
        delete newEditingState[id][field];
        if (Object.keys(newEditingState[id]).length === 0) {
          delete newEditingState[id];
        }
      }
      return _extends({}, state, {
        editRows: newEditingState
      });
    });
  }, [apiRef]);
  const startCellEditMode = React188.useCallback((params) => {
    const {
      id,
      field
    } = params, other = _objectWithoutPropertiesLoose(params, _excluded81);
    throwIfNotEditable(id, field);
    throwIfNotInMode(id, field, GridCellModes.View);
    updateFieldInCellModesModel(id, field, _extends({
      mode: GridCellModes.Edit
    }, other));
  }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);
  const updateStateToStartCellEditMode = useEventCallback_default(async (params) => {
    const {
      id,
      field,
      deleteValue,
      initialValue
    } = params;
    const value = apiRef.current.getCellValue(id, field);
    let newValue = value;
    if (deleteValue) {
      newValue = getDefaultCellValue(apiRef.current.getColumn(field));
    } else if (initialValue) {
      newValue = initialValue;
    }
    const column = apiRef.current.getColumn(field);
    const shouldProcessEditCellProps = !!column.preProcessEditCellProps && deleteValue;
    let newProps = {
      value: newValue,
      error: false,
      isProcessingProps: shouldProcessEditCellProps
    };
    updateOrDeleteFieldState(id, field, newProps);
    apiRef.current.setCellFocus(id, field);
    if (shouldProcessEditCellProps) {
      newProps = await Promise.resolve(column.preProcessEditCellProps({
        id,
        row: apiRef.current.getRow(id),
        props: newProps,
        hasChanged: newValue !== value
      }));
      if (apiRef.current.getCellMode(id, field) === GridCellModes.Edit) {
        const editingState = gridEditRowsStateSelector(apiRef);
        updateOrDeleteFieldState(id, field, _extends({}, newProps, {
          value: editingState[id][field].value,
          isProcessingProps: false
        }));
      }
    }
  });
  const stopCellEditMode = React188.useCallback((params) => {
    const {
      id,
      field
    } = params, other = _objectWithoutPropertiesLoose(params, _excluded216);
    throwIfNotInMode(id, field, GridCellModes.Edit);
    updateFieldInCellModesModel(id, field, _extends({
      mode: GridCellModes.View
    }, other));
  }, [throwIfNotInMode, updateFieldInCellModesModel]);
  const updateStateToStopCellEditMode = useEventCallback_default(async (params) => {
    var _a;
    const {
      id,
      field,
      ignoreModifications,
      cellToFocusAfter = "none"
    } = params;
    throwIfNotInMode(id, field, GridCellModes.Edit);
    apiRef.current.runPendingEditCellValueMutation(id, field);
    const finishCellEditMode = () => {
      updateOrDeleteFieldState(id, field, null);
      updateFieldInCellModesModel(id, field, null);
      if (cellToFocusAfter !== "none") {
        apiRef.current.moveFocusToRelativeCell(id, field, cellToFocusAfter);
      }
    };
    if (ignoreModifications) {
      finishCellEditMode();
      return;
    }
    const editingState = gridEditRowsStateSelector(apiRef);
    const {
      error,
      isProcessingProps
    } = editingState[id][field];
    const row = apiRef.current.getRow(id);
    if (error || isProcessingProps) {
      prevCellModesModel.current[id][field].mode = GridCellModes.Edit;
      updateFieldInCellModesModel(id, field, {
        mode: GridCellModes.Edit
      });
      return;
    }
    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromCellEditing(id, field);
    if ((_a = props.dataSource) == null ? void 0 : _a.updateRow) {
      if (isDeepEqual2(row, rowUpdate)) {
        finishCellEditMode();
        return;
      }
      const handleError = () => {
        prevCellModesModel.current[id][field].mode = GridCellModes.Edit;
        updateFieldInCellModesModel(id, field, {
          mode: GridCellModes.Edit
        });
      };
      const updateRowParams = {
        rowId: id,
        updatedRow: rowUpdate,
        previousRow: row
      };
      try {
        await apiRef.current.dataSource.editRow(updateRowParams);
        finishCellEditMode();
      } catch {
        handleError();
      }
    } else if (processRowUpdate) {
      const handleError = (errorThrown) => {
        prevCellModesModel.current[id][field].mode = GridCellModes.Edit;
        updateFieldInCellModesModel(id, field, {
          mode: GridCellModes.Edit
        });
        if (onProcessRowUpdateError) {
          onProcessRowUpdateError(errorThrown);
        } else if (true) {
          warnOnce(["MUI X: A call to `processRowUpdate()` threw an error which was not handled because `onProcessRowUpdateError()` is missing.", "To handle the error pass a callback to the `onProcessRowUpdateError()` prop, for example `<DataGrid onProcessRowUpdateError={(error) => ...} />`.", "For more detail, see https://mui.com/x/react-data-grid/editing/persistence/."], "error");
        }
      };
      try {
        Promise.resolve(processRowUpdate(rowUpdate, row, {
          rowId: id
        })).then((finalRowUpdate) => {
          apiRef.current.updateRows([finalRowUpdate]);
          finishCellEditMode();
        }).catch(handleError);
      } catch (errorThrown) {
        handleError(errorThrown);
      }
    } else {
      apiRef.current.updateRows([rowUpdate]);
      finishCellEditMode();
    }
  });
  const setCellEditingEditCellValue = React188.useCallback(async (params) => {
    var _a, _b;
    const {
      id,
      field,
      value,
      debounceMs,
      unstable_skipValueParser: skipValueParser
    } = params;
    throwIfNotEditable(id, field);
    throwIfNotInMode(id, field, GridCellModes.Edit);
    const column = apiRef.current.getColumn(field);
    const row = apiRef.current.getRow(id);
    let parsedValue = value;
    if (column.valueParser && !skipValueParser) {
      parsedValue = column.valueParser(value, row, column, apiRef);
    }
    let editingState = gridEditRowsStateSelector(apiRef);
    let newProps = _extends({}, editingState[id][field], {
      value: parsedValue,
      changeReason: debounceMs ? "debouncedSetEditCellValue" : "setEditCellValue"
    });
    if (column.preProcessEditCellProps) {
      const hasChanged = value !== editingState[id][field].value;
      newProps = _extends({}, newProps, {
        isProcessingProps: true
      });
      updateOrDeleteFieldState(id, field, newProps);
      newProps = await Promise.resolve(column.preProcessEditCellProps({
        id,
        row,
        props: newProps,
        hasChanged
      }));
    }
    if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {
      return false;
    }
    editingState = gridEditRowsStateSelector(apiRef);
    newProps = _extends({}, newProps, {
      isProcessingProps: false
    });
    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;
    updateOrDeleteFieldState(id, field, newProps);
    editingState = gridEditRowsStateSelector(apiRef);
    return !((_b = (_a = editingState[id]) == null ? void 0 : _a[field]) == null ? void 0 : _b.error);
  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);
  const getRowWithUpdatedValuesFromCellEditing = React188.useCallback((id, field) => {
    const column = apiRef.current.getColumn(field);
    const editingState = gridEditRowsStateSelector(apiRef);
    const row = apiRef.current.getRow(id);
    if (!editingState[id] || !editingState[id][field]) {
      return apiRef.current.getRow(id);
    }
    const {
      value
    } = editingState[id][field];
    return column.valueSetter ? column.valueSetter(value, row, column, apiRef) : _extends({}, row, {
      [field]: value
    });
  }, [apiRef]);
  const editingApi = {
    getCellMode,
    startCellEditMode,
    stopCellEditMode
  };
  const editingPrivateApi = {
    setCellEditingEditCellValue,
    getRowWithUpdatedValuesFromCellEditing
  };
  useGridApiMethod(apiRef, editingApi, "public");
  useGridApiMethod(apiRef, editingPrivateApi, "private");
  React188.useEffect(() => {
    if (cellModesModelProp) {
      updateCellModesModel(cellModesModelProp);
    }
  }, [cellModesModelProp, updateCellModesModel]);
  useEnhancedEffect_default(() => {
    const rowsLookup = gridRowsLookupSelector(apiRef);
    const copyOfPrevCellModes = prevCellModesModel.current;
    prevCellModesModel.current = deepClone2(cellModesModel);
    Object.entries(cellModesModel).forEach(([id, fields]) => {
      Object.entries(fields).forEach(([field, params]) => {
        var _a, _b;
        const prevMode = ((_b = (_a = copyOfPrevCellModes[id]) == null ? void 0 : _a[field]) == null ? void 0 : _b.mode) || GridCellModes.View;
        const originalId = rowsLookup[id] ? apiRef.current.getRowId(rowsLookup[id]) : id;
        if (params.mode === GridCellModes.Edit && prevMode === GridCellModes.View) {
          updateStateToStartCellEditMode(_extends({
            id: originalId,
            field
          }, params));
        } else if (params.mode === GridCellModes.View && prevMode === GridCellModes.Edit) {
          updateStateToStopCellEditMode(_extends({
            id: originalId,
            field
          }, params));
        }
      });
    });
  }, [apiRef, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);
};

// node_modules/@mui/x-data-grid/esm/hooks/features/editing/useGridRowEditing.js
init_objectWithoutPropertiesLoose();
init_extends();
var React189 = __toESM(require_react(), 1);
var _excluded82 = ["id"];
var _excluded217 = ["id"];
var useGridRowEditing = (apiRef, props) => {
  const [rowModesModel, setRowModesModel] = React189.useState({});
  const rowModesModelRef = React189.useRef(rowModesModel);
  const prevRowModesModel = React189.useRef({});
  const prevRowValuesLookup = React189.useRef({});
  const focusTimeout = React189.useRef(void 0);
  const nextFocusedCell = React189.useRef(null);
  const {
    processRowUpdate,
    onProcessRowUpdateError,
    rowModesModel: rowModesModelProp,
    onRowModesModelChange
  } = props;
  const runIfEditModeIsRow = (callback) => (...args) => {
    if (props.editMode === GridEditModes.Row) {
      callback(...args);
    }
  };
  const throwIfNotEditable = React189.useCallback((id, field) => {
    const params = apiRef.current.getCellParams(id, field);
    if (!apiRef.current.isCellEditable(params)) {
      throw new Error(`MUI X: The cell with id=${id} and field=${field} is not editable.`);
    }
  }, [apiRef]);
  const throwIfNotInMode = React189.useCallback((id, mode) => {
    if (apiRef.current.getRowMode(id) !== mode) {
      throw new Error(`MUI X: The row with id=${id} is not in ${mode} mode.`);
    }
  }, [apiRef]);
  const hasFieldsWithErrors = React189.useCallback((rowId) => {
    const editingState = gridEditRowsStateSelector(apiRef);
    return Object.values(editingState[rowId]).some((fieldProps) => fieldProps.error);
  }, [apiRef]);
  const handleCellDoubleClick = React189.useCallback((params, event) => {
    if (!params.isEditable) {
      return;
    }
    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {
      return;
    }
    const rowParams = apiRef.current.getRowParams(params.id);
    const newParams = _extends({}, rowParams, {
      field: params.field,
      reason: GridRowEditStartReasons.cellDoubleClick
    });
    apiRef.current.publishEvent("rowEditStart", newParams, event);
  }, [apiRef]);
  const handleCellFocusIn = React189.useCallback((params) => {
    nextFocusedCell.current = params;
  }, []);
  const handleCellFocusOut = React189.useCallback((params, event) => {
    if (!params.isEditable) {
      return;
    }
    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {
      return;
    }
    nextFocusedCell.current = null;
    focusTimeout.current = setTimeout(() => {
      var _a;
      if (((_a = nextFocusedCell.current) == null ? void 0 : _a.id) !== params.id) {
        if (!apiRef.current.getRow(params.id)) {
          return;
        }
        if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {
          return;
        }
        if (hasFieldsWithErrors(params.id)) {
          return;
        }
        const rowParams = apiRef.current.getRowParams(params.id);
        const newParams = _extends({}, rowParams, {
          field: params.field,
          reason: GridRowEditStopReasons.rowFocusOut
        });
        apiRef.current.publishEvent("rowEditStop", newParams, event);
      }
    });
  }, [apiRef, hasFieldsWithErrors]);
  React189.useEffect(() => {
    return () => {
      clearTimeout(focusTimeout.current);
    };
  }, []);
  const handleCellKeyDown = React189.useCallback((params, event) => {
    if (params.cellMode === GridRowModes.Edit) {
      if (event.which === 229) {
        return;
      }
      let reason;
      if (event.key === "Escape") {
        reason = GridRowEditStopReasons.escapeKeyDown;
      } else if (event.key === "Enter") {
        reason = GridRowEditStopReasons.enterKeyDown;
      } else if (event.key === "Tab") {
        const columnFields = gridVisibleColumnFieldsSelector(apiRef).filter((field) => {
          const column = apiRef.current.getColumn(field);
          if (column.type === GRID_ACTIONS_COLUMN_TYPE) {
            return true;
          }
          return apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field));
        });
        if (event.shiftKey) {
          if (params.field === columnFields[0]) {
            reason = GridRowEditStopReasons.shiftTabKeyDown;
          }
        } else if (params.field === columnFields[columnFields.length - 1]) {
          reason = GridRowEditStopReasons.tabKeyDown;
        }
        event.preventDefault();
        if (!reason) {
          const index = columnFields.findIndex((field) => field === params.field);
          const nextFieldToFocus = columnFields[event.shiftKey ? index - 1 : index + 1];
          apiRef.current.setCellFocus(params.id, nextFieldToFocus);
        }
      }
      if (reason) {
        if (reason !== GridRowEditStopReasons.escapeKeyDown && hasFieldsWithErrors(params.id)) {
          return;
        }
        const newParams = _extends({}, apiRef.current.getRowParams(params.id), {
          reason,
          field: params.field
        });
        apiRef.current.publishEvent("rowEditStop", newParams, event);
      }
    } else if (params.isEditable) {
      let reason;
      const canStartEditing = apiRef.current.unstable_applyPipeProcessors("canStartEditing", true, {
        event,
        cellParams: params,
        editMode: "row"
      });
      if (!canStartEditing) {
        return;
      }
      if (isPrintableKey(event)) {
        reason = GridRowEditStartReasons.printableKeyDown;
      } else if (isPasteShortcut(event)) {
        reason = GridRowEditStartReasons.printableKeyDown;
      } else if (event.key === "Enter") {
        reason = GridRowEditStartReasons.enterKeyDown;
      } else if (event.key === "Backspace" || event.key === "Delete") {
        reason = GridRowEditStartReasons.deleteKeyDown;
      }
      if (reason) {
        const rowParams = apiRef.current.getRowParams(params.id);
        const newParams = _extends({}, rowParams, {
          field: params.field,
          reason
        });
        apiRef.current.publishEvent("rowEditStart", newParams, event);
      }
    }
  }, [apiRef, hasFieldsWithErrors]);
  const handleRowEditStart = React189.useCallback((params) => {
    const {
      id,
      field,
      reason
    } = params;
    const startRowEditModeParams = {
      id,
      fieldToFocus: field
    };
    if (reason === GridRowEditStartReasons.printableKeyDown || reason === GridRowEditStartReasons.deleteKeyDown) {
      startRowEditModeParams.deleteValue = !!field;
    }
    apiRef.current.startRowEditMode(startRowEditModeParams);
  }, [apiRef]);
  const handleRowEditStop = React189.useCallback((params) => {
    const {
      id,
      reason,
      field
    } = params;
    apiRef.current.runPendingEditCellValueMutation(id);
    let cellToFocusAfter;
    if (reason === GridRowEditStopReasons.enterKeyDown) {
      cellToFocusAfter = "below";
    } else if (reason === GridRowEditStopReasons.tabKeyDown) {
      cellToFocusAfter = "right";
    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {
      cellToFocusAfter = "left";
    }
    const ignoreModifications = reason === "escapeKeyDown";
    apiRef.current.stopRowEditMode({
      id,
      ignoreModifications,
      field,
      cellToFocusAfter
    });
  }, [apiRef]);
  useGridEvent(apiRef, "cellDoubleClick", runIfEditModeIsRow(handleCellDoubleClick));
  useGridEvent(apiRef, "cellFocusIn", runIfEditModeIsRow(handleCellFocusIn));
  useGridEvent(apiRef, "cellFocusOut", runIfEditModeIsRow(handleCellFocusOut));
  useGridEvent(apiRef, "cellKeyDown", runIfEditModeIsRow(handleCellKeyDown));
  useGridEvent(apiRef, "rowEditStart", runIfEditModeIsRow(handleRowEditStart));
  useGridEvent(apiRef, "rowEditStop", runIfEditModeIsRow(handleRowEditStop));
  useGridEventPriority(apiRef, "rowEditStart", props.onRowEditStart);
  useGridEventPriority(apiRef, "rowEditStop", props.onRowEditStop);
  const getRowMode = React189.useCallback((id) => {
    const isEditing = gridRowIsEditingSelector(apiRef, {
      rowId: id,
      editMode: props.editMode
    });
    return isEditing ? GridRowModes.Edit : GridRowModes.View;
  }, [apiRef, props.editMode]);
  const updateRowModesModel = useEventCallback_default((newModel) => {
    const isNewModelDifferentFromProp = newModel !== props.rowModesModel;
    if (onRowModesModelChange && isNewModelDifferentFromProp) {
      onRowModesModelChange(newModel, {
        api: apiRef.current
      });
    }
    if (props.rowModesModel && isNewModelDifferentFromProp) {
      return;
    }
    setRowModesModel(newModel);
    rowModesModelRef.current = newModel;
    apiRef.current.publishEvent("rowModesModelChange", newModel);
  });
  const updateRowInRowModesModel = React189.useCallback((id, newProps) => {
    const newModel = _extends({}, rowModesModelRef.current);
    if (newProps !== null) {
      newModel[id] = _extends({}, newProps);
    } else {
      delete newModel[id];
    }
    updateRowModesModel(newModel);
  }, [updateRowModesModel]);
  const updateOrDeleteRowState = React189.useCallback((id, newProps) => {
    apiRef.current.setState((state) => {
      const newEditingState = _extends({}, state.editRows);
      if (newProps !== null) {
        newEditingState[id] = newProps;
      } else {
        delete newEditingState[id];
      }
      return _extends({}, state, {
        editRows: newEditingState
      });
    });
  }, [apiRef]);
  const updateOrDeleteFieldState = React189.useCallback((id, field, newProps) => {
    apiRef.current.setState((state) => {
      const newEditingState = _extends({}, state.editRows);
      if (newProps !== null) {
        newEditingState[id] = _extends({}, newEditingState[id], {
          [field]: _extends({}, newProps)
        });
      } else {
        delete newEditingState[id][field];
        if (Object.keys(newEditingState[id]).length === 0) {
          delete newEditingState[id];
        }
      }
      return _extends({}, state, {
        editRows: newEditingState
      });
    });
  }, [apiRef]);
  const startRowEditMode = React189.useCallback((params) => {
    const {
      id
    } = params, other = _objectWithoutPropertiesLoose(params, _excluded82);
    throwIfNotInMode(id, GridRowModes.View);
    updateRowInRowModesModel(id, _extends({
      mode: GridRowModes.Edit
    }, other));
  }, [throwIfNotInMode, updateRowInRowModesModel]);
  const updateStateToStartRowEditMode = useEventCallback_default((params) => {
    const {
      id,
      fieldToFocus,
      deleteValue,
      initialValue
    } = params;
    const row = apiRef.current.getRow(id);
    const columns = gridColumnDefinitionsSelector(apiRef);
    const newProps = columns.reduce((acc, col) => {
      const field = col.field;
      const cellParams = apiRef.current.getCellParams(id, field);
      if (!cellParams.isEditable) {
        return acc;
      }
      const column = apiRef.current.getColumn(field);
      let newValue = apiRef.current.getCellValue(id, field);
      if (fieldToFocus === field && (deleteValue || initialValue)) {
        if (deleteValue) {
          newValue = getDefaultCellValue(column);
        } else if (initialValue) {
          newValue = initialValue;
        }
      }
      acc[field] = {
        value: newValue,
        error: false,
        isProcessingProps: column.editable && !!column.preProcessEditCellProps && deleteValue
      };
      return acc;
    }, {});
    prevRowValuesLookup.current[id] = row;
    updateOrDeleteRowState(id, newProps);
    if (fieldToFocus) {
      apiRef.current.setCellFocus(id, fieldToFocus);
    }
    columns.filter((column) => {
      const isCellEditable = apiRef.current.getCellParams(id, column.field).isEditable;
      return isCellEditable && column.editable && !!column.preProcessEditCellProps && deleteValue;
    }).forEach((column) => {
      const field = column.field;
      const value = apiRef.current.getCellValue(id, field);
      const newValue = deleteValue ? getDefaultCellValue(column) : initialValue ?? value;
      Promise.resolve(column.preProcessEditCellProps({
        id,
        row,
        props: newProps[field],
        hasChanged: newValue !== value
      })).then((processedProps) => {
        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {
          const editingState = gridEditRowsStateSelector(apiRef);
          updateOrDeleteFieldState(id, field, _extends({}, processedProps, {
            value: editingState[id][field].value,
            isProcessingProps: false
          }));
        }
      });
    });
  });
  const stopRowEditMode = React189.useCallback((params) => {
    const {
      id
    } = params, other = _objectWithoutPropertiesLoose(params, _excluded217);
    throwIfNotInMode(id, GridRowModes.Edit);
    updateRowInRowModesModel(id, _extends({
      mode: GridRowModes.View
    }, other));
  }, [throwIfNotInMode, updateRowInRowModesModel]);
  const updateStateToStopRowEditMode = useEventCallback_default(async (params) => {
    var _a;
    const {
      id,
      ignoreModifications,
      field: focusedField,
      cellToFocusAfter = "none"
    } = params;
    apiRef.current.runPendingEditCellValueMutation(id);
    const finishRowEditMode = () => {
      if (cellToFocusAfter !== "none" && focusedField) {
        apiRef.current.moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);
      }
      updateOrDeleteRowState(id, null);
      updateRowInRowModesModel(id, null);
      delete prevRowValuesLookup.current[id];
    };
    if (ignoreModifications) {
      finishRowEditMode();
      return;
    }
    const editingState = gridEditRowsStateSelector(apiRef);
    const row = prevRowValuesLookup.current[id];
    const isSomeFieldProcessingProps = Object.values(editingState[id]).some((fieldProps) => fieldProps.isProcessingProps);
    if (isSomeFieldProcessingProps) {
      prevRowModesModel.current[id].mode = GridRowModes.Edit;
      return;
    }
    if (hasFieldsWithErrors(id)) {
      prevRowModesModel.current[id].mode = GridRowModes.Edit;
      updateRowInRowModesModel(id, {
        mode: GridRowModes.Edit
      });
      return;
    }
    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromRowEditing(id);
    if ((_a = props.dataSource) == null ? void 0 : _a.updateRow) {
      if (isDeepEqual2(row, rowUpdate)) {
        finishRowEditMode();
        return;
      }
      const handleError = () => {
        prevRowModesModel.current[id].mode = GridRowModes.Edit;
        updateRowInRowModesModel(id, {
          mode: GridRowModes.Edit
        });
      };
      const updateRowParams = {
        rowId: id,
        updatedRow: rowUpdate,
        previousRow: row
      };
      try {
        await apiRef.current.dataSource.editRow(updateRowParams);
        finishRowEditMode();
      } catch {
        handleError();
      }
    } else if (processRowUpdate) {
      const handleError = (errorThrown) => {
        if (prevRowModesModel.current[id]) {
          prevRowModesModel.current[id].mode = GridRowModes.Edit;
          updateRowInRowModesModel(id, {
            mode: GridRowModes.Edit
          });
        }
        if (onProcessRowUpdateError) {
          onProcessRowUpdateError(errorThrown);
        } else if (true) {
          warnOnce(["MUI X: A call to `processRowUpdate()` threw an error which was not handled because `onProcessRowUpdateError()` is missing.", "To handle the error pass a callback to the `onProcessRowUpdateError()` prop, for example `<DataGrid onProcessRowUpdateError={(error) => ...} />`.", "For more detail, see https://mui.com/x/react-data-grid/editing/persistence/."], "error");
        }
      };
      try {
        Promise.resolve(processRowUpdate(rowUpdate, row, {
          rowId: id
        })).then((finalRowUpdate) => {
          apiRef.current.updateRows([finalRowUpdate]);
          finishRowEditMode();
        }).catch(handleError);
      } catch (errorThrown) {
        handleError(errorThrown);
      }
    } else {
      apiRef.current.updateRows([rowUpdate]);
      finishRowEditMode();
    }
  });
  const setRowEditingEditCellValue = React189.useCallback((params) => {
    const {
      id,
      field,
      value,
      debounceMs,
      unstable_skipValueParser: skipValueParser
    } = params;
    throwIfNotEditable(id, field);
    const column = apiRef.current.getColumn(field);
    const row = apiRef.current.getRow(id);
    let parsedValue = value;
    if (column.valueParser && !skipValueParser) {
      parsedValue = column.valueParser(value, row, column, apiRef);
    }
    let editingState = gridEditRowsStateSelector(apiRef);
    let newProps = _extends({}, editingState[id][field], {
      value: parsedValue,
      changeReason: debounceMs ? "debouncedSetEditCellValue" : "setEditCellValue"
    });
    if (!column.preProcessEditCellProps) {
      updateOrDeleteFieldState(id, field, newProps);
    }
    return new Promise((resolve) => {
      const promises = [];
      if (column.preProcessEditCellProps) {
        const hasChanged = newProps.value !== editingState[id][field].value;
        newProps = _extends({}, newProps, {
          isProcessingProps: true
        });
        updateOrDeleteFieldState(id, field, newProps);
        const _editingState$id = editingState[id], otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(toPropertyKey));
        const promise = Promise.resolve(column.preProcessEditCellProps({
          id,
          row,
          props: newProps,
          hasChanged,
          otherFieldsProps
        })).then((processedProps) => {
          if (apiRef.current.getRowMode(id) === GridRowModes.View) {
            resolve(false);
            return;
          }
          editingState = gridEditRowsStateSelector(apiRef);
          processedProps = _extends({}, processedProps, {
            isProcessingProps: false
          });
          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;
          updateOrDeleteFieldState(id, field, processedProps);
        });
        promises.push(promise);
      }
      Object.entries(editingState[id]).forEach(([thisField, fieldProps]) => {
        if (thisField === field) {
          return;
        }
        const fieldColumn = apiRef.current.getColumn(thisField);
        if (!fieldColumn.preProcessEditCellProps) {
          return;
        }
        fieldProps = _extends({}, fieldProps, {
          isProcessingProps: true
        });
        updateOrDeleteFieldState(id, thisField, fieldProps);
        editingState = gridEditRowsStateSelector(apiRef);
        const _editingState$id2 = editingState[id], otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(toPropertyKey));
        const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({
          id,
          row,
          props: fieldProps,
          hasChanged: false,
          otherFieldsProps
        })).then((processedProps) => {
          if (apiRef.current.getRowMode(id) === GridRowModes.View) {
            resolve(false);
            return;
          }
          processedProps = _extends({}, processedProps, {
            isProcessingProps: false
          });
          updateOrDeleteFieldState(id, thisField, processedProps);
        });
        promises.push(promise);
      });
      Promise.all(promises).then(() => {
        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {
          editingState = gridEditRowsStateSelector(apiRef);
          resolve(!editingState[id][field].error);
        } else {
          resolve(false);
        }
      });
    });
  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);
  const getRowWithUpdatedValuesFromRowEditing = React189.useCallback((id) => {
    const editingState = gridEditRowsStateSelector(apiRef);
    const row = apiRef.current.getRow(id);
    if (!editingState[id]) {
      return apiRef.current.getRow(id);
    }
    let rowUpdate = _extends({}, prevRowValuesLookup.current[id], row);
    Object.entries(editingState[id]).forEach(([field, fieldProps]) => {
      const column = apiRef.current.getColumn(field);
      if (column == null ? void 0 : column.valueSetter) {
        rowUpdate = column.valueSetter(fieldProps.value, rowUpdate, column, apiRef);
      } else {
        rowUpdate[field] = fieldProps.value;
      }
    });
    return rowUpdate;
  }, [apiRef]);
  const editingApi = {
    getRowMode,
    startRowEditMode,
    stopRowEditMode
  };
  const editingPrivateApi = {
    setRowEditingEditCellValue,
    getRowWithUpdatedValuesFromRowEditing
  };
  useGridApiMethod(apiRef, editingApi, "public");
  useGridApiMethod(apiRef, editingPrivateApi, "private");
  React189.useEffect(() => {
    if (rowModesModelProp) {
      updateRowModesModel(rowModesModelProp);
    }
  }, [rowModesModelProp, updateRowModesModel]);
  useEnhancedEffect_default(() => {
    const rowsLookup = gridRowsLookupSelector(apiRef);
    const copyOfPrevRowModesModel = prevRowModesModel.current;
    prevRowModesModel.current = deepClone2(rowModesModel);
    const ids = /* @__PURE__ */ new Set([...Object.keys(rowModesModel), ...Object.keys(copyOfPrevRowModesModel)]);
    Array.from(ids).forEach((id) => {
      var _a;
      const params = rowModesModel[id] ?? {
        mode: GridRowModes.View
      };
      const prevMode = ((_a = copyOfPrevRowModesModel[id]) == null ? void 0 : _a.mode) || GridRowModes.View;
      const originalId = rowsLookup[id] ? apiRef.current.getRowId(rowsLookup[id]) : id;
      if (params.mode === GridRowModes.Edit && prevMode === GridRowModes.View) {
        updateStateToStartRowEditMode(_extends({
          id: originalId
        }, params));
      } else if (params.mode === GridRowModes.View && prevMode === GridRowModes.Edit) {
        updateStateToStopRowEditMode(_extends({
          id: originalId
        }, params));
      }
    });
  }, [apiRef, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);
};

// node_modules/@mui/x-data-grid/esm/hooks/features/editing/useGridEditing.js
var editingStateInitializer = (state) => _extends({}, state, {
  editRows: {}
});
var useGridEditing = (apiRef, props) => {
  useGridCellEditing(apiRef, props);
  useGridRowEditing(apiRef, props);
  const debounceMap = React190.useRef({});
  const {
    isCellEditable: isCellEditableProp
  } = props;
  const isCellEditable = React190.useCallback((params) => {
    if (isAutogeneratedRowNode(params.rowNode)) {
      return false;
    }
    if (!params.colDef.editable) {
      return false;
    }
    if (!params.colDef.renderEditCell) {
      return false;
    }
    if (isCellEditableProp) {
      return isCellEditableProp(params);
    }
    return true;
  }, [isCellEditableProp]);
  const maybeDebounce = (id, field, debounceMs, callback) => {
    if (!debounceMs) {
      callback();
      return;
    }
    if (!debounceMap.current[id]) {
      debounceMap.current[id] = {};
    }
    if (debounceMap.current[id][field]) {
      const [timeout2] = debounceMap.current[id][field];
      clearTimeout(timeout2);
    }
    const runImmediately = () => {
      const [timeout2] = debounceMap.current[id][field];
      clearTimeout(timeout2);
      callback();
      delete debounceMap.current[id][field];
    };
    const timeout = setTimeout(() => {
      callback();
      delete debounceMap.current[id][field];
    }, debounceMs);
    debounceMap.current[id][field] = [timeout, runImmediately];
  };
  React190.useEffect(() => {
    const debounces = debounceMap.current;
    return () => {
      Object.entries(debounces).forEach(([id, fields]) => {
        Object.keys(fields).forEach((field) => {
          const [timeout] = debounces[id][field];
          clearTimeout(timeout);
          delete debounces[id][field];
        });
      });
    };
  }, []);
  const runPendingEditCellValueMutation = React190.useCallback((id, field) => {
    if (!debounceMap.current[id]) {
      return;
    }
    if (!field) {
      Object.keys(debounceMap.current[id]).forEach((debouncedField) => {
        const [, runCallback] = debounceMap.current[id][debouncedField];
        runCallback();
      });
    } else if (debounceMap.current[id][field]) {
      const [, runCallback] = debounceMap.current[id][field];
      runCallback();
    }
  }, []);
  const setEditCellValue = React190.useCallback((params) => {
    const {
      id,
      field,
      debounceMs
    } = params;
    return new Promise((resolve) => {
      maybeDebounce(id, field, debounceMs, async () => {
        const setEditCellValueToCall = props.editMode === GridEditModes.Row ? apiRef.current.setRowEditingEditCellValue : apiRef.current.setCellEditingEditCellValue;
        if (apiRef.current.getCellMode(id, field) === GridCellModes.Edit) {
          const result = await setEditCellValueToCall(params);
          resolve(result);
        }
      });
    });
  }, [apiRef, props.editMode]);
  const getRowWithUpdatedValues = React190.useCallback((id, field) => {
    return props.editMode === GridEditModes.Cell ? apiRef.current.getRowWithUpdatedValuesFromCellEditing(id, field) : apiRef.current.getRowWithUpdatedValuesFromRowEditing(id);
  }, [apiRef, props.editMode]);
  const getEditCellMeta = React190.useCallback((id, field) => {
    var _a;
    const editingState = gridEditRowsStateSelector(apiRef);
    return ((_a = editingState[id]) == null ? void 0 : _a[field]) ?? null;
  }, [apiRef]);
  const editingSharedApi = {
    isCellEditable,
    setEditCellValue,
    getRowWithUpdatedValues,
    unstable_getEditCellMeta: getEditCellMeta
  };
  const editingSharedPrivateApi = {
    runPendingEditCellValueMutation
  };
  useGridApiMethod(apiRef, editingSharedApi, "public");
  useGridApiMethod(apiRef, editingSharedPrivateApi, "private");
};

// node_modules/@mui/x-data-grid/esm/hooks/features/rows/useGridRows.js
init_extends();
var React191 = __toESM(require_react(), 1);
var rowsStateInitializer = (state, props, apiRef) => {
  const isDataSourceAvailable = !!props.dataSource;
  apiRef.current.caches.rows = createRowsInternalCache({
    rows: isDataSourceAvailable ? [] : props.rows,
    getRowId: props.getRowId,
    loading: props.loading,
    rowCount: props.rowCount
  });
  return _extends({}, state, {
    rows: getRowsStateFromCache({
      apiRef,
      rowCountProp: props.rowCount,
      loadingProp: isDataSourceAvailable ? true : props.loading,
      previousTree: null,
      previousTreeDepths: null
    })
  });
};
var useGridRows = (apiRef, props, configuration2) => {
  if (true) {
    try {
      Object.freeze(props.rows);
    } catch (error) {
    }
  }
  const logger = useGridLogger(apiRef, "useGridRows");
  const lastUpdateMs = React191.useRef(Date.now());
  const lastRowCount = React191.useRef(props.rowCount);
  const timeout = useTimeout();
  const {
    setRowIndex
  } = configuration2.hooks.useGridRowsOverridableMethods(apiRef, props);
  const getRow = React191.useCallback((id) => {
    const model = gridRowsLookupSelector(apiRef)[id];
    if (model) {
      return model;
    }
    const node = gridRowNodeSelector(apiRef, id);
    if (node && isAutogeneratedRowNode(node)) {
      return {
        [GRID_ID_AUTOGENERATED]: id
      };
    }
    return null;
  }, [apiRef]);
  const getRowId = React191.useCallback((row) => gridRowIdSelector(apiRef, row), [apiRef]);
  const throttledRowsChange = React191.useCallback(({
    cache,
    throttle: throttle2
  }) => {
    const run = () => {
      lastUpdateMs.current = Date.now();
      apiRef.current.setState((state) => _extends({}, state, {
        rows: getRowsStateFromCache({
          apiRef,
          rowCountProp: props.rowCount,
          loadingProp: props.loading,
          previousTree: gridRowTreeSelector(apiRef),
          previousTreeDepths: gridRowTreeDepthsSelector(apiRef),
          previousGroupsToFetch: gridRowGroupsToFetchSelector(apiRef)
        })
      }));
      apiRef.current.publishEvent("rowsSet");
    };
    timeout.clear();
    apiRef.current.caches.rows = cache;
    if (!throttle2) {
      run();
      return;
    }
    const throttleRemainingTimeMs = props.throttleRowsMs - (Date.now() - lastUpdateMs.current);
    if (throttleRemainingTimeMs > 0) {
      timeout.start(throttleRemainingTimeMs, run);
      return;
    }
    run();
  }, [props.throttleRowsMs, props.rowCount, props.loading, apiRef, timeout]);
  const setRows = React191.useCallback((rows) => {
    logger.debug(`Updating all rows, new length ${rows.length}`);
    if (gridPivotActiveSelector(apiRef)) {
      apiRef.current.updateNonPivotRows(rows, false);
      return;
    }
    const cache = createRowsInternalCache({
      rows,
      getRowId: props.getRowId,
      loading: props.loading,
      rowCount: props.rowCount
    });
    const prevCache = apiRef.current.caches.rows;
    cache.rowsBeforePartialUpdates = prevCache.rowsBeforePartialUpdates;
    throttledRowsChange({
      cache,
      throttle: true
    });
  }, [logger, props.getRowId, props.loading, props.rowCount, throttledRowsChange, apiRef]);
  const updateRows = React191.useCallback((updates) => {
    if (props.signature === GridSignature.DataGrid && updates.length > 1) {
      throw new Error(["MUI X: You cannot update several rows at once in `apiRef.current.updateRows` on the DataGrid.", "You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature."].join("\n"));
    }
    if (gridPivotActiveSelector(apiRef)) {
      apiRef.current.updateNonPivotRows(updates);
      return;
    }
    const nonPinnedRowsUpdates = computeRowsUpdates(apiRef, updates, props.getRowId);
    const cache = updateCacheWithNewRows({
      updates: nonPinnedRowsUpdates,
      getRowId: props.getRowId,
      previousCache: apiRef.current.caches.rows
    });
    throttledRowsChange({
      cache,
      throttle: true
    });
  }, [props.signature, props.getRowId, throttledRowsChange, apiRef]);
  const updateNestedRows = React191.useCallback((updates, groupKeys) => {
    const nonPinnedRowsUpdates = computeRowsUpdates(apiRef, updates, props.getRowId);
    const cache = updateCacheWithNewRows({
      updates: nonPinnedRowsUpdates,
      getRowId: props.getRowId,
      previousCache: apiRef.current.caches.rows,
      groupKeys: groupKeys ?? []
    });
    throttledRowsChange({
      cache,
      throttle: false
    });
  }, [props.getRowId, throttledRowsChange, apiRef]);
  const setLoading = React191.useCallback((loading) => {
    logger.debug(`Setting loading to ${loading}`);
    apiRef.current.setState((state) => _extends({}, state, {
      rows: _extends({}, state.rows, {
        loading
      })
    }));
    apiRef.current.caches.rows.loadingPropBeforePartialUpdates = loading;
  }, [apiRef, logger]);
  const getRowModels = React191.useCallback(() => {
    const dataRows = gridDataRowIdsSelector(apiRef);
    const idRowsLookup = gridRowsLookupSelector(apiRef);
    return new Map(dataRows.map((id) => [id, idRowsLookup[id] ?? {}]));
  }, [apiRef]);
  const getRowsCount = React191.useCallback(() => gridRowCountSelector(apiRef), [apiRef]);
  const getAllRowIds = React191.useCallback(() => gridDataRowIdsSelector(apiRef), [apiRef]);
  const getRowIndexRelativeToVisibleRows = React191.useCallback((id) => {
    const {
      rowIdToIndexMap
    } = getVisibleRows(apiRef);
    return rowIdToIndexMap.get(id);
  }, [apiRef]);
  const setRowChildrenExpansion = React191.useCallback((id, isExpanded) => {
    const currentNode = gridRowNodeSelector(apiRef, id);
    if (!currentNode) {
      throw new Error(`MUI X: No row with id #${id} found.`);
    }
    if (currentNode.type !== "group") {
      throw new Error("MUI X: Only group nodes can be expanded or collapsed.");
    }
    const newNode = _extends({}, currentNode, {
      childrenExpanded: isExpanded
    });
    apiRef.current.setState((state) => {
      return _extends({}, state, {
        rows: _extends({}, state.rows, {
          tree: _extends({}, state.rows.tree, {
            [id]: newNode
          })
        })
      });
    });
    apiRef.current.publishEvent("rowExpansionChange", newNode);
  }, [apiRef]);
  const getRowNode = React191.useCallback((id) => gridRowNodeSelector(apiRef, id) ?? null, [apiRef]);
  const getRowGroupChildren = React191.useCallback(({
    skipAutoGeneratedRows = true,
    groupId,
    applySorting,
    applyFiltering,
    directChildrenOnly = false
  }) => {
    const tree = gridRowTreeSelector(apiRef);
    let children;
    if (applySorting) {
      const groupNode = tree[groupId];
      if (!groupNode) {
        return [];
      }
      const sortedRowIds = gridSortedRowIdsSelector(apiRef);
      children = [];
      const startIndex = sortedRowIds.findIndex((id) => id === groupId) + 1;
      for (let index = startIndex; index < sortedRowIds.length && (directChildrenOnly ? tree[sortedRowIds[index]].depth === groupNode.depth + 1 : tree[sortedRowIds[index]].depth > groupNode.depth); index += 1) {
        const id = sortedRowIds[index];
        if (!skipAutoGeneratedRows || !isAutogeneratedRowNode(tree[id])) {
          children.push(id);
        }
      }
    } else {
      children = getTreeNodeDescendants(tree, groupId, skipAutoGeneratedRows, directChildrenOnly);
    }
    if (applyFiltering) {
      const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);
      children = isObjectEmpty3(filteredRowsLookup) ? children : children.filter((childId) => filteredRowsLookup[childId] !== false);
    }
    return children;
  }, [apiRef]);
  const replaceRows = React191.useCallback((firstRowToRender, newRows) => {
    if (props.signature === GridSignature.DataGrid && newRows.length > 1) {
      throw new Error(["MUI X: You cannot replace rows using `apiRef.current.unstable_replaceRows` on the DataGrid.", "You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature."].join("\n"));
    }
    if (newRows.length === 0) {
      return;
    }
    const treeDepth = gridRowMaximumTreeDepthSelector(apiRef);
    if (treeDepth > 1) {
      throw new Error("`apiRef.current.unstable_replaceRows` is not compatible with tree data and row grouping");
    }
    const tree = _extends({}, gridRowTreeSelector(apiRef));
    const dataRowIdToModelLookup = _extends({}, gridRowsLookupSelector(apiRef));
    const rootGroup = tree[GRID_ROOT_GROUP_ID];
    const rootGroupChildren = [...rootGroup.children];
    const seenIds = /* @__PURE__ */ new Set();
    for (let i = 0; i < newRows.length; i += 1) {
      const rowModel = newRows[i];
      const rowId = getRowIdFromRowModel(rowModel, props.getRowId, "A row was provided without id when calling replaceRows().");
      const [removedRowId] = rootGroupChildren.splice(firstRowToRender + i, 1, rowId);
      if (!seenIds.has(removedRowId)) {
        delete dataRowIdToModelLookup[removedRowId];
        delete tree[removedRowId];
      }
      const rowTreeNodeConfig = {
        id: rowId,
        depth: 0,
        parent: GRID_ROOT_GROUP_ID,
        type: "leaf",
        groupingKey: null
      };
      dataRowIdToModelLookup[rowId] = rowModel;
      tree[rowId] = rowTreeNodeConfig;
      seenIds.add(rowId);
    }
    tree[GRID_ROOT_GROUP_ID] = _extends({}, rootGroup, {
      children: rootGroupChildren
    });
    const dataRowIds = rootGroupChildren.filter((childId) => {
      var _a;
      return ((_a = tree[childId]) == null ? void 0 : _a.type) === "leaf";
    });
    apiRef.current.caches.rows.dataRowIdToModelLookup = dataRowIdToModelLookup;
    apiRef.current.setState((state) => _extends({}, state, {
      rows: _extends({}, state.rows, {
        loading: props.loading,
        totalRowCount: Math.max(props.rowCount || 0, rootGroupChildren.length),
        dataRowIdToModelLookup,
        dataRowIds,
        tree
      })
    }));
    apiRef.current.publishEvent("rowsSet");
  }, [apiRef, props.signature, props.getRowId, props.loading, props.rowCount]);
  const rowApi = {
    getRow,
    setLoading,
    getRowId,
    getRowModels,
    getRowsCount,
    getAllRowIds,
    setRows,
    updateRows,
    getRowNode,
    getRowIndexRelativeToVisibleRows,
    unstable_replaceRows: replaceRows
  };
  const rowProApi = {
    setRowIndex,
    setRowChildrenExpansion,
    getRowGroupChildren
  };
  const rowProPrivateApi = {
    updateNestedRows
  };
  const groupRows = React191.useCallback(() => {
    logger.info(`Row grouping pre-processing have changed, regenerating the row tree`);
    let cache;
    if (apiRef.current.caches.rows.rowsBeforePartialUpdates === props.rows) {
      cache = _extends({}, apiRef.current.caches.rows, {
        updates: {
          type: "full",
          rows: gridDataRowIdsSelector(apiRef)
        }
      });
    } else {
      cache = createRowsInternalCache({
        rows: props.rows,
        getRowId: props.getRowId,
        loading: props.loading,
        rowCount: props.rowCount
      });
    }
    throttledRowsChange({
      cache,
      throttle: false
    });
  }, [logger, apiRef, props.rows, props.getRowId, props.loading, props.rowCount, throttledRowsChange]);
  const previousDataSource = useLazyRef(() => props.dataSource);
  const handleStrategyProcessorChange = React191.useCallback((methodName) => {
    if (props.dataSource && props.dataSource !== previousDataSource.current) {
      previousDataSource.current = props.dataSource;
      return;
    }
    if (methodName === "rowTreeCreation") {
      groupRows();
    }
  }, [groupRows, previousDataSource, props.dataSource]);
  const handleStrategyActivityChange = React191.useCallback(() => {
    if (apiRef.current.getActiveStrategy(GridStrategyGroup.RowTree) !== gridRowGroupingNameSelector(apiRef)) {
      groupRows();
    }
  }, [apiRef, groupRows]);
  useGridEvent(apiRef, "activeStrategyProcessorChange", handleStrategyProcessorChange);
  useGridEvent(apiRef, "strategyAvailabilityChange", handleStrategyActivityChange);
  const applyHydrateRowsProcessor = React191.useCallback(() => {
    apiRef.current.setState((state) => {
      const response = apiRef.current.unstable_applyPipeProcessors("hydrateRows", {
        tree: gridRowTreeSelector(apiRef),
        treeDepths: gridRowTreeDepthsSelector(apiRef),
        dataRowIds: gridDataRowIdsSelector(apiRef),
        dataRowIdToModelLookup: gridRowsLookupSelector(apiRef)
      });
      return _extends({}, state, {
        rows: _extends({}, state.rows, response, {
          totalTopLevelRowCount: getTopLevelRowCount({
            tree: response.tree,
            rowCountProp: props.rowCount
          })
        })
      });
    });
    apiRef.current.publishEvent("rowsSet");
  }, [apiRef, props.rowCount]);
  useGridRegisterPipeApplier(apiRef, "hydrateRows", applyHydrateRowsProcessor);
  useGridApiMethod(apiRef, rowApi, "public");
  useGridApiMethod(apiRef, rowProApi, props.signature === GridSignature.DataGrid ? "private" : "public");
  useGridApiMethod(apiRef, rowProPrivateApi, "private");
  const isFirstRender = React191.useRef(true);
  React191.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return;
    }
    let isRowCountPropUpdated = false;
    if (props.rowCount !== lastRowCount.current) {
      isRowCountPropUpdated = true;
      lastRowCount.current = props.rowCount;
    }
    const currentRows = props.dataSource ? gridDataRowsSelector(apiRef) : props.rows;
    const areNewRowsAlreadyInState = apiRef.current.caches.rows.rowsBeforePartialUpdates === currentRows;
    const isNewLoadingAlreadyInState = apiRef.current.caches.rows.loadingPropBeforePartialUpdates === props.loading;
    const isNewRowCountAlreadyInState = apiRef.current.caches.rows.rowCountPropBeforePartialUpdates === props.rowCount;
    if (areNewRowsAlreadyInState) {
      if (!isNewLoadingAlreadyInState) {
        apiRef.current.setState((state) => _extends({}, state, {
          rows: _extends({}, state.rows, {
            loading: props.loading
          })
        }));
        apiRef.current.caches.rows.loadingPropBeforePartialUpdates = props.loading;
      }
      if (!isNewRowCountAlreadyInState) {
        apiRef.current.setState((state) => _extends({}, state, {
          rows: _extends({}, state.rows, {
            totalRowCount: Math.max(props.rowCount || 0, state.rows.totalRowCount),
            totalTopLevelRowCount: Math.max(props.rowCount || 0, state.rows.totalTopLevelRowCount)
          })
        }));
        apiRef.current.caches.rows.rowCountPropBeforePartialUpdates = props.rowCount;
      }
      if (!isRowCountPropUpdated) {
        return;
      }
    }
    logger.debug(`Updating all rows, new length ${currentRows == null ? void 0 : currentRows.length}`);
    throttledRowsChange({
      cache: createRowsInternalCache({
        rows: currentRows,
        getRowId: props.getRowId,
        loading: props.loading,
        rowCount: props.rowCount
      }),
      throttle: false
    });
  }, [props.rows, props.rowCount, props.getRowId, props.loading, props.dataSource, logger, throttledRowsChange, apiRef]);
};

// node_modules/@mui/x-data-grid/esm/hooks/features/rows/useGridRowsPreProcessors.js
init_extends();
var createFlatRowTree = (rows) => {
  const tree = {
    [GRID_ROOT_GROUP_ID]: _extends({}, buildRootGroup(), {
      children: rows
    })
  };
  for (let i = 0; i < rows.length; i += 1) {
    const rowId = rows[i];
    tree[rowId] = {
      id: rowId,
      depth: 0,
      parent: GRID_ROOT_GROUP_ID,
      type: "leaf",
      groupingKey: null
    };
  }
  return {
    groupingName: GRID_DEFAULT_STRATEGY,
    tree,
    treeDepths: {
      0: rows.length
    },
    dataRowIds: rows
  };
};
var updateFlatRowTree = ({
  previousTree,
  actions
}) => {
  const tree = _extends({}, previousTree);
  const idsToRemoveFromRootGroup = {};
  for (let i = 0; i < actions.remove.length; i += 1) {
    const idToDelete = actions.remove[i];
    idsToRemoveFromRootGroup[idToDelete] = true;
    delete tree[idToDelete];
  }
  for (let i = 0; i < actions.insert.length; i += 1) {
    const idToInsert = actions.insert[i];
    tree[idToInsert] = {
      id: idToInsert,
      depth: 0,
      parent: GRID_ROOT_GROUP_ID,
      type: "leaf",
      groupingKey: null
    };
  }
  const rootGroup = tree[GRID_ROOT_GROUP_ID];
  let rootGroupChildren = [...rootGroup.children, ...actions.insert];
  if (Object.values(idsToRemoveFromRootGroup).length) {
    rootGroupChildren = rootGroupChildren.filter((id) => !idsToRemoveFromRootGroup[id]);
  }
  tree[GRID_ROOT_GROUP_ID] = _extends({}, rootGroup, {
    children: rootGroupChildren
  });
  return {
    groupingName: GRID_DEFAULT_STRATEGY,
    tree,
    treeDepths: {
      0: rootGroupChildren.length
    },
    dataRowIds: rootGroupChildren
  };
};
var flatRowTreeCreationMethod = (params) => {
  if (params.updates.type === "full") {
    return createFlatRowTree(params.updates.rows);
  }
  return updateFlatRowTree({
    previousTree: params.previousTree,
    actions: params.updates.actions
  });
};
var useGridRowsPreProcessors = (apiRef) => {
  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, "rowTreeCreation", flatRowTreeCreationMethod);
};

// node_modules/@mui/x-data-grid/esm/hooks/features/rows/useGridParamsApi.js
var React192 = __toESM(require_react(), 1);
var MissingRowIdError = class extends Error {
};
function useGridParamsApi(apiRef, props) {
  var _a;
  const getColumnHeaderParams = React192.useCallback((field) => ({
    field,
    colDef: apiRef.current.getColumn(field)
  }), [apiRef]);
  const getRowParams = React192.useCallback((id) => {
    const row = apiRef.current.getRow(id);
    if (!row) {
      throw new MissingRowIdError(`No row with id #${id} found`);
    }
    const params = {
      id,
      columns: apiRef.current.getAllColumns(),
      row
    };
    return params;
  }, [apiRef]);
  const getCellParamsForRow = React192.useCallback((id, field, row, {
    cellMode,
    colDef,
    hasFocus,
    rowNode,
    tabIndex,
    value: forcedValue,
    formattedValue: forcedFormattedValue
  }) => {
    let value = row[field];
    if (forcedValue !== void 0) {
      value = forcedValue;
    } else if (colDef == null ? void 0 : colDef.valueGetter) {
      value = colDef.valueGetter(value, row, colDef, apiRef);
    }
    let formattedValue = value;
    if (forcedFormattedValue !== void 0) {
      formattedValue = forcedFormattedValue;
    } else if (colDef == null ? void 0 : colDef.valueFormatter) {
      formattedValue = colDef.valueFormatter(value, row, colDef, apiRef);
    }
    const params = {
      id,
      field,
      row,
      rowNode,
      colDef,
      cellMode,
      hasFocus,
      tabIndex,
      value,
      formattedValue,
      isEditable: false,
      api: apiRef.current
    };
    params.isEditable = colDef && apiRef.current.isCellEditable(params);
    return params;
  }, [apiRef]);
  const getCellParams = React192.useCallback((id, field) => {
    var _a2;
    const row = apiRef.current.getRow(id);
    const rowNode = gridRowNodeSelector(apiRef, id);
    if (!row || !rowNode) {
      throw new MissingRowIdError(`No row with id #${id} found`);
    }
    const cellFocus = gridFocusCellSelector(apiRef);
    const cellTabIndex = gridTabIndexCellSelector(apiRef);
    const cellMode = apiRef.current.getCellMode(id, field);
    return apiRef.current.getCellParamsForRow(id, field, row, {
      colDef: props.listView && ((_a2 = props.listViewColumn) == null ? void 0 : _a2.field) === field ? gridListColumnSelector(apiRef) : apiRef.current.getColumn(field),
      rowNode,
      hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,
      tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1,
      cellMode
    });
  }, [apiRef, props.listView, (_a = props.listViewColumn) == null ? void 0 : _a.field]);
  const getCellValue2 = React192.useCallback((id, field) => {
    const colDef = apiRef.current.getColumn(field);
    const row = apiRef.current.getRow(id);
    if (!row) {
      throw new MissingRowIdError(`No row with id #${id} found`);
    }
    if (!colDef || !colDef.valueGetter) {
      return row[field];
    }
    return colDef.valueGetter(row[colDef.field], row, colDef, apiRef);
  }, [apiRef]);
  const getRowValue2 = React192.useCallback((row, colDef) => getRowValue(row, colDef, apiRef), [apiRef]);
  const getRowFormattedValue = React192.useCallback((row, colDef) => {
    const value = getRowValue2(row, colDef);
    if (!colDef || !colDef.valueFormatter) {
      return value;
    }
    return colDef.valueFormatter(value, row, colDef, apiRef);
  }, [apiRef, getRowValue2]);
  const getColumnHeaderElement = React192.useCallback((field) => {
    if (!apiRef.current.rootElementRef.current) {
      return null;
    }
    return getGridColumnHeaderElement(apiRef.current.rootElementRef.current, field);
  }, [apiRef]);
  const getRowElement = React192.useCallback((id) => {
    if (!apiRef.current.rootElementRef.current) {
      return null;
    }
    return getGridRowElement(apiRef.current.rootElementRef.current, id);
  }, [apiRef]);
  const getCellElement = React192.useCallback((id, field) => {
    if (!apiRef.current.rootElementRef.current) {
      return null;
    }
    return getGridCellElement(apiRef.current.rootElementRef.current, {
      id,
      field
    });
  }, [apiRef]);
  const paramsApi = {
    getCellValue: getCellValue2,
    getCellParams,
    getCellElement,
    getRowValue: getRowValue2,
    getRowFormattedValue,
    getRowParams,
    getRowElement,
    getColumnHeaderParams,
    getColumnHeaderElement
  };
  const paramsPrivateApi = {
    getCellParamsForRow
  };
  useGridApiMethod(apiRef, paramsApi, "public");
  useGridApiMethod(apiRef, paramsPrivateApi, "private");
}

// node_modules/@mui/x-data-grid/esm/hooks/features/rowSelection/useGridRowSelection.js
init_extends();
var React193 = __toESM(require_react(), 1);
var emptyModel = {
  type: "include",
  ids: /* @__PURE__ */ new Set()
};
var rowSelectionStateInitializer = (state, props) => _extends({}, state, {
  rowSelection: props.rowSelection ? props.rowSelectionModel ?? emptyModel : emptyModel
});
var useGridRowSelection = (apiRef, props) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
  const logger = useGridLogger(apiRef, "useGridSelection");
  const runIfRowSelectionIsEnabled = React193.useCallback((callback) => (...args) => {
    if (props.rowSelection) {
      callback(...args);
    }
  }, [props.rowSelection]);
  const isNestedData = useGridSelector(apiRef, gridRowMaximumTreeDepthSelector) > 1;
  const applyAutoSelection = props.signature !== GridSignature.DataGrid && (((_a = props.rowSelectionPropagation) == null ? void 0 : _a.parents) || ((_b = props.rowSelectionPropagation) == null ? void 0 : _b.descendants)) && isNestedData;
  const propRowSelectionModel = React193.useMemo(() => {
    return props.rowSelectionModel;
  }, [props.rowSelectionModel]);
  const lastRowToggled = React193.useRef(null);
  apiRef.current.registerControlState({
    stateId: "rowSelection",
    propModel: propRowSelectionModel,
    propOnChange: props.onRowSelectionModelChange,
    stateSelector: gridRowSelectionStateSelector,
    changeEvent: "rowSelectionChange"
  });
  const {
    checkboxSelection,
    disableRowSelectionOnClick,
    isRowSelectable: propIsRowSelectable
  } = props;
  const canHaveMultipleSelection = isMultipleRowSelectionEnabled(props);
  const tree = useGridSelector(apiRef, gridRowTreeSelector);
  const expandMouseRowRangeSelection = React193.useCallback((id) => {
    let endId = id;
    const startId = lastRowToggled.current ?? id;
    const isSelected = apiRef.current.isRowSelected(id);
    if (isSelected) {
      const visibleRowIds = gridExpandedSortedRowIdsSelector(apiRef);
      const startIndex = visibleRowIds.findIndex((rowId) => rowId === startId);
      const endIndex = visibleRowIds.findIndex((rowId) => rowId === endId);
      if (startIndex === endIndex) {
        return;
      }
      if (startIndex > endIndex) {
        endId = visibleRowIds[endIndex + 1];
      } else {
        endId = visibleRowIds[endIndex - 1];
      }
    }
    lastRowToggled.current = id;
    apiRef.current.selectRowRange({
      startId,
      endId
    }, !isSelected);
  }, [apiRef]);
  const getRowsToBeSelected = useEventCallback_default(() => {
    const rowsToBeSelected = props.pagination && props.checkboxSelectionVisibleOnly && props.paginationMode === "client" ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridExpandedSortedRowIdsSelector(apiRef);
    return rowsToBeSelected;
  });
  const setRowSelectionModel = React193.useCallback((model, reason) => {
    if (props.signature === GridSignature.DataGrid && !canHaveMultipleSelection && (model.type !== "include" || model.ids.size > 1)) {
      throw new Error(["MUI X: `rowSelectionModel` can only contain 1 item in DataGrid.", "You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection."].join("\n"));
    }
    const currentModel = gridRowSelectionStateSelector(apiRef);
    if (currentModel !== model) {
      logger.debug(`Setting selection model`);
      apiRef.current.setState((state) => _extends({}, state, {
        rowSelection: props.rowSelection ? model : emptyModel
      }), reason);
    }
  }, [apiRef, logger, props.rowSelection, props.signature, canHaveMultipleSelection]);
  const isRowSelected = React193.useCallback((id) => {
    const selectionManager = gridRowSelectionManagerSelector(apiRef);
    return selectionManager.has(id);
  }, [apiRef]);
  const isRowSelectable = React193.useCallback((id) => {
    if (props.rowSelection === false) {
      return false;
    }
    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {
      return false;
    }
    const rowNode = gridRowNodeSelector(apiRef, id);
    if ((rowNode == null ? void 0 : rowNode.type) === "footer" || (rowNode == null ? void 0 : rowNode.type) === "pinnedRow") {
      return false;
    }
    return true;
  }, [apiRef, props.rowSelection, propIsRowSelectable]);
  const getSelectedRows = React193.useCallback(() => gridRowSelectionIdsSelector(apiRef), [apiRef]);
  const selectRow = React193.useCallback((id, isSelected = true, resetSelection = false) => {
    var _a2, _b2, _c2, _d2, _e2, _f2;
    if (!apiRef.current.isRowSelectable(id)) {
      return;
    }
    lastRowToggled.current = id;
    if (resetSelection) {
      logger.debug(`Setting selection for row ${id}`);
      const newSelectionModel = {
        type: "include",
        ids: /* @__PURE__ */ new Set()
      };
      const addRow = (rowId) => {
        newSelectionModel.ids.add(rowId);
      };
      if (isSelected) {
        addRow(id);
        if (applyAutoSelection) {
          findRowsToSelect(apiRef, tree, id, ((_a2 = props.rowSelectionPropagation) == null ? void 0 : _a2.descendants) ?? false, ((_b2 = props.rowSelectionPropagation) == null ? void 0 : _b2.parents) ?? false, addRow);
        }
      }
      apiRef.current.setRowSelectionModel(newSelectionModel, "singleRowSelection");
    } else {
      logger.debug(`Toggling selection for row ${id}`);
      const selectionModel = gridRowSelectionStateSelector(apiRef);
      const newSelectionModel = {
        type: selectionModel.type,
        ids: new Set(selectionModel.ids)
      };
      const selectionManager = createRowSelectionManager(newSelectionModel);
      selectionManager.unselect(id);
      const addRow = (rowId) => {
        selectionManager.select(rowId);
      };
      const removeRow = (rowId) => {
        selectionManager.unselect(rowId);
      };
      if (isSelected) {
        addRow(id);
        if (applyAutoSelection) {
          findRowsToSelect(apiRef, tree, id, ((_c2 = props.rowSelectionPropagation) == null ? void 0 : _c2.descendants) ?? false, ((_d2 = props.rowSelectionPropagation) == null ? void 0 : _d2.parents) ?? false, addRow);
        }
      } else if (applyAutoSelection) {
        findRowsToDeselect(apiRef, tree, id, ((_e2 = props.rowSelectionPropagation) == null ? void 0 : _e2.descendants) ?? false, ((_f2 = props.rowSelectionPropagation) == null ? void 0 : _f2.parents) ?? false, removeRow);
      }
      const isSelectionValid = newSelectionModel.type === "include" && newSelectionModel.ids.size < 2 || canHaveMultipleSelection;
      if (isSelectionValid) {
        apiRef.current.setRowSelectionModel(newSelectionModel, "singleRowSelection");
      }
    }
  }, [apiRef, logger, applyAutoSelection, tree, (_c = props.rowSelectionPropagation) == null ? void 0 : _c.descendants, (_d = props.rowSelectionPropagation) == null ? void 0 : _d.parents, canHaveMultipleSelection]);
  const selectRows = React193.useCallback((ids, isSelected = true, resetSelection = false) => {
    var _a2, _b2, _c2, _d2, _e2, _f2;
    logger.debug(`Setting selection for several rows`);
    if (props.rowSelection === false) {
      return;
    }
    const selectableIds = /* @__PURE__ */ new Set();
    for (let i = 0; i < ids.length; i += 1) {
      const id = ids[i];
      if (apiRef.current.isRowSelectable(id)) {
        selectableIds.add(id);
      }
    }
    const currentSelectionModel = gridRowSelectionStateSelector(apiRef);
    let newSelectionModel;
    if (resetSelection) {
      newSelectionModel = {
        type: "include",
        ids: selectableIds
      };
      if (isSelected) {
        const selectionManager = createRowSelectionManager(newSelectionModel);
        if (applyAutoSelection) {
          const addRow = (rowId) => {
            selectionManager.select(rowId);
          };
          for (const id of selectableIds) {
            findRowsToSelect(apiRef, tree, id, ((_a2 = props.rowSelectionPropagation) == null ? void 0 : _a2.descendants) ?? false, ((_b2 = props.rowSelectionPropagation) == null ? void 0 : _b2.parents) ?? false, addRow);
          }
        }
      } else {
        newSelectionModel.ids = /* @__PURE__ */ new Set();
      }
      if (currentSelectionModel.type === newSelectionModel.type && newSelectionModel.ids.size === currentSelectionModel.ids.size && Array.from(newSelectionModel.ids).every((id) => currentSelectionModel.ids.has(id))) {
        return;
      }
    } else {
      newSelectionModel = {
        type: currentSelectionModel.type,
        ids: new Set(currentSelectionModel.ids)
      };
      const selectionManager = createRowSelectionManager(newSelectionModel);
      const addRow = (rowId) => {
        selectionManager.select(rowId);
      };
      const removeRow = (rowId) => {
        selectionManager.unselect(rowId);
      };
      for (const id of selectableIds) {
        if (isSelected) {
          selectionManager.select(id);
          if (applyAutoSelection) {
            findRowsToSelect(apiRef, tree, id, ((_c2 = props.rowSelectionPropagation) == null ? void 0 : _c2.descendants) ?? false, ((_d2 = props.rowSelectionPropagation) == null ? void 0 : _d2.parents) ?? false, addRow);
          }
        } else {
          removeRow(id);
          if (applyAutoSelection) {
            findRowsToDeselect(apiRef, tree, id, ((_e2 = props.rowSelectionPropagation) == null ? void 0 : _e2.descendants) ?? false, ((_f2 = props.rowSelectionPropagation) == null ? void 0 : _f2.parents) ?? false, removeRow);
          }
        }
      }
    }
    const isSelectionValid = newSelectionModel.type === "include" && newSelectionModel.ids.size < 2 || canHaveMultipleSelection;
    if (isSelectionValid) {
      apiRef.current.setRowSelectionModel(newSelectionModel, "multipleRowsSelection");
    }
  }, [logger, applyAutoSelection, canHaveMultipleSelection, apiRef, tree, (_e = props.rowSelectionPropagation) == null ? void 0 : _e.descendants, (_f = props.rowSelectionPropagation) == null ? void 0 : _f.parents, props.rowSelection]);
  const getPropagatedRowSelectionModel = React193.useCallback((inputSelectionModel) => {
    var _a2, _b2;
    if (!isNestedData || !applyAutoSelection || inputSelectionModel.ids.size === 0 && inputSelectionModel.type === "include") {
      return inputSelectionModel;
    }
    const propagatedSelectionModel = {
      type: inputSelectionModel.type,
      ids: new Set(inputSelectionModel.ids)
    };
    const selectionManager = createRowSelectionManager(propagatedSelectionModel);
    const addRow = (rowId) => {
      selectionManager.select(rowId);
    };
    for (const id of inputSelectionModel.ids) {
      findRowsToSelect(apiRef, tree, id, ((_a2 = props.rowSelectionPropagation) == null ? void 0 : _a2.descendants) ?? false, ((_b2 = props.rowSelectionPropagation) == null ? void 0 : _b2.parents) ?? false, addRow, selectionManager);
    }
    return propagatedSelectionModel;
  }, [apiRef, tree, (_g = props.rowSelectionPropagation) == null ? void 0 : _g.descendants, (_h = props.rowSelectionPropagation) == null ? void 0 : _h.parents, isNestedData, applyAutoSelection]);
  const selectRowRange = React193.useCallback(({
    startId,
    endId
  }, isSelected = true, resetSelection = false) => {
    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {
      return;
    }
    logger.debug(`Expanding selection from row ${startId} to row ${endId}`);
    const allPagesRowIds = gridExpandedSortedRowIdsSelector(apiRef);
    const startIndex = allPagesRowIds.indexOf(startId);
    const endIndex = allPagesRowIds.indexOf(endId);
    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];
    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);
    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);
  }, [apiRef, logger]);
  const selectionPublicApi = {
    selectRow,
    setRowSelectionModel,
    getSelectedRows,
    isRowSelected,
    isRowSelectable
  };
  const selectionPrivateApi = {
    selectRows,
    selectRowRange,
    getPropagatedRowSelectionModel
  };
  useGridApiMethod(apiRef, selectionPublicApi, "public");
  useGridApiMethod(apiRef, selectionPrivateApi, props.signature === GridSignature.DataGrid ? "private" : "public");
  const isFirstRender = React193.useRef(true);
  const removeOutdatedSelection = React193.useCallback((sortModelUpdated = false) => {
    var _a2, _b2;
    if (isFirstRender.current) {
      return;
    }
    const currentSelection = gridRowSelectionStateSelector(apiRef);
    const rowsLookup = gridRowsLookupSelector(apiRef);
    const rowTree = gridRowTreeSelector(apiRef);
    const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);
    const isNonExistent = (id) => {
      if (props.filterMode === "server") {
        return !rowsLookup[id];
      }
      return !rowTree[id] || filteredRowsLookup[id] === false;
    };
    const newSelectionModel = {
      type: currentSelection.type,
      ids: new Set(currentSelection.ids)
    };
    const selectionManager = createRowSelectionManager(newSelectionModel);
    let hasChanged = false;
    for (const id of currentSelection.ids) {
      if (isNonExistent(id)) {
        if (props.keepNonExistentRowsSelected) {
          continue;
        }
        selectionManager.unselect(id);
        hasChanged = true;
        continue;
      }
      if (!((_a2 = props.rowSelectionPropagation) == null ? void 0 : _a2.parents)) {
        continue;
      }
      const node = tree[id];
      if ((node == null ? void 0 : node.type) === "group") {
        const isAutoGenerated = node.isAutoGenerated;
        if (isAutoGenerated) {
          selectionManager.unselect(id);
          hasChanged = true;
          continue;
        }
        if (!node.children.every((childId) => filteredRowsLookup[childId] === false)) {
          selectionManager.unselect(id);
          hasChanged = true;
        }
      }
    }
    const shouldReapplyPropagation = isNestedData && ((_b2 = props.rowSelectionPropagation) == null ? void 0 : _b2.parents) && (newSelectionModel.ids.size > 0 || // In case of exclude selection, newSelectionModel.ids.size === 0 means all rows are selected
    newSelectionModel.type === "exclude");
    if (hasChanged || shouldReapplyPropagation && !sortModelUpdated) {
      if (shouldReapplyPropagation) {
        if (newSelectionModel.type === "exclude") {
          const unfilteredSelectedRowIds = getRowsToBeSelected();
          const selectedRowIds = [];
          for (let i = 0; i < unfilteredSelectedRowIds.length; i += 1) {
            const rowId = unfilteredSelectedRowIds[i];
            if ((props.keepNonExistentRowsSelected || !isNonExistent(rowId)) && selectionManager.has(rowId)) {
              selectedRowIds.push(rowId);
            }
          }
          apiRef.current.selectRows(selectedRowIds, true, true);
        } else {
          apiRef.current.selectRows(Array.from(newSelectionModel.ids), true, true);
        }
      } else {
        apiRef.current.setRowSelectionModel(newSelectionModel, "multipleRowsSelection");
      }
    }
  }, [apiRef, isNestedData, (_i = props.rowSelectionPropagation) == null ? void 0 : _i.parents, props.keepNonExistentRowsSelected, props.filterMode, tree, getRowsToBeSelected]);
  const handleSingleRowSelection = React193.useCallback((id, event) => {
    const hasCtrlKey = event.metaKey || event.ctrlKey;
    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);
    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;
    const isSelected = apiRef.current.isRowSelected(id);
    const selectedRowsCount = gridRowSelectionCountSelector(apiRef);
    const shouldStaySelected = selectedRowsCount > 1 && resetSelection;
    const newSelectionState = shouldStaySelected || !isSelected;
    apiRef.current.selectRow(id, newSelectionState, resetSelection);
  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);
  const handleRowClick = React193.useCallback((params, event) => {
    var _a2;
    if (disableRowSelectionOnClick) {
      return;
    }
    const field = (_a2 = event.target.closest(`.${gridClasses2.cell}`)) == null ? void 0 : _a2.getAttribute("data-field");
    if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {
      return;
    }
    if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {
      return;
    }
    if (field) {
      const column = apiRef.current.getColumn(field);
      if ((column == null ? void 0 : column.type) === GRID_ACTIONS_COLUMN_TYPE) {
        return;
      }
    }
    const rowNode = gridRowNodeSelector(apiRef, params.id);
    if (rowNode.type === "pinnedRow") {
      return;
    }
    if (event.shiftKey && canHaveMultipleSelection) {
      expandMouseRowRangeSelection(params.id);
    } else {
      handleSingleRowSelection(params.id, event);
    }
  }, [disableRowSelectionOnClick, canHaveMultipleSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);
  const preventSelectionOnShift = React193.useCallback((params, event) => {
    var _a2;
    if (canHaveMultipleSelection && event.shiftKey) {
      (_a2 = window.getSelection()) == null ? void 0 : _a2.removeAllRanges();
    }
  }, [canHaveMultipleSelection]);
  const handleRowSelectionCheckboxChange = React193.useCallback((params, event) => {
    if (canHaveMultipleSelection && event.nativeEvent.shiftKey) {
      expandMouseRowRangeSelection(params.id);
    } else {
      apiRef.current.selectRow(params.id, params.value, !canHaveMultipleSelection);
    }
  }, [apiRef, expandMouseRowRangeSelection, canHaveMultipleSelection]);
  const toggleAllRows = React193.useCallback((value) => {
    var _a2;
    const filterModel = gridFilterModelSelector(apiRef);
    const quickFilterModel = gridQuickFilterValuesSelector(apiRef);
    const hasFilters = filterModel.items.length > 0 || (quickFilterModel == null ? void 0 : quickFilterModel.some((val) => val.length));
    if (!props.isRowSelectable && !props.checkboxSelectionVisibleOnly && (!isNestedData || ((_a2 = props.rowSelectionPropagation) == null ? void 0 : _a2.descendants)) && !hasFilters && !props.disableRowSelectionExcludeModel) {
      apiRef.current.setRowSelectionModel({
        type: value ? "exclude" : "include",
        ids: /* @__PURE__ */ new Set()
      }, "multipleRowsSelection");
    } else {
      apiRef.current.selectRows(getRowsToBeSelected(), value);
    }
  }, [apiRef, getRowsToBeSelected, props.checkboxSelectionVisibleOnly, props.isRowSelectable, (_j = props.rowSelectionPropagation) == null ? void 0 : _j.descendants, props.disableRowSelectionExcludeModel, isNestedData]);
  const handleHeaderSelectionCheckboxChange = React193.useCallback((params) => {
    toggleAllRows(params.value);
  }, [toggleAllRows]);
  const handleCellKeyDown = React193.useCallback((params, event) => {
    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {
      return;
    }
    if (isEventTargetInPortal(event)) {
      return;
    }
    if (isNavigationKey(event.key) && event.shiftKey) {
      const focusCell = gridFocusCellSelector(apiRef);
      if (focusCell && focusCell.id !== params.id) {
        event.preventDefault();
        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);
        if (!canHaveMultipleSelection) {
          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);
          return;
        }
        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);
        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);
        let start;
        let end;
        if (newRowIndex > previousRowIndex) {
          if (isNextRowSelected) {
            start = previousRowIndex;
            end = newRowIndex - 1;
          } else {
            start = previousRowIndex;
            end = newRowIndex;
          }
        } else {
          if (isNextRowSelected) {
            start = newRowIndex + 1;
            end = previousRowIndex;
          } else {
            start = newRowIndex;
            end = previousRowIndex;
          }
        }
        const visibleRows = getVisibleRows(apiRef);
        const rowsBetweenStartAndEnd = [];
        for (let i = start; i <= end; i += 1) {
          rowsBetweenStartAndEnd.push(visibleRows.rows[i].id);
        }
        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);
        return;
      }
    }
    if (event.key === " " && event.shiftKey) {
      event.preventDefault();
      handleSingleRowSelection(params.id, event);
      return;
    }
    if (String.fromCharCode(event.keyCode) === "A" && (event.ctrlKey || event.metaKey)) {
      event.preventDefault();
      toggleAllRows(true);
    }
  }, [apiRef, canHaveMultipleSelection, handleSingleRowSelection, toggleAllRows]);
  const syncControlledState = useEventCallback_default(() => {
    if (!props.rowSelection) {
      apiRef.current.setRowSelectionModel(emptyModel);
      return;
    }
    if (propRowSelectionModel === void 0) {
      return;
    }
    if (!applyAutoSelection || !isNestedData || propRowSelectionModel.type === "include" && propRowSelectionModel.ids.size === 0) {
      apiRef.current.setRowSelectionModel(propRowSelectionModel);
      return;
    }
    const newSelectionModel = apiRef.current.getPropagatedRowSelectionModel(propRowSelectionModel);
    if (newSelectionModel.type !== propRowSelectionModel.type || newSelectionModel.ids.size !== propRowSelectionModel.ids.size || !Array.from(propRowSelectionModel.ids).every((id) => newSelectionModel.ids.has(id))) {
      apiRef.current.setRowSelectionModel(newSelectionModel);
      return;
    }
    apiRef.current.setRowSelectionModel(propRowSelectionModel);
  });
  useGridEvent(apiRef, "sortedRowsSet", runIfRowSelectionIsEnabled(() => removeOutdatedSelection(true)));
  useGridEvent(apiRef, "filteredRowsSet", runIfRowSelectionIsEnabled(() => removeOutdatedSelection()));
  useGridEvent(apiRef, "rowClick", runIfRowSelectionIsEnabled(handleRowClick));
  useGridEvent(apiRef, "rowSelectionCheckboxChange", runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange));
  useGridEvent(apiRef, "headerSelectionCheckboxChange", handleHeaderSelectionCheckboxChange);
  useGridEvent(apiRef, "cellMouseDown", runIfRowSelectionIsEnabled(preventSelectionOnShift));
  useGridEvent(apiRef, "cellKeyDown", runIfRowSelectionIsEnabled(handleCellKeyDown));
  React193.useEffect(() => {
    syncControlledState();
  }, [apiRef, propRowSelectionModel, props.rowSelection, syncControlledState]);
  const isStateControlled = propRowSelectionModel != null;
  React193.useEffect(() => {
    if (isStateControlled || !props.rowSelection || typeof isRowSelectable !== "function") {
      return;
    }
    const currentSelection = gridRowSelectionStateSelector(apiRef);
    if (currentSelection.type !== "include") {
      return;
    }
    const selectableIds = /* @__PURE__ */ new Set();
    for (const id of currentSelection.ids) {
      if (isRowSelectable(id)) {
        selectableIds.add(id);
      }
    }
    if (selectableIds.size < currentSelection.ids.size) {
      apiRef.current.setRowSelectionModel({
        type: currentSelection.type,
        ids: selectableIds
      });
    }
  }, [apiRef, isRowSelectable, isStateControlled, props.rowSelection]);
  React193.useEffect(() => {
    if (!props.rowSelection || isStateControlled) {
      return;
    }
    const currentSelection = gridRowSelectionStateSelector(apiRef);
    if (!canHaveMultipleSelection && (currentSelection.type === "include" && currentSelection.ids.size > 1 || currentSelection.type === "exclude")) {
      apiRef.current.setRowSelectionModel(emptyModel);
    }
  }, [apiRef, canHaveMultipleSelection, checkboxSelection, isStateControlled, props.rowSelection]);
  React193.useEffect(() => {
    runIfRowSelectionIsEnabled(removeOutdatedSelection);
  }, [removeOutdatedSelection, runIfRowSelectionIsEnabled]);
  React193.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
    }
  }, []);
};

// node_modules/@mui/x-data-grid/esm/hooks/features/rowSelection/useGridRowSelectionPreProcessors.js
init_extends();
var React194 = __toESM(require_react(), 1);
var useUtilityClasses42 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  return React194.useMemo(() => {
    const slots = {
      cellCheckbox: ["cellCheckbox"],
      columnHeaderCheckbox: ["columnHeaderCheckbox"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes2);
  }, [classes2]);
};
var useGridRowSelectionPreProcessors = (apiRef, props) => {
  const ownerState = {
    classes: props.classes
  };
  const classes2 = useUtilityClasses42(ownerState);
  const updateSelectionColumn = React194.useCallback((columnsState) => {
    const selectionColumn = _extends({}, GRID_CHECKBOX_SELECTION_COL_DEF, {
      cellClassName: classes2.cellCheckbox,
      headerClassName: classes2.columnHeaderCheckbox,
      headerName: apiRef.current.getLocaleText("checkboxSelectionHeaderName")
    });
    const shouldHaveSelectionColumn = props.checkboxSelection;
    const hasSelectionColumn = columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD] != null;
    if (shouldHaveSelectionColumn && !hasSelectionColumn) {
      columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD] = selectionColumn;
      columnsState.orderedFields = [GRID_CHECKBOX_SELECTION_FIELD, ...columnsState.orderedFields];
    } else if (!shouldHaveSelectionColumn && hasSelectionColumn) {
      delete columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD];
      columnsState.orderedFields = columnsState.orderedFields.filter((field) => field !== GRID_CHECKBOX_SELECTION_FIELD);
    } else if (shouldHaveSelectionColumn && hasSelectionColumn) {
      columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD] = _extends({}, selectionColumn, columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD]);
      if (!props.columns.some((col) => col.field === GRID_CHECKBOX_SELECTION_FIELD)) {
        columnsState.orderedFields = [GRID_CHECKBOX_SELECTION_FIELD, ...columnsState.orderedFields.filter((field) => field !== GRID_CHECKBOX_SELECTION_FIELD)];
      }
    }
    return columnsState;
  }, [apiRef, classes2, props.columns, props.checkboxSelection]);
  useGridRegisterPipeProcessor(apiRef, "hydrateColumns", updateSelectionColumn);
};

// node_modules/@mui/x-data-grid/esm/hooks/features/sorting/useGridSorting.js
init_extends();
var React195 = __toESM(require_react(), 1);
var sortingStateInitializer = (state, props) => {
  var _a, _b;
  const sortModel = props.sortModel ?? ((_b = (_a = props.initialState) == null ? void 0 : _a.sorting) == null ? void 0 : _b.sortModel) ?? [];
  return _extends({}, state, {
    sorting: {
      sortModel: sanitizeSortModel(sortModel, props.disableMultipleColumnsSorting),
      sortedRows: []
    }
  });
};
var useGridSorting = (apiRef, props, configuration2) => {
  var _a, _b;
  const logger = useGridLogger(apiRef, "useGridSorting");
  apiRef.current.registerControlState({
    stateId: "sortModel",
    propModel: props.sortModel,
    propOnChange: props.onSortModelChange,
    stateSelector: gridSortModelSelector,
    changeEvent: "sortModelChange"
  });
  const upsertSortModel = React195.useCallback((field, sortItem) => {
    const sortModel = gridSortModelSelector(apiRef);
    const existingIdx = sortModel.findIndex((c) => c.field === field);
    let newSortModel = [...sortModel];
    if (existingIdx > -1) {
      if ((sortItem == null ? void 0 : sortItem.sort) == null) {
        newSortModel.splice(existingIdx, 1);
      } else {
        newSortModel.splice(existingIdx, 1, sortItem);
      }
    } else {
      newSortModel = [...sortModel, sortItem];
    }
    return newSortModel;
  }, [apiRef]);
  const createSortItem = React195.useCallback((col, directionOverride) => {
    const sortModel = gridSortModelSelector(apiRef);
    const existing = sortModel.find((c) => c.field === col.field);
    if (existing) {
      const nextSort = directionOverride === void 0 ? getNextGridSortDirection(col.sortingOrder ?? props.sortingOrder, existing.sort) : directionOverride;
      return nextSort === void 0 ? void 0 : _extends({}, existing, {
        sort: nextSort
      });
    }
    return {
      field: col.field,
      sort: directionOverride === void 0 ? getNextGridSortDirection(col.sortingOrder ?? props.sortingOrder) : directionOverride
    };
  }, [apiRef, props.sortingOrder]);
  const addColumnMenuItem = React195.useCallback((columnMenuItems, colDef) => {
    if (colDef == null || colDef.sortable === false || props.disableColumnSorting) {
      return columnMenuItems;
    }
    const sortingOrder = colDef.sortingOrder || props.sortingOrder;
    if (sortingOrder.some((item) => !!item)) {
      return [...columnMenuItems, "columnMenuSortItem"];
    }
    return columnMenuItems;
  }, [props.sortingOrder, props.disableColumnSorting]);
  const applySorting = React195.useCallback(() => {
    const sortValueGetter = configuration2.hooks.useSortValueGetter(apiRef);
    apiRef.current.setState((state) => {
      if (props.sortingMode === "server") {
        logger.debug("Skipping sorting rows as sortingMode = server");
        return _extends({}, state, {
          sorting: _extends({}, state.sorting, {
            sortedRows: getTreeNodeDescendants(gridRowTreeSelector(apiRef), GRID_ROOT_GROUP_ID, false)
          })
        });
      }
      const sortModel = gridSortModelSelector(apiRef);
      const sortRowList = buildAggregatedSortingApplier(sortModel, sortValueGetter, apiRef);
      const sortedRows = apiRef.current.applyStrategyProcessor("sorting", {
        sortRowList
      });
      return _extends({}, state, {
        sorting: _extends({}, state.sorting, {
          sortedRows
        })
      });
    });
    apiRef.current.publishEvent("sortedRowsSet");
  }, [apiRef, logger, configuration2, props.sortingMode]);
  const setSortModel = React195.useCallback((model) => {
    const currentModel = gridSortModelSelector(apiRef);
    if (currentModel !== model) {
      logger.debug(`Setting sort model`);
      apiRef.current.setState(mergeStateWithSortModel(model, props.disableMultipleColumnsSorting));
      apiRef.current.applySorting();
    }
  }, [apiRef, logger, props.disableMultipleColumnsSorting]);
  const sortColumn = React195.useCallback((field, direction, allowMultipleSorting) => {
    const column = apiRef.current.getColumn(field);
    const sortItem = createSortItem(column, direction);
    let sortModel;
    if (!allowMultipleSorting || props.disableMultipleColumnsSorting) {
      sortModel = (sortItem == null ? void 0 : sortItem.sort) == null ? [] : [sortItem];
    } else {
      sortModel = upsertSortModel(column.field, sortItem);
    }
    apiRef.current.setSortModel(sortModel);
  }, [apiRef, upsertSortModel, createSortItem, props.disableMultipleColumnsSorting]);
  const getSortModel = React195.useCallback(() => gridSortModelSelector(apiRef), [apiRef]);
  const getSortedRows = React195.useCallback(() => {
    const sortedRows = gridSortedRowEntriesSelector(apiRef);
    return sortedRows.map((row) => row.model);
  }, [apiRef]);
  const getSortedRowIds = React195.useCallback(() => gridSortedRowIdsSelector(apiRef), [apiRef]);
  const getRowIdFromRowIndex = React195.useCallback((index) => apiRef.current.getSortedRowIds()[index], [apiRef]);
  const sortApi = {
    getSortModel,
    getSortedRows,
    getSortedRowIds,
    getRowIdFromRowIndex,
    setSortModel,
    sortColumn,
    applySorting
  };
  useGridApiMethod(apiRef, sortApi, "public");
  const stateExportPreProcessing = React195.useCallback((prevState, context) => {
    var _a2, _b2;
    const sortModelToExport = gridSortModelSelector(apiRef);
    const shouldExportSortModel = (
      // Always export if the `exportOnlyDirtyModels` property is not activated
      !context.exportOnlyDirtyModels || // Always export if the model is controlled
      props.sortModel != null || // Always export if the model has been initialized
      ((_b2 = (_a2 = props.initialState) == null ? void 0 : _a2.sorting) == null ? void 0 : _b2.sortModel) != null || // Export if the model is not empty
      sortModelToExport.length > 0
    );
    if (!shouldExportSortModel) {
      return prevState;
    }
    return _extends({}, prevState, {
      sorting: {
        sortModel: sortModelToExport
      }
    });
  }, [apiRef, props.sortModel, (_b = (_a = props.initialState) == null ? void 0 : _a.sorting) == null ? void 0 : _b.sortModel]);
  const stateRestorePreProcessing = React195.useCallback((params, context) => {
    var _a2;
    const sortModel = (_a2 = context.stateToRestore.sorting) == null ? void 0 : _a2.sortModel;
    if (sortModel == null) {
      return params;
    }
    apiRef.current.setState(mergeStateWithSortModel(sortModel, props.disableMultipleColumnsSorting));
    return _extends({}, params, {
      callbacks: [...params.callbacks, apiRef.current.applySorting]
    });
  }, [apiRef, props.disableMultipleColumnsSorting]);
  const flatSortingMethod = React195.useCallback((params) => {
    const rowTree = gridRowTreeSelector(apiRef);
    const rootGroupNode = rowTree[GRID_ROOT_GROUP_ID];
    const sortedChildren = params.sortRowList ? params.sortRowList(rootGroupNode.children.map((childId) => rowTree[childId])) : [...rootGroupNode.children];
    if (rootGroupNode.footerId != null) {
      sortedChildren.push(rootGroupNode.footerId);
    }
    return sortedChildren;
  }, [apiRef]);
  useGridRegisterPipeProcessor(apiRef, "exportState", stateExportPreProcessing);
  useGridRegisterPipeProcessor(apiRef, "restoreState", stateRestorePreProcessing);
  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, "sorting", flatSortingMethod);
  const handleColumnHeaderClick = React195.useCallback(({
    field,
    colDef
  }, event) => {
    if (!colDef.sortable || props.disableColumnSorting) {
      return;
    }
    const allowMultipleSorting = props.multipleColumnsSortingMode === "always" || event.shiftKey || event.metaKey || event.ctrlKey;
    sortColumn(field, void 0, allowMultipleSorting);
  }, [sortColumn, props.disableColumnSorting, props.multipleColumnsSortingMode]);
  const handleColumnHeaderKeyDown = React195.useCallback(({
    field,
    colDef
  }, event) => {
    if (!colDef.sortable || props.disableColumnSorting) {
      return;
    }
    if (event.key === "Enter" && !event.ctrlKey && !event.metaKey) {
      sortColumn(field, void 0, props.multipleColumnsSortingMode === "always" || event.shiftKey);
    }
  }, [sortColumn, props.disableColumnSorting, props.multipleColumnsSortingMode]);
  const handleColumnsChange = React195.useCallback(() => {
    const sortModel = gridSortModelSelector(apiRef);
    const latestColumns = gridColumnLookupSelector(apiRef);
    if (sortModel.length > 0) {
      const newModel = sortModel.filter((sortItem) => latestColumns[sortItem.field]);
      if (newModel.length < sortModel.length) {
        apiRef.current.setSortModel(newModel);
      }
    }
  }, [apiRef]);
  const handleStrategyProcessorChange = React195.useCallback((methodName) => {
    if (methodName === "sorting") {
      apiRef.current.applySorting();
    }
  }, [apiRef]);
  useGridRegisterPipeProcessor(apiRef, "columnMenu", addColumnMenuItem);
  useGridEvent(apiRef, "columnHeaderClick", handleColumnHeaderClick);
  useGridEvent(apiRef, "columnHeaderKeyDown", handleColumnHeaderKeyDown);
  useGridEvent(apiRef, "rowsSet", apiRef.current.applySorting);
  useGridEvent(apiRef, "columnsChange", handleColumnsChange);
  useGridEvent(apiRef, "activeStrategyProcessorChange", handleStrategyProcessorChange);
  useFirstRender(() => {
    apiRef.current.applySorting();
  });
  useEnhancedEffect_default(() => {
    if (props.sortModel !== void 0) {
      apiRef.current.setSortModel(props.sortModel);
    }
  }, [apiRef, props.sortModel]);
};

// node_modules/@mui/x-data-grid/esm/hooks/features/scroll/useGridScroll.js
var React196 = __toESM(require_react(), 1);
function scrollIntoView(dimensions) {
  const {
    containerSize,
    scrollPosition,
    elementSize,
    elementOffset
  } = dimensions;
  const elementEnd = elementOffset + elementSize;
  if (elementSize > containerSize) {
    return elementOffset;
  }
  if (elementEnd - containerSize > scrollPosition) {
    return elementEnd - containerSize;
  }
  if (elementOffset < scrollPosition) {
    return elementOffset;
  }
  return void 0;
}
var useGridScroll = (apiRef, props) => {
  const isRtl = useRtl();
  const logger = useGridLogger(apiRef, "useGridScroll");
  const colRef = apiRef.current.columnHeadersContainerRef;
  const virtualScrollerRef = apiRef.current.virtualScrollerRef;
  const visibleSortedRows = useGridSelector(apiRef, gridExpandedSortedRowEntriesSelector);
  const scrollToIndexes = React196.useCallback((params) => {
    var _a;
    const dimensions = gridDimensionsSelector(apiRef);
    const totalRowCount = gridRowCountSelector(apiRef);
    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);
    const scrollToHeader = params.rowIndex == null;
    if (!scrollToHeader && totalRowCount === 0 || visibleColumns.length === 0) {
      return false;
    }
    logger.debug(`Scrolling to cell at row ${params.rowIndex}, col: ${params.colIndex} `);
    let scrollCoordinates = {};
    if (params.colIndex !== void 0) {
      const columnPositions = gridColumnPositionsSelector(apiRef);
      let cellWidth;
      if (typeof params.rowIndex !== "undefined") {
        const rowId = (_a = visibleSortedRows[params.rowIndex]) == null ? void 0 : _a.id;
        const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, params.colIndex);
        if (cellColSpanInfo && !cellColSpanInfo.spannedByColSpan) {
          cellWidth = cellColSpanInfo.cellProps.width;
        }
      }
      if (typeof cellWidth === "undefined") {
        cellWidth = visibleColumns[params.colIndex].computedWidth;
      }
      scrollCoordinates.left = scrollIntoView({
        containerSize: dimensions.viewportOuterSize.width,
        scrollPosition: Math.abs(virtualScrollerRef.current.scrollLeft),
        elementSize: cellWidth,
        elementOffset: columnPositions[params.colIndex]
      });
    }
    if (params.rowIndex !== void 0) {
      const rowsMeta = gridRowsMetaSelector(apiRef);
      const page = gridPageSelector(apiRef);
      const pageSize = gridPageSizeSelector(apiRef);
      const elementIndex = !props.pagination ? params.rowIndex : params.rowIndex - page * pageSize;
      const targetOffsetHeight = rowsMeta.positions[elementIndex + 1] ? rowsMeta.positions[elementIndex + 1] - rowsMeta.positions[elementIndex] : rowsMeta.currentPageTotalHeight - rowsMeta.positions[elementIndex];
      scrollCoordinates.top = scrollIntoView({
        containerSize: dimensions.viewportInnerSize.height,
        scrollPosition: virtualScrollerRef.current.scrollTop,
        elementSize: targetOffsetHeight,
        elementOffset: rowsMeta.positions[elementIndex]
      });
    }
    scrollCoordinates = apiRef.current.unstable_applyPipeProcessors("scrollToIndexes", scrollCoordinates, params);
    if (typeof scrollCoordinates.left !== "undefined" || typeof scrollCoordinates.top !== "undefined") {
      apiRef.current.scroll(scrollCoordinates);
      return true;
    }
    return false;
  }, [logger, apiRef, virtualScrollerRef, props.pagination, visibleSortedRows]);
  const scroll = React196.useCallback((params) => {
    if (virtualScrollerRef.current && params.left !== void 0 && colRef.current) {
      const direction = isRtl ? -1 : 1;
      colRef.current.scrollLeft = params.left;
      virtualScrollerRef.current.scrollLeft = direction * params.left;
      logger.debug(`Scrolling left: ${params.left}`);
    }
    if (virtualScrollerRef.current && params.top !== void 0) {
      virtualScrollerRef.current.scrollTop = params.top;
      logger.debug(`Scrolling top: ${params.top}`);
    }
    logger.debug(`Scrolling, updating container, and viewport`);
  }, [virtualScrollerRef, isRtl, colRef, logger]);
  const getScrollPosition = React196.useCallback(() => {
    if (!(virtualScrollerRef == null ? void 0 : virtualScrollerRef.current)) {
      return {
        top: 0,
        left: 0
      };
    }
    return {
      top: virtualScrollerRef.current.scrollTop,
      left: virtualScrollerRef.current.scrollLeft
    };
  }, [virtualScrollerRef]);
  const scrollApi = {
    scroll,
    scrollToIndexes,
    getScrollPosition
  };
  useGridApiMethod(apiRef, scrollApi, "public");
};

// node_modules/@mui/x-data-grid/esm/hooks/features/events/useGridEvents.js
function useGridEvents(apiRef, props) {
  useGridEventPriority(apiRef, "columnHeaderClick", props.onColumnHeaderClick);
  useGridEventPriority(apiRef, "columnHeaderContextMenu", props.onColumnHeaderContextMenu);
  useGridEventPriority(apiRef, "columnHeaderDoubleClick", props.onColumnHeaderDoubleClick);
  useGridEventPriority(apiRef, "columnHeaderOver", props.onColumnHeaderOver);
  useGridEventPriority(apiRef, "columnHeaderOut", props.onColumnHeaderOut);
  useGridEventPriority(apiRef, "columnHeaderEnter", props.onColumnHeaderEnter);
  useGridEventPriority(apiRef, "columnHeaderLeave", props.onColumnHeaderLeave);
  useGridEventPriority(apiRef, "cellClick", props.onCellClick);
  useGridEventPriority(apiRef, "cellDoubleClick", props.onCellDoubleClick);
  useGridEventPriority(apiRef, "cellKeyDown", props.onCellKeyDown);
  useGridEventPriority(apiRef, "preferencePanelClose", props.onPreferencePanelClose);
  useGridEventPriority(apiRef, "preferencePanelOpen", props.onPreferencePanelOpen);
  useGridEventPriority(apiRef, "menuOpen", props.onMenuOpen);
  useGridEventPriority(apiRef, "menuClose", props.onMenuClose);
  useGridEventPriority(apiRef, "rowDoubleClick", props.onRowDoubleClick);
  useGridEventPriority(apiRef, "rowClick", props.onRowClick);
  useGridEventPriority(apiRef, "stateChange", props.onStateChange);
}

// node_modules/@mui/x-data-grid/esm/hooks/features/dimensions/useGridDimensions.js
init_extends();
var React197 = __toESM(require_react(), 1);
var EMPTY_SIZE = {
  width: 0,
  height: 0
};
var EMPTY_DIMENSIONS2 = {
  isReady: false,
  root: EMPTY_SIZE,
  viewportOuterSize: EMPTY_SIZE,
  viewportInnerSize: EMPTY_SIZE,
  contentSize: EMPTY_SIZE,
  minimumSize: EMPTY_SIZE,
  hasScrollX: false,
  hasScrollY: false,
  scrollbarSize: 0,
  headerHeight: 0,
  groupHeaderHeight: 0,
  headerFilterHeight: 0,
  rowWidth: 0,
  rowHeight: 0,
  columnsTotalWidth: 0,
  leftPinnedWidth: 0,
  rightPinnedWidth: 0,
  headersTotalHeight: 0,
  topContainerHeight: 0,
  bottomContainerHeight: 0
};
var dimensionsStateInitializer = (state, props, apiRef) => {
  const dimensions = EMPTY_DIMENSIONS2;
  const density = gridDensityFactorSelector(apiRef);
  return _extends({}, state, {
    dimensions: _extends({}, dimensions, getStaticDimensions(props, apiRef, density, gridVisiblePinnedColumnDefinitionsSelector(apiRef)))
  });
};
var columnsTotalWidthSelector2 = createSelector3(gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector, (visibleColumns, positions) => {
  const colCount = visibleColumns.length;
  if (colCount === 0) {
    return 0;
  }
  return roundToDecimalPlaces2(positions[colCount - 1] + visibleColumns[colCount - 1].computedWidth, 1);
});
function useGridDimensions(apiRef, props) {
  const virtualizer = apiRef.current.virtualizer;
  const updateDimensions = virtualizer.api.updateDimensions;
  const getViewportPageSize = virtualizer.api.getViewportPageSize;
  const getRootDimensions = React197.useCallback(() => gridDimensionsSelector(apiRef), [apiRef]);
  const apiPublic = {
    getRootDimensions
  };
  const apiPrivate = {
    updateDimensions,
    getViewportPageSize
  };
  useGridApiMethod(apiRef, apiPublic, "public");
  useGridApiMethod(apiRef, apiPrivate, "private");
  const handleRootMount = (root) => {
    setCSSVariables(root, gridDimensionsSelector(apiRef));
  };
  useGridEventPriority(apiRef, "rootMount", handleRootMount);
  useGridEventPriority(apiRef, "debouncedResize", props.onResize);
  if (true) {
    const logger = useGridLogger(apiRef, "useResizeContainer");
    const errorShown = React197.useRef(false);
    useGridEventPriority(apiRef, "resize", (size) => {
      if (!getRootDimensions().isReady) {
        return;
      }
      if (size.height === 0 && !errorShown.current && !props.autoHeight && !isJSDOM2) {
        logger.error(["The parent DOM element of the Data Grid has an empty height.", "Please make sure that this element has an intrinsic height.", "The grid displays with a height of 0px.", "", "More details: https://mui.com/r/x-data-grid-no-dimensions."].join("\n"));
        errorShown.current = true;
      }
      if (size.width === 0 && !errorShown.current && !isJSDOM2) {
        logger.error(["The parent DOM element of the Data Grid has an empty width.", "Please make sure that this element has an intrinsic width.", "The grid displays with a width of 0px.", "", "More details: https://mui.com/r/x-data-grid-no-dimensions."].join("\n"));
        errorShown.current = true;
      }
    });
  }
  useStoreEffect(apiRef.current.store, (s) => s.dimensions, (previous, next) => {
    if (apiRef.current.rootElementRef.current) {
      setCSSVariables(apiRef.current.rootElementRef.current, next);
    }
    if (!areElementSizesEqual(next.viewportInnerSize, previous.viewportInnerSize)) {
      apiRef.current.publishEvent("viewportInnerSizeChange", next.viewportInnerSize);
    }
    apiRef.current.publishEvent("debouncedResize", next.root);
  });
}
function setCSSVariables(root, dimensions) {
  const set = (k, v) => root.style.setProperty(k, v);
  set("--DataGrid-hasScrollX", `${Number(dimensions.hasScrollX)}`);
  set("--DataGrid-hasScrollY", `${Number(dimensions.hasScrollY)}`);
  set("--DataGrid-scrollbarSize", `${dimensions.scrollbarSize}px`);
  set("--DataGrid-rowWidth", `${dimensions.rowWidth}px`);
  set("--DataGrid-columnsTotalWidth", `${dimensions.columnsTotalWidth}px`);
  set("--DataGrid-leftPinnedWidth", `${dimensions.leftPinnedWidth}px`);
  set("--DataGrid-rightPinnedWidth", `${dimensions.rightPinnedWidth}px`);
  set("--DataGrid-headerHeight", `${dimensions.headerHeight}px`);
  set("--DataGrid-headersTotalHeight", `${dimensions.headersTotalHeight}px`);
  set("--DataGrid-topContainerHeight", `${dimensions.topContainerHeight}px`);
  set("--DataGrid-bottomContainerHeight", `${dimensions.bottomContainerHeight}px`);
  set("--height", `${dimensions.rowHeight}px`);
}
function getStaticDimensions(props, apiRef, density, pinnedColumnns) {
  const validRowHeight = getValidRowHeight(props.rowHeight, DATA_GRID_PROPS_DEFAULT_VALUES.rowHeight, rowHeightWarning);
  return {
    rowHeight: Math.floor(validRowHeight * density),
    headerHeight: Math.floor(props.columnHeaderHeight * density),
    groupHeaderHeight: Math.floor((props.columnGroupHeaderHeight ?? props.columnHeaderHeight) * density),
    headerFilterHeight: Math.floor((props.headerFilterHeight ?? props.columnHeaderHeight) * density),
    columnsTotalWidth: columnsTotalWidthSelector2(apiRef),
    headersTotalHeight: getTotalHeaderHeight(apiRef, props),
    leftPinnedWidth: pinnedColumnns.left.reduce((w, col) => w + col.computedWidth, 0),
    rightPinnedWidth: pinnedColumnns.right.reduce((w, col) => w + col.computedWidth, 0)
  };
}
function areElementSizesEqual(a, b) {
  return a.width === b.width && a.height === b.height;
}

// node_modules/@mui/x-data-grid/esm/hooks/features/rows/useGridRowsMeta.js
init_extends();
var rowsMetaStateInitializer = (state, props, apiRef) => {
  const baseRowHeight = gridRowHeightSelector(apiRef);
  const dataRowCount = gridRowCountSelector(apiRef);
  const pagination = gridPaginationSelector(apiRef);
  const rowCount = Math.min(pagination.enabled ? pagination.paginationModel.pageSize : dataRowCount, dataRowCount);
  return _extends({}, state, {
    rowsMeta: {
      currentPageTotalHeight: rowCount * baseRowHeight,
      positions: Array.from({
        length: rowCount
      }, (_, i) => i * baseRowHeight),
      pinnedTopRowsTotalHeight: 0,
      pinnedBottomRowsTotalHeight: 0
    }
  });
};
var useGridRowsMeta = (apiRef, _props) => {
  const virtualizer = apiRef.current.virtualizer;
  const {
    getRowHeight,
    setLastMeasuredRowIndex,
    storeRowHeightMeasurement,
    resetRowHeights,
    hydrateRowsMeta,
    observeRowHeight,
    rowHasAutoHeight,
    getRowHeightEntry,
    getLastMeasuredRowIndex
  } = virtualizer.api.rowsMeta;
  useGridRegisterPipeApplier(apiRef, "rowHeight", hydrateRowsMeta);
  const rowsMetaApi = {
    unstable_getRowHeight: getRowHeight,
    unstable_setLastMeasuredRowIndex: setLastMeasuredRowIndex,
    unstable_storeRowHeightMeasurement: storeRowHeightMeasurement,
    resetRowHeights
  };
  const rowsMetaPrivateApi = {
    hydrateRowsMeta,
    observeRowHeight,
    rowHasAutoHeight,
    getRowHeightEntry,
    getLastMeasuredRowIndex
  };
  useGridApiMethod(apiRef, rowsMetaApi, "public");
  useGridApiMethod(apiRef, rowsMetaPrivateApi, "private");
};

// node_modules/@mui/x-data-grid/esm/hooks/features/statePersistence/useGridStatePersistence.js
var React198 = __toESM(require_react(), 1);
var useGridStatePersistence = (apiRef) => {
  const exportState = React198.useCallback((params = {}) => {
    const stateToExport = apiRef.current.unstable_applyPipeProcessors("exportState", {}, params);
    return stateToExport;
  }, [apiRef]);
  const restoreState = React198.useCallback((stateToRestore) => {
    const response = apiRef.current.unstable_applyPipeProcessors("restoreState", {
      callbacks: []
    }, {
      stateToRestore
    });
    response.callbacks.forEach((callback) => {
      callback();
    });
  }, [apiRef]);
  const statePersistenceApi = {
    exportState,
    restoreState
  };
  useGridApiMethod(apiRef, statePersistenceApi, "public");
};

// node_modules/@mui/x-data-grid/esm/hooks/features/columns/useGridColumnSpanning.js
var useGridColumnSpanning = (apiRef) => {
  const virtualizer = apiRef.current.virtualizer;
  const resetColSpan = virtualizer.api.resetColSpan;
  const getCellColSpanInfo = virtualizer.api.getCellColSpanInfo;
  const calculateColSpan = virtualizer.api.calculateColSpan;
  const columnSpanningPublicApi = {
    unstable_getCellColSpanInfo: getCellColSpanInfo
  };
  const columnSpanningPrivateApi = {
    resetColSpan,
    calculateColSpan
  };
  useGridApiMethod(apiRef, columnSpanningPublicApi, "public");
  useGridApiMethod(apiRef, columnSpanningPrivateApi, "private");
  useGridEvent(apiRef, "columnOrderChange", resetColSpan);
};

// node_modules/@mui/x-data-grid/esm/hooks/features/columnGrouping/useGridColumnGrouping.js
init_extends();
init_objectWithoutPropertiesLoose();
var React199 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/esm/hooks/features/columnGrouping/gridColumnGroupsUtils.js
var recurrentUnwrapGroupingColumnModel = (columnGroupNode, parents, unwrappedGroupingModelToComplete) => {
  if (isLeaf(columnGroupNode)) {
    if (unwrappedGroupingModelToComplete[columnGroupNode.field] !== void 0) {
      throw new Error([`MUI X: columnGroupingModel contains duplicated field`, `column field ${columnGroupNode.field} occurs two times in the grouping model:`, `- ${unwrappedGroupingModelToComplete[columnGroupNode.field].join(" > ")}`, `- ${parents.join(" > ")}`].join("\n"));
    }
    unwrappedGroupingModelToComplete[columnGroupNode.field] = parents;
    return;
  }
  const {
    groupId,
    children
  } = columnGroupNode;
  children.forEach((child) => {
    recurrentUnwrapGroupingColumnModel(child, [...parents, groupId], unwrappedGroupingModelToComplete);
  });
};
var unwrapGroupingColumnModel = (columnGroupingModel) => {
  if (!columnGroupingModel) {
    return {};
  }
  const unwrappedSubTree = {};
  columnGroupingModel.forEach((columnGroupNode) => {
    recurrentUnwrapGroupingColumnModel(columnGroupNode, [], unwrappedSubTree);
  });
  return unwrappedSubTree;
};
var getColumnGroupsHeaderStructure = (orderedColumns, unwrappedGroupingModel, pinnedFields) => {
  const getParents = (field) => unwrappedGroupingModel[field] ?? [];
  const groupingHeaderStructure = [];
  const maxDepth = Math.max(0, ...orderedColumns.map((field) => getParents(field).length));
  const haveSameParents = (field1, field2, depth) => {
    const a = getParents(field1);
    const b = getParents(field2);
    for (let i = 0; i <= depth; i += 1) {
      if (a[i] !== b[i]) {
        return false;
      }
    }
    return true;
  };
  const haveDifferentContainers = (field1, field2) => {
    const left2 = pinnedFields == null ? void 0 : pinnedFields.left;
    const right2 = pinnedFields == null ? void 0 : pinnedFields.right;
    const inLeft1 = !!(left2 == null ? void 0 : left2.includes(field1));
    const inLeft2 = !!(left2 == null ? void 0 : left2.includes(field2));
    const inRight1 = !!(right2 == null ? void 0 : right2.includes(field1));
    const inRight2 = !!(right2 == null ? void 0 : right2.includes(field2));
    return inLeft1 !== inLeft2 || inRight1 !== inRight2;
  };
  for (let depth = 0; depth < maxDepth; depth += 1) {
    const depthStructure = [];
    for (let i = 0; i < orderedColumns.length; i += 1) {
      const field = orderedColumns[i];
      const groupId = getParents(field)[depth] ?? null;
      if (depthStructure.length === 0) {
        depthStructure.push({
          columnFields: [field],
          groupId
        });
        continue;
      }
      const lastGroup = depthStructure[depthStructure.length - 1];
      const prevField = lastGroup.columnFields[lastGroup.columnFields.length - 1];
      if (lastGroup.groupId !== groupId || !haveSameParents(prevField, field, depth) || haveDifferentContainers(prevField, field)) {
        depthStructure.push({
          columnFields: [field],
          groupId
        });
      } else {
        lastGroup.columnFields.push(field);
      }
    }
    groupingHeaderStructure.push(depthStructure);
  }
  return groupingHeaderStructure;
};

// node_modules/@mui/x-data-grid/esm/hooks/features/columnGrouping/useGridColumnGrouping.js
var _excluded83 = ["groupId", "children"];
var createGroupLookup = (columnGroupingModel) => {
  const groupLookup = {};
  for (let i = 0; i < columnGroupingModel.length; i += 1) {
    const node = columnGroupingModel[i];
    if (isLeaf(node)) {
      continue;
    }
    const {
      groupId,
      children
    } = node, other = _objectWithoutPropertiesLoose(node, _excluded83);
    if (!groupId) {
      throw new Error("MUI X: An element of the columnGroupingModel does not have either `field` or `groupId`.");
    }
    if (!children) {
      console.warn(`MUI X: group groupId=${groupId} has no children.`);
    }
    const groupParam = _extends({}, other, {
      groupId
    });
    const subTreeLookup = createGroupLookup(children);
    if (subTreeLookup[groupId] !== void 0 || groupLookup[groupId] !== void 0) {
      throw new Error(`MUI X: The groupId ${groupId} is used multiple times in the columnGroupingModel.`);
    }
    Object.assign(groupLookup, subTreeLookup);
    groupLookup[groupId] = groupParam;
  }
  return groupLookup;
};
var columnGroupsStateInitializer = (state, props, apiRef) => {
  apiRef.current.caches.columnGrouping = {
    lastColumnGroupingModel: props.columnGroupingModel
  };
  if (!props.columnGroupingModel) {
    return state;
  }
  const columnFields = gridColumnFieldsSelector(apiRef);
  const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef);
  const groupLookup = createGroupLookup(props.columnGroupingModel ?? []);
  const unwrappedGroupingModel = unwrapGroupingColumnModel(props.columnGroupingModel ?? []);
  const columnGroupsHeaderStructure = getColumnGroupsHeaderStructure(columnFields, unwrappedGroupingModel, apiRef.current.state.pinnedColumns ?? {});
  const maxDepth = visibleColumnFields.length === 0 ? 0 : Math.max(...visibleColumnFields.map((field) => {
    var _a;
    return ((_a = unwrappedGroupingModel[field]) == null ? void 0 : _a.length) ?? 0;
  }));
  return _extends({}, state, {
    columnGrouping: {
      lookup: groupLookup,
      unwrappedGroupingModel,
      headerStructure: columnGroupsHeaderStructure,
      maxDepth
    }
  });
};
var useGridColumnGrouping = (apiRef, props) => {
  const getColumnGroupPath = React199.useCallback((field) => {
    const unwrappedGroupingModel = gridColumnGroupsUnwrappedModelSelector(apiRef);
    return unwrappedGroupingModel[field] ?? [];
  }, [apiRef]);
  const getAllGroupDetails = React199.useCallback(() => {
    const columnGroupLookup = gridColumnGroupsLookupSelector(apiRef);
    return columnGroupLookup;
  }, [apiRef]);
  const columnGroupingApi = {
    getColumnGroupPath,
    getAllGroupDetails
  };
  useGridApiMethod(apiRef, columnGroupingApi, "public");
  const handleColumnIndexChange = React199.useCallback(() => {
    const unwrappedGroupingModel = unwrapGroupingColumnModel(props.columnGroupingModel ?? []);
    apiRef.current.setState((state) => {
      var _a;
      const orderedFields = ((_a = state.columns) == null ? void 0 : _a.orderedFields) ?? [];
      const pinnedColumns = state.pinnedColumns ?? {};
      const columnGroupsHeaderStructure = getColumnGroupsHeaderStructure(orderedFields, unwrappedGroupingModel, pinnedColumns);
      return _extends({}, state, {
        columnGrouping: _extends({}, state.columnGrouping, {
          headerStructure: columnGroupsHeaderStructure
        })
      });
    });
  }, [apiRef, props.columnGroupingModel]);
  const updateColumnGroupingState = React199.useCallback((columnGroupingModel) => {
    var _a, _b;
    apiRef.current.caches.columnGrouping.lastColumnGroupingModel = columnGroupingModel;
    const pinnedColumns = ((_b = (_a = apiRef.current).getPinnedColumns) == null ? void 0 : _b.call(_a)) ?? {};
    const columnFields = gridColumnFieldsSelector(apiRef);
    const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef);
    const groupLookup = createGroupLookup(columnGroupingModel ?? []);
    const unwrappedGroupingModel = unwrapGroupingColumnModel(columnGroupingModel ?? []);
    const columnGroupsHeaderStructure = getColumnGroupsHeaderStructure(columnFields, unwrappedGroupingModel, pinnedColumns);
    const maxDepth = visibleColumnFields.length === 0 ? 0 : Math.max(...visibleColumnFields.map((field) => {
      var _a2;
      return ((_a2 = unwrappedGroupingModel[field]) == null ? void 0 : _a2.length) ?? 0;
    }));
    apiRef.current.setState((state) => {
      return _extends({}, state, {
        columnGrouping: {
          lookup: groupLookup,
          unwrappedGroupingModel,
          headerStructure: columnGroupsHeaderStructure,
          maxDepth
        }
      });
    });
  }, [apiRef]);
  useGridEvent(apiRef, "columnIndexChange", handleColumnIndexChange);
  useGridEvent(apiRef, "columnsChange", () => {
    updateColumnGroupingState(props.columnGroupingModel);
  });
  useGridEvent(apiRef, "columnVisibilityModelChange", () => {
    updateColumnGroupingState(props.columnGroupingModel);
  });
  React199.useEffect(() => {
    if (props.columnGroupingModel === apiRef.current.caches.columnGrouping.lastColumnGroupingModel) {
      return;
    }
    updateColumnGroupingState(props.columnGroupingModel);
  }, [apiRef, updateColumnGroupingState, props.columnGroupingModel]);
};

// node_modules/@mui/x-data-grid/esm/hooks/features/columnResize/useGridColumnResize.js
init_extends();
var React200 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/esm/utils/createControllablePromise.js
function createControllablePromise() {
  let resolve;
  let reject;
  const promise = new Promise((_resolve, _reject) => {
    resolve = _resolve;
    reject = _reject;
  });
  promise.resolve = resolve;
  promise.reject = reject;
  return promise;
}

// node_modules/@mui/x-data-grid/esm/hooks/features/columnResize/useGridColumnResize.js
function trackFinger(event, currentTouchId) {
  if (currentTouchId !== void 0 && event.changedTouches) {
    for (let i = 0; i < event.changedTouches.length; i += 1) {
      const touch = event.changedTouches[i];
      if (touch.identifier === currentTouchId) {
        return {
          x: touch.clientX,
          y: touch.clientY
        };
      }
    }
    return false;
  }
  return {
    x: event.clientX,
    y: event.clientY
  };
}
function computeNewWidth(initialOffsetToSeparator, clickX, columnBounds, resizeDirection) {
  let newWidth = initialOffsetToSeparator;
  if (resizeDirection === "Right") {
    newWidth += clickX - columnBounds.left;
  } else {
    newWidth += columnBounds.right - clickX;
  }
  return Math.round(newWidth);
}
function computeOffsetToSeparator(clickX, columnBounds, resizeDirection) {
  if (resizeDirection === "Left") {
    return clickX - columnBounds.left;
  }
  return columnBounds.right - clickX;
}
function flipResizeDirection(side) {
  if (side === "Right") {
    return "Left";
  }
  return "Right";
}
function getResizeDirection(separator, isRtl) {
  const side = separator.classList.contains(gridClasses2["columnSeparator--sideRight"]) ? "Right" : "Left";
  if (isRtl) {
    return flipResizeDirection(side);
  }
  return side;
}
function preventClick(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}
function useColumnVirtualizationDisabled(apiRef) {
  const promise = React200.useRef(void 0);
  const selector = () => gridVirtualizationColumnEnabledSelector(apiRef);
  const value = useGridSelector(apiRef, selector);
  React200.useEffect(() => {
    if (promise.current && value === false) {
      promise.current.resolve();
      promise.current = void 0;
    }
  });
  const asyncCheck = () => {
    if (!promise.current) {
      if (selector() === false) {
        return Promise.resolve();
      }
      promise.current = createControllablePromise();
    }
    return promise.current;
  };
  return asyncCheck;
}
function excludeOutliers(inputValues, factor) {
  if (inputValues.length < 4) {
    return inputValues;
  }
  const values3 = inputValues.slice();
  values3.sort((a, b) => a - b);
  const q1 = values3[Math.floor(values3.length * 0.25)];
  const q3 = values3[Math.floor(values3.length * 0.75) - 1];
  const iqr = q3 - q1;
  const deviation = iqr < 5 ? 5 : iqr * factor;
  return values3.filter((v) => v > q1 - deviation && v < q3 + deviation);
}
function extractColumnWidths(apiRef, options, columns) {
  const widthByField = {};
  const root = apiRef.current.rootElementRef.current;
  root.classList.add(gridClasses2.autosizing);
  columns.forEach((column) => {
    const cells = findGridCells(apiRef.current, column.field);
    const widths = cells.map((cell) => {
      return cell.getBoundingClientRect().width ?? 0;
    });
    const filteredWidths = options.includeOutliers ? widths : excludeOutliers(widths, options.outliersFactor);
    if (options.includeHeaders) {
      const header = findGridHeader(apiRef.current, column.field);
      if (header) {
        const title = header.querySelector(`.${gridClasses2.columnHeaderTitle}`);
        const content = header.querySelector(`.${gridClasses2.columnHeaderTitleContainerContent}`);
        const iconContainer = header.querySelector(`.${gridClasses2.iconButtonContainer}`);
        const menuContainer = header.querySelector(`.${gridClasses2.menuIcon}`);
        const element = title ?? content;
        const style4 = window.getComputedStyle(header, null);
        const paddingWidth = parseInt(style4.paddingLeft, 10) + parseInt(style4.paddingRight, 10);
        const contentWidth = element.scrollWidth + 1;
        const width2 = contentWidth + paddingWidth + ((iconContainer == null ? void 0 : iconContainer.clientWidth) ?? 0) + ((menuContainer == null ? void 0 : menuContainer.clientWidth) ?? 0);
        filteredWidths.push(width2);
      }
    }
    const hasColumnMin = column.minWidth !== -Infinity && column.minWidth !== void 0;
    const hasColumnMax = column.maxWidth !== Infinity && column.maxWidth !== void 0;
    const min = hasColumnMin ? column.minWidth : 0;
    const max = hasColumnMax ? column.maxWidth : Infinity;
    const maxContent = filteredWidths.length === 0 ? 0 : Math.max(...filteredWidths);
    widthByField[column.field] = clamp(maxContent, min, max);
  });
  root.classList.remove(gridClasses2.autosizing);
  return widthByField;
}
var columnResizeStateInitializer = (state) => _extends({}, state, {
  columnResize: {
    resizingColumnField: ""
  }
});
function createResizeRefs() {
  return {
    colDef: void 0,
    initialColWidth: 0,
    initialTotalWidth: 0,
    previousMouseClickEvent: void 0,
    columnHeaderElement: void 0,
    headerFilterElement: void 0,
    groupHeaderElements: [],
    cellElements: [],
    leftPinnedCellsAfter: [],
    rightPinnedCellsBefore: [],
    fillerLeft: void 0,
    fillerRight: void 0,
    leftPinnedHeadersAfter: [],
    rightPinnedHeadersBefore: []
  };
}
var useGridColumnResize = (apiRef, props) => {
  const isRtl = useRtl();
  const logger = useGridLogger(apiRef, "useGridColumnResize");
  const refs = useLazyRef(createResizeRefs).current;
  const initialOffsetToSeparator = React200.useRef(null);
  const resizeDirection = React200.useRef(null);
  const stopResizeEventTimeout = useTimeout();
  const touchId = React200.useRef(void 0);
  const updateWidth = (newWidth) => {
    var _a, _b;
    logger.debug(`Updating width to ${newWidth} for col ${refs.colDef.field}`);
    const prevWidth = refs.columnHeaderElement.offsetWidth;
    const widthDiff = newWidth - prevWidth;
    const columnWidthDiff = newWidth - refs.initialColWidth;
    if (columnWidthDiff > 0) {
      const newTotalWidth = refs.initialTotalWidth + columnWidthDiff;
      (_b = (_a = apiRef.current.rootElementRef) == null ? void 0 : _a.current) == null ? void 0 : _b.style.setProperty("--DataGrid-rowWidth", `${newTotalWidth}px`);
    }
    refs.colDef.computedWidth = newWidth;
    refs.colDef.width = newWidth;
    refs.colDef.flex = 0;
    refs.columnHeaderElement.style.width = `${newWidth}px`;
    const headerFilterElement = refs.headerFilterElement;
    if (headerFilterElement) {
      headerFilterElement.style.width = `${newWidth}px`;
    }
    refs.groupHeaderElements.forEach((element) => {
      const div = element;
      let finalWidth;
      if (div.getAttribute("aria-colspan") === "1") {
        finalWidth = `${newWidth}px`;
      } else {
        finalWidth = `${div.offsetWidth + widthDiff}px`;
      }
      div.style.width = finalWidth;
    });
    refs.cellElements.forEach((element) => {
      const div = element;
      let finalWidth;
      if (div.getAttribute("aria-colspan") === "1") {
        finalWidth = `${newWidth}px`;
      } else {
        finalWidth = `${div.offsetWidth + widthDiff}px`;
      }
      div.style.setProperty("--width", finalWidth);
    });
    const pinnedPosition = apiRef.current.unstable_applyPipeProcessors("isColumnPinned", false, refs.colDef.field);
    if (pinnedPosition === GridPinnedColumnPosition.LEFT) {
      updateProperty(refs.fillerLeft, "width", widthDiff);
      refs.leftPinnedCellsAfter.forEach((cell) => {
        updateProperty(cell, "left", widthDiff);
      });
      refs.leftPinnedHeadersAfter.forEach((header) => {
        updateProperty(header, "left", widthDiff);
      });
    }
    if (pinnedPosition === GridPinnedColumnPosition.RIGHT) {
      updateProperty(refs.fillerRight, "width", widthDiff);
      refs.rightPinnedCellsBefore.forEach((cell) => {
        updateProperty(cell, "right", widthDiff);
      });
      refs.rightPinnedHeadersBefore.forEach((header) => {
        updateProperty(header, "right", widthDiff);
      });
    }
  };
  const finishResize = (nativeEvent) => {
    stopListening();
    if (refs.previousMouseClickEvent) {
      const prevEvent = refs.previousMouseClickEvent;
      const prevTimeStamp = prevEvent.timeStamp;
      const prevClientX = prevEvent.clientX;
      const prevClientY = prevEvent.clientY;
      if (nativeEvent.timeStamp - prevTimeStamp < 300 && nativeEvent.clientX === prevClientX && nativeEvent.clientY === prevClientY) {
        refs.previousMouseClickEvent = void 0;
        apiRef.current.publishEvent("columnResizeStop", null, nativeEvent);
        return;
      }
    }
    if (refs.colDef) {
      apiRef.current.setColumnWidth(refs.colDef.field, refs.colDef.width);
      logger.debug(`Updating col ${refs.colDef.field} with new width: ${refs.colDef.width}`);
      const columnsState = gridColumnsStateSelector(apiRef);
      refs.groupHeaderElements.forEach((element) => {
        const fields = getFieldsFromGroupHeaderElem(element);
        const div = element;
        const newWidth = fields.reduce((acc, field) => {
          if (columnsState.columnVisibilityModel[field] !== false) {
            return acc + columnsState.lookup[field].computedWidth;
          }
          return acc;
        }, 0);
        const finalWidth = `${newWidth}px`;
        div.style.width = finalWidth;
      });
    }
    stopResizeEventTimeout.start(0, () => {
      apiRef.current.publishEvent("columnResizeStop", null, nativeEvent);
    });
  };
  const storeReferences = (colDef, separator, xStart) => {
    var _a;
    const root = apiRef.current.rootElementRef.current;
    refs.initialColWidth = colDef.computedWidth;
    refs.initialTotalWidth = apiRef.current.getRootDimensions().rowWidth;
    refs.colDef = colDef;
    refs.columnHeaderElement = findHeaderElementFromField(apiRef.current.columnHeadersContainerRef.current, colDef.field);
    const headerFilterElement = root.querySelector(`.${gridClasses2.headerFilterRow} [data-field="${escapeOperandAttributeSelector(colDef.field)}"]`);
    if (headerFilterElement) {
      refs.headerFilterElement = headerFilterElement;
    }
    refs.groupHeaderElements = findGroupHeaderElementsFromField((_a = apiRef.current.columnHeadersContainerRef) == null ? void 0 : _a.current, colDef.field);
    refs.cellElements = findGridCellElementsFromCol(refs.columnHeaderElement, apiRef.current);
    refs.fillerLeft = findGridElement(apiRef.current, isRtl ? "filler--pinnedRight" : "filler--pinnedLeft");
    refs.fillerRight = findGridElement(apiRef.current, isRtl ? "filler--pinnedLeft" : "filler--pinnedRight");
    const pinnedPosition = apiRef.current.unstable_applyPipeProcessors("isColumnPinned", false, refs.colDef.field);
    refs.leftPinnedCellsAfter = pinnedPosition !== GridPinnedColumnPosition.LEFT ? [] : findLeftPinnedCellsAfterCol(apiRef.current, refs.columnHeaderElement, isRtl);
    refs.rightPinnedCellsBefore = pinnedPosition !== GridPinnedColumnPosition.RIGHT ? [] : findRightPinnedCellsBeforeCol(apiRef.current, refs.columnHeaderElement, isRtl);
    refs.leftPinnedHeadersAfter = pinnedPosition !== GridPinnedColumnPosition.LEFT ? [] : findLeftPinnedHeadersAfterCol(apiRef.current, refs.columnHeaderElement, isRtl);
    refs.rightPinnedHeadersBefore = pinnedPosition !== GridPinnedColumnPosition.RIGHT ? [] : findRightPinnedHeadersBeforeCol(apiRef.current, refs.columnHeaderElement, isRtl);
    resizeDirection.current = getResizeDirection(separator, isRtl);
    initialOffsetToSeparator.current = computeOffsetToSeparator(xStart, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);
  };
  const handleResizeMouseUp = useEventCallback_default(finishResize);
  const handleResizeMouseMove = useEventCallback_default((nativeEvent) => {
    if (nativeEvent.buttons === 0) {
      handleResizeMouseUp(nativeEvent);
      return;
    }
    let newWidth = computeNewWidth(initialOffsetToSeparator.current, nativeEvent.clientX, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);
    newWidth = clamp(newWidth, refs.colDef.minWidth, refs.colDef.maxWidth);
    updateWidth(newWidth);
    const params = {
      element: refs.columnHeaderElement,
      colDef: refs.colDef,
      width: newWidth
    };
    apiRef.current.publishEvent("columnResize", params, nativeEvent);
  });
  const handleTouchEnd = useEventCallback_default((nativeEvent) => {
    const finger = trackFinger(nativeEvent, touchId.current);
    if (!finger) {
      return;
    }
    finishResize(nativeEvent);
  });
  const handleTouchMove = useEventCallback_default((nativeEvent) => {
    const finger = trackFinger(nativeEvent, touchId.current);
    if (!finger) {
      return;
    }
    if (nativeEvent.type === "mousemove" && nativeEvent.buttons === 0) {
      handleTouchEnd(nativeEvent);
      return;
    }
    let newWidth = computeNewWidth(initialOffsetToSeparator.current, finger.x, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);
    newWidth = clamp(newWidth, refs.colDef.minWidth, refs.colDef.maxWidth);
    updateWidth(newWidth);
    const params = {
      element: refs.columnHeaderElement,
      colDef: refs.colDef,
      width: newWidth
    };
    apiRef.current.publishEvent("columnResize", params, nativeEvent);
  });
  const handleTouchStart = useEventCallback_default((event) => {
    const cellSeparator = findParentElementFromClassName(event.target, gridClasses2["columnSeparator--resizable"]);
    if (!cellSeparator) {
      return;
    }
    const touch = event.changedTouches[0];
    if (touch != null) {
      touchId.current = touch.identifier;
    }
    const columnHeaderElement = findParentElementFromClassName(event.target, gridClasses2.columnHeader);
    const field = getFieldFromHeaderElem(columnHeaderElement);
    const colDef = apiRef.current.getColumn(field);
    logger.debug(`Start Resize on col ${colDef.field}`);
    apiRef.current.publishEvent("columnResizeStart", {
      field
    }, event);
    storeReferences(colDef, cellSeparator, touch.clientX);
    const doc = ownerDocument2(event.currentTarget);
    doc.addEventListener("touchmove", handleTouchMove);
    doc.addEventListener("touchend", handleTouchEnd);
  });
  const stopListening = React200.useCallback(() => {
    const doc = ownerDocument2(apiRef.current.rootElementRef.current);
    doc.body.style.removeProperty("cursor");
    doc.removeEventListener("mousemove", handleResizeMouseMove);
    doc.removeEventListener("mouseup", handleResizeMouseUp);
    doc.removeEventListener("touchmove", handleTouchMove);
    doc.removeEventListener("touchend", handleTouchEnd);
    setTimeout(() => {
      doc.removeEventListener("click", preventClick, true);
    }, 100);
    if (refs.columnHeaderElement) {
      refs.columnHeaderElement.style.pointerEvents = "unset";
    }
  }, [apiRef, refs, handleResizeMouseMove, handleResizeMouseUp, handleTouchMove, handleTouchEnd]);
  const handleResizeStart = React200.useCallback(({
    field
  }) => {
    apiRef.current.setState((state) => _extends({}, state, {
      columnResize: _extends({}, state.columnResize, {
        resizingColumnField: field
      })
    }));
  }, [apiRef]);
  const handleResizeStop = React200.useCallback(() => {
    apiRef.current.setState((state) => _extends({}, state, {
      columnResize: _extends({}, state.columnResize, {
        resizingColumnField: ""
      })
    }));
  }, [apiRef]);
  const handleColumnResizeMouseDown = useEventCallback_default(({
    colDef
  }, event) => {
    if (event.button !== 0) {
      return;
    }
    if (!event.currentTarget.classList.contains(gridClasses2["columnSeparator--resizable"])) {
      return;
    }
    event.preventDefault();
    logger.debug(`Start Resize on col ${colDef.field}`);
    apiRef.current.publishEvent("columnResizeStart", {
      field: colDef.field
    }, event);
    storeReferences(colDef, event.currentTarget, event.clientX);
    const doc = ownerDocument2(apiRef.current.rootElementRef.current);
    doc.body.style.cursor = "col-resize";
    refs.previousMouseClickEvent = event.nativeEvent;
    doc.addEventListener("mousemove", handleResizeMouseMove);
    doc.addEventListener("mouseup", handleResizeMouseUp);
    doc.addEventListener("click", preventClick, true);
  });
  const handleColumnSeparatorDoubleClick = useEventCallback_default((params, event) => {
    if (props.disableAutosize) {
      return;
    }
    if (event.button !== 0) {
      return;
    }
    const column = apiRef.current.state.columns.lookup[params.field];
    if (column.resizable === false) {
      return;
    }
    apiRef.current.autosizeColumns(_extends({}, props.autosizeOptions, {
      disableColumnVirtualization: false,
      columns: [column.field]
    }));
  });
  const columnVirtualizationDisabled = useColumnVirtualizationDisabled(apiRef);
  const isAutosizingRef = React200.useRef(false);
  const autosizeColumns = React200.useCallback(async (userOptions) => {
    var _a;
    const root = (_a = apiRef.current.rootElementRef) == null ? void 0 : _a.current;
    if (!root) {
      return;
    }
    if (isAutosizingRef.current) {
      return;
    }
    isAutosizingRef.current = true;
    const state = gridColumnsStateSelector(apiRef);
    const options = _extends({}, DEFAULT_GRID_AUTOSIZE_OPTIONS, userOptions, {
      columns: (userOptions == null ? void 0 : userOptions.columns) ?? state.orderedFields
    });
    options.columns = options.columns.filter((c) => state.columnVisibilityModel[c] !== false);
    const columns = options.columns.map((c) => apiRef.current.state.columns.lookup[c]);
    try {
      if (!props.disableVirtualization && options.disableColumnVirtualization) {
        apiRef.current.unstable_setColumnVirtualization(false);
        await columnVirtualizationDisabled();
      }
      const widthByField = extractColumnWidths(apiRef, options, columns);
      const newColumns = columns.map((column) => _extends({}, column, {
        width: widthByField[column.field],
        computedWidth: widthByField[column.field],
        flex: 0
      }));
      if (options.expand) {
        const visibleColumns = state.orderedFields.map((field) => state.lookup[field]).filter((c) => state.columnVisibilityModel[c.field] !== false);
        const totalWidth = visibleColumns.reduce((total, column) => total + (widthByField[column.field] ?? column.computedWidth ?? column.width), 0);
        const dimensions = apiRef.current.getRootDimensions();
        const availableWidth = dimensions.viewportInnerSize.width;
        const remainingWidth = availableWidth - totalWidth;
        if (remainingWidth > 0) {
          const widthPerColumn = remainingWidth / (newColumns.length || 1);
          newColumns.forEach((column) => {
            column.width += widthPerColumn;
            column.computedWidth += widthPerColumn;
          });
        }
      }
      apiRef.current.updateColumns(newColumns);
      newColumns.forEach((newColumn, index) => {
        if (newColumn.width !== columns[index].width) {
          const width2 = newColumn.width;
          apiRef.current.publishEvent("columnWidthChange", {
            element: apiRef.current.getColumnHeaderElement(newColumn.field),
            colDef: newColumn,
            width: width2
          });
        }
      });
    } finally {
      if (!props.disableVirtualization) {
        apiRef.current.unstable_setColumnVirtualization(true);
      }
      isAutosizingRef.current = false;
    }
  }, [apiRef, columnVirtualizationDisabled, props.disableVirtualization]);
  React200.useEffect(() => stopListening, [stopListening]);
  useOnMount(() => {
    if (props.autosizeOnMount) {
      Promise.resolve().then(() => {
        apiRef.current.autosizeColumns(props.autosizeOptions);
      });
    }
  });
  useGridNativeEventListener(apiRef, () => {
    var _a;
    return (_a = apiRef.current.columnHeadersContainerRef) == null ? void 0 : _a.current;
  }, "touchstart", handleTouchStart, {
    passive: true
  });
  useGridApiMethod(apiRef, {
    autosizeColumns
  }, "public");
  useGridEvent(apiRef, "columnResizeStop", handleResizeStop);
  useGridEvent(apiRef, "columnResizeStart", handleResizeStart);
  useGridEvent(apiRef, "columnSeparatorMouseDown", handleColumnResizeMouseDown);
  useGridEvent(apiRef, "columnSeparatorDoubleClick", handleColumnSeparatorDoubleClick);
  useGridEventPriority(apiRef, "columnResize", props.onColumnResize);
  useGridEventPriority(apiRef, "columnWidthChange", props.onColumnWidthChange);
};
function updateProperty(element, property, delta) {
  if (!element) {
    return;
  }
  element.style[property] = `${Math.round(parseFloat(element.style[property])) + delta}px`;
}

// node_modules/@mui/x-data-grid/esm/hooks/features/rows/useGridRowSpanning.js
init_extends();
var React201 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/esm/hooks/features/rows/gridRowSpanningUtils.js
function getUnprocessedRange(testRange, processedRange) {
  if (testRange.firstRowIndex >= processedRange.firstRowIndex && testRange.lastRowIndex <= processedRange.lastRowIndex) {
    return null;
  }
  if (testRange.firstRowIndex >= processedRange.firstRowIndex && testRange.lastRowIndex > processedRange.lastRowIndex) {
    return {
      firstRowIndex: processedRange.lastRowIndex,
      lastRowIndex: testRange.lastRowIndex
    };
  }
  if (testRange.firstRowIndex < processedRange.firstRowIndex && testRange.lastRowIndex <= processedRange.lastRowIndex) {
    return {
      firstRowIndex: testRange.firstRowIndex,
      lastRowIndex: processedRange.firstRowIndex - 1
    };
  }
  return testRange;
}
function isRowContextInitialized(renderContext) {
  return renderContext.firstRowIndex !== 0 || renderContext.lastRowIndex !== 0;
}
var getCellValue = (row, colDef, apiRef) => {
  if (!row) {
    return null;
  }
  let cellValue = row[colDef.field];
  const valueGetter = colDef.rowSpanValueGetter ?? colDef.valueGetter;
  if (valueGetter) {
    cellValue = valueGetter(cellValue, row, colDef, apiRef);
  }
  return cellValue;
};

// node_modules/@mui/x-data-grid/esm/hooks/features/rows/useGridRowSpanning.js
var EMPTY_CACHES2 = {
  spannedCells: {},
  hiddenCells: {},
  hiddenCellOriginMap: {}
};
var EMPTY_RANGE2 = {
  firstRowIndex: 0,
  lastRowIndex: 0
};
var EMPTY_STATE = {
  caches: EMPTY_CACHES2,
  processedRange: EMPTY_RANGE2
};
var DEFAULT_ROWS_TO_PROCESS = 20;
var computeRowSpanningState = (apiRef, colDefs, visibleRows, range, rangeToProcess, resetState) => {
  const virtualizer = apiRef.current.virtualizer;
  const previousState = resetState ? EMPTY_STATE : Rowspan.selectors.state(virtualizer.store.state);
  const spannedCells = _extends({}, previousState.caches.spannedCells);
  const hiddenCells = _extends({}, previousState.caches.hiddenCells);
  const hiddenCellOriginMap = _extends({}, previousState.caches.hiddenCellOriginMap);
  const processedRange = {
    firstRowIndex: Math.min(previousState.processedRange.firstRowIndex, rangeToProcess.firstRowIndex),
    lastRowIndex: Math.max(previousState.processedRange.lastRowIndex, rangeToProcess.lastRowIndex)
  };
  colDefs.forEach((colDef, columnIndex) => {
    var _a;
    for (let index = rangeToProcess.firstRowIndex; index < rangeToProcess.lastRowIndex; index += 1) {
      const row = visibleRows[index];
      if ((_a = hiddenCells[row.id]) == null ? void 0 : _a[columnIndex]) {
        continue;
      }
      const cellValue = getCellValue(row.model, colDef, apiRef);
      if (cellValue == null) {
        continue;
      }
      let spannedRowId = row.id;
      let spannedRowIndex = index;
      let rowSpan = 0;
      const backwardsHiddenCells = [];
      if (index === rangeToProcess.firstRowIndex) {
        let prevIndex = index - 1;
        let prevRowEntry = visibleRows[prevIndex];
        while (prevIndex >= range.firstRowIndex && prevRowEntry && getCellValue(prevRowEntry.model, colDef, apiRef) === cellValue) {
          const currentRow = visibleRows[prevIndex + 1];
          if (hiddenCells[currentRow.id]) {
            hiddenCells[currentRow.id][columnIndex] = true;
          } else {
            hiddenCells[currentRow.id] = {
              [columnIndex]: true
            };
          }
          backwardsHiddenCells.push(index);
          rowSpan += 1;
          spannedRowId = prevRowEntry.id;
          spannedRowIndex = prevIndex;
          prevIndex -= 1;
          prevRowEntry = visibleRows[prevIndex];
        }
      }
      backwardsHiddenCells.forEach((hiddenCellIndex) => {
        if (hiddenCellOriginMap[hiddenCellIndex]) {
          hiddenCellOriginMap[hiddenCellIndex][columnIndex] = spannedRowIndex;
        } else {
          hiddenCellOriginMap[hiddenCellIndex] = {
            [columnIndex]: spannedRowIndex
          };
        }
      });
      let relativeIndex = index + 1;
      while (relativeIndex <= range.lastRowIndex && visibleRows[relativeIndex] && getCellValue(visibleRows[relativeIndex].model, colDef, apiRef) === cellValue) {
        const currentRow = visibleRows[relativeIndex];
        if (hiddenCells[currentRow.id]) {
          hiddenCells[currentRow.id][columnIndex] = true;
        } else {
          hiddenCells[currentRow.id] = {
            [columnIndex]: true
          };
        }
        if (hiddenCellOriginMap[relativeIndex]) {
          hiddenCellOriginMap[relativeIndex][columnIndex] = spannedRowIndex;
        } else {
          hiddenCellOriginMap[relativeIndex] = {
            [columnIndex]: spannedRowIndex
          };
        }
        relativeIndex += 1;
        rowSpan += 1;
      }
      if (rowSpan > 0) {
        if (spannedCells[spannedRowId]) {
          spannedCells[spannedRowId][columnIndex] = rowSpan + 1;
        } else {
          spannedCells[spannedRowId] = {
            [columnIndex]: rowSpan + 1
          };
        }
      }
    }
  });
  return {
    caches: {
      spannedCells,
      hiddenCells,
      hiddenCellOriginMap
    },
    processedRange
  };
};
var getInitialRangeToProcess = (props, apiRef) => {
  const rowCount = gridDataRowIdsSelector(apiRef).length;
  if (props.pagination) {
    const pageSize = gridPageSizeSelector(apiRef);
    let paginationLastRowIndex = DEFAULT_ROWS_TO_PROCESS;
    if (pageSize > 0) {
      paginationLastRowIndex = pageSize - 1;
    }
    return {
      firstRowIndex: 0,
      lastRowIndex: Math.min(paginationLastRowIndex, rowCount)
    };
  }
  return {
    firstRowIndex: 0,
    lastRowIndex: Math.min(DEFAULT_ROWS_TO_PROCESS, rowCount)
  };
};
var rowSpanningStateInitializer = (state, props, apiRef) => {
  var _a;
  if (!props.rowSpanning) {
    return _extends({}, state, {
      rowSpanning: EMPTY_STATE
    });
  }
  const rowIds = state.rows.dataRowIds || [];
  const orderedFields = state.columns.orderedFields || [];
  const dataRowIdToModelLookup = state.rows.dataRowIdToModelLookup;
  const columnsLookup = state.columns.lookup;
  const isFilteringPending = Boolean(state.filter.filterModel.items.length) || Boolean((_a = state.filter.filterModel.quickFilterValues) == null ? void 0 : _a.length);
  if (!rowIds.length || !orderedFields.length || !dataRowIdToModelLookup || !columnsLookup || isFilteringPending) {
    return _extends({}, state, {
      rowSpanning: EMPTY_STATE
    });
  }
  const rangeToProcess = getInitialRangeToProcess(props, apiRef);
  const rows = rowIds.map((id) => ({
    id,
    model: dataRowIdToModelLookup[id]
  }));
  const colDefs = orderedFields.map((field) => columnsLookup[field]);
  const rowSpanning = computeRowSpanningState(apiRef, colDefs, rows, rangeToProcess, rangeToProcess, true);
  return _extends({}, state, {
    rowSpanning
  });
};
var useGridRowSpanning = (apiRef, props) => {
  const store = apiRef.current.virtualizer.store;
  const updateRowSpanningState = React201.useCallback((renderContext, resetState = false) => {
    const {
      range,
      rows: visibleRows
    } = getVisibleRows(apiRef);
    if (range === null || !isRowContextInitialized(renderContext)) {
      return;
    }
    const previousState = resetState ? EMPTY_STATE : Rowspan.selectors.state(store.state);
    const rangeToProcess = getUnprocessedRange({
      firstRowIndex: renderContext.firstRowIndex,
      lastRowIndex: Math.min(renderContext.lastRowIndex, range.lastRowIndex - range.firstRowIndex + 1)
    }, previousState.processedRange);
    if (rangeToProcess === null) {
      return;
    }
    const colDefs = gridVisibleColumnDefinitionsSelector(apiRef);
    const newState = computeRowSpanningState(apiRef, colDefs, visibleRows, range, rangeToProcess, resetState);
    const newSpannedCellsCount = Object.keys(newState.caches.spannedCells).length;
    const newHiddenCellsCount = Object.keys(newState.caches.hiddenCells).length;
    const previousSpannedCellsCount = Object.keys(previousState.caches.spannedCells).length;
    const previousHiddenCellsCount = Object.keys(previousState.caches.hiddenCells).length;
    const shouldUpdateState = resetState || newSpannedCellsCount !== previousSpannedCellsCount || newHiddenCellsCount !== previousHiddenCellsCount;
    const hasNoSpannedCells = newSpannedCellsCount === 0 && previousSpannedCellsCount === 0;
    if (!shouldUpdateState || hasNoSpannedCells) {
      return;
    }
    store.set("rowSpanning", newState);
  }, [apiRef, store]);
  const resetRowSpanningState = React201.useCallback(() => {
    const renderContext = gridRenderContextSelector(apiRef);
    if (!isRowContextInitialized(renderContext)) {
      return;
    }
    updateRowSpanningState(renderContext, true);
  }, [apiRef, updateRowSpanningState]);
  useGridEvent(apiRef, "renderedRowsIntervalChange", runIf(props.rowSpanning, updateRowSpanningState));
  useGridEvent(apiRef, "sortedRowsSet", runIf(props.rowSpanning, resetRowSpanningState));
  useGridEvent(apiRef, "paginationModelChange", runIf(props.rowSpanning, resetRowSpanningState));
  useGridEvent(apiRef, "filteredRowsSet", runIf(props.rowSpanning, resetRowSpanningState));
  useGridEvent(apiRef, "columnsChange", runIf(props.rowSpanning, resetRowSpanningState));
  React201.useEffect(() => {
    if (!props.rowSpanning) {
      if (store.state.rowSpanning !== EMPTY_STATE) {
        store.set("rowSpanning", EMPTY_STATE);
      }
    } else if (store.state.rowSpanning.caches === EMPTY_CACHES2) {
      resetRowSpanningState();
    }
  }, [apiRef, store, resetRowSpanningState, props.rowSpanning]);
};

// node_modules/@mui/x-data-grid/esm/hooks/features/listView/useGridListView.js
init_extends();
var React202 = __toESM(require_react(), 1);
var listViewStateInitializer = (state, props, apiRef) => _extends({}, state, {
  listViewColumn: props.listViewColumn ? _extends({}, props.listViewColumn, {
    computedWidth: getListColumnWidth(apiRef)
  }) : void 0
});
function useGridListView(apiRef, props) {
  const updateListColumnWidth = () => {
    apiRef.current.setState((state) => {
      if (!state.listViewColumn) {
        return state;
      }
      return _extends({}, state, {
        listViewColumn: _extends({}, state.listViewColumn, {
          computedWidth: getListColumnWidth(apiRef)
        })
      });
    });
  };
  const prevInnerWidth = React202.useRef(null);
  const handleGridSizeChange = (viewportInnerSize) => {
    if (prevInnerWidth.current !== viewportInnerSize.width) {
      prevInnerWidth.current = viewportInnerSize.width;
      updateListColumnWidth();
    }
  };
  useGridEvent(apiRef, "viewportInnerSizeChange", handleGridSizeChange);
  useGridEvent(apiRef, "columnVisibilityModelChange", updateListColumnWidth);
  useEnhancedEffect_default(() => {
    const listColumn = props.listViewColumn;
    if (listColumn) {
      apiRef.current.setState((state) => {
        return _extends({}, state, {
          listViewColumn: _extends({}, listColumn, {
            computedWidth: getListColumnWidth(apiRef)
          })
        });
      });
    }
  }, [apiRef, props.listViewColumn]);
  React202.useEffect(() => {
    if (props.listView && !props.listViewColumn) {
      warnOnce(["MUI X: The `listViewColumn` prop must be set if `listView` is enabled.", 'To fix, pass a column definition to the `listViewColumn` prop, e.g. `{ field: "example", renderCell: (params) => <div>{params.row.id}</div> }`.', "For more details, see https://mui.com/x/react-data-grid/list-view/"]);
    }
  }, [props.listView, props.listViewColumn]);
}
function getListColumnWidth(apiRef) {
  return gridDimensionsSelector(apiRef).viewportInnerSize.width;
}

// node_modules/@mui/x-data-grid/esm/hooks/features/dataSource/useGridDataSource.js
var React204 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/esm/hooks/features/dataSource/useGridDataSourceBase.js
init_extends();
init_objectWithoutPropertiesLoose();
var React203 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/esm/hooks/features/dataSource/gridDataSourceSelector.js
var gridGetRowsParamsSelector = createSelector3(gridFilterModelSelector, gridSortModelSelector, gridPaginationModelSelector, (filterModel, sortModel, paginationModel) => ({
  groupKeys: [],
  paginationModel,
  sortModel,
  filterModel,
  start: paginationModel.page * paginationModel.pageSize,
  end: paginationModel.page * paginationModel.pageSize + paginationModel.pageSize - 1
}));

// node_modules/@mui/x-data-grid/esm/hooks/features/dataSource/utils.js
init_extends();
var DataSourceRowsUpdateStrategy = function(DataSourceRowsUpdateStrategy2) {
  DataSourceRowsUpdateStrategy2["Default"] = "set-new-rows";
  DataSourceRowsUpdateStrategy2["LazyLoading"] = "replace-row-range";
  return DataSourceRowsUpdateStrategy2;
}({});
var CacheChunkManager = class {
  /**
   * @param chunkSize The number of rows to store in each cache entry.
   * If not set, the whole array will be stored in a single cache entry.
   * Setting this value to smallest page size will result in better cache hit rate.
   * Has no effect if cursor pagination is used.
   */
  constructor(chunkSize) {
    __publicField(this, "getCacheKeys", (key) => {
      if (this.chunkSize < 1 || typeof key.start !== "number") {
        return [key];
      }
      const chunkedKeys = [];
      for (let i = key.start; i <= key.end; i += this.chunkSize) {
        const end = Math.min(i + this.chunkSize - 1, key.end);
        chunkedKeys.push(_extends({}, key, {
          start: i,
          end
        }));
      }
      return chunkedKeys;
    });
    __publicField(this, "splitResponse", (key, response) => {
      const cacheKeys = this.getCacheKeys(key);
      if (cacheKeys.length === 1) {
        return /* @__PURE__ */ new Map([[key, response]]);
      }
      const responses = /* @__PURE__ */ new Map();
      cacheKeys.forEach((chunkKey) => {
        var _a, _b, _c, _d;
        const isLastChunk = chunkKey.end === key.end;
        const responseSlice = _extends({}, response, {
          pageInfo: _extends({}, response.pageInfo, {
            // If the original response had page info, update that information for all but last chunk and keep the original value for the last chunk
            hasNextPage: ((_a = response.pageInfo) == null ? void 0 : _a.hasNextPage) !== void 0 && !isLastChunk ? true : (_b = response.pageInfo) == null ? void 0 : _b.hasNextPage,
            nextCursor: ((_c = response.pageInfo) == null ? void 0 : _c.nextCursor) !== void 0 && !isLastChunk ? response.rows[chunkKey.end + 1].id : (_d = response.pageInfo) == null ? void 0 : _d.nextCursor
          }),
          rows: typeof chunkKey.start !== "number" || typeof key.start !== "number" ? response.rows : response.rows.slice(chunkKey.start - key.start, chunkKey.end - key.start + 1)
        });
        responses.set(chunkKey, responseSlice);
      });
      return responses;
    });
    this.chunkSize = chunkSize;
  }
};
__publicField(CacheChunkManager, "mergeResponses", (responses) => {
  if (responses.length === 1) {
    return responses[0];
  }
  return responses.reduce((acc, response) => ({
    rows: [...acc.rows, ...response.rows],
    rowCount: response.rowCount,
    pageInfo: response.pageInfo
  }), {
    rows: [],
    rowCount: 0,
    pageInfo: {}
  });
});

// node_modules/@mui/x-data-grid/esm/hooks/features/dataSource/useGridDataSourceBase.js
var _excluded84 = ["skipCache"];
var noopCache = {
  clear: () => {
  },
  get: () => void 0,
  set: () => {
  }
};
function getCache2(cacheProp, options = {}) {
  if (cacheProp === null) {
    return noopCache;
  }
  return cacheProp ?? new GridDataSourceCacheDefault(options);
}
var useGridDataSourceBase = (apiRef, props, options = {}) => {
  var _a, _b;
  const setStrategyAvailability = React203.useCallback(() => {
    apiRef.current.setStrategyAvailability(GridStrategyGroup.DataSource, DataSourceRowsUpdateStrategy.Default, props.dataSource ? () => true : () => false);
  }, [apiRef, props.dataSource]);
  const [defaultRowsUpdateStrategyActive, setDefaultRowsUpdateStrategyActive] = React203.useState(false);
  const paginationModel = useGridSelector(apiRef, gridPaginationModelSelector);
  const lastRequestId = React203.useRef(0);
  const onDataSourceErrorProp = props.onDataSourceError;
  const cacheChunkManager = useLazyRef(() => {
    if (!props.pagination) {
      return new CacheChunkManager(paginationModel.pageSize);
    }
    const sortedPageSizeOptions = props.pageSizeOptions.map((option) => typeof option === "number" ? option : option.value).sort((a, b) => a - b);
    const cacheChunkSize = Math.min(paginationModel.pageSize, sortedPageSizeOptions[0]);
    return new CacheChunkManager(cacheChunkSize);
  }).current;
  const [cache, setCache] = React203.useState(() => getCache2(props.dataSourceCache, options.cacheOptions));
  const fetchRows = React203.useCallback(async (parentId, params) => {
    var _a2, _b2, _c;
    const getRows = (_a2 = props.dataSource) == null ? void 0 : _a2.getRows;
    if (!getRows) {
      return;
    }
    if (parentId && parentId !== GRID_ROOT_GROUP_ID && props.signature !== "DataGrid") {
      (_b2 = options.fetchRowChildren) == null ? void 0 : _b2.call(options, [parentId]);
      return;
    }
    (_c = options.clearDataSourceState) == null ? void 0 : _c.call(options);
    const _ref = params || {}, {
      skipCache
    } = _ref, getRowsParams = _objectWithoutPropertiesLoose(_ref, _excluded84);
    const fetchParams = _extends({}, gridGetRowsParamsSelector(apiRef), apiRef.current.unstable_applyPipeProcessors("getRowsParams", {}), getRowsParams);
    const cacheKeys = cacheChunkManager.getCacheKeys(fetchParams);
    const responses = cacheKeys.map((cacheKey) => cache.get(cacheKey));
    if (!skipCache && responses.every((response) => response !== void 0)) {
      apiRef.current.applyStrategyProcessor("dataSourceRowsUpdate", {
        response: CacheChunkManager.mergeResponses(responses),
        fetchParams
      });
      return;
    }
    if (defaultRowsUpdateStrategyActive || apiRef.current.getRowsCount() === 0) {
      apiRef.current.setLoading(true);
    }
    const requestId = lastRequestId.current + 1;
    lastRequestId.current = requestId;
    try {
      const getRowsResponse = await getRows(fetchParams);
      const cacheResponses = cacheChunkManager.splitResponse(fetchParams, getRowsResponse);
      cacheResponses.forEach((response, key) => cache.set(key, response));
      if (lastRequestId.current === requestId) {
        apiRef.current.applyStrategyProcessor("dataSourceRowsUpdate", {
          response: getRowsResponse,
          fetchParams
        });
      }
    } catch (originalError) {
      if (lastRequestId.current === requestId) {
        apiRef.current.applyStrategyProcessor("dataSourceRowsUpdate", {
          error: originalError,
          fetchParams
        });
        if (typeof onDataSourceErrorProp === "function") {
          onDataSourceErrorProp(new GridGetRowsError({
            message: originalError == null ? void 0 : originalError.message,
            params: fetchParams,
            cause: originalError
          }));
        } else if (true) {
          warnOnce(["MUI X: A call to `dataSource.getRows()` threw an error which was not handled because `onDataSourceError()` is missing.", "To handle the error pass a callback to the `onDataSourceError` prop, for example `<DataGrid onDataSourceError={(error) => ...} />`.", "For more detail, see https://mui.com/x/react-data-grid/server-side-data/#error-handling."], "error");
        }
      }
    } finally {
      if (defaultRowsUpdateStrategyActive && lastRequestId.current === requestId) {
        apiRef.current.setLoading(false);
      }
    }
  }, [cacheChunkManager, cache, apiRef, defaultRowsUpdateStrategyActive, (_a = props.dataSource) == null ? void 0 : _a.getRows, onDataSourceErrorProp, options, props.signature]);
  const handleStrategyActivityChange = React203.useCallback(() => {
    setDefaultRowsUpdateStrategyActive(apiRef.current.getActiveStrategy(GridStrategyGroup.DataSource) === DataSourceRowsUpdateStrategy.Default);
  }, [apiRef]);
  const handleDataUpdate = React203.useCallback((params) => {
    if ("error" in params) {
      apiRef.current.setRows([]);
      return;
    }
    const {
      response
    } = params;
    if (response.rowCount !== void 0) {
      apiRef.current.setRowCount(response.rowCount);
    }
    apiRef.current.setRows(response.rows);
    apiRef.current.unstable_applyPipeProcessors("processDataSourceRows", {
      params: params.fetchParams,
      response
    }, true);
  }, [apiRef]);
  const dataSourceUpdateRow = (_b = props.dataSource) == null ? void 0 : _b.updateRow;
  const handleEditRowOption = options.handleEditRow;
  const editRow = React203.useCallback(async (params) => {
    if (!dataSourceUpdateRow) {
      return void 0;
    }
    try {
      const finalRowUpdate = await dataSourceUpdateRow(params);
      if (typeof handleEditRowOption === "function") {
        handleEditRowOption(params, finalRowUpdate);
        return finalRowUpdate;
      }
      apiRef.current.updateNestedRows([finalRowUpdate], []);
      if (finalRowUpdate && !isDeepEqual2(finalRowUpdate, params.previousRow)) {
        apiRef.current.dataSource.cache.clear();
      }
      return finalRowUpdate;
    } catch (errorThrown) {
      if (typeof onDataSourceErrorProp === "function") {
        onDataSourceErrorProp(new GridUpdateRowError({
          message: errorThrown == null ? void 0 : errorThrown.message,
          params,
          cause: errorThrown
        }));
      } else if (true) {
        warnOnce(["MUI X: A call to `dataSource.updateRow()` threw an error which was not handled because `onDataSourceError()` is missing.", "To handle the error pass a callback to the `onDataSourceError` prop, for example `<DataGrid onDataSourceError={(error) => ...} />`.", "For more detail, see https://mui.com/x/react-data-grid/server-side-data/#error-handling."], "error");
      }
      throw errorThrown;
    }
  }, [apiRef, dataSourceUpdateRow, onDataSourceErrorProp, handleEditRowOption]);
  const dataSourceApi = {
    dataSource: {
      fetchRows,
      cache,
      editRow
    }
  };
  const debouncedFetchRows = React203.useMemo(() => debounce(fetchRows, 0), [fetchRows]);
  const isFirstRender = React203.useRef(true);
  React203.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return;
    }
    if (props.dataSourceCache === void 0) {
      return;
    }
    const newCache = getCache2(props.dataSourceCache, options.cacheOptions);
    setCache((prevCache) => prevCache !== newCache ? newCache : prevCache);
  }, [props.dataSourceCache, options.cacheOptions]);
  React203.useEffect(() => {
    if (props.dataSource) {
      apiRef.current.dataSource.cache.clear();
      apiRef.current.dataSource.fetchRows();
    }
    return () => {
      lastRequestId.current += 1;
    };
  }, [apiRef, props.dataSource]);
  return {
    api: {
      public: dataSourceApi
    },
    debouncedFetchRows,
    strategyProcessor: {
      strategyName: DataSourceRowsUpdateStrategy.Default,
      group: "dataSourceRowsUpdate",
      processor: handleDataUpdate
    },
    setStrategyAvailability,
    cacheChunkManager,
    cache,
    events: {
      strategyAvailabilityChange: handleStrategyActivityChange,
      sortModelChange: runIf(defaultRowsUpdateStrategyActive, () => debouncedFetchRows()),
      filterModelChange: runIf(defaultRowsUpdateStrategyActive, () => debouncedFetchRows()),
      paginationModelChange: runIf(defaultRowsUpdateStrategyActive, () => debouncedFetchRows())
    }
  };
};

// node_modules/@mui/x-data-grid/esm/hooks/features/dataSource/useGridDataSource.js
var useGridDataSource = (apiRef, props) => {
  const {
    api,
    strategyProcessor,
    events,
    setStrategyAvailability
  } = useGridDataSourceBase(apiRef, props);
  useGridApiMethod(apiRef, api.public, "public");
  useGridRegisterStrategyProcessor(apiRef, strategyProcessor.strategyName, strategyProcessor.group, strategyProcessor.processor);
  Object.entries(events).forEach(([event, handler]) => {
    useGridEvent(apiRef, event, handler);
  });
  React204.useEffect(() => {
    setStrategyAvailability();
  }, [setStrategyAvailability]);
};

// node_modules/@mui/x-data-grid/esm/DataGrid/useDataGridComponent.js
var useDataGridComponent = (apiRef, props, configuration2) => {
  useGridInitialization(apiRef, props);
  useGridRowSelectionPreProcessors(apiRef, props);
  useGridRowsPreProcessors(apiRef);
  useGridInitializeState(propsStateInitializer, apiRef, props);
  useGridInitializeState(rowSelectionStateInitializer, apiRef, props);
  useGridInitializeState(columnsStateInitializer, apiRef, props);
  useGridInitializeState(rowsStateInitializer, apiRef, props);
  useGridInitializeState(paginationStateInitializer, apiRef, props);
  useGridInitializeState(editingStateInitializer, apiRef, props);
  useGridInitializeState(focusStateInitializer, apiRef, props);
  useGridInitializeState(sortingStateInitializer, apiRef, props);
  useGridInitializeState(preferencePanelStateInitializer, apiRef, props);
  useGridInitializeState(filterStateInitializer, apiRef, props);
  useGridInitializeState(rowSpanningStateInitializer, apiRef, props);
  useGridInitializeState(densityStateInitializer, apiRef, props);
  useGridInitializeState(columnResizeStateInitializer, apiRef, props);
  useGridInitializeState(columnMenuStateInitializer, apiRef, props);
  useGridInitializeState(columnGroupsStateInitializer, apiRef, props);
  useGridInitializeState(virtualizationStateInitializer, apiRef, props);
  useGridInitializeState(dimensionsStateInitializer, apiRef, props);
  useGridInitializeState(rowsMetaStateInitializer, apiRef, props);
  useGridInitializeState(listViewStateInitializer, apiRef, props);
  useGridVirtualizer(apiRef, props);
  useGridKeyboardNavigation(apiRef, props);
  useGridRowSelection(apiRef, props);
  useGridColumns(apiRef, props);
  useGridRows(apiRef, props, configuration2);
  useGridRowSpanning(apiRef, props);
  useGridParamsApi(apiRef, props);
  useGridColumnSpanning(apiRef);
  useGridColumnGrouping(apiRef, props);
  useGridEditing(apiRef, props);
  useGridFocus(apiRef, props);
  useGridPreferencesPanel(apiRef, props);
  useGridFilter(apiRef, props, configuration2);
  useGridSorting(apiRef, props, configuration2);
  useGridDensity(apiRef, props);
  useGridColumnResize(apiRef, props);
  useGridPagination(apiRef, props);
  useGridRowsMeta(apiRef, props);
  useGridScroll(apiRef, props);
  useGridColumnMenu(apiRef);
  useGridCsvExport(apiRef, props);
  useGridPrintExport(apiRef, props);
  useGridClipboard(apiRef, props);
  useGridDimensions(apiRef, props);
  useGridEvents(apiRef, props);
  useGridStatePersistence(apiRef);
  useGridVirtualization(apiRef, props);
  useGridListView(apiRef, props);
  useGridDataSource(apiRef, props);
  React205.useEffect(() => {
    apiRef.current.runAppliersForPendingProcessors();
  });
};

// node_modules/@mui/x-data-grid/esm/DataGrid/useDataGridProps.js
init_extends();
var React212 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/esm/constants/defaultGridSlotsComponents.js
init_extends();

// node_modules/@mui/x-data-grid/esm/components/GridColumnHeaders.js
init_extends();
init_objectWithoutPropertiesLoose();
var React209 = __toESM(require_react(), 1);
var import_prop_types90 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-data-grid/esm/hooks/features/columnHeaders/useGridColumnHeaders.js
init_extends();
var React207 = __toESM(require_react(), 1);
init_clsx();

// node_modules/@mui/x-data-grid/esm/components/columnHeaders/GridColumnGroupHeader.js
init_extends();
var React206 = __toESM(require_react(), 1);
var import_jsx_runtime118 = __toESM(require_jsx_runtime(), 1);
var useUtilityClasses43 = (ownerState) => {
  const {
    classes: classes2,
    headerAlign,
    isDragging,
    isLastColumn,
    showLeftBorder,
    showRightBorder,
    groupId,
    pinnedPosition
  } = ownerState;
  const slots = {
    root: ["columnHeader", headerAlign === "left" && "columnHeader--alignLeft", headerAlign === "center" && "columnHeader--alignCenter", headerAlign === "right" && "columnHeader--alignRight", isDragging && "columnHeader--moving", showRightBorder && "columnHeader--withRightBorder", showLeftBorder && "columnHeader--withLeftBorder", "withBorderColor", groupId === null ? "columnHeader--emptyGroup" : "columnHeader--filledGroup", pinnedPosition === PinnedColumnPosition.LEFT && "columnHeader--pinnedLeft", pinnedPosition === PinnedColumnPosition.RIGHT && "columnHeader--pinnedRight", isLastColumn && "columnHeader--last"],
    draggableContainer: ["columnHeaderDraggableContainer"],
    titleContainer: ["columnHeaderTitleContainer", "withBorderColor"],
    titleContainerContent: ["columnHeaderTitleContainerContent"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
function GridColumnGroupHeader(props) {
  var _a;
  const {
    groupId,
    width: width2,
    depth,
    maxDepth,
    fields,
    height: height2,
    colIndex,
    hasFocus,
    tabIndex,
    isLastColumn,
    pinnedPosition,
    pinnedOffset
  } = props;
  const rootProps = useGridRootProps();
  const isRtl = useRtl();
  const headerCellRef = React206.useRef(null);
  const apiRef = useGridApiContext();
  const columnGroupsLookup = useGridSelector(apiRef, gridColumnGroupsLookupSelector);
  const group = groupId ? columnGroupsLookup[groupId] : {};
  const {
    headerName = groupId ?? "",
    description = "",
    headerAlign = void 0
  } = group;
  let headerComponent;
  const render = groupId && ((_a = columnGroupsLookup[groupId]) == null ? void 0 : _a.renderHeaderGroup);
  const renderParams = React206.useMemo(() => ({
    groupId,
    headerName,
    description,
    depth,
    maxDepth,
    fields,
    colIndex,
    isLastColumn
  }), [groupId, headerName, description, depth, maxDepth, fields, colIndex, isLastColumn]);
  if (groupId && render) {
    headerComponent = render(renderParams);
  }
  const ownerState = _extends({}, props, {
    classes: rootProps.classes,
    headerAlign,
    depth,
    isDragging: false
  });
  const label = headerName ?? groupId;
  const id = useId();
  const elementId = groupId === null ? `empty-group-cell-${id}` : groupId;
  const classes2 = useUtilityClasses43(ownerState);
  React206.useLayoutEffect(() => {
    if (hasFocus) {
      const focusableElement = headerCellRef.current.querySelector('[tabindex="0"]');
      const elementToFocus = focusableElement || headerCellRef.current;
      if (!elementToFocus) {
        return;
      }
      if (doesSupportPreventScroll()) {
        elementToFocus.focus({
          preventScroll: true
        });
      } else {
        const scrollPosition = apiRef.current.getScrollPosition();
        elementToFocus.focus();
        apiRef.current.scroll(scrollPosition);
      }
    }
  }, [apiRef, hasFocus]);
  const publish = React206.useCallback(
    (eventName) => (event) => {
      if (isEventTargetInPortal(event)) {
        return;
      }
      apiRef.current.publishEvent(eventName, renderParams, event);
    },
    // For now this is stupid, because renderParams change all the time.
    // Need to move it's computation in the api, such that for a given depth+columnField, I can get the group parameters
    [apiRef, renderParams]
  );
  const mouseEventsHandlers = React206.useMemo(() => ({
    onKeyDown: publish("columnGroupHeaderKeyDown"),
    onFocus: publish("columnGroupHeaderFocus"),
    onBlur: publish("columnGroupHeaderBlur")
  }), [publish]);
  const headerClassName = typeof group.headerClassName === "function" ? group.headerClassName(renderParams) : group.headerClassName;
  const style4 = React206.useMemo(() => attachPinnedStyle(_extends({}, props.style), isRtl, pinnedPosition, pinnedOffset), [pinnedPosition, pinnedOffset, props.style, isRtl]);
  return (0, import_jsx_runtime118.jsx)(GridGenericColumnHeaderItem, _extends({
    ref: headerCellRef,
    classes: classes2,
    columnMenuOpen: false,
    colIndex,
    height: height2,
    isResizing: false,
    sortDirection: null,
    hasFocus: false,
    tabIndex,
    isDraggable: false,
    headerComponent,
    headerClassName,
    description,
    elementId,
    width: width2,
    columnMenuIconButton: null,
    columnTitleIconButtons: null,
    resizable: false,
    label,
    "aria-colspan": fields.length,
    "data-fields": `|-${fields.join("-|-")}-|`,
    style: style4
  }, mouseEventsHandlers));
}

// node_modules/@mui/x-data-grid/esm/hooks/features/columnHeaders/useGridColumnHeaders.js
var import_jsx_runtime119 = __toESM(require_jsx_runtime(), 1);
var GridColumnHeaderRow = styled_default("div", {
  name: "MuiDataGrid",
  slot: "ColumnHeaderRow"
})({
  display: "flex"
});
var useGridColumnHeaders = (props) => {
  const {
    visibleColumns,
    sortColumnLookup,
    filterColumnLookup,
    columnHeaderTabIndexState,
    columnGroupHeaderTabIndexState,
    columnHeaderFocus,
    columnGroupHeaderFocus,
    headerGroupingMaxDepth,
    columnMenuState,
    columnVisibility,
    columnGroupsHeaderStructure,
    hasOtherElementInTabSequence
  } = props;
  const [dragCol, setDragCol] = React207.useState("");
  const [resizeCol, setResizeCol] = React207.useState("");
  const apiRef = useGridPrivateApiContext();
  const rootProps = useGridRootProps();
  const columnGroupsModel = useGridSelector(apiRef, gridColumnGroupsUnwrappedModelSelector);
  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);
  const renderContext = useGridSelector(apiRef, gridRenderContextColumnsSelector);
  const pinnedColumns = useGridSelector(apiRef, gridVisiblePinnedColumnDefinitionsSelector);
  const columnsLookup = useGridSelector(apiRef, gridColumnLookupSelector);
  const offsetLeft = computeOffsetLeft(columnPositions, renderContext, pinnedColumns.left.length);
  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);
  const gridHasFiller = useGridSelector(apiRef, gridHasFillerSelector);
  const headerHeight = useGridSelector(apiRef, gridHeaderHeightSelector);
  const groupHeaderHeight = useGridSelector(apiRef, gridGroupHeaderHeightSelector);
  const scrollbarWidth = useGridSelector(apiRef, gridVerticalScrollbarWidthSelector);
  const handleColumnResizeStart = React207.useCallback((params) => setResizeCol(params.field), []);
  const handleColumnResizeStop = React207.useCallback(() => setResizeCol(""), []);
  const handleColumnReorderStart = React207.useCallback((params) => setDragCol(params.field), []);
  const handleColumnReorderStop = React207.useCallback(() => setDragCol(""), []);
  const leftRenderContext = React207.useMemo(() => {
    return pinnedColumns.left.length ? {
      firstColumnIndex: 0,
      lastColumnIndex: pinnedColumns.left.length
    } : null;
  }, [pinnedColumns.left.length]);
  const rightRenderContext = React207.useMemo(() => {
    return pinnedColumns.right.length ? {
      firstColumnIndex: visibleColumns.length - pinnedColumns.right.length,
      lastColumnIndex: visibleColumns.length
    } : null;
  }, [pinnedColumns.right.length, visibleColumns.length]);
  useGridEvent(apiRef, "columnResizeStart", handleColumnResizeStart);
  useGridEvent(apiRef, "columnResizeStop", handleColumnResizeStop);
  useGridEvent(apiRef, "columnHeaderDragStart", handleColumnReorderStart);
  useGridEvent(apiRef, "columnHeaderDragEndNative", handleColumnReorderStop);
  const getColumnsToRender = (params) => {
    const {
      renderContext: currentContext = renderContext
    } = params || {};
    const firstColumnToRender = currentContext.firstColumnIndex;
    const lastColumnToRender = Math.min(currentContext.lastColumnIndex, visibleColumns.length);
    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);
    return {
      renderedColumns,
      firstColumnToRender,
      lastColumnToRender
    };
  };
  const getFillers = (params, children, leftOverflow, borderBottom2 = false) => {
    const isPinnedRight = (params == null ? void 0 : params.position) === PinnedColumnPosition.RIGHT;
    const isNotPinned = (params == null ? void 0 : params.position) === void 0;
    const hasScrollbarFiller = pinnedColumns.right.length > 0 && isPinnedRight || pinnedColumns.right.length === 0 && isNotPinned;
    const leftOffsetWidth = offsetLeft - leftOverflow;
    return (0, import_jsx_runtime119.jsxs)(React207.Fragment, {
      children: [isNotPinned && (0, import_jsx_runtime119.jsx)("div", {
        role: "presentation",
        style: {
          width: leftOffsetWidth
        }
      }), children, isNotPinned && (0, import_jsx_runtime119.jsx)("div", {
        role: "presentation",
        className: clsx_default(gridClasses2.filler, borderBottom2 && gridClasses2["filler--borderBottom"])
      }), hasScrollbarFiller && (0, import_jsx_runtime119.jsx)(GridScrollbarFillerCell, {
        header: true,
        pinnedRight: isPinnedRight,
        borderBottom: borderBottom2,
        borderTop: false
      })]
    });
  };
  if (true) getFillers.displayName = "getFillers";
  const getColumnHeaders = (params, other = {}) => {
    const {
      renderedColumns,
      firstColumnToRender
    } = getColumnsToRender(params);
    const columns = [];
    for (let i = 0; i < renderedColumns.length; i += 1) {
      const colDef = renderedColumns[i];
      const columnIndex = firstColumnToRender + i;
      const isFirstColumn = columnIndex === 0;
      const tabIndex = columnHeaderTabIndexState !== null && columnHeaderTabIndexState.field === colDef.field || isFirstColumn && !hasOtherElementInTabSequence ? 0 : -1;
      const hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === colDef.field;
      const open = columnMenuState.open && columnMenuState.field === colDef.field;
      const pinnedPosition = params == null ? void 0 : params.position;
      const pinnedOffset = getPinnedCellOffset(pinnedPosition, colDef.computedWidth, columnIndex, columnPositions, columnsTotalWidth, scrollbarWidth);
      const siblingWithBorderingSeparator = pinnedPosition === PinnedColumnPosition.RIGHT ? renderedColumns[i - 1] : renderedColumns[i + 1];
      const isSiblingFocused = siblingWithBorderingSeparator ? columnHeaderFocus !== null && columnHeaderFocus.field === siblingWithBorderingSeparator.field : false;
      const isLastUnpinned = columnIndex + 1 === columnPositions.length - pinnedColumns.right.length;
      const indexInSection = i;
      const sectionLength = renderedColumns.length;
      const showLeftBorder = shouldCellShowLeftBorder(pinnedPosition, indexInSection);
      const showRightBorder = shouldCellShowRightBorder(pinnedPosition, indexInSection, sectionLength, rootProps.showColumnVerticalBorder, gridHasFiller);
      columns.push((0, import_jsx_runtime119.jsx)(Memoized3, _extends({}, sortColumnLookup[colDef.field], {
        columnMenuOpen: open,
        filterItemsCounter: filterColumnLookup[colDef.field] && filterColumnLookup[colDef.field].length,
        headerHeight,
        isDragging: colDef.field === dragCol,
        colDef,
        colIndex: columnIndex,
        isResizing: resizeCol === colDef.field,
        isLast: columnIndex === columnPositions.length - 1,
        hasFocus,
        tabIndex,
        pinnedPosition,
        pinnedOffset,
        isLastUnpinned,
        isSiblingFocused,
        showLeftBorder,
        showRightBorder
      }, other), colDef.field));
    }
    return getFillers(params, columns, 0);
  };
  const getColumnHeadersRow = () => {
    return (0, import_jsx_runtime119.jsxs)(GridColumnHeaderRow, {
      role: "row",
      "aria-rowindex": headerGroupingMaxDepth + 1,
      ownerState: rootProps,
      className: gridClasses2["row--borderBottom"],
      style: {
        height: headerHeight
      },
      children: [leftRenderContext && getColumnHeaders({
        position: PinnedColumnPosition.LEFT,
        renderContext: leftRenderContext
      }, {
        disableReorder: true
      }), getColumnHeaders({
        renderContext
      }), rightRenderContext && getColumnHeaders({
        position: PinnedColumnPosition.RIGHT,
        renderContext: rightRenderContext
      }, {
        disableReorder: true,
        separatorSide: GridColumnHeaderSeparatorSides.Left
      })]
    });
  };
  if (true) getColumnHeadersRow.displayName = "getColumnHeadersRow";
  const getColumnGroupHeaders = ({
    depth,
    params
  }) => {
    var _a, _b;
    const columnsToRender = getColumnsToRender(params);
    if (columnsToRender.renderedColumns.length === 0) {
      return null;
    }
    const {
      firstColumnToRender,
      lastColumnToRender
    } = columnsToRender;
    const rowStructure = columnGroupsHeaderStructure[depth];
    const firstColumnFieldToRender = visibleColumns[firstColumnToRender].field;
    const firstGroupToRender = ((_a = columnGroupsModel[firstColumnFieldToRender]) == null ? void 0 : _a[depth]) ?? null;
    const firstGroupIndex = rowStructure.findIndex(({
      groupId,
      columnFields
    }) => groupId === firstGroupToRender && columnFields.includes(firstColumnFieldToRender));
    const lastColumnFieldToRender = visibleColumns[lastColumnToRender - 1].field;
    const lastGroupToRender = ((_b = columnGroupsModel[lastColumnFieldToRender]) == null ? void 0 : _b[depth]) ?? null;
    const lastGroupIndex = rowStructure.findIndex(({
      groupId,
      columnFields
    }) => groupId === lastGroupToRender && columnFields.includes(lastColumnFieldToRender));
    const visibleColumnGroupHeader = rowStructure.slice(firstGroupIndex, lastGroupIndex + 1).map((groupStructure) => {
      return _extends({}, groupStructure, {
        columnFields: groupStructure.columnFields.filter((field) => columnVisibility[field] !== false)
      });
    }).filter((groupStructure) => groupStructure.columnFields.length > 0);
    const firstVisibleColumnIndex = visibleColumnGroupHeader[0].columnFields.indexOf(firstColumnFieldToRender);
    const hiddenGroupColumns = visibleColumnGroupHeader[0].columnFields.slice(0, firstVisibleColumnIndex);
    const leftOverflow = hiddenGroupColumns.reduce((acc, field) => {
      const column = columnsLookup[field];
      return acc + (column.computedWidth ?? 0);
    }, 0);
    let columnIndex = firstColumnToRender;
    const children = visibleColumnGroupHeader.map(({
      groupId,
      columnFields
    }, index) => {
      const hasFocus = columnGroupHeaderFocus !== null && columnGroupHeaderFocus.depth === depth && columnFields.includes(columnGroupHeaderFocus.field);
      const tabIndex = columnGroupHeaderTabIndexState !== null && columnGroupHeaderTabIndexState.depth === depth && columnFields.includes(columnGroupHeaderTabIndexState.field) ? 0 : -1;
      const headerInfo = {
        groupId,
        width: columnFields.reduce((acc, field) => acc + columnsLookup[field].computedWidth, 0),
        fields: columnFields,
        colIndex: columnIndex,
        hasFocus,
        tabIndex
      };
      const pinnedPosition = params.position;
      const pinnedOffset = getPinnedCellOffset(pinnedPosition, headerInfo.width, columnIndex, columnPositions, columnsTotalWidth, scrollbarWidth);
      columnIndex += columnFields.length;
      let indexInSection = index;
      if (pinnedPosition === PinnedColumnPosition.LEFT) {
        indexInSection = columnIndex - 1;
      }
      return (0, import_jsx_runtime119.jsx)(GridColumnGroupHeader, {
        groupId,
        width: headerInfo.width,
        fields: headerInfo.fields,
        colIndex: headerInfo.colIndex,
        depth,
        isLastColumn: index === visibleColumnGroupHeader.length - 1,
        maxDepth: headerGroupingMaxDepth,
        height: groupHeaderHeight,
        hasFocus,
        tabIndex,
        pinnedPosition,
        pinnedOffset,
        showLeftBorder: shouldCellShowLeftBorder(pinnedPosition, indexInSection),
        showRightBorder: shouldCellShowRightBorder(pinnedPosition, indexInSection, visibleColumnGroupHeader.length, rootProps.showColumnVerticalBorder, gridHasFiller)
      }, index);
    });
    return getFillers(params, children, leftOverflow);
  };
  const getColumnGroupHeadersRows = () => {
    if (headerGroupingMaxDepth === 0) {
      return null;
    }
    const headerRows = [];
    for (let depth = 0; depth < headerGroupingMaxDepth; depth += 1) {
      headerRows.push((0, import_jsx_runtime119.jsxs)(GridColumnHeaderRow, {
        role: "row",
        "aria-rowindex": depth + 1,
        ownerState: rootProps,
        style: {
          height: groupHeaderHeight
        },
        children: [leftRenderContext && getColumnGroupHeaders({
          depth,
          params: {
            position: PinnedColumnPosition.LEFT,
            renderContext: leftRenderContext,
            maxLastColumn: leftRenderContext.lastColumnIndex
          }
        }), getColumnGroupHeaders({
          depth,
          params: {
            renderContext
          }
        }), rightRenderContext && getColumnGroupHeaders({
          depth,
          params: {
            position: PinnedColumnPosition.RIGHT,
            renderContext: rightRenderContext,
            maxLastColumn: rightRenderContext.lastColumnIndex
          }
        })]
      }, depth));
    }
    return headerRows;
  };
  return {
    renderContext,
    leftRenderContext,
    rightRenderContext,
    pinnedColumns,
    visibleColumns,
    columnPositions,
    getFillers,
    getColumnHeadersRow,
    getColumnsToRender,
    getColumnGroupHeadersRows,
    getPinnedCellOffset,
    isDragging: !!dragCol,
    getInnerProps: () => ({
      role: "rowgroup"
    })
  };
};

// node_modules/@mui/x-data-grid/esm/components/columnHeaders/GridBaseColumnHeaders.js
init_extends();
init_objectWithoutPropertiesLoose();
var React208 = __toESM(require_react(), 1);
init_clsx();
var import_jsx_runtime120 = __toESM(require_jsx_runtime(), 1);
var _excluded85 = ["className"];
var useUtilityClasses44 = (ownerState) => {
  const {
    classes: classes2
  } = ownerState;
  const slots = {
    root: ["columnHeaders"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, classes2);
};
var GridColumnHeadersRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "ColumnHeaders"
})({
  display: "flex",
  flexDirection: "column",
  borderTopLeftRadius: "var(--unstable_DataGrid-radius)",
  borderTopRightRadius: "var(--unstable_DataGrid-radius)"
});
var GridBaseColumnHeaders = forwardRef2(function GridColumnHeaders(props, ref) {
  const {
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded85);
  const rootProps = useGridRootProps();
  const classes2 = useUtilityClasses44(rootProps);
  return (0, import_jsx_runtime120.jsx)(GridColumnHeadersRoot, _extends({
    className: clsx_default(classes2.root, className),
    ownerState: rootProps
  }, other, {
    role: "presentation",
    ref
  }));
});
if (true) GridBaseColumnHeaders.displayName = "GridBaseColumnHeaders";

// node_modules/@mui/x-data-grid/esm/components/GridColumnHeaders.js
var import_jsx_runtime121 = __toESM(require_jsx_runtime(), 1);
var _excluded86 = ["className", "visibleColumns", "sortColumnLookup", "filterColumnLookup", "columnHeaderTabIndexState", "columnGroupHeaderTabIndexState", "columnHeaderFocus", "columnGroupHeaderFocus", "headerGroupingMaxDepth", "columnMenuState", "columnVisibility", "columnGroupsHeaderStructure", "hasOtherElementInTabSequence"];
var GridColumnHeaders2 = forwardRef2(function GridColumnHeaders3(props, ref) {
  const {
    visibleColumns,
    sortColumnLookup,
    filterColumnLookup,
    columnHeaderTabIndexState,
    columnGroupHeaderTabIndexState,
    columnHeaderFocus,
    columnGroupHeaderFocus,
    headerGroupingMaxDepth,
    columnMenuState,
    columnVisibility,
    columnGroupsHeaderStructure,
    hasOtherElementInTabSequence
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded86);
  const {
    getInnerProps,
    getColumnHeadersRow,
    getColumnGroupHeadersRows
  } = useGridColumnHeaders({
    visibleColumns,
    sortColumnLookup,
    filterColumnLookup,
    columnHeaderTabIndexState,
    columnGroupHeaderTabIndexState,
    columnHeaderFocus,
    columnGroupHeaderFocus,
    headerGroupingMaxDepth,
    columnMenuState,
    columnVisibility,
    columnGroupsHeaderStructure,
    hasOtherElementInTabSequence
  });
  return (0, import_jsx_runtime121.jsxs)(GridBaseColumnHeaders, _extends({}, other, getInnerProps(), {
    ref,
    children: [getColumnGroupHeadersRows(), getColumnHeadersRow()]
  }));
});
if (true) GridColumnHeaders2.displayName = "GridColumnHeaders";
true ? GridColumnHeaders2.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  columnGroupHeaderFocus: import_prop_types90.default.shape({
    depth: import_prop_types90.default.number.isRequired,
    field: import_prop_types90.default.string.isRequired
  }),
  columnGroupHeaderTabIndexState: import_prop_types90.default.shape({
    depth: import_prop_types90.default.number.isRequired,
    field: import_prop_types90.default.string.isRequired
  }),
  columnGroupsHeaderStructure: import_prop_types90.default.arrayOf(import_prop_types90.default.arrayOf(import_prop_types90.default.shape({
    columnFields: import_prop_types90.default.arrayOf(import_prop_types90.default.string).isRequired,
    groupId: import_prop_types90.default.string
  }))).isRequired,
  columnHeaderFocus: import_prop_types90.default.shape({
    field: import_prop_types90.default.string.isRequired
  }),
  columnHeaderTabIndexState: import_prop_types90.default.shape({
    field: import_prop_types90.default.string.isRequired
  }),
  columnMenuState: import_prop_types90.default.shape({
    field: import_prop_types90.default.string,
    open: import_prop_types90.default.bool.isRequired
  }).isRequired,
  columnVisibility: import_prop_types90.default.object.isRequired,
  filterColumnLookup: import_prop_types90.default.object.isRequired,
  hasOtherElementInTabSequence: import_prop_types90.default.bool.isRequired,
  headerGroupingMaxDepth: import_prop_types90.default.number.isRequired,
  sortColumnLookup: import_prop_types90.default.object.isRequired,
  visibleColumns: import_prop_types90.default.arrayOf(import_prop_types90.default.object).isRequired
} : void 0;
var MemoizedGridColumnHeaders = fastMemo(GridColumnHeaders2);

// node_modules/@mui/x-data-grid/esm/components/GridDetailPanels.js
function GridDetailPanels(_) {
  return null;
}

// node_modules/@mui/x-data-grid/esm/components/GridPinnedRows.js
function GridPinnedRows(_) {
  return null;
}

// node_modules/@mui/x-data-grid/esm/components/GridNoResultsOverlay.js
init_extends();
var React210 = __toESM(require_react(), 1);
var import_jsx_runtime122 = __toESM(require_jsx_runtime(), 1);
var GridNoResultsOverlay = forwardRef2(function GridNoResultsOverlay2(props, ref) {
  const apiRef = useGridApiContext();
  const noResultsOverlayLabel = apiRef.current.getLocaleText("noResultsOverlayLabel");
  return (0, import_jsx_runtime122.jsx)(GridOverlay, _extends({}, props, {
    ref,
    children: noResultsOverlayLabel
  }));
});
if (true) GridNoResultsOverlay.displayName = "GridNoResultsOverlay";

// node_modules/@mui/x-data-grid/esm/components/virtualization/GridBottomContainer.js
init_extends();
var React211 = __toESM(require_react(), 1);
init_clsx();
var import_jsx_runtime123 = __toESM(require_jsx_runtime(), 1);
var useUtilityClasses45 = () => {
  const slots = {
    root: ["bottomContainer"]
  };
  return composeClasses2(slots, getDataGridUtilityClass, {});
};
var Element3 = styled_default2("div")({
  position: "sticky",
  zIndex: 40,
  bottom: "calc(var(--DataGrid-hasScrollX) * var(--DataGrid-scrollbarSize))"
});
function GridBottomContainer(props) {
  const classes2 = useUtilityClasses45();
  return (0, import_jsx_runtime123.jsx)(Element3, _extends({}, props, {
    className: clsx_default(classes2.root, gridClasses2["container--bottom"]),
    role: "presentation"
  }));
}

// node_modules/@mui/x-data-grid/esm/constants/defaultGridSlotsComponents.js
var DATA_GRID_DEFAULT_SLOTS_COMPONENTS = _extends({}, material_default, {
  cell: MemoizedGridCell,
  skeletonCell: Memoized2,
  columnHeaderFilterIconButton: GridColumnHeaderFilterIconButtonWrapped,
  columnHeaderSortIcon: GridColumnHeaderSortIcon2,
  columnMenu: GridColumnMenu,
  columnHeaders: MemoizedGridColumnHeaders,
  detailPanels: GridDetailPanels,
  bottomContainer: GridBottomContainer,
  footer: GridFooter,
  footerRowCount: GridRowCount,
  toolbar: GridToolbar,
  pinnedRows: GridPinnedRows,
  loadingOverlay: GridLoadingOverlay,
  noResultsOverlay: GridNoResultsOverlay,
  noRowsOverlay: GridNoRowsOverlay,
  noColumnsOverlay: GridNoColumnsOverlay,
  pagination: GridPagination,
  filterPanel: GridFilterPanel,
  columnsPanel: GridColumnsPanel,
  columnsManagement: GridColumnsManagement,
  panel: GridPanel,
  row: MemoizedGridRow
});

// node_modules/@mui/x-data-grid/esm/DataGrid/useDataGridProps.js
var DATA_GRID_FORCED_PROPS = {
  disableMultipleColumnsFiltering: true,
  disableMultipleColumnsSorting: true,
  throttleRowsMs: void 0,
  hideFooterRowCount: false,
  pagination: true,
  checkboxSelectionVisibleOnly: false,
  disableColumnReorder: true,
  keepColumnPositionIfDraggedOutside: false,
  signature: "DataGrid",
  listView: false
};
var getDataGridForcedProps = (themedProps) => _extends({}, DATA_GRID_FORCED_PROPS, themedProps.dataSource ? {
  filterMode: "server",
  sortingMode: "server",
  paginationMode: "server"
} : {});
var defaultSlots = DATA_GRID_DEFAULT_SLOTS_COMPONENTS;
var useDataGridProps = (inProps) => {
  const theme = useTheme();
  const themedProps = React212.useMemo(() => getThemeProps({
    props: inProps,
    theme,
    name: "MuiDataGrid"
  }), [theme, inProps]);
  const localeText = React212.useMemo(() => _extends({}, GRID_DEFAULT_LOCALE_TEXT, themedProps.localeText), [themedProps.localeText]);
  const slots = React212.useMemo(() => computeSlots({
    defaultSlots,
    slots: themedProps.slots
  }), [themedProps.slots]);
  const injectDefaultProps = React212.useMemo(() => {
    return Object.keys(DATA_GRID_PROPS_DEFAULT_VALUES).reduce((acc, key) => {
      acc[key] = themedProps[key] ?? DATA_GRID_PROPS_DEFAULT_VALUES[key];
      return acc;
    }, {});
  }, [themedProps]);
  return React212.useMemo(() => _extends({}, themedProps, injectDefaultProps, {
    localeText,
    slots
  }, getDataGridForcedProps(themedProps)), [themedProps, localeText, slots, injectDefaultProps]);
};

// node_modules/@mui/x-data-grid/esm/hooks/core/useGridApiInitialization.js
var React213 = __toESM(require_react(), 1);

// node_modules/@mui/x-data-grid/node_modules/@mui/x-internals/esm/EventManager/EventManager.js
var EventManager = class {
  constructor() {
    __publicField(this, "maxListeners", 20);
    __publicField(this, "warnOnce", false);
    __publicField(this, "events", {});
  }
  on(eventName, listener, options = {}) {
    let collection = this.events[eventName];
    if (!collection) {
      collection = {
        highPriority: /* @__PURE__ */ new Map(),
        regular: /* @__PURE__ */ new Map()
      };
      this.events[eventName] = collection;
    }
    if (options.isFirst) {
      collection.highPriority.set(listener, true);
    } else {
      collection.regular.set(listener, true);
    }
    if (true) {
      const collectionSize = collection.highPriority.size + collection.regular.size;
      if (collectionSize > this.maxListeners && !this.warnOnce) {
        this.warnOnce = true;
        console.warn([`Possible EventEmitter memory leak detected. ${collectionSize} ${eventName} listeners added.`].join("\n"));
      }
    }
  }
  removeListener(eventName, listener) {
    if (this.events[eventName]) {
      this.events[eventName].regular.delete(listener);
      this.events[eventName].highPriority.delete(listener);
    }
  }
  removeAllListeners() {
    this.events = {};
  }
  emit(eventName, ...args) {
    const collection = this.events[eventName];
    if (!collection) {
      return;
    }
    const highPriorityListeners = Array.from(collection.highPriority.keys());
    const regularListeners = Array.from(collection.regular.keys());
    for (let i = highPriorityListeners.length - 1; i >= 0; i -= 1) {
      const listener = highPriorityListeners[i];
      if (collection.highPriority.has(listener)) {
        listener.apply(this, args);
      }
    }
    for (let i = 0; i < regularListeners.length; i += 1) {
      const listener = regularListeners[i];
      if (collection.regular.has(listener)) {
        listener.apply(this, args);
      }
    }
  }
  once(eventName, listener) {
    const that = this;
    this.on(eventName, function oneTimeListener(...args) {
      that.removeListener(eventName, oneTimeListener);
      listener.apply(that, args);
    });
  }
};

// node_modules/@mui/x-data-grid/esm/hooks/core/useGridApiInitialization.js
var SYMBOL_API_PRIVATE = Symbol("mui.api_private");
var isSyntheticEvent = (event) => {
  return event.isPropagationStopped !== void 0;
};
var globalId3 = 0;
function createPrivateAPI(publicApiRef) {
  var _a;
  const existingPrivateApi = (_a = publicApiRef.current) == null ? void 0 : _a[SYMBOL_API_PRIVATE];
  if (existingPrivateApi) {
    return existingPrivateApi;
  }
  const state = {};
  const privateApi = {
    state,
    store: Store.create(state),
    instanceId: {
      id: globalId3
    }
  };
  globalId3 += 1;
  privateApi.getPublicApi = () => publicApiRef.current;
  privateApi.register = (visibility2, methods) => {
    Object.keys(methods).forEach((methodName) => {
      const method = methods[methodName];
      const currentPrivateMethod = privateApi[methodName];
      if ((currentPrivateMethod == null ? void 0 : currentPrivateMethod.spying) === true) {
        currentPrivateMethod.target = method;
      } else {
        privateApi[methodName] = method;
      }
      if (visibility2 === "public") {
        const publicApi = publicApiRef.current;
        const currentPublicMethod = publicApi[methodName];
        if ((currentPublicMethod == null ? void 0 : currentPublicMethod.spying) === true) {
          currentPublicMethod.target = method;
        } else {
          publicApi[methodName] = method;
        }
      }
    });
  };
  privateApi.register("private", {
    caches: {},
    eventManager: new EventManager()
  });
  return privateApi;
}
function createPublicAPI(privateApiRef) {
  const publicApi = {
    get state() {
      return privateApiRef.current.state;
    },
    get store() {
      return privateApiRef.current.store;
    },
    get instanceId() {
      return privateApiRef.current.instanceId;
    },
    [SYMBOL_API_PRIVATE]: privateApiRef.current
  };
  return publicApi;
}
function useGridApiInitialization(inputApiRef, props) {
  var _a;
  const publicApiRef = React213.useRef(null);
  const privateApiRef = React213.useRef(null);
  if (!privateApiRef.current) {
    privateApiRef.current = createPrivateAPI(publicApiRef);
  }
  if (!publicApiRef.current) {
    publicApiRef.current = createPublicAPI(privateApiRef);
  }
  const publishEvent = React213.useCallback((...args) => {
    const [name, params, event = {}] = args;
    event.defaultMuiPrevented = false;
    if (isSyntheticEvent(event) && event.isPropagationStopped()) {
      return;
    }
    const details = props.signature === GridSignature.DataGridPro || props.signature === GridSignature.DataGridPremium ? {
      api: privateApiRef.current.getPublicApi()
    } : {};
    privateApiRef.current.eventManager.emit(name, params, event, details);
  }, [privateApiRef, props.signature]);
  const subscribeEvent = React213.useCallback((event, handler, options) => {
    privateApiRef.current.eventManager.on(event, handler, options);
    const api = privateApiRef.current;
    return () => {
      api.eventManager.removeListener(event, handler);
    };
  }, [privateApiRef]);
  useGridApiMethod(privateApiRef, {
    subscribeEvent,
    publishEvent
  }, "public");
  if (inputApiRef && !((_a = inputApiRef.current) == null ? void 0 : _a.state)) {
    inputApiRef.current = publicApiRef.current;
  }
  React213.useImperativeHandle(inputApiRef, () => publicApiRef.current, [publicApiRef]);
  React213.useEffect(() => {
    const api = privateApiRef.current;
    return () => {
      api.publishEvent("unmount");
    };
  }, [privateApiRef]);
  return privateApiRef;
}

// node_modules/@mui/x-data-grid/esm/DataGrid/DataGrid.js
var import_jsx_runtime124 = __toESM(require_jsx_runtime(), 1);
var configuration = {
  hooks: {
    useCSSVariables: useMaterialCSSVariables,
    useGridAriaAttributes,
    useGridRowAriaAttributes,
    useGridRowsOverridableMethods,
    useCellAggregationResult: () => null,
    useSortValueGetter: (apiRef) => apiRef.current.getCellValue,
    useFilterValueGetter: (apiRef) => apiRef.current.getRowValue
  }
};
var DataGridRaw = function DataGrid(inProps, ref) {
  var _a;
  const props = useDataGridProps(inProps);
  const privateApiRef = useGridApiInitialization(props.apiRef, props);
  useDataGridComponent(privateApiRef, props, configuration);
  if (true) {
    validateProps(props, propValidatorsDataGrid);
  }
  return (0, import_jsx_runtime124.jsx)(GridContextProvider, {
    privateApiRef,
    configuration,
    props,
    children: (0, import_jsx_runtime124.jsx)(MemoizedGridRoot, _extends({
      className: props.className,
      style: props.style,
      sx: props.sx
    }, (_a = props.slotProps) == null ? void 0 : _a.root, {
      ref
    }))
  });
};
if (true) DataGridRaw.displayName = "DataGridRaw";
var DataGrid2 = React214.memo(forwardRef2(DataGridRaw));
if (true) DataGrid2.displayName = "DataGrid";
DataGridRaw.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The ref object that allows Data Grid manipulation. Can be instantiated with `useGridApiRef()`.
   */
  apiRef: import_prop_types91.default.shape({
    current: import_prop_types91.default.object
  }),
  /**
   * The `aria-label` of the Data Grid.
   */
  "aria-label": import_prop_types91.default.string,
  /**
   * The `id` of the element containing a label for the Data Grid.
   */
  "aria-labelledby": import_prop_types91.default.string,
  /**
   * If `true`, the Data Grid height is dynamic and follows the number of rows in the Data Grid.
   * @default false
   * @deprecated Use flex parent container instead: https://mui.com/x/react-data-grid/layout/#flex-parent-container
   * @example
   * <div style={{ display: 'flex', flexDirection: 'column' }}>
   *   <DataGrid />
   * </div>
   */
  autoHeight: import_prop_types91.default.bool,
  /**
   * If `true`, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar.
   * @default false
   */
  autoPageSize: import_prop_types91.default.bool,
  /**
   * If `true`, columns are autosized after the datagrid is mounted.
   * @default false
   */
  autosizeOnMount: import_prop_types91.default.bool,
  /**
   * The options for autosize when user-initiated.
   */
  autosizeOptions: import_prop_types91.default.shape({
    columns: import_prop_types91.default.arrayOf(import_prop_types91.default.string),
    disableColumnVirtualization: import_prop_types91.default.bool,
    expand: import_prop_types91.default.bool,
    includeHeaders: import_prop_types91.default.bool,
    includeOutliers: import_prop_types91.default.bool,
    outliersFactor: import_prop_types91.default.number
  }),
  /**
   * Controls the modes of the cells.
   */
  cellModesModel: import_prop_types91.default.object,
  /**
   * If `true`, the Data Grid will display an extra column with checkboxes for selecting rows.
   * @default false
   */
  checkboxSelection: import_prop_types91.default.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types91.default.object,
  className: import_prop_types91.default.string,
  /**
   * The character used to separate cell values when copying to the clipboard.
   * @default '\t'
   */
  clipboardCopyCellDelimiter: import_prop_types91.default.string,
  /**
   * Column region in pixels to render before/after the viewport
   * @default 150
   */
  columnBufferPx: import_prop_types91.default.number,
  /**
   * The milliseconds delay to wait after a keystroke before triggering filtering in the columns menu.
   * @default 150
   */
  columnFilterDebounceMs: import_prop_types91.default.number,
  /**
   * Sets the height in pixels of the column group headers in the Data Grid.
   * Inherits the `columnHeaderHeight` value if not set.
   */
  columnGroupHeaderHeight: import_prop_types91.default.number,
  columnGroupingModel: import_prop_types91.default.arrayOf(import_prop_types91.default.object),
  /**
   * Sets the height in pixel of the column headers in the Data Grid.
   * @default 56
   */
  columnHeaderHeight: import_prop_types91.default.number,
  /**
   * Set of columns of type [[GridColDef]][].
   */
  columns: import_prop_types91.default.arrayOf(import_prop_types91.default.object).isRequired,
  /**
   * Set the column visibility model of the Data Grid.
   * If defined, the Data Grid will ignore the `hide` property in [[GridColDef]].
   */
  columnVisibilityModel: import_prop_types91.default.object,
  /**
   * The data source object.
   */
  dataSource: import_prop_types91.default.shape({
    getRows: import_prop_types91.default.func.isRequired,
    updateRow: import_prop_types91.default.func
  }),
  /**
   * Data source cache object.
   */
  dataSourceCache: import_prop_types91.default.shape({
    clear: import_prop_types91.default.func.isRequired,
    get: import_prop_types91.default.func.isRequired,
    set: import_prop_types91.default.func.isRequired
  }),
  /**
   * Set the density of the Data Grid.
   * @default "standard"
   */
  density: import_prop_types91.default.oneOf(["comfortable", "compact", "standard"]),
  /**
   * If `true`, column autosizing on header separator double-click is disabled.
   * @default false
   */
  disableAutosize: import_prop_types91.default.bool,
  /**
   * If `true`, column filters are disabled.
   * @default false
   */
  disableColumnFilter: import_prop_types91.default.bool,
  /**
   * If `true`, the column menu is disabled.
   * @default false
   */
  disableColumnMenu: import_prop_types91.default.bool,
  /**
   * If `true`, resizing columns is disabled.
   * @default false
   */
  disableColumnResize: import_prop_types91.default.bool,
  /**
   * If `true`, hiding/showing columns is disabled.
   * @default false
   */
  disableColumnSelector: import_prop_types91.default.bool,
  /**
   * If `true`, the column sorting feature will be disabled.
   * @default false
   */
  disableColumnSorting: import_prop_types91.default.bool,
  /**
   * If `true`, the density selector is disabled.
   * @default false
   */
  disableDensitySelector: import_prop_types91.default.bool,
  /**
   * If `true`, `eval()` is not used for performance optimization.
   * @default false
   */
  disableEval: import_prop_types91.default.bool,
  /**
   * If `true`, multiple selection using the Ctrl/CMD or Shift key is disabled.
   * The MIT DataGrid will ignore this prop, unless `checkboxSelection` is enabled.
   * @default false (`!props.checkboxSelection` for MIT Data Grid)
   */
  disableMultipleRowSelection: import_prop_types91.default.bool,
  /**
   * If `true`, the Data Grid will not use the exclude model optimization when selecting all rows.
   * @default false
   */
  disableRowSelectionExcludeModel: import_prop_types91.default.bool,
  /**
   * If `true`, the selection on click on a row or cell is disabled.
   * @default false
   */
  disableRowSelectionOnClick: import_prop_types91.default.bool,
  /**
   * If `true`, the virtualization is disabled.
   * @default false
   */
  disableVirtualization: import_prop_types91.default.bool,
  /**
   * Controls whether to use the cell or row editing.
   * @default "cell"
   */
  editMode: import_prop_types91.default.oneOf(["cell", "row"]),
  /**
   * Use if the actual rowCount is not known upfront, but an estimation is available.
   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.
   * Applicable only with `paginationMode="server"` and when `rowCount="-1"`
   */
  estimatedRowCount: import_prop_types91.default.number,
  /**
   * Unstable features, breaking changes might be introduced.
   * For each feature, if the flag is not explicitly set to `true`, the feature will be fully disabled and any property / method call will not have any effect.
   */
  experimentalFeatures: import_prop_types91.default.shape({
    warnIfFocusStateIsNotSynced: import_prop_types91.default.bool
  }),
  /**
   * The milliseconds delay to wait after a keystroke before triggering filtering.
   * @default 150
   */
  filterDebounceMs: import_prop_types91.default.number,
  /**
   * Filtering can be processed on the server or client-side.
   * Set it to 'server' if you would like to handle filtering on the server-side.
   * @default "client"
   */
  filterMode: import_prop_types91.default.oneOf(["client", "server"]),
  /**
   * Set the filter model of the Data Grid.
   */
  filterModel: import_prop_types91.default.shape({
    items: import_prop_types91.default.arrayOf(import_prop_types91.default.shape({
      field: import_prop_types91.default.string.isRequired,
      id: import_prop_types91.default.oneOfType([import_prop_types91.default.number, import_prop_types91.default.string]),
      operator: import_prop_types91.default.string.isRequired,
      value: import_prop_types91.default.any
    })).isRequired,
    logicOperator: import_prop_types91.default.oneOf(["and", "or"]),
    quickFilterExcludeHiddenColumns: import_prop_types91.default.bool,
    quickFilterLogicOperator: import_prop_types91.default.oneOf(["and", "or"]),
    quickFilterValues: import_prop_types91.default.array
  }),
  /**
   * Function that applies CSS classes dynamically on cells.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @returns {string} The CSS class to apply to the cell.
   */
  getCellClassName: import_prop_types91.default.func,
  /**
   * Function that returns the element to render in row detail.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @returns {React.JSX.Element} The row detail element.
   */
  getDetailPanelContent: import_prop_types91.default.func,
  /**
   * Function that returns the estimated height for a row.
   * Only works if dynamic row height is used.
   * Once the row height is measured this value is discarded.
   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].
   * @returns {number | null} The estimated row height value. If `null` or `undefined` then the default row height, based on the density, is applied.
   */
  getEstimatedRowHeight: import_prop_types91.default.func,
  /**
   * Function that applies CSS classes dynamically on rows.
   * @param {GridRowClassNameParams} params With all properties from [[GridRowClassNameParams]].
   * @returns {string} The CSS class to apply to the row.
   */
  getRowClassName: import_prop_types91.default.func,
  /**
   * Function that sets the row height per row.
   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].
   * @returns {GridRowHeightReturnValue} The row height value. If `null` or `undefined` then the default row height is applied. If "auto" then the row height is calculated based on the content.
   */
  getRowHeight: import_prop_types91.default.func,
  /**
   * Return the id of a given [[GridRowModel]].
   * Ensure the reference of this prop is stable to avoid performance implications.
   * It could be done by either defining the prop outside of the component or by memoizing it.
   */
  getRowId: import_prop_types91.default.func,
  /**
   * Function that allows to specify the spacing between rows.
   * @param {GridRowSpacingParams} params With all properties from [[GridRowSpacingParams]].
   * @returns {GridRowSpacing} The row spacing values.
   */
  getRowSpacing: import_prop_types91.default.func,
  /**
   * If `true`, the footer component is hidden.
   * @default false
   */
  hideFooter: import_prop_types91.default.bool,
  /**
   * If `true`, the pagination component in the footer is hidden.
   * @default false
   */
  hideFooterPagination: import_prop_types91.default.bool,
  /**
   * If `true`, the selected row count in the footer is hidden.
   * @default false
   */
  hideFooterSelectedRowCount: import_prop_types91.default.bool,
  /**
   * If `true`, the diacritics (accents) are ignored when filtering or quick filtering.
   * E.g. when filter value is `cafe`, the rows with `café` will be visible.
   * @default false
   */
  ignoreDiacritics: import_prop_types91.default.bool,
  /**
   * If `true`, the Data Grid will not use `valueFormatter` when exporting to CSV or copying to clipboard.
   * If an object is provided, you can choose to ignore the `valueFormatter` for CSV export or clipboard export.
   * @default false
   */
  ignoreValueFormatterDuringExport: import_prop_types91.default.oneOfType([import_prop_types91.default.shape({
    clipboardExport: import_prop_types91.default.bool,
    csvExport: import_prop_types91.default.bool
  }), import_prop_types91.default.bool]),
  /**
   * The initial state of the DataGrid.
   * The data in it will be set in the state on initialization but will not be controlled.
   * If one of the data in `initialState` is also being controlled, then the control state wins.
   */
  initialState: import_prop_types91.default.object,
  /**
   * Callback fired when a cell is rendered, returns true if the cell is editable.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @returns {boolean} A boolean indicating if the cell is editable.
   */
  isCellEditable: import_prop_types91.default.func,
  /**
   * Determines if a row can be selected.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @returns {boolean} A boolean indicating if the row is selectable.
   */
  isRowSelectable: import_prop_types91.default.func,
  /**
   * If `true`, the selection model will retain selected rows that do not exist.
   * Useful when using server side pagination and row selections need to be retained
   * when changing pages.
   * @default false
   */
  keepNonExistentRowsSelected: import_prop_types91.default.bool,
  /**
   * The label of the Data Grid.
   * If the `showToolbar` prop is `true`, the label will be displayed in the toolbar and applied to the `aria-label` attribute of the grid.
   * If the `showToolbar` prop is `false`, the label will not be visible but will be applied to the `aria-label` attribute of the grid.
   */
  label: import_prop_types91.default.string,
  /**
   * If `true`, a loading overlay is displayed.
   * @default false
   */
  loading: import_prop_types91.default.bool,
  /**
   * Set the locale text of the Data Grid.
   * You can find all the translation keys supported in [the source](https://github.com/mui/mui-x/blob/HEAD/packages/x-data-grid/src/constants/localeTextConstants.ts) in the GitHub repository.
   */
  localeText: import_prop_types91.default.object,
  /**
   * Pass a custom logger in the components that implements the [[Logger]] interface.
   * @default console
   */
  logger: import_prop_types91.default.shape({
    debug: import_prop_types91.default.func.isRequired,
    error: import_prop_types91.default.func.isRequired,
    info: import_prop_types91.default.func.isRequired,
    warn: import_prop_types91.default.func.isRequired
  }),
  /**
   * Allows to pass the logging level or false to turn off logging.
   * @default "error" ("warn" in dev mode)
   */
  logLevel: import_prop_types91.default.oneOf(["debug", "error", "info", "warn", false]),
  /**
   * Nonce of the inline styles for [Content Security Policy](https://www.w3.org/TR/2016/REC-CSP2-20161215/#script-src-the-nonce-attribute).
   */
  nonce: import_prop_types91.default.string,
  /**
   * Callback fired when any cell is clicked.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onCellClick: import_prop_types91.default.func,
  /**
   * Callback fired when a double click event comes from a cell element.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onCellDoubleClick: import_prop_types91.default.func,
  /**
   * Callback fired when the cell turns to edit mode.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.
   */
  onCellEditStart: import_prop_types91.default.func,
  /**
   * Callback fired when the cell turns to view mode.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.
   */
  onCellEditStop: import_prop_types91.default.func,
  /**
   * Callback fired when a keydown event comes from a cell element.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<React.KeyboardEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onCellKeyDown: import_prop_types91.default.func,
  /**
   * Callback fired when the `cellModesModel` prop changes.
   * @param {GridCellModesModel} cellModesModel Object containing which cells are in "edit" mode.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onCellModesModelChange: import_prop_types91.default.func,
  /**
   * Callback called when the data is copied to the clipboard.
   * @param {string} data The data copied to the clipboard.
   */
  onClipboardCopy: import_prop_types91.default.func,
  /**
   * Callback fired when a click event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderClick: import_prop_types91.default.func,
  /**
   * Callback fired when a contextmenu event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   */
  onColumnHeaderContextMenu: import_prop_types91.default.func,
  /**
   * Callback fired when a double click event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderDoubleClick: import_prop_types91.default.func,
  /**
   * Callback fired when a mouse enter event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderEnter: import_prop_types91.default.func,
  /**
   * Callback fired when a mouse leave event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderLeave: import_prop_types91.default.func,
  /**
   * Callback fired when a mouseout event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderOut: import_prop_types91.default.func,
  /**
   * Callback fired when a mouseover event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderOver: import_prop_types91.default.func,
  /**
   * Callback fired when a column is reordered.
   * @param {GridColumnOrderChangeParams} params With all properties from [[GridColumnOrderChangeParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnOrderChange: import_prop_types91.default.func,
  /**
   * Callback fired while a column is being resized.
   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnResize: import_prop_types91.default.func,
  /**
   * Callback fired when the column visibility model changes.
   * @param {GridColumnVisibilityModel} model The new model.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnVisibilityModelChange: import_prop_types91.default.func,
  /**
   * Callback fired when the width of a column is changed.
   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnWidthChange: import_prop_types91.default.func,
  /**
   * Callback fired when a data source request fails.
   * @param {GridGetRowsError | GridUpdateRowError} error The data source error object.
   */
  onDataSourceError: import_prop_types91.default.func,
  /**
   * Callback fired when the density changes.
   * @param {GridDensity} density New density value.
   */
  onDensityChange: import_prop_types91.default.func,
  /**
   * Callback fired when the Filter model changes before the filters are applied.
   * @param {GridFilterModel} model With all properties from [[GridFilterModel]].
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onFilterModelChange: import_prop_types91.default.func,
  /**
   * Callback fired when the menu is closed.
   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onMenuClose: import_prop_types91.default.func,
  /**
   * Callback fired when the menu is opened.
   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onMenuOpen: import_prop_types91.default.func,
  /**
   * Callback fired when the pagination meta has changed.
   * @param {GridPaginationMeta} paginationMeta Updated pagination meta.
   */
  onPaginationMetaChange: import_prop_types91.default.func,
  /**
   * Callback fired when the pagination model has changed.
   * @param {GridPaginationModel} model Updated pagination model.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onPaginationModelChange: import_prop_types91.default.func,
  /**
   * Callback fired when the preferences panel is closed.
   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onPreferencePanelClose: import_prop_types91.default.func,
  /**
   * Callback fired when the preferences panel is opened.
   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onPreferencePanelOpen: import_prop_types91.default.func,
  /**
   * Callback called when `processRowUpdate()` throws an error or rejects.
   * @param {any} error The error thrown.
   */
  onProcessRowUpdateError: import_prop_types91.default.func,
  /**
   * Callback fired when the Data Grid is resized.
   * @param {ElementSize} containerSize With all properties from [[ElementSize]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onResize: import_prop_types91.default.func,
  /**
   * Callback fired when a row is clicked.
   * Not called if the target clicked is an interactive element added by the built-in columns.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowClick: import_prop_types91.default.func,
  /**
   * Callback fired when the row count has changed.
   * @param {number} count Updated row count.
   */
  onRowCountChange: import_prop_types91.default.func,
  /**
   * Callback fired when a double click event comes from a row container element.
   * @param {GridRowParams} params With all properties from [[RowParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowDoubleClick: import_prop_types91.default.func,
  /**
   * Callback fired when the row turns to edit mode.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.
   */
  onRowEditStart: import_prop_types91.default.func,
  /**
   * Callback fired when the row turns to view mode.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.
   */
  onRowEditStop: import_prop_types91.default.func,
  /**
   * Callback fired when the `rowModesModel` prop changes.
   * @param {GridRowModesModel} rowModesModel Object containing which rows are in "edit" mode.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowModesModelChange: import_prop_types91.default.func,
  /**
   * Callback fired when the selection state of one or multiple rows changes.
   * @param {GridRowSelectionModel} rowSelectionModel With all the row ids [[GridSelectionModel]].
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowSelectionModelChange: import_prop_types91.default.func,
  /**
   * Callback fired when the sort model changes before a column is sorted.
   * @param {GridSortModel} model With all properties from [[GridSortModel]].
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onSortModelChange: import_prop_types91.default.func,
  /**
   * Callback fired when the state of the Data Grid is updated.
   * @param {GridState} state The new state.
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   * @ignore - do not document.
   */
  onStateChange: import_prop_types91.default.func,
  /**
   * Select the pageSize dynamically using the component UI.
   * @default [25, 50, 100]
   */
  pageSizeOptions: import_prop_types91.default.arrayOf(import_prop_types91.default.oneOfType([import_prop_types91.default.number, import_prop_types91.default.shape({
    label: import_prop_types91.default.string.isRequired,
    value: import_prop_types91.default.number.isRequired
  })]).isRequired),
  pagination: import_prop_types91.default.oneOf([true]),
  /**
   * The extra information about the pagination state of the Data Grid.
   * Only applicable with `paginationMode="server"`.
   */
  paginationMeta: import_prop_types91.default.shape({
    hasNextPage: import_prop_types91.default.bool
  }),
  /**
   * Pagination can be processed on the server or client-side.
   * Set it to 'client' if you would like to handle the pagination on the client-side.
   * Set it to 'server' if you would like to handle the pagination on the server-side.
   * @default "client"
   */
  paginationMode: import_prop_types91.default.oneOf(["client", "server"]),
  /**
   * The pagination model of type [[GridPaginationModel]] which refers to current `page` and `pageSize`.
   */
  paginationModel: import_prop_types91.default.shape({
    page: import_prop_types91.default.number.isRequired,
    pageSize: import_prop_types91.default.number.isRequired
  }),
  /**
   * Callback called before updating a row with new values in the row and cell editing.
   * @template R
   * @param {R} newRow Row object with the new values.
   * @param {R} oldRow Row object with the old values.
   * @param {{ rowId: GridRowId }} params Additional parameters.
   * @returns {Promise<R> | R} The final values to update the row.
   */
  processRowUpdate: import_prop_types91.default.func,
  /**
   * The milliseconds throttle delay for resizing the grid.
   * @default 60
   */
  resizeThrottleMs: import_prop_types91.default.number,
  /**
   * Row region in pixels to render before/after the viewport
   * @default 150
   */
  rowBufferPx: import_prop_types91.default.number,
  /**
   * Set the total number of rows, if it is different from the length of the value `rows` prop.
   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.
   * Only works with `paginationMode="server"`, ignored when `paginationMode="client"`.
   */
  rowCount: import_prop_types91.default.number,
  /**
   * Sets the height in pixel of a row in the Data Grid.
   * @default 52
   */
  rowHeight: import_prop_types91.default.number,
  /**
   * Controls the modes of the rows.
   */
  rowModesModel: import_prop_types91.default.object,
  /**
   * Set of rows of type [[GridRowsProp]].
   * @default []
   */
  rows: import_prop_types91.default.arrayOf(import_prop_types91.default.object),
  /**
   * If `false`, the row selection mode is disabled.
   * @default true
   */
  rowSelection: import_prop_types91.default.bool,
  /**
   * Sets the row selection model of the Data Grid.
   */
  rowSelectionModel: import_prop_types91.default.shape({
    ids: import_prop_types91.default.instanceOf(Set).isRequired,
    type: import_prop_types91.default.oneOf(["exclude", "include"]).isRequired
  }),
  /**
   * Sets the type of space between rows added by `getRowSpacing`.
   * @default "margin"
   */
  rowSpacingType: import_prop_types91.default.oneOf(["border", "margin"]),
  /**
   * If `true`, the Data Grid will auto span the cells over the rows having the same value.
   * @default false
   */
  rowSpanning: import_prop_types91.default.bool,
  /**
   * Override the height/width of the Data Grid inner scrollbar.
   */
  scrollbarSize: import_prop_types91.default.number,
  /**
   * If `true`, vertical borders will be displayed between cells.
   * @default false
   */
  showCellVerticalBorder: import_prop_types91.default.bool,
  /**
   * If `true`, vertical borders will be displayed between column header items.
   * @default false
   */
  showColumnVerticalBorder: import_prop_types91.default.bool,
  /**
   * If `true`, the toolbar is displayed.
   * @default false
   */
  showToolbar: import_prop_types91.default.bool,
  /**
   * Overridable components props dynamically passed to the component at rendering.
   */
  slotProps: import_prop_types91.default.object,
  /**
   * Overridable components.
   */
  slots: import_prop_types91.default.object,
  /**
   * Sorting can be processed on the server or client-side.
   * Set it to 'client' if you would like to handle sorting on the client-side.
   * Set it to 'server' if you would like to handle sorting on the server-side.
   * @default "client"
   */
  sortingMode: import_prop_types91.default.oneOf(["client", "server"]),
  /**
   * The order of the sorting sequence.
   * @default ['asc', 'desc', null]
   */
  sortingOrder: import_prop_types91.default.arrayOf(import_prop_types91.default.oneOf(["asc", "desc"])),
  /**
   * Set the sort model of the Data Grid.
   */
  sortModel: import_prop_types91.default.arrayOf(import_prop_types91.default.shape({
    field: import_prop_types91.default.string.isRequired,
    sort: import_prop_types91.default.oneOf(["asc", "desc"])
  })),
  style: import_prop_types91.default.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types91.default.oneOfType([import_prop_types91.default.arrayOf(import_prop_types91.default.oneOfType([import_prop_types91.default.func, import_prop_types91.default.object, import_prop_types91.default.bool])), import_prop_types91.default.func, import_prop_types91.default.object]),
  /**
   * If `true`, the Data Grid enables column virtualization when `getRowHeight` is set to `() => 'auto'`.
   * By default, column virtualization is disabled when dynamic row height is enabled to measure the row height correctly.
   * For datasets with a large number of columns, this can cause performance issues.
   * The downside of enabling this prop is that the row height will be estimated based the cells that are currently rendered, which can cause row height change when scrolling horizontally.
   * @default false
   */
  virtualizeColumnsWithAutoRowHeight: import_prop_types91.default.bool
};
export {
  COMFORTABLE_DENSITY_FACTOR,
  COMPACT_DENSITY_FACTOR,
  ColumnsPanelTrigger,
  DATA_GRID_PROPS_DEFAULT_VALUES,
  DEFAULT_GRID_AUTOSIZE_OPTIONS,
  DEFAULT_GRID_COL_TYPE_KEY,
  DataGrid2 as DataGrid,
  EMPTY_PINNED_COLUMN_FIELDS,
  EMPTY_RENDER_CONTEXT,
  ExportCsv,
  ExportPrint,
  FilterPanelTrigger,
  GRID_ACTIONS_COLUMN_TYPE,
  GRID_ACTIONS_COL_DEF,
  GRID_BOOLEAN_COL_DEF,
  GRID_CHECKBOX_SELECTION_COL_DEF,
  GRID_CHECKBOX_SELECTION_FIELD,
  GRID_COLUMN_MENU_SLOTS,
  GRID_COLUMN_MENU_SLOT_PROPS,
  GRID_DATETIME_COL_DEF,
  GRID_DATE_COL_DEF,
  GRID_DEFAULT_LOCALE_TEXT,
  GRID_EXPERIMENTAL_ENABLED,
  GRID_NUMERIC_COL_DEF,
  GRID_ROOT_GROUP_ID,
  GRID_SINGLE_SELECT_COL_DEF,
  GRID_STRING_COL_DEF,
  GridActionsCell,
  GridActionsCellItem,
  GridAddIcon,
  GridApiContext,
  GridArrowDownwardIcon,
  GridArrowUpwardIcon,
  GridVirtualScroller as GridBody,
  GridBooleanCell,
  MemoizedGridCell as GridCell,
  GridCellCheckboxForwardRef,
  GridCellCheckboxRenderer2 as GridCellCheckboxRenderer,
  GridCellEditStartReasons,
  GridCellEditStopReasons,
  GridCellModes,
  GridCheckCircleIcon,
  GridCheckIcon,
  GridClearIcon,
  GridCloseIcon,
  GridColumnHeaderFilterIconButtonWrapped as GridColumnHeaderFilterIconButton,
  Memoized3 as GridColumnHeaderItem,
  GridColumnHeaderMenu,
  GridColumnHeaderSeparator,
  GridColumnHeaderSeparatorSides,
  GridColumnHeaderSortIcon2 as GridColumnHeaderSortIcon,
  GridColumnHeaderTitle,
  MemoizedGridColumnHeaders as GridColumnHeaders,
  GridColumnIcon,
  GridColumnMenu,
  GridColumnMenuColumnsItem,
  GridColumnMenuContainer,
  GridColumnMenuFilterItem,
  GridColumnMenuHideItem,
  GridColumnMenuManageItem,
  GridColumnMenuSortItem,
  GridColumnsManagement,
  GridColumnsPanel,
  GridContextProvider,
  GridCsvExportMenuItem,
  GridDataSourceCacheDefault,
  GridDeleteForeverIcon,
  GridDeleteIcon,
  GridDownloadIcon,
  GridDragIcon,
  GridEditBooleanCell,
  GridEditDateCell,
  GridEditInputCell,
  GridEditModes,
  GridEditSingleSelectCell,
  GridExpandMoreIcon,
  GridFilterAltIcon,
  GridFilterForm,
  GridFilterInputBoolean,
  GridFilterInputDate,
  GridFilterInputMultipleSingleSelect,
  GridFilterInputMultipleValue,
  GridFilterInputSingleSelect,
  GridFilterInputValue,
  GridFilterListIcon,
  GridFilterPanel,
  GridFooter,
  GridFooterContainer,
  GridFooterPlaceholder,
  GridGenericColumnMenu,
  GridGetRowsError,
  GridHeader,
  GridHeaderCheckbox,
  GridKeyboardArrowRight,
  GridLoadIcon,
  GridLoadingOverlay,
  GridLogicOperator,
  GridMenu,
  GridMenuIcon,
  GridMoreVertIcon,
  GridNoColumnsOverlay,
  GridNoRowsOverlay,
  GridOverlay,
  GridPagination,
  GridPanel,
  GridPanelContent2 as GridPanelContent,
  GridPanelFooter,
  GridPanelHeader,
  GridPanelWrapper,
  GridPinnedColumnPosition,
  GridPortalWrapper,
  GridPreferencePanelsValue,
  GridPrintExportMenuItem,
  GridRemoveIcon,
  MemoizedGridRoot as GridRoot,
  MemoizedGridRow as GridRow,
  GridRowCount,
  GridRowEditStartReasons,
  GridRowEditStopReasons,
  GridRowModes,
  GridSearchIcon,
  GridSelectedRowCount,
  GridSeparatorIcon,
  GridShadowScrollArea,
  GridSignature,
  Memoized2 as GridSkeletonCell,
  GridTableRowsIcon,
  GridToolbar2 as GridToolbar,
  GridToolbarColumnsButton,
  GridToolbarContainer,
  GridToolbarDensitySelector,
  GridToolbarExport,
  GridToolbarExportContainer,
  GridToolbarFilterButton,
  GridToolbarQuickFilter,
  GridTripleDotsVerticalIcon,
  GridUpdateRowError,
  GridViewColumnIcon,
  GridViewHeadlineIcon,
  GridViewStreamIcon,
  GridVisibilityOffIcon,
  QuickFilter,
  QuickFilterClear,
  QuickFilterControl,
  QuickFilterTrigger,
  Toolbar,
  ToolbarButton,
  checkGridRowIdIsValid,
  createRowSelectionManager,
  getDataGridUtilityClass,
  getDefaultGridFilterModel,
  getGridBooleanOperators,
  getGridDateOperators,
  getGridDefaultColumnTypes,
  getGridNumericOperators,
  getGridNumericQuickFilterFn,
  getGridSingleSelectOperators,
  getGridStringOperators,
  getGridStringQuickFilterFn,
  gridClasses2 as gridClasses,
  gridColumnDefinitionsSelector,
  gridColumnFieldsSelector,
  gridColumnGroupingSelector,
  gridColumnGroupsHeaderMaxDepthSelector,
  gridColumnGroupsHeaderStructureSelector,
  gridColumnGroupsLookupSelector,
  gridColumnGroupsUnwrappedModelSelector,
  gridColumnLookupSelector,
  gridColumnMenuSelector,
  gridColumnPositionsSelector,
  gridColumnResizeSelector,
  gridColumnVisibilityModelSelector,
  gridColumnsStateSelector,
  gridColumnsTotalWidthSelector,
  gridDataRowIdsSelector,
  gridDateComparator,
  gridDateFormatter,
  gridDateTimeFormatter,
  gridDensityFactorSelector,
  gridDensitySelector,
  gridDimensionsSelector,
  gridEditCellStateSelector,
  gridEditRowsStateSelector,
  gridExpandedRowCountSelector,
  gridExpandedSortedRowEntriesSelector,
  gridExpandedSortedRowIdsSelector,
  gridFilterActiveItemsLookupSelector,
  gridFilterActiveItemsSelector,
  gridFilterModelSelector,
  gridFilterableColumnDefinitionsSelector,
  gridFilterableColumnLookupSelector,
  gridFilteredDescendantCountLookupSelector,
  gridFilteredDescendantRowCountSelector,
  gridFilteredRowCountSelector,
  gridFilteredRowsLookupSelector,
  gridFilteredSortedRowEntriesSelector,
  gridFilteredSortedRowIdsSelector,
  gridFilteredSortedTopLevelRowEntriesSelector,
  gridFilteredTopLevelRowCountSelector,
  gridFocusCellSelector,
  gridFocusColumnGroupHeaderSelector,
  gridFocusColumnHeaderFilterSelector,
  gridFocusColumnHeaderSelector,
  gridFocusStateSelector,
  gridHasColSpanSelector,
  gridHeaderFilteringEditFieldSelector,
  gridHeaderFilteringEnabledSelector,
  gridHeaderFilteringMenuSelector,
  gridHeaderFilteringStateSelector,
  gridListColumnSelector,
  gridListViewSelector,
  gridNumberComparator,
  gridPageCountSelector,
  gridPageSelector,
  gridPageSizeSelector,
  gridPaginatedVisibleSortedGridRowEntriesSelector,
  gridPaginatedVisibleSortedGridRowIdsSelector,
  gridPaginationEnabledClientSideSelector,
  gridPaginationMetaSelector,
  gridPaginationModelSelector,
  gridPaginationRowCountSelector,
  gridPaginationRowRangeSelector,
  gridPaginationSelector,
  gridPanelClasses,
  gridPinnedColumnsSelector,
  gridPreferencePanelStateSelector,
  gridQuickFilterValuesSelector,
  gridRenderContextColumnsSelector,
  gridRenderContextSelector,
  gridResizingColumnFieldSelector,
  gridRowCountSelector,
  gridRowGroupingNameSelector,
  gridRowIdSelector,
  gridRowIsEditingSelector,
  gridRowMaximumTreeDepthSelector,
  gridRowNodeSelector,
  gridRowSelectionCountSelector,
  gridRowSelectionIdsSelector,
  gridRowSelectionManagerSelector,
  gridRowSelectionStateSelector,
  gridRowSelector,
  gridRowTreeDepthsSelector,
  gridRowTreeSelector,
  gridRowsLoadingSelector,
  gridRowsLookupSelector,
  gridRowsMetaSelector,
  gridSortColumnLookupSelector,
  gridSortModelSelector,
  gridSortedRowEntriesSelector,
  gridSortedRowIdsSelector,
  gridStringOrNumberComparator,
  gridTabIndexCellSelector,
  gridTabIndexColumnGroupHeaderSelector,
  gridTabIndexColumnHeaderFilterSelector,
  gridTabIndexColumnHeaderSelector,
  gridTabIndexStateSelector,
  gridTopLevelRowCountSelector,
  gridVirtualizationColumnEnabledSelector,
  gridVirtualizationEnabledSelector,
  gridVirtualizationRowEnabledSelector,
  gridVirtualizationSelector,
  gridVisibleColumnDefinitionsSelector,
  gridVisibleColumnFieldsSelector,
  gridVisiblePinnedColumnDefinitionsSelector,
  gridVisibleRowsLookupSelector,
  gridVisibleRowsSelector,
  isAutogeneratedRow,
  isLeaf,
  renderActionsCell,
  renderBooleanCell,
  renderEditBooleanCell,
  renderEditDateCell,
  renderEditInputCell,
  renderEditSingleSelectCell,
  unstable_resetCleanupTracking,
  useFirstRender,
  useGridApiContext,
  useGridApiMethod,
  useGridApiRef,
  useGridEvent,
  useGridEventPriority,
  useGridLogger,
  useGridNativeEventListener,
  useGridRootProps,
  useGridSelector,
  useGridVirtualization,
  useOnMount,
  useRunOnce,
  useRunOncePerLoop,
  virtualizationStateInitializer
};
/*! Bundled license information:

use-sync-external-store/cjs/use-sync-external-store-shim.development.js:
  (**
   * @license React
   * use-sync-external-store-shim.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js:
  (**
   * @license React
   * use-sync-external-store-shim/with-selector.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/styled-engine/esm/index.js:
  (**
   * @mui/styled-engine v7.3.1
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/private-theming/esm/index.js:
  (**
   * @mui/private-theming v7.3.1
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/system/esm/index.js:
  (**
   * @mui/system v7.3.1
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/x-virtualizer/esm/index.js:
  (**
   * @mui/x-virtualizer v0.2.0
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/x-data-grid/esm/index.js:
  (**
   * @mui/x-data-grid v8.12.1
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=@mui_x-data-grid.js.map
