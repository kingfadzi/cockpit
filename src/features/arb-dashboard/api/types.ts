/**
 * TypeScript interfaces for ARB Dashboard
 * Based on ARB_DASHBOARD_DESIGN_SPEC.md
 */

export interface Application {
  id: string;
  appId: string; // Application ID (e.g., APM100001)
  name: string;
  criticality: 'A' | 'B' | 'C' | 'D'; // Criticality rating
  businessUnit: string;
  owner: string;
  ownerId: string;
  aggregatedRiskScore: number; // 0-100
  totalOpenItems: number;
  riskBreakdown: {
    critical: number;
    high: number;
    medium: number;
    low: number;
  };
  domains: string[]; // ['security', 'data', 'operations', 'enterprise_architecture']
  hasAssignedRisks: boolean; // for current user
  lastActivityDate: string; // ISO 8601
  risks: Risk[];
}

export interface Risk {
  id: string;
  title: string;
  description: string;
  priority: 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW';
  status: 'NEW' | 'PENDING_REVIEW' | 'OPEN' | 'IN_PROGRESS' | 'RESOLVED' | 'ACCEPTED';
  arbDomain: string; // 'security' | 'data' | 'operations' | 'enterprise_architecture'

  // Source of risk creation
  isAutoGenerated: boolean; // true = policy engine, false = manually created

  // Policy-driven fields (ONLY for auto-generated risks from profile-fields.registry.yaml)
  fieldKey?: string; // e.g., 'waf_protection', 'encryption_at_rest', 'rto_hours'
  riskType?: 'MISSING_EVIDENCE' | 'STALE_EVIDENCE' | 'POLICY_VIOLATION';
  ttlDays?: number; // From registry rule
  daysOverdue?: number; // For STALE_EVIDENCE

  // Assignment & ownership
  assignedTo: string | null;
  assignedToName: string | null;
  createdBy?: string; // User ID who manually created the risk (if isAutoGenerated = false)
  createdByName?: string;

  // Timestamps
  createdDate: string; // ISO 8601
  updatedDate: string; // ISO 8601
  dueDate: string | null; // ISO 8601

  // Additional metadata
  category?: string; // Free-form category for manually created risks
  tags: string[];
  comments?: Comment[];
}

export interface Comment {
  id: string;
  userId: string;
  userName: string;
  text: string;
  createdDate: string; // ISO 8601
}

export interface RecentActivity {
  newRisksLast7Days: number;
  resolvedLast7Days: number;
  newRisksLast30Days: number;
  resolvedLast30Days: number;
}

export interface DashboardMetrics {
  criticalCount: number;
  openItemsCount: number;
  pendingReviewCount: number;
  averageRiskScore: number;
  healthGrade: 'A' | 'B' | 'C' | 'D' | 'F';
  recentActivity: RecentActivity;
}

export interface Insight {
  id: string;
  type: 'concentration' | 'volume' | 'bottleneck' | 'data_quality' | 'domain_specific';
  icon: string;
  text: string;
  recommendation: string;
  priority: 'high' | 'medium' | 'low';
  relatedApps?: string[];
}

export interface ArbDashboardResponse {
  applications: Application[];
  metrics: DashboardMetrics;
  insights: Insight[];
}

export interface DomainSummary {
  domain: string;
  riskCount: number;
  openItems: number;
  criticalItems: number;
}

export type DashboardScope = 'my-queue' | 'my-domain' | 'all-domains';

export type ArbDomain = 'security' | 'data' | 'operations' | 'enterprise_architecture';
